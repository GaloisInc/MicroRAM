; ModuleID = 'build/fromager/driver-microram-full-nodebug.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.__file = type { i16, i8, i32 (i8, %struct.__file*)*, i32 (%struct.__file*)*, i32 (%struct.__file*)* }
%struct.AVCodec.107 = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass.90*, %struct.netobj*, i32, %struct.AVCodec.107*, i32 (%struct.AVCodecContext.102*)*, i32 (%struct.AVCodecContext.102*, %struct.AVCodecContext.102*)*, %struct.entry*, void (%struct.AVCodec.107*)*, i32 (%struct.AVCodecContext.102*)*, i32 (%struct.AVCodecContext.102*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.102*, %struct.AVPacket*, %struct.AVFrame.96*, i32*)*, i32 (%struct.AVCodecContext.102*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.102*)*, void (%struct.AVCodecContext.102*)* }
%struct.AVRational = type { i32, i32 }
%struct.AVClass.90 = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, {}*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon.2, double, double, i32, i8* }
%union.anon.2 = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.netobj = type { i32, i8* }
%struct.AVCodecContext.102 = type { %struct.AVClass.90*, i32, i32, %struct.AVCodec.107*, [32 x i8], i32, i32, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext.102*, %struct.AVFrame.96*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext.102*, i32*)*, i32, float, i32, i32, i32, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext.102*, %struct.AVFrame.96*)*, void (%struct.AVCodecContext.102*, %struct.AVFrame.96*)*, i32 (%struct.AVCodecContext.102*, %struct.AVFrame.96*)*, float, float, i32, i32, i32, float, float, i32, i32, i32, %struct.RcOverride*, i8*, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext.102*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel.98*, i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVFrame.96*, i32, i32, i32, i32, i32 (%struct.AVCodecContext.102*, i32 (%struct.AVCodecContext.102*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext.102*, i32 (%struct.AVCodecContext.102*, i8*, i32, i32)*, i8*, i32*, i32)*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVPacket*, i64, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, %struct.AVDictionary* }
%struct.AVCodecInternal = type { i32, %struct.InternalBuffer*, i32, i32, i32, i8*, i8*, i32, i8*, i32 }
%struct.InternalBuffer = type { [8 x i8*], [8 x i8*], [8 x i32], i32, i32, i32 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel.98 = type { i8*, i32, i32, i32, i32, %struct.AVHWAccel.98*, i32 (%struct.AVCodecContext.102*, i8*, i32)*, i32 (%struct.AVCodecContext.102*, i8*, i32)*, {}*, i32 }
%struct.AVFrame.96 = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, [8 x i8*], %struct.AVRational, i64, i64, i64, i32, i32, i32, i32, i8*, i32, i32, i8*, [2 x [2 x i16]*], i32*, i16*, [2 x i8*], i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVPanScan*, i64, i8*, %struct.AVCodecContext.102*, i8*, i8, i32, i64, i64, i64, i64, %struct.AVDictionary*, i32, i64, i32 }
%struct.AVPanScan = type { i32, i32, i32, [3 x [2 x i16]] }
%struct.AVPacket = type { i64, i64, i8*, i32, i32, i32, %struct.anon.4*, i32, i32, void (%struct.AVPacket*)*, i8*, i64, i64 }
%struct.anon.4 = type { i8*, i32, i32 }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32 }
%struct.AVDictionary = type { i32, %struct.entry* }
%struct.entry = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct._on_exit = type { void (i32, i8*)*, i8* }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }
%struct.AVComponentDescriptor = type { i16 }
%struct.AVPixFmtDescriptor = type { i8*, i8, i8, i8, i8, [4 x %struct.AVComponentDescriptor] }
%struct.SampleFmtInfo = type { [8 x i8], i32, i32, i32 }
%struct.__file.34 = type { i16, i8, i32 (i8, %struct.__file.34*)*, {}*, {}* }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.netobj*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.entry*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, void (%struct.AVCodecContext*)* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, [32 x i8], i32, i32, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, i32, i32, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, float, float, i32, i32, i32, float, float, i32, i32, i32, %struct.RcOverride*, i8*, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVPacket*, i64, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, %struct.AVDictionary* }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, %struct.AVHWAccel*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, {}*, i32 }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, [8 x i8*], %struct.AVRational, i64, i64, i64, i32, i32, i32, i32, i8*, i32, i32, i8*, [2 x [2 x i16]*], i32*, i16*, [2 x i8*], i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVPanScan*, i64, i8*, %struct.AVCodecContext*, i8*, i8, i32, i64, i64, i64, i64, %struct.AVDictionary*, i32, i64, i32 }
%struct.AVPacket.21 = type { i64, i64, i8*, i32, i32, i32, %struct.anon.4*, i32, i32, {}*, i8*, i64, i64 }
%struct.__file_str = type { %struct.__file, i8*, i32, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.FileLogContext = type { %struct.AVClass*, i32, i8* }
%struct.__file.39 = type { i16, i8, {}*, i32 (%struct.__file.39*)*, i32 (%struct.__file.39*)* }
%struct.__file_str.40 = type { %struct.__file.39, i8*, i32, i32 }
%union.anon.380 = type { %struct.dtoa }
%struct.dtoa = type { i32, i8, [18 x i8] }
%struct.AVCodec.125 = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass.90*, %struct.netobj*, i32, %struct.AVCodec.125*, i32 (%struct.AVCodecContext.131*)*, i32 (%struct.AVCodecContext.131*, %struct.AVCodecContext.131*)*, %struct.entry*, void (%struct.AVCodec.125*)*, i32 (%struct.AVCodecContext.131*)*, i32 (%struct.AVCodecContext.131*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.131*, %struct.AVPacket*, %struct.AVFrame.124*, i32*)*, i32 (%struct.AVCodecContext.131*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.131*)*, void (%struct.AVCodecContext.131*)* }
%struct.AVCodecContext.131 = type { %struct.AVClass.90*, i32, i32, %struct.AVCodec.125*, [32 x i8], i32, i32, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext.131*, %struct.AVFrame.124*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext.131*, i32*)*, i32, float, i32, i32, i32, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext.131*, %struct.AVFrame.124*)*, void (%struct.AVCodecContext.131*, %struct.AVFrame.124*)*, i32 (%struct.AVCodecContext.131*, %struct.AVFrame.124*)*, float, float, i32, i32, i32, float, float, i32, i32, i32, %struct.RcOverride*, i8*, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext.131*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel.129*, i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVFrame.124*, i32, i32, i32, i32, i32 (%struct.AVCodecContext.131*, i32 (%struct.AVCodecContext.131*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext.131*, i32 (%struct.AVCodecContext.131*, i8*, i32, i32)*, i8*, i32*, i32)*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVPacket*, i64, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, %struct.AVDictionary* }
%struct.AVHWAccel.129 = type { i8*, i32, i32, i32, i32, %struct.AVHWAccel.129*, i32 (%struct.AVCodecContext.131*, i8*, i32)*, i32 (%struct.AVCodecContext.131*, i8*, i32)*, i32 (%struct.AVCodecContext.131*)*, i32 }
%struct.AVFrame.124 = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, [8 x i8*], %struct.AVRational, i64, i64, i64, i32, i32, i32, i32, i8*, i32, i32, i8*, [2 x [2 x i16]*], i32*, i16*, [2 x i8*], i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVPanScan*, i64, i8*, %struct.AVCodecContext.131*, i8*, i8, i32, i64, i64, i64, i64, %struct.AVDictionary*, i32, i64, i32 }
%struct.GifState = type { %struct.AVClass.90*, %struct.AVFrame.96, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32*, i32, i32, %struct.lc_numeric_T, i8*, [256 x i32], [256 x i32], %struct.AVCodecContext.102*, i32, i32, i32 }
%struct.lc_numeric_T = type { i8*, i8*, i8* }

@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @posix_exit, i8* null }]
@__iob = external dso_local local_unnamed_addr constant [0 x %struct.__file*], align 8
@ff_gif_decoder = internal global %struct.AVCodec.107 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.377, i32 0, i32 0), i8* null, i32 0, i32 99, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* null, i64* null, i8 0, %struct.AVClass.90* bitcast ({ i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass.90* (%struct.AVClass.90*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }* @gif_decoder_class to %struct.AVClass.90*), %struct.netobj* null, i32 2720, %struct.AVCodec.107* null, i32 (%struct.AVCodecContext.102*)* null, i32 (%struct.AVCodecContext.102*, %struct.AVCodecContext.102*)* null, %struct.entry* null, void (%struct.AVCodec.107*)* null, i32 (%struct.AVCodecContext.102*)* @gif_decode_init, i32 (%struct.AVCodecContext.102*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext.102*, %struct.AVPacket*, %struct.AVFrame.96*, i32*)* null, i32 (%struct.AVCodecContext.102*, i8*, i32*, %struct.AVPacket*)* @gif_decode_frame, i32 (%struct.AVCodecContext.102*)* @gif_decode_close, void (%struct.AVCodecContext.102*)* null }, align 8
@.str.1.15 = private unnamed_addr constant [6 x i8] c"_exit\00", align 1
@__fini_array_end = extern_weak dso_local global [0 x void ()*], align 8
@__fini_array_start = extern_weak dso_local global [0 x void ()*], align 8
@on_exits = internal unnamed_addr global [32 x %struct._on_exit] zeroinitializer, align 16
@.str.40.920 = private unnamed_addr constant [30 x i8] c"Invalid media type for video\0A\00", align 1
@_ctype_b = internal unnamed_addr constant <{ [256 x i8], [128 x i8] }> <{ [256 x i8] cx i8] zeroinitializer }>, align 16
@pos = internal unnamed_addr global i64 0, align 8
@.str.1.1839 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.4.17 = private unnamed_addr constant [42 x i8] c"size<=2147483647 && p - pkt->data >= size\00", align 1
@.str.2.13 = private unnamed_addr constant [22 x i8] c"libavcodec/avpacket.c\00", align 1
@imgutils_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6.1836, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* null, i32 3411815, i32 8, i32 16, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@.str.1835 = private unnamed_addr constant [31 x i8] c"Picture size %ux%u is invalid\0A\00", align 1
@.str.6.1836 = private unnamed_addr constant [9 x i8] c"IMGUTILS\00", align 1
@av_log_default_callback.print_prefix = internal unnamed_addr global i32 1, align 4
@.str.3.1857 = private unnamed_addr constant [11 x i8] c"[%s @ %p] \00", align 1
@.str.1856 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@av_log_default_callback.prev = internal unnamed_addr global [1024 x i8] zeroinitializer, align 16
@use_color = internal unnamed_addr global i1 false, align 4
@.str.9.1866 = private unnamed_addr constant [5 x i8] c"\1B[0m\00", align 1
@__dtoa_scale_up = internal unnamed_addr constant [9 x double] [double 1.000000e+01, double 1.000000e+02, double 1.000000e+04, double 1.000000e+08, double 1.000000e+16, double 1.000000e+32, double 1.000000e+64, double 1.000000e+128, double 1.000000e+256], align 16
@__dtoa_scale_down = internal unnamed_addr constant [9 x double] [double 1.000000e-01, double 1.000000e-02, double 1.000000e-04, double 1.000000e-08, double 0x3C9CD2B297D889BC, double 1.000000e-32, double 0x32A50FFD44F4A73D, double 1.000000e-128, double 0xAC8062864AC6F43], align 16
@__dtoa_round = internal unnamed_addr constant [18 x double] [double 5.000000e+17, double 5.000000e+16, double 5.000000e+15, double 5.000000e+14, double 5.000000e+13, double 5.000000e+12, double 5.000000e+11, double 5.000000e+10, double 5.000000e+09, double 5.000000e+08, double 5.000000e+07, double 5.000000e+06, double 5.000000e+05, double 5.000000e+04, double 5.000000e+03, double 5.000000e+02, double 5.000000e+01, double 5.000000e+00], align 16
@.str.904 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.1.905 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.2.906 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.str.4.260 = private unnamed_addr constant [27 x i8] c"packet length out of range\00", align 1
@heap_data = internal global <{ [2645 x i64], [8 x i64] }> <{ [2645 x i64] [i64 0, i64 1056, i64 4364760, i64 0, i64 4415600, i64 0, i64 0, i64 0, i64 0, i64 99, i64 0, i64 4294968448, i64 4294971248, i64 0, i64 17179869184200000, i64 -4294967296, i64 0, i64 0, i64 0, i64 4294967297, i64 0, i64 0, i64 51539607552, i64 21474836510, i64 0, i64 4309082, i64 4584664420663164928, i64 0, i64 0, i64 1067450368, i64 -4662126333394944000, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4294967296, i64 0, i64 34359738368, i64 0, i64 0, i64 34359738368, i64 0, i64 4294963002032703, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 15710990369004, i64 4294967552, i64 107374182400, i64 1, i64 1099511627782, i64 8589934632, i64 8589934594, i64 0, i64 0, i64 0, i64 4294967295, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4299756, i64 4308451, i64 4309634, i64 4539628425446424576, i64 133143986178, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 1065353216, i64 4629700416936869888, i64 0, i64 1013612281856, i64 3658, i64 0, i64 13, i64 0, i64 -1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 3, i64 4294967296, i64 -9223372036854775808, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4294968456, i64 12884901889, i64 0, i64 4309235, i64 4309449, i64 0, i64 -425201762296, i64 4294967197, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4345840, i64 0, i64 0, i64 -9223372036854775808, i64 -9223372036854775808, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 2720, i64 4385840, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4294968456, i64 0, i64 -4294967296, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4294967296, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 -9223372036854775808, i64 -1, i64 0, i64 0, i64 0, i64 0, i64 4294967295, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4294971392, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4294967312, i64 0, i64 16777215, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 72, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 16472, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 520, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4294987936, i64 0, i64 -4294967296, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4294967296, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 -9223372036854775808, i64 -1, i64 0, i64 0, i64 0, i64 0, i64 4294967295], [8 x i64] zeroinitializer }>, section ".data.heapinit", align 16
@av_codec_context_class = internal constant { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass.90* (%struct.AVClass.90*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.429, i32 0, i32 0), i8* (i8*)* @context_to_name, %struct.AVOption* getelementptr inbounds ([328 x %struct.AVOption], [328 x %struct.AVOption]* bitcast (<{ %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption }>* @options.430 to [328 x %struct.AVOption]*), i32 0, i32 0), i32 3411815, i32 8, i32 0, i8* (i8*, i8*)* @codec_child_next, %struct.AVClass.90* (%struct.AVClass.90*)* @codec_child_class_next, i32 5, i32 (i8*)* @get_category, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@codec_descriptors = internal constant [358 x %struct.AVCodecDescriptor] [%struct.AVCodecDescriptor { i32 1, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25.265, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 2, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.26, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 3, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.27, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 4, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.28, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 5, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.29, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 6, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.30, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 7, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.31, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 8, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.266, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 9, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.267, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 10, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9.268, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 11, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.269, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 12, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11.32, i32 0, i32 0), i8* null, i32 7 }, %struct.AVCodecDescriptor { i32 13, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.270, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 14, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13.271, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 15, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14.272, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 16, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15.273, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 17, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16.274, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 18, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17.275, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 19, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18.33, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 20, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19.276, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 21, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20.277, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 22, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21.278, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 23, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22.279, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 24, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23.280, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 25, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24.281, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 26, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.34, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 27, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26.282, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 28, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.258.683, i32 0, i32 0), i8* null, i32 6 }, %struct.AVCodecDescriptor { i32 29, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28.284, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 30, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.259.684, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 31, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30.286, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 32, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31.287, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 33, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32.288, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 34, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33.289, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 35, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34.290, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 36, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35.291, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 37, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36.292, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 38, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37.293, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 39, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38.294, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 40, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39.295, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 41, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.40.296, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 42, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41.297, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 43, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42.298, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 44, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43.299, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 45, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44.300, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 46, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45.301, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 47, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.46.302, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 48, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47.303, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 49, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48.304, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 50, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49.305, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 51, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50.306, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 52, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51.307, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 53, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.52.308, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 54, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53.309, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 55, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54.310, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 56, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55.311, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 57, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56.312, i32 0, i32 0), i8* null, i32 6 }, %struct.AVCodecDescriptor { i32 58, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.57.313, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 59, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58.314, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 60, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.59.315, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 61, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60.316, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 62, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61.317, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 63, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.62.318, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 64, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63.319, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 65, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.64.320, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 66, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65.321, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 67, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66.322, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 68, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67.323, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 69, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68.324, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 70, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.69.325, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 71, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.70.326, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 72, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.71.327, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 73, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.72.328, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 74, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73.329, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 75, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74.330, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 76, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75.331, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 77, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76.332, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 78, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.77.333, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 79, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78.334, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 80, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.79.335, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 81, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80.336, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 82, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.81.337, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 83, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82.338, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 84, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.83.339, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 85, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.84.340, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.85.341, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 87, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.86.342, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 88, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.87.343, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 89, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.88.344, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 90, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.89.345, i32 0, i32 0), i8* null, i32 7 }, %struct.AVCodecDescriptor { i32 91, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.90.346, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 92, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91.347, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 93, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.92.348, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 94, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.93.349, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 95, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.94.350, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 96, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.95.351, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 97, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.96.352, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 98, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97.353, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 99, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.377, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 100, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.99.355, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 101, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100.356, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 102, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.357, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 103, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.102.358, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 1397180754, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103.359, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 104, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.104.360, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 105, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.105.361, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 106, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.106.362, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 107, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.107.363, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 108, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108.364, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 109, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.148.573, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 110, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.110.366, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 111, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.111.367, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 112, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112.368, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 113, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.113.369, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 114, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.114.370, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 115, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.115.371, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 116, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.116.372, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 117, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.117.373, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 118, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118.374, i32 0, i32 0), i8* null, i32 6 }, %struct.AVCodecDescriptor { i32 119, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119.375, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 120, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.120.376, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 121, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.121.377, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 122, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.122.378, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 123, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123.379, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 124, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.124.380, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 125, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.125.381, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 126, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.126.382, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 127, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.127.383, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 128, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.128.384, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 129, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.129.385, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 130, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130.386, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 131, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.131.387, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 132, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.132.388, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 133, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.133.389, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 134, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.134.390, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 135, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.135.391, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 136, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.136.392, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 137, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.137.393, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 138, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.138.394, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 139, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.139.395, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 140, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.140.396, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 141, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.141.397, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 142, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.142.398, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 170, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.143.399, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 143, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.144.400, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 144, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.145.401, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 145, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.146.402, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 146, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.147.403, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 147, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.148.404, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 1297498929, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.149.405, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 1297498930, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.150.406, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 148, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.151.407, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 149, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.152.408, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 150, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.153.409, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 151, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.154.410, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 152, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.155.411, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 153, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.156.412, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 154, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.157.413, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 155, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.158.414, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 156, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.159.415, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 157, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.160.416, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 158, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.161.417, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 159, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.162.418, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 160, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.163.419, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 161, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.164.420, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 162, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.165.421, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 163, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.166.422, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 164, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.167.423, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 165, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.168.424, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 166, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.169.425, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 167, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.170.426, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 168, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.171.427, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 169, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.172.428, i32 0, i32 0), i8* null, i32 3 }, %struct.AVCodecDescriptor { i32 1496592720, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.173.429, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 1160852272, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.174.430, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 809850962, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.175.431, i32 0, i32 0), i8* null, i32 7 }, %struct.AVCodecDescriptor { i32 1096176208, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.176.432, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 808530518, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.177.433, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 4665933, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.178.434, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1096176969, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.179.435, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 1096373590, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.180.436, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 1412575542, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.437, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 1446195256, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.182.438, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 1446260792, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.183.439, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 1498764852, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.184.440, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 1396788813, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.185.441, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1346455126, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.186.442, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1096176238, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.187.443, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1129335105, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.188.444, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1480999235, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.189.445, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1112557912, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.190.446, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 65536, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.191.447, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65537, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.192.448, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65538, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.193.449, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65539, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.194.450, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65540, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.195.451, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65541, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.196.452, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65542, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.197.453, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 65543, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.198.454, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 65544, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.199.455, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65545, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.200.456, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65546, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.201.457, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65547, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.202.458, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65548, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.203.459, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65549, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.204.460, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65550, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.205.461, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65551, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.206.462, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65552, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.207.463, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65553, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.208.464, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1347637264, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.209.465, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65554, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.210.466, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 407917392, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.211.467, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 542135120, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.212.468, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65555, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.213.469, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65556, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.214.470, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65557, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.215.471, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65558, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.216.472, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65559, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.217.473, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65560, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.218.474, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65561, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.219.475, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 65562, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.220.476, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 65563, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.221.477, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 69632, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.222.478, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69633, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.223.479, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69634, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.224.480, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69635, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.225.481, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69636, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.226.482, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69637, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.227.483, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69638, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.228.484, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69639, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.229.485, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69640, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.230.486, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69641, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.231.487, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69642, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.232.488, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69643, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.233.489, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69644, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.234.490, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69645, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.235.491, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69646, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.236.492, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69647, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.237.493, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69648, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.238.494, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69649, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.239.495, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69650, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.240.496, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69651, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.241.497, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69652, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.242.498, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69653, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.243.499, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69654, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.244.500, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69655, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.245.501, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69656, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.246.502, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69657, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.247.503, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69658, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.248.504, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69659, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.249.505, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69660, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.250.506, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 69661, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.251.507, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1095123744, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.252.508, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1330333984, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.253.509, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 73728, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.254.510, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 73729, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.255.511, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 77824, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.256.512, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 77825, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.257, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 81920, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.258, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 81921, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 81922, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.260, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 81923, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.261, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86016, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.262, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86017, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.263, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86018, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.264, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86019, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.265, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86020, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.426, i32 0, i32 0), i8* null, i32 6 }, %struct.AVCodecDescriptor { i32 86021, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.267, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86022, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.268, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86023, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.269, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86024, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.270, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86025, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.271, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86026, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.272, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86027, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.273, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86028, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.274.513, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86029, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.275, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86030, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.276, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86031, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.277.514, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86032, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.278, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86033, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.279, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86034, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.280.515, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86035, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.281, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86036, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.282, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86037, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.283.516, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86038, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.284, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86039, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.285, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86040, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.286.517, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86041, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.287, i32 0, i32 0), i8* null, i32 6 }, %struct.AVCodecDescriptor { i32 86042, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.288, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86043, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.289.518, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86044, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.290, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86045, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.291, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86046, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.292.519, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86047, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.293, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86048, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.294, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86049, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.295.520, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86050, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.296, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86051, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.297, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86052, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.298, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86053, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.299, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86054, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.300, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86055, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.301, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86056, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.302.521, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86057, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.303, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86058, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.304.522, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86059, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.305, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86060, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.306, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86061, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.307, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86062, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.308, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86063, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.309, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86064, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.310, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86065, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.311, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86066, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.312, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86067, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.313, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86068, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.314, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86069, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.315, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86070, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.316, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86071, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.317, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86072, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86073, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.319, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86074, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.320.523, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 86075, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.321, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86076, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.322, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1447644481, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.323, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1179014995, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.324, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1397706307, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.325, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1397706316, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.326, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1346455105, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.327, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1330664787, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.328, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86078, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.329.524, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1950507339, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.330, i32 0, i32 0), i8* null, i32 4 }, %struct.AVCodecDescriptor { i32 1936029283, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.331, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 1936944502, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.332.525, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 94208, i32 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.333, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 94209, i32 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.334, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 94210, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.335, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 94211, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.336, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 94212, i32 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.337, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 94213, i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.338, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 94214, i32 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.339, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 94215, i32 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.340, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 94216, i32 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.341, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1397909872, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.342, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1833195076, i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.343, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1297108018, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.344, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1664495672, i32 3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.345, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1246975298, i32 3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.346.526, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1349012051, i32 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.347, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1396788553, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.348, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1381259348, i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.349, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1398953521, i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.350, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1400201814, i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.351, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1448111218, i32 3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.352, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1465275476, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.353, i32 0, i32 0), i8* null, i32 0 }, %struct.AVCodecDescriptor { i32 1112823892, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.354.527, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 1480739150, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.355, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 4801606, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.356, i32 0, i32 0), i8* null, i32 1 }, %struct.AVCodecDescriptor { i32 1263294017, i32 2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.357, i32 0, i32 0), i8* null, i32 0 }], align 16
@gif_decoder_class = internal constant { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass.90* (%struct.AVClass.90*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.372, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* getelementptr inbounds ([2 x %struct.AVOption], [2 x %struct.AVOption]* @options, i32 0, i32 0), i32 3411815, i32 0, i32 0, i8* (i8*, i8*)* null, %struct.AVClass.90* (%struct.AVClass.90*)* null, i32 6, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@.str.372 = private unnamed_addr constant [12 x i8] c"gif decoder\00", align 1
@options = internal constant [2 x %struct.AVOption] [%struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.373, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3.374, i32 0, i32 0), i32 2712, i32 1, %union.anon.2 { i64 16777215 }, double 0.000000e+00, double 0x41EFFFFFFFE00000, i32 18, i8* null }, %struct.AVOption zeroinitializer], align 16
@.str.2.373 = private unnamed_addr constant [12 x i8] c"trans_color\00", align 1
@.str.3.374 = private unnamed_addr constant [61 x i8] c"color value (ARGB) that is used instead of transparent color\00", align 1
@.str.25.265 = private unnamed_addr constant [11 x i8] c"mpeg1video\00", align 1
@.str.1.26 = private unnamed_addr constant [11 x i8] c"mpeg2video\00", align 1
@.str.2.27 = private unnamed_addr constant [15 x i8] c"mpegvideo_xvmc\00", align 1
@.str.3.28 = private unnamed_addr constant [5 x i8] c"h261\00", align 1
@.str.4.29 = private unnamed_addr constant [5 x i8] c"h263\00", align 1
@.str.5.30 = private unnamed_addr constant [5 x i8] c"rv10\00", align 1
@.str.6.31 = private unnamed_addr constant [5 x i8] c"rv20\00", align 1
@.str.7.266 = private unnamed_addr constant [6 x i8] c"mjpeg\00", align 1
@.str.8.267 = private unnamed_addr constant [7 x i8] c"mjpegb\00", align 1
@.str.9.268 = private unnamed_addr constant [6 x i8] c"ljpeg\00", align 1
@.str.10.269 = private unnamed_addr constant [5 x i8] c"sp5x\00", align 1
@.str.11.32 = private unnamed_addr constant [7 x i8] c"jpegls\00", align 1
@.str.12.270 = private unnamed_addr constant [6 x i8] c"mpeg4\00", align 1
@.str.13.271 = private unnamed_addr constant [9 x i8] c"rawvideo\00", align 1
@.str.14.272 = private unnamed_addr constant [10 x i8] c"msmpeg4v1\00", align 1
@.str.15.273 = private unnamed_addr constant [10 x i8] c"msmpeg4v2\00", align 1
@.str.16.274 = private unnamed_addr constant [10 x i8] c"msmpeg4v3\00", align 1
@.str.17.275 = private unnamed_addr constant [5 x i8] c"wmv1\00", align 1
@.str.18.33 = private unnamed_addr constant [5 x i8] c"wmv2\00", align 1
@.str.19.276 = private unnamed_addr constant [6 x i8] c"h263p\00", align 1
@.str.20.277 = private unnamed_addr constant [6 x i8] c"h263i\00", align 1
@.str.21.278 = private unnamed_addr constant [5 x i8] c"flv1\00", align 1
@.str.22.279 = private unnamed_addr constant [5 x i8] c"svq1\00", align 1
@.str.23.280 = private unnamed_addr constant [5 x i8] c"svq3\00", align 1
@.str.24.281 = private unnamed_addr constant [8 x i8] c"dvvideo\00", align 1
@.str.25.34 = private unnamed_addr constant [8 x i8] c"huffyuv\00", align 1
@.str.26.282 = private unnamed_addr constant [5 x i8] c"cyuv\00", align 1
@.str.258.683 = private unnamed_addr constant [5 x i8] c"h264\00", align 1
@.str.28.284 = private unnamed_addr constant [7 x i8] c"indeo3\00", align 1
@.str.259.684 = private unnamed_addr constant [4 x i8] c"vp3\00", align 1
@.str.30.286 = private unnamed_addr constant [7 x i8] c"theora\00", align 1
@.str.31.287 = private unnamed_addr constant [5 x i8] c"asv1\00", align 1
@.str.32.288 = private unnamed_addr constant [5 x i8] c"asv2\00", align 1
@.str.33.289 = private unnamed_addr constant [5 x i8] c"ffv1\00", align 1
@.str.34.290 = private unnamed_addr constant [4 x i8] c"4xm\00", align 1
@.str.35.291 = private unnamed_addr constant [5 x i8] c"vcr1\00", align 1
@.str.36.292 = private unnamed_addr constant [5 x i8] c"cljr\00", align 1
@.str.37.293 = private unnamed_addr constant [5 x i8] c"mdec\00", align 1
@.str.38.294 = private unnamed_addr constant [4 x i8] c"roq\00", align 1
@.str.39.295 = private unnamed_addr constant [15 x i8] c"interplayvideo\00", align 1
@.str.40.296 = private unnamed_addr constant [8 x i8] c"xan_wc3\00", align 1
@.str.41.297 = private unnamed_addr constant [8 x i8] c"xan_wc4\00", align 1
@.str.42.298 = private unnamed_addr constant [5 x i8] c"rpza\00", align 1
@.str.43.299 = private unnamed_addr constant [8 x i8] c"cinepak\00", align 1
@.str.44.300 = private unnamed_addr constant [7 x i8] c"ws_vqa\00", align 1
@.str.45.301 = private unnamed_addr constant [6 x i8] c"msrle\00", align 1
@.str.46.302 = private unnamed_addr constant [9 x i8] c"msvideo1\00", align 1
@.str.47.303 = private unnamed_addr constant [6 x i8] c"idcin\00", align 1
@.str.48.304 = private unnamed_addr constant [5 x i8] c"8bps\00", align 1
@.str.49.305 = private unnamed_addr constant [4 x i8] c"smc\00", align 1
@.str.50.306 = private unnamed_addr constant [5 x i8] c"flic\00", align 1
@.str.51.307 = private unnamed_addr constant [12 x i8] c"truemotion1\00", align 1
@.str.52.308 = private unnamed_addr constant [9 x i8] c"vmdvideo\00", align 1
@.str.53.309 = private unnamed_addr constant [5 x i8] c"mszh\00", align 1
@.str.54.310 = private unnamed_addr constant [5 x i8] c"zlib\00", align 1
@.str.55.311 = private unnamed_addr constant [6 x i8] c"qtrle\00", align 1
@.str.56.312 = private unnamed_addr constant [5 x i8] c"snow\00", align 1
@.str.57.313 = private unnamed_addr constant [5 x i8] c"tscc\00", align 1
@.str.58.314 = private unnamed_addr constant [5 x i8] c"ulti\00", align 1
@.str.59.315 = private unnamed_addr constant [6 x i8] c"qdraw\00", align 1
@.str.60.316 = private unnamed_addr constant [5 x i8] c"vixl\00", align 1
@.str.61.317 = private unnamed_addr constant [5 x i8] c"qpeg\00", align 1
@.str.62.318 = private unnamed_addr constant [4 x i8] c"png\00", align 1
@.str.63.319 = private unnamed_addr constant [4 x i8] c"ppm\00", align 1
@.str.64.320 = private unnamed_addr constant [4 x i8] c"pbm\00", align 1
@.str.65.321 = private unnamed_addr constant [4 x i8] c"pgm\00", align 1
@.str.66.322 = private unnamed_addr constant [7 x i8] c"pgmyuv\00", align 1
@.str.67.323 = private unnamed_addr constant [4 x i8] c"pam\00", align 1
@.str.68.324 = private unnamed_addr constant [8 x i8] c"ffvhuff\00", align 1
@.str.69.325 = private unnamed_addr constant [5 x i8] c"rv30\00", align 1
@.str.70.326 = private unnamed_addr constant [5 x i8] c"rv40\00", align 1
@.str.71.327 = private unnamed_addr constant [4 x i8] c"vc1\00", align 1
@.str.72.328 = private unnamed_addr constant [5 x i8] c"wmv3\00", align 1
@.str.73.329 = private unnamed_addr constant [5 x i8] c"loco\00", align 1
@.str.74.330 = private unnamed_addr constant [5 x i8] c"wnv1\00", align 1
@.str.75.331 = private unnamed_addr constant [5 x i8] c"aasc\00", align 1
@.str.76.332 = private unnamed_addr constant [7 x i8] c"indeo2\00", align 1
@.str.77.333 = private unnamed_addr constant [6 x i8] c"fraps\00", align 1
@.str.78.334 = private unnamed_addr constant [12 x i8] c"truemotion2\00", align 1
@.str.79.335 = private unnamed_addr constant [4 x i8] c"bmp\00", align 1
@.str.80.336 = private unnamed_addr constant [5 x i8] c"cscd\00", align 1
@.str.81.337 = private unnamed_addr constant [8 x i8] c"mmvideo\00", align 1
@.str.82.338 = private unnamed_addr constant [5 x i8] c"zmbv\00", align 1
@.str.83.339 = private unnamed_addr constant [4 x i8] c"avs\00", align 1
@.str.84.340 = private unnamed_addr constant [11 x i8] c"smackvideo\00", align 1
@.str.85.341 = private unnamed_addr constant [4 x i8] c"nuv\00", align 1
@.str.86.342 = private unnamed_addr constant [5 x i8] c"kmvc\00", align 1
@.str.87.343 = private unnamed_addr constant [8 x i8] c"flashsv\00", align 1
@.str.88.344 = private unnamed_addr constant [5 x i8] c"cavs\00", align 1
@.str.89.345 = private unnamed_addr constant [9 x i8] c"jpeg2000\00", align 1
@.str.90.346 = private unnamed_addr constant [5 x i8] c"vmnc\00", align 1
@.str.91.347 = private unnamed_addr constant [4 x i8] c"vp5\00", align 1
@.str.92.348 = private unnamed_addr constant [4 x i8] c"vp6\00", align 1
@.str.93.349 = private unnamed_addr constant [5 x i8] c"vp6f\00", align 1
@.str.94.350 = private unnamed_addr constant [6 x i8] c"targa\00", align 1
@.str.95.351 = private unnamed_addr constant [12 x i8] c"dsicinvideo\00", align 1
@.str.96.352 = private unnamed_addr constant [16 x i8] c"tiertexseqvideo\00", align 1
@.str.97.353 = private unnamed_addr constant [5 x i8] c"tiff\00", align 1
@.str.1.377 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str.99.355 = private unnamed_addr constant [4 x i8] c"dxa\00", align 1
@.str.100.356 = private unnamed_addr constant [6 x i8] c"dnxhd\00", align 1
@.str.101.357 = private unnamed_addr constant [4 x i8] c"thp\00", align 1
@.str.102.358 = private unnamed_addr constant [4 x i8] c"sgi\00", align 1
@.str.103.359 = private unnamed_addr constant [7 x i8] c"sgirle\00", align 1
@.str.104.360 = private unnamed_addr constant [4 x i8] c"c93\00", align 1
@.str.105.361 = private unnamed_addr constant [12 x i8] c"bethsoftvid\00", align 1
@.str.106.362 = private unnamed_addr constant [4 x i8] c"ptx\00", align 1
@.str.107.363 = private unnamed_addr constant [4 x i8] c"txd\00", align 1
@.str.108.364 = private unnamed_addr constant [5 x i8] c"vp6a\00", align 1
@.str.148.573 = private unnamed_addr constant [4 x i8] c"amv\00", align 1
@.str.110.366 = private unnamed_addr constant [3 x i8] c"vb\00", align 1
@.str.111.367 = private unnamed_addr constant [4 x i8] c"pcx\00", align 1
@.str.112.368 = private unnamed_addr constant [8 x i8] c"sunrast\00", align 1
@.str.113.369 = private unnamed_addr constant [7 x i8] c"indeo4\00", align 1
@.str.114.370 = private unnamed_addr constant [7 x i8] c"indeo5\00", align 1
@.str.115.371 = private unnamed_addr constant [6 x i8] c"mimic\00", align 1
@.str.116.372 = private unnamed_addr constant [4 x i8] c"rl2\00", align 1
@.str.117.373 = private unnamed_addr constant [10 x i8] c"escape124\00", align 1
@.str.118.374 = private unnamed_addr constant [6 x i8] c"dirac\00", align 1
@.str.119.375 = private unnamed_addr constant [4 x i8] c"bfi\00", align 1
@.str.120.376 = private unnamed_addr constant [4 x i8] c"cmv\00", align 1
@.str.121.377 = private unnamed_addr constant [13 x i8] c"motionpixels\00", align 1
@.str.122.378 = private unnamed_addr constant [4 x i8] c"tgv\00", align 1
@.str.123.379 = private unnamed_addr constant [4 x i8] c"tgq\00", align 1
@.str.124.380 = private unnamed_addr constant [4 x i8] c"tqi\00", align 1
@.str.125.381 = private unnamed_addr constant [5 x i8] c"aura\00", align 1
@.str.126.382 = private unnamed_addr constant [6 x i8] c"aura2\00", align 1
@.str.127.383 = private unnamed_addr constant [6 x i8] c"v210x\00", align 1
@.str.128.384 = private unnamed_addr constant [4 x i8] c"tmv\00", align 1
@.str.129.385 = private unnamed_addr constant [5 x i8] c"v210\00", align 1
@.str.130.386 = private unnamed_addr constant [4 x i8] c"dpx\00", align 1
@.str.131.387 = private unnamed_addr constant [4 x i8] c"mad\00", align 1
@.str.132.388 = private unnamed_addr constant [5 x i8] c"frwu\00", align 1
@.str.133.389 = private unnamed_addr constant [9 x i8] c"flashsv2\00", align 1
@.str.134.390 = private unnamed_addr constant [11 x i8] c"cdgraphics\00", align 1
@.str.135.391 = private unnamed_addr constant [5 x i8] c"r210\00", align 1
@.str.136.392 = private unnamed_addr constant [4 x i8] c"anm\00", align 1
@.str.137.393 = private unnamed_addr constant [10 x i8] c"binkvideo\00", align 1
@.str.138.394 = private unnamed_addr constant [9 x i8] c"iff_ilbm\00", align 1
@.str.139.395 = private unnamed_addr constant [13 x i8] c"iff_byterun1\00", align 1
@.str.140.396 = private unnamed_addr constant [5 x i8] c"kgv1\00", align 1
@.str.141.397 = private unnamed_addr constant [4 x i8] c"yop\00", align 1
@.str.142.398 = private unnamed_addr constant [4 x i8] c"vp8\00", align 1
@.str.143.399 = private unnamed_addr constant [4 x i8] c"vp9\00", align 1
@.str.144.400 = private unnamed_addr constant [7 x i8] c"pictor\00", align 1
@.str.145.401 = private unnamed_addr constant [5 x i8] c"ansi\00", align 1
@.str.146.402 = private unnamed_addr constant [10 x i8] c"a64_multi\00", align 1
@.str.147.403 = private unnamed_addr constant [11 x i8] c"a64_multi5\00", align 1
@.str.148.404 = private unnamed_addr constant [5 x i8] c"r10k\00", align 1
@.str.149.405 = private unnamed_addr constant [5 x i8] c"mvc1\00", align 1
@.str.150.406 = private unnamed_addr constant [5 x i8] c"mvc2\00", align 1
@.str.151.407 = private unnamed_addr constant [6 x i8] c"mxpeg\00", align 1
@.str.152.408 = private unnamed_addr constant [9 x i8] c"lagarith\00", align 1
@.str.153.409 = private unnamed_addr constant [7 x i8] c"prores\00", align 1
@.str.154.410 = private unnamed_addr constant [3 x i8] c"jv\00", align 1
@.str.155.411 = private unnamed_addr constant [4 x i8] c"dfa\00", align 1
@.str.156.412 = private unnamed_addr constant [10 x i8] c"wmv3image\00", align 1
@.str.157.413 = private unnamed_addr constant [9 x i8] c"vc1image\00", align 1
@.str.158.414 = private unnamed_addr constant [8 x i8] c"utvideo\00", align 1
@.str.159.415 = private unnamed_addr constant [10 x i8] c"bmv_video\00", align 1
@.str.160.416 = private unnamed_addr constant [5 x i8] c"vble\00", align 1
@.str.161.417 = private unnamed_addr constant [7 x i8] c"dxtory\00", align 1
@.str.162.418 = private unnamed_addr constant [5 x i8] c"v410\00", align 1
@.str.163.419 = private unnamed_addr constant [4 x i8] c"xwd\00", align 1
@.str.164.420 = private unnamed_addr constant [5 x i8] c"cdxl\00", align 1
@.str.165.421 = private unnamed_addr constant [4 x i8] c"xbm\00", align 1
@.str.166.422 = private unnamed_addr constant [10 x i8] c"zerocodec\00", align 1
@.str.167.423 = private unnamed_addr constant [5 x i8] c"mss1\00", align 1
@.str.168.424 = private unnamed_addr constant [5 x i8] c"msa1\00", align 1
@.str.169.425 = private unnamed_addr constant [6 x i8] c"tscc2\00", align 1
@.str.170.426 = private unnamed_addr constant [5 x i8] c"mts2\00", align 1
@.str.171.427 = private unnamed_addr constant [5 x i8] c"cllc\00", align 1
@.str.172.428 = private unnamed_addr constant [5 x i8] c"mss2\00", align 1
@.str.173.429 = private unnamed_addr constant [5 x i8] c"y41p\00", align 1
@.str.174.430 = private unnamed_addr constant [10 x i8] c"escape130\00", align 1
@.str.175.431 = private unnamed_addr constant [4 x i8] c"exr\00", align 1
@.str.176.432 = private unnamed_addr constant [5 x i8] c"avrp\00", align 1
@.str.177.433 = private unnamed_addr constant [5 x i8] c"012v\00", align 1
@.str.178.434 = private unnamed_addr constant [4 x i8] c"g2m\00", align 1
@.str.179.435 = private unnamed_addr constant [5 x i8] c"avui\00", align 1
@.str.180.436 = private unnamed_addr constant [5 x i8] c"ayuv\00", align 1
@.str.181.437 = private unnamed_addr constant [11 x i8] c"targa_y216\00", align 1
@.str.182.438 = private unnamed_addr constant [5 x i8] c"v308\00", align 1
@.str.183.439 = private unnamed_addr constant [5 x i8] c"v408\00", align 1
@.str.184.440 = private unnamed_addr constant [5 x i8] c"yuv4\00", align 1
@.str.185.441 = private unnamed_addr constant [5 x i8] c"sanm\00", align 1
@.str.186.442 = private unnamed_addr constant [10 x i8] c"paf_video\00", align 1
@.str.187.443 = private unnamed_addr constant [5 x i8] c"avrn\00", align 1
@.str.188.444 = private unnamed_addr constant [5 x i8] c"cpia\00", align 1
@.str.189.445 = private unnamed_addr constant [6 x i8] c"xface\00", align 1
@.str.190.446 = private unnamed_addr constant [12 x i8] c"brender_pix\00", align 1
@.str.191.447 = private unnamed_addr constant [10 x i8] c"pcm_s16le\00", align 1
@.str.192.448 = private unnamed_addr constant [10 x i8] c"pcm_s16be\00", align 1
@.str.193.449 = private unnamed_addr constant [10 x i8] c"pcm_u16le\00", align 1
@.str.194.450 = private unnamed_addr constant [10 x i8] c"pcm_u16be\00", align 1
@.str.195.451 = private unnamed_addr constant [7 x i8] c"pcm_s8\00", align 1
@.str.196.452 = private unnamed_addr constant [7 x i8] c"pcm_u8\00", align 1
@.str.197.453 = private unnamed_addr constant [10 x i8] c"pcm_mulaw\00", align 1
@.str.198.454 = private unnamed_addr constant [9 x i8] c"pcm_alaw\00", align 1
@.str.199.455 = private unnamed_addr constant [10 x i8] c"pcm_s32le\00", align 1
@.str.200.456 = private unnamed_addr constant [10 x i8] c"pcm_s32be\00", align 1
@.str.201.457 = private unnamed_addr constant [10 x i8] c"pcm_u32le\00", align 1
@.str.202.458 = private unnamed_addr constant [10 x i8] c"pcm_u32be\00", align 1
@.str.203.459 = private unnamed_addr constant [10 x i8] c"pcm_s24le\00", align 1
@.str.204.460 = private unnamed_addr constant [10 x i8] c"pcm_s24be\00", align 1
@.str.205.461 = private unnamed_addr constant [10 x i8] c"pcm_u24le\00", align 1
@.str.206.462 = private unnamed_addr constant [10 x i8] c"pcm_u24be\00", align 1
@.str.207.463 = private unnamed_addr constant [12 x i8] c"pcm_s24daud\00", align 1
@.str.208.464 = private unnamed_addr constant [9 x i8] c"pcm_zork\00", align 1
@.str.209.465 = private unnamed_addr constant [17 x i8] c"pcm_s16be_planar\00", align 1
@.str.210.466 = private unnamed_addr constant [17 x i8] c"pcm_s16le_planar\00", align 1
@.str.211.467 = private unnamed_addr constant [17 x i8] c"pcm_s24le_planar\00", align 1
@.str.212.468 = private unnamed_addr constant [17 x i8] c"pcm_s32le_planar\00", align 1
@.str.213.469 = private unnamed_addr constant [8 x i8] c"pcm_dvd\00", align 1
@.str.214.470 = private unnamed_addr constant [10 x i8] c"pcm_f32be\00", align 1
@.str.215.471 = private unnamed_addr constant [10 x i8] c"pcm_f32le\00", align 1
@.str.216.472 = private unnamed_addr constant [10 x i8] c"pcm_f64be\00", align 1
@.str.217.473 = private unnamed_addr constant [10 x i8] c"pcm_f64le\00", align 1
@.str.218.474 = private unnamed_addr constant [11 x i8] c"pcm_bluray\00", align 1
@.str.219.475 = private unnamed_addr constant [8 x i8] c"pcm_lxf\00", align 1
@.str.220.476 = private unnamed_addr constant [6 x i8] c"s302m\00", align 1
@.str.221.477 = private unnamed_addr constant [14 x i8] c"pcm_s8_planar\00", align 1
@.str.222.478 = private unnamed_addr constant [13 x i8] c"adpcm_ima_qt\00", align 1
@.str.223.479 = private unnamed_addr constant [14 x i8] c"adpcm_ima_wav\00", align 1
@.str.224.480 = private unnamed_addr constant [14 x i8] c"adpcm_ima_dk3\00", align 1
@.str.225.481 = private unnamed_addr constant [14 x i8] c"adpcm_ima_dk4\00", align 1
@.str.226.482 = private unnamed_addr constant [13 x i8] c"adpcm_ima_ws\00", align 1
@.str.227.483 = private unnamed_addr constant [17 x i8] c"adpcm_ima_smjpeg\00", align 1
@.str.228.484 = private unnamed_addr constant [9 x i8] c"adpcm_ms\00", align 1
@.str.229.485 = private unnamed_addr constant [10 x i8] c"adpcm_4xm\00", align 1
@.str.230.486 = private unnamed_addr constant [9 x i8] c"adpcm_xa\00", align 1
@.str.231.487 = private unnamed_addr constant [10 x i8] c"adpcm_adx\00", align 1
@.str.232.488 = private unnamed_addr constant [9 x i8] c"adpcm_ea\00", align 1
@.str.233.489 = private unnamed_addr constant [11 x i8] c"adpcm_g726\00", align 1
@.str.234.490 = private unnamed_addr constant [9 x i8] c"adpcm_ct\00", align 1
@.str.235.491 = private unnamed_addr constant [10 x i8] c"adpcm_swf\00", align 1
@.str.236.492 = private unnamed_addr constant [13 x i8] c"adpcm_yamaha\00", align 1
@.str.237.493 = private unnamed_addr constant [14 x i8] c"adpcm_sbpro_4\00", align 1
@.str.238.494 = private unnamed_addr constant [14 x i8] c"adpcm_sbpro_3\00", align 1
@.str.239.495 = private unnamed_addr constant [14 x i8] c"adpcm_sbpro_2\00", align 1
@.str.240.496 = private unnamed_addr constant [10 x i8] c"adpcm_thp\00", align 1
@.str.241.497 = private unnamed_addr constant [14 x i8] c"adpcm_ima_amv\00", align 1
@.str.242.498 = private unnamed_addr constant [12 x i8] c"adpcm_ea_r1\00", align 1
@.str.243.499 = private unnamed_addr constant [12 x i8] c"adpcm_ea_r3\00", align 1
@.str.244.500 = private unnamed_addr constant [12 x i8] c"adpcm_ea_r2\00", align 1
@.str.245.501 = private unnamed_addr constant [18 x i8] c"adpcm_ima_ea_sead\00", align 1
@.str.246.502 = private unnamed_addr constant [18 x i8] c"adpcm_ima_ea_eacs\00", align 1
@.str.247.503 = private unnamed_addr constant [13 x i8] c"adpcm_ea_xas\00", align 1
@.str.248.504 = private unnamed_addr constant [18 x i8] c"adpcm_ea_maxis_xa\00", align 1
@.str.249.505 = private unnamed_addr constant [14 x i8] c"adpcm_ima_iss\00", align 1
@.str.250.506 = private unnamed_addr constant [11 x i8] c"adpcm_g722\00", align 1
@.str.251.507 = private unnamed_addr constant [14 x i8] c"adpcm_ima_apc\00", align 1
@.str.252.508 = private unnamed_addr constant [10 x i8] c"adpcm_afc\00", align 1
@.str.253.509 = private unnamed_addr constant [14 x i8] c"adpcm_ima_oki\00", align 1
@.str.254.510 = private unnamed_addr constant [7 x i8] c"amr_nb\00", align 1
@.str.255.511 = private unnamed_addr constant [7 x i8] c"amr_wb\00", align 1
@.str.256.512 = private unnamed_addr constant [7 x i8] c"ra_144\00", align 1
@.str.257 = private unnamed_addr constant [7 x i8] c"ra_288\00", align 1
@.str.258 = private unnamed_addr constant [9 x i8] c"roq_dpcm\00", align 1
@.str.259 = private unnamed_addr constant [15 x i8] c"interplay_dpcm\00", align 1
@.str.260 = private unnamed_addr constant [9 x i8] c"xan_dpcm\00", align 1
@.str.261 = private unnamed_addr constant [9 x i8] c"sol_dpcm\00", align 1
@.str.262 = private unnamed_addr constant [4 x i8] c"mp2\00", align 1
@.str.263 = private unnamed_addr constant [4 x i8] c"mp3\00", align 1
@.str.264 = private unnamed_addr constant [4 x i8] c"aac\00", align 1
@.str.265 = private unnamed_addr constant [4 x i8] c"ac3\00", align 1
@.str.426 = private unnamed_addr constant [4 x i8] c"dts\00", align 1
@.str.267 = private unnamed_addr constant [7 x i8] c"vorbis\00", align 1
@.str.268 = private unnamed_addr constant [8 x i8] c"dvaudio\00", align 1
@.str.269 = private unnamed_addr constant [6 x i8] c"wmav1\00", align 1
@.str.270 = private unnamed_addr constant [6 x i8] c"wmav2\00", align 1
@.str.271 = private unnamed_addr constant [6 x i8] c"mace3\00", align 1
@.str.272 = private unnamed_addr constant [6 x i8] c"mace6\00", align 1
@.str.273 = private unnamed_addr constant [9 x i8] c"vmdaudio\00", align 1
@.str.274.513 = private unnamed_addr constant [5 x i8] c"flac\00", align 1
@.str.275 = private unnamed_addr constant [7 x i8] c"mp3adu\00", align 1
@.str.276 = private unnamed_addr constant [7 x i8] c"mp3on4\00", align 1
@.str.277.514 = private unnamed_addr constant [8 x i8] c"shorten\00", align 1
@.str.278 = private unnamed_addr constant [5 x i8] c"alac\00", align 1
@.str.279 = private unnamed_addr constant [14 x i8] c"westwood_snd1\00", align 1
@.str.280.515 = private unnamed_addr constant [4 x i8] c"gsm\00", align 1
@.str.281 = private unnamed_addr constant [5 x i8] c"qdm2\00", align 1
@.str.282 = private unnamed_addr constant [5 x i8] c"cook\00", align 1
@.str.283.516 = private unnamed_addr constant [11 x i8] c"truespeech\00", align 1
@.str.284 = private unnamed_addr constant [4 x i8] c"tta\00", align 1
@.str.285 = private unnamed_addr constant [11 x i8] c"smackaudio\00", align 1
@.str.286.517 = private unnamed_addr constant [6 x i8] c"qcelp\00", align 1
@.str.287 = private unnamed_addr constant [8 x i8] c"wavpack\00", align 1
@.str.288 = private unnamed_addr constant [12 x i8] c"dsicinaudio\00", align 1
@.str.289.518 = private unnamed_addr constant [4 x i8] c"imc\00", align 1
@.str.290 = private unnamed_addr constant [10 x i8] c"musepack7\00", align 1
@.str.291 = private unnamed_addr constant [4 x i8] c"mlp\00", align 1
@.str.292.519 = private unnamed_addr constant [7 x i8] c"gsm_ms\00", align 1
@.str.293 = private unnamed_addr constant [7 x i8] c"atrac3\00", align 1
@.str.294 = private unnamed_addr constant [8 x i8] c"voxware\00", align 1
@.str.295.520 = private unnamed_addr constant [4 x i8] c"ape\00", align 1
@.str.296 = private unnamed_addr constant [11 x i8] c"nellymoser\00", align 1
@.str.297 = private unnamed_addr constant [10 x i8] c"musepack8\00", align 1
@.str.298 = private unnamed_addr constant [6 x i8] c"speex\00", align 1
@.str.299 = private unnamed_addr constant [9 x i8] c"wmavoice\00", align 1
@.str.300 = private unnamed_addr constant [7 x i8] c"wmapro\00", align 1
@.str.301 = private unnamed_addr constant [12 x i8] c"wmalossless\00", align 1
@.str.302.521 = private unnamed_addr constant [8 x i8] c"atrac3p\00", align 1
@.str.303 = private unnamed_addr constant [5 x i8] c"eac3\00", align 1
@.str.304.522 = private unnamed_addr constant [5 x i8] c"sipr\00", align 1
@.str.305 = private unnamed_addr constant [4 x i8] c"mp1\00", align 1
@.str.306 = private unnamed_addr constant [7 x i8] c"twinvq\00", align 1
@.str.307 = private unnamed_addr constant [7 x i8] c"truehd\00", align 1
@.str.308 = private unnamed_addr constant [7 x i8] c"mp4als\00", align 1
@.str.309 = private unnamed_addr constant [7 x i8] c"atrac1\00", align 1
@.str.310 = private unnamed_addr constant [15 x i8] c"binkaudio_rdft\00", align 1
@.str.311 = private unnamed_addr constant [14 x i8] c"binkaudio_dct\00", align 1
@.str.312 = private unnamed_addr constant [9 x i8] c"aac_latm\00", align 1
@.str.313 = private unnamed_addr constant [5 x i8] c"qdmc\00", align 1
@.str.314 = private unnamed_addr constant [5 x i8] c"celt\00", align 1
@.str.315 = private unnamed_addr constant [7 x i8] c"g723_1\00", align 1
@.str.316 = private unnamed_addr constant [5 x i8] c"g729\00", align 1
@.str.317 = private unnamed_addr constant [9 x i8] c"8svx_exp\00", align 1
@.str.318 = private unnamed_addr constant [9 x i8] c"8svx_fib\00", align 1
@.str.319 = private unnamed_addr constant [10 x i8] c"bmv_audio\00", align 1
@.str.320.523 = private unnamed_addr constant [5 x i8] c"ralf\00", align 1
@.str.321 = private unnamed_addr constant [4 x i8] c"iac\00", align 1
@.str.322 = private unnamed_addr constant [5 x i8] c"ilbc\00", align 1
@.str.323 = private unnamed_addr constant [5 x i8] c"vima\00", align 1
@.str.324 = private unnamed_addr constant [10 x i8] c"wavesynth\00", align 1
@.str.325 = private unnamed_addr constant [6 x i8] c"sonic\00", align 1
@.str.326 = private unnamed_addr constant [8 x i8] c"sonicls\00", align 1
@.str.327 = private unnamed_addr constant [10 x i8] c"paf_audio\00", align 1
@.str.328 = private unnamed_addr constant [5 x i8] c"opus\00", align 1
@.str.329.524 = private unnamed_addr constant [13 x i8] c"comfortnoise\00", align 1
@.str.330 = private unnamed_addr constant [4 x i8] c"tak\00", align 1
@.str.331 = private unnamed_addr constant [5 x i8] c"evrc\00", align 1
@.str.332.525 = private unnamed_addr constant [4 x i8] c"smv\00", align 1
@.str.333 = private unnamed_addr constant [13 x i8] c"dvd_subtitle\00", align 1
@.str.334 = private unnamed_addr constant [13 x i8] c"dvb_subtitle\00", align 1
@.str.335 = private unnamed_addr constant [5 x i8] c"text\00", align 1
@.str.336 = private unnamed_addr constant [5 x i8] c"xsub\00", align 1
@.str.337 = private unnamed_addr constant [4 x i8] c"ssa\00", align 1
@.str.338 = private unnamed_addr constant [9 x i8] c"mov_text\00", align 1
@.str.339 = private unnamed_addr constant [18 x i8] c"hdmv_pgs_subtitle\00", align 1
@.str.340 = private unnamed_addr constant [13 x i8] c"dvb_teletext\00", align 1
@.str.341 = private unnamed_addr constant [4 x i8] c"srt\00", align 1
@.str.342 = private unnamed_addr constant [7 x i8] c"subrip\00", align 1
@.str.343 = private unnamed_addr constant [9 x i8] c"microdvd\00", align 1
@.str.344 = private unnamed_addr constant [5 x i8] c"mpl2\00", align 1
@.str.345 = private unnamed_addr constant [8 x i8] c"eia_608\00", align 1
@.str.346.526 = private unnamed_addr constant [8 x i8] c"jacosub\00", align 1
@.str.347 = private unnamed_addr constant [4 x i8] c"pjs\00", align 1
@.str.348 = private unnamed_addr constant [5 x i8] c"sami\00", align 1
@.str.349 = private unnamed_addr constant [9 x i8] c"realtext\00", align 1
@.str.350 = private unnamed_addr constant [11 x i8] c"subviewer1\00", align 1
@.str.351 = private unnamed_addr constant [10 x i8] c"subviewer\00", align 1
@.str.352 = private unnamed_addr constant [8 x i8] c"vplayer\00", align 1
@.str.353 = private unnamed_addr constant [7 x i8] c"webvtt\00", align 1
@.str.354.527 = private unnamed_addr constant [8 x i8] c"bintext\00", align 1
@.str.355 = private unnamed_addr constant [5 x i8] c"xbin\00", align 1
@.str.356 = private unnamed_addr constant [4 x i8] c"idf\00", align 1
@.str.357 = private unnamed_addr constant [4 x i8] c"klv\00", align 1
@.str.1.862 = private unnamed_addr constant [36 x i8] c"s->codec_type == AVMEDIA_TYPE_VIDEO\00", align 1
@.str.2.863 = private unnamed_addr constant [19 x i8] c"libavcodec/utils.c\00", align 1
@av_pix_fmt_descriptors = internal constant <{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }> <{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2197, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.2198, i32 0, i32 0), i8 3, i8 1, i8 0, i8 0, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 -116, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.2199, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 40, i8 56 }, { i8, i8 } { i8 72, i8 56 }, { i8, i8 } { i8 104, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.2200, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 104, i8 56 }, { i8, i8 } { i8 72, i8 56 }, { i8, i8 } { i8 40, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4.2201, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.2202, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.2203, i32 0, i32 0), i8 3, i8 2, i8 2, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.2204, i32 0, i32 0), i8 3, i8 2, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.2205, i32 0, i32 0), i8 1, i8 0, i8 0, i8 64, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9.2206, i32 0, i32 0), i8 1, i8 0, i8 0, i8 4, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 0 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10.2207, i32 0, i32 0), i8 1, i8 0, i8 0, i8 4, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 7 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11.2208, i32 0, i32 0), i8 1, i8 0, i8 0, i8 2, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12.2209, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13.2210, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14.2211, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15.2212, i32 0, i32 0), i8 0, i8 0, i8 0, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16.2213, i32 0, i32 0), i8 0, i8 0, i8 0, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.2214, i32 0, i32 0), i8 3, i8 1, i8 0, i8 0, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 68, i8 56 }, { i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 108, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18.2215, i32 0, i32 0), i8 3, i8 2, i8 0, i8 0, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 52, i8 56 }, { i8, i8 } { i8 -108, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.2216, i32 0, i32 0), i8 3, i8 0, i8 0, i8 96, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 16 }, { i8, i8 } { i8 32, i8 19 }, { i8, i8 } { i8 32, i8 14 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20.2217, i32 0, i32 0), i8 3, i8 0, i8 0, i8 36, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 -116, i8 0 }, { i8, i8 } { i8 76, i8 8 }, { i8, i8 } { i8 44, i8 0 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21.2218, i32 0, i32 0), i8 3, i8 0, i8 0, i8 96, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 0 }, { i8, i8 } { i8 32, i8 9 }, { i8, i8 } { i8 32, i8 3 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22.2219, i32 0, i32 0), i8 3, i8 0, i8 0, i8 96, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 14 }, { i8, i8 } { i8 32, i8 19 }, { i8, i8 } { i8 32, i8 16 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23.2220, i32 0, i32 0), i8 3, i8 0, i8 0, i8 36, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 44, i8 0 }, { i8, i8 } { i8 76, i8 8 }, { i8, i8 } { i8 -116, i8 0 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.2221, i32 0, i32 0), i8 3, i8 0, i8 0, i8 96, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 3 }, { i8, i8 } { i8 32, i8 9 }, { i8, i8 } { i8 32, i8 0 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25.2222, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 37, i8 56 }, { i8, i8 } { i8 69, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26.2223, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 69, i8 56 }, { i8, i8 } { i8 37, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27.2224, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 -116, i8 56 }, { i8, i8 } { i8 44, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28.2225, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 -116, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29.2226, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 -116, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 44, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30.2227, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 -116, i8 56 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31.2228, i32 0, i32 0), i8 1, i8 0, i8 0, i8 1, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32.2229, i32 0, i32 0), i8 1, i8 0, i8 0, i8 0, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33.2230, i32 0, i32 0), i8 3, i8 0, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.34.2231, i32 0, i32 0), i8 3, i8 0, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35.2232, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, { i8, i8 } { i8 35, i8 56 }] }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.36.2233, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.37.2234, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38.2235, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39.2236, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40.2237, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41.2238, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 52, i8 120 }, { i8, i8 } { i8 116, i8 120 }, { i8, i8 } { i8 -76, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42.2239, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 52, i8 120 }, { i8, i8 } { i8 116, i8 120 }, { i8, i8 } { i8 -76, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.43.2240, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 4, i8 35 }, { i8, i8 } { i8 36, i8 45 }, { i8, i8 } { i8 36, i8 32 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44.2241, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 68, i8 35 }, { i8, i8 } { i8 36, i8 45 }, { i8, i8 } { i8 36, i8 32 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.45.2242, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 4, i8 34 }, { i8, i8 } { i8 36, i8 37 }, { i8, i8 } { i8 36, i8 32 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.46.2243, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 68, i8 34 }, { i8, i8 } { i8 36, i8 37 }, { i8, i8 } { i8 36, i8 32 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.47.2244, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 32 }, { i8, i8 } { i8 36, i8 45 }, { i8, i8 } { i8 4, i8 35 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.48.2245, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 32 }, { i8, i8 } { i8 36, i8 45 }, { i8, i8 } { i8 68, i8 35 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49.2246, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 32 }, { i8, i8 } { i8 36, i8 37 }, { i8, i8 } { i8 4, i8 34 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50.2247, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 32 }, { i8, i8 } { i8 36, i8 37 }, { i8, i8 } { i8 68, i8 34 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.51.2248, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.52.2249, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.53.2250, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54.2251, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55.2252, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.56.2253, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57.2254, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.58.2255, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.59.2256, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60.2257, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.61.2258, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62.2259, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 68, i8 24 }, { i8, i8 } { i8 36, i8 28 }, { i8, i8 } { i8 36, i8 24 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63.2260, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 4, i8 24 }, { i8, i8 } { i8 36, i8 28 }, { i8, i8 } { i8 36, i8 24 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.64.2261, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 24 }, { i8, i8 } { i8 36, i8 28 }, { i8, i8 } { i8 68, i8 24 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65.2262, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 24 }, { i8, i8 } { i8 36, i8 28 }, { i8, i8 } { i8 4, i8 24 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66.2263, i32 0, i32 0), i8 2, i8 0, i8 0, i8 -128, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 56 }, { i8, i8 } { i8 68, i8 56 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67.2264, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 -76, i8 120 }, { i8, i8 } { i8 116, i8 120 }, { i8, i8 } { i8 52, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68.2265, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 -76, i8 120 }, { i8, i8 } { i8 116, i8 120 }, { i8, i8 } { i8 52, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.69.2266, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.70.2267, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71.2268, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.72.2269, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.73.2270, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.74.2271, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.75.2272, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.76.2273, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.77.2274, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78.2275, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.79.2276, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.80.2277, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.81.2278, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82.2279, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 34, i8 56 }, { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83.2280, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.84.2281, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85.2282, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86.2283, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.87.2284, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88.2285, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.89.2286, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.90.2287, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91.2288, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.92.2289, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.93.2290, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.94.2291, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.95.2292, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.96.2293, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.97.2294, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.98.2295, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.99.2296, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100.2297, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101.2298, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.102.2299, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.103.2300, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.104.2301, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.105.2302, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.106.2303, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.107.2304, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108.2305, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -95, [4 x { i8, i8 }] [{ i8, i8 } { i8 60, i8 120 }, { i8, i8 } { i8 124, i8 120 }, { i8, i8 } { i8 -68, i8 120 }, { i8, i8 } { i8 -4, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109.2306, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 60, i8 120 }, { i8, i8 } { i8 124, i8 120 }, { i8, i8 } { i8 -68, i8 120 }, { i8, i8 } { i8 -4, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110.2307, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -95, [4 x { i8, i8 }] [{ i8, i8 } { i8 -68, i8 120 }, { i8, i8 } { i8 124, i8 120 }, { i8, i8 } { i8 60, i8 120 }, { i8, i8 } { i8 -4, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.111.2308, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 -68, i8 120 }, { i8, i8 } { i8 124, i8 120 }, { i8, i8 } { i8 60, i8 120 }, { i8, i8 } { i8 -4, i8 120 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.112.2309, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 -116, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113.2310, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, [4 x { i8, i8 }] [{ i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 -116, i8 56 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114.2311, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 -116, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 76, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115.2312, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, [4 x { i8, i8 }] [{ i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 -116, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.116.2313, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, { i8, i8 } { i8 35, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.117.2314, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, { i8, i8 } { i8 35, i8 56 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.118.2315, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.119.2316, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120.2317, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121.2318, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.122.2319, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.123.2320, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.124.2321, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.125.2322, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.126.2323, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.127.2324, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.128.2325, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.129.2326, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.130.2327, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 88 }, { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.131.2328, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 88 }, { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.132.2329, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 104 }, { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.133.2330, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 104 }, { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> } }>, align 16
@.str.5.868 = private unnamed_addr constant [79 x i8] c"Picture changed from size:%dx%d fmt:%s to size:%dx%d fmt:%s in reget buffer()\0A\00", align 1
@.str.5.1845 = private unnamed_addr constant [30 x i8] c"av_image_get_linesize failed\0A\00", align 1
@.str.2.1840 = private unnamed_addr constant [31 x i8] c"abs(src_linesize) >= bytewidth\00", align 1
@.str.3.1841 = private unnamed_addr constant [21 x i8] c"libavutil/imgutils.c\00", align 1
@.str.4.1842 = private unnamed_addr constant [31 x i8] c"abs(dst_linesize) >= bytewidth\00", align 1
@.str.2197 = private unnamed_addr constant [8 x i8] c"yuv420p\00", align 1
@.str.1.2198 = private unnamed_addr constant [8 x i8] c"yuyv422\00", align 1
@.str.2.2199 = private unnamed_addr constant [6 x i8] c"rgb24\00", align 1
@.str.3.2200 = private unnamed_addr constant [6 x i8] c"bgr24\00", align 1
@.str.4.2201 = private unnamed_addr constant [8 x i8] c"yuv422p\00", align 1
@.str.5.2202 = private unnamed_addr constant [8 x i8] c"yuv444p\00", align 1
@.str.6.2203 = private unnamed_addr constant [8 x i8] c"yuv410p\00", align 1
@.str.7.2204 = private unnamed_addr constant [8 x i8] c"yuv411p\00", align 1
@.str.8.2205 = private unnamed_addr constant [5 x i8] c"gray\00", align 1
@.str.9.2206 = private unnamed_addr constant [6 x i8] c"monow\00", align 1
@.str.10.2207 = private unnamed_addr constant [6 x i8] c"monob\00", align 1
@.str.11.2208 = private unnamed_addr constant [5 x i8] c"pal8\00", align 1
@.str.12.2209 = private unnamed_addr constant [9 x i8] c"yuvj420p\00", align 1
@.str.13.2210 = private unnamed_addr constant [9 x i8] c"yuvj422p\00", align 1
@.str.14.2211 = private unnamed_addr constant [9 x i8] c"yuvj444p\00", align 1
@.str.15.2212 = private unnamed_addr constant [7 x i8] c"xvmcmc\00", align 1
@.str.16.2213 = private unnamed_addr constant [9 x i8] c"xvmcidct\00", align 1
@.str.17.2214 = private unnamed_addr constant [8 x i8] c"uyvy422\00", align 1
@.str.18.2215 = private unnamed_addr constant [10 x i8] c"uyyvyy411\00", align 1
@.str.19.2216 = private unnamed_addr constant [5 x i8] c"bgr8\00", align 1
@.str.20.2217 = private unnamed_addr constant [5 x i8] c"bgr4\00", align 1
@.str.21.2218 = private unnamed_addr constant [10 x i8] c"bgr4_byte\00", align 1
@.str.22.2219 = private unnamed_addr constant [5 x i8] c"rgb8\00", align 1
@.str.23.2220 = private unnamed_addr constant [5 x i8] c"rgb4\00", align 1
@.str.24.2221 = private unnamed_addr constant [10 x i8] c"rgb4_byte\00", align 1
@.str.25.2222 = private unnamed_addr constant [5 x i8] c"nv12\00", align 1
@.str.26.2223 = private unnamed_addr constant [5 x i8] c"nv21\00", align 1
@.str.27.2224 = private unnamed_addr constant [5 x i8] c"argb\00", align 1
@.str.28.2225 = private unnamed_addr constant [5 x i8] c"rgba\00", align 1
@.str.29.2226 = private unnamed_addr constant [5 x i8] c"abgr\00", align 1
@.str.30.2227 = private unnamed_addr constant [5 x i8] c"bgra\00", align 1
@.str.31.2228 = private unnamed_addr constant [9 x i8] c"gray16be\00", align 1
@.str.32.2229 = private unnamed_addr constant [9 x i8] c"gray16le\00", align 1
@.str.33.2230 = private unnamed_addr constant [8 x i8] c"yuv440p\00", align 1
@.str.34.2231 = private unnamed_addr constant [9 x i8] c"yuvj440p\00", align 1
@.str.35.2232 = private unnamed_addr constant [9 x i8] c"yuva420p\00", align 1
@.str.36.2233 = private unnamed_addr constant [11 x i8] c"vdpau_h264\00", align 1
@.str.37.2234 = private unnamed_addr constant [12 x i8] c"vdpau_mpeg1\00", align 1
@.str.38.2235 = private unnamed_addr constant [12 x i8] c"vdpau_mpeg2\00", align 1
@.str.39.2236 = private unnamed_addr constant [11 x i8] c"vdpau_wmv3\00", align 1
@.str.40.2237 = private unnamed_addr constant [10 x i8] c"vdpau_vc1\00", align 1
@.str.41.2238 = private unnamed_addr constant [8 x i8] c"rgb48be\00", align 1
@.str.42.2239 = private unnamed_addr constant [8 x i8] c"rgb48le\00", align 1
@.str.43.2240 = private unnamed_addr constant [9 x i8] c"rgb565be\00", align 1
@.str.44.2241 = private unnamed_addr constant [9 x i8] c"rgb565le\00", align 1
@.str.45.2242 = private unnamed_addr constant [9 x i8] c"rgb555be\00", align 1
@.str.46.2243 = private unnamed_addr constant [9 x i8] c"rgb555le\00", align 1
@.str.47.2244 = private unnamed_addr constant [9 x i8] c"bgr565be\00", align 1
@.str.48.2245 = private unnamed_addr constant [9 x i8] c"bgr565le\00", align 1
@.str.49.2246 = private unnamed_addr constant [9 x i8] c"bgr555be\00", align 1
@.str.50.2247 = private unnamed_addr constant [9 x i8] c"bgr555le\00", align 1
@.str.51.2248 = private unnamed_addr constant [11 x i8] c"vaapi_moco\00", align 1
@.str.52.2249 = private unnamed_addr constant [11 x i8] c"vaapi_idct\00", align 1
@.str.53.2250 = private unnamed_addr constant [10 x i8] c"vaapi_vld\00", align 1
@.str.54.2251 = private unnamed_addr constant [12 x i8] c"yuv420p16le\00", align 1
@.str.55.2252 = private unnamed_addr constant [12 x i8] c"yuv420p16be\00", align 1
@.str.56.2253 = private unnamed_addr constant [12 x i8] c"yuv422p16le\00", align 1
@.str.57.2254 = private unnamed_addr constant [12 x i8] c"yuv422p16be\00", align 1
@.str.58.2255 = private unnamed_addr constant [12 x i8] c"yuv444p16le\00", align 1
@.str.59.2256 = private unnamed_addr constant [12 x i8] c"yuv444p16be\00", align 1
@.str.60.2257 = private unnamed_addr constant [12 x i8] c"vdpau_mpeg4\00", align 1
@.str.61.2258 = private unnamed_addr constant [10 x i8] c"dxva2_vld\00", align 1
@.str.62.2259 = private unnamed_addr constant [9 x i8] c"rgb444le\00", align 1
@.str.63.2260 = private unnamed_addr constant [9 x i8] c"rgb444be\00", align 1
@.str.64.2261 = private unnamed_addr constant [9 x i8] c"bgr444le\00", align 1
@.str.65.2262 = private unnamed_addr constant [9 x i8] c"bgr444be\00", align 1
@.str.66.2263 = private unnamed_addr constant [7 x i8] c"gray8a\00", align 1
@.str.67.2264 = private unnamed_addr constant [8 x i8] c"bgr48be\00", align 1
@.str.68.2265 = private unnamed_addr constant [8 x i8] c"bgr48le\00", align 1
@.str.69.2266 = private unnamed_addr constant [11 x i8] c"yuv420p9be\00", align 1
@.str.70.2267 = private unnamed_addr constant [11 x i8] c"yuv420p9le\00", align 1
@.str.71.2268 = private unnamed_addr constant [12 x i8] c"yuv420p10be\00", align 1
@.str.72.2269 = private unnamed_addr constant [12 x i8] c"yuv420p10le\00", align 1
@.str.73.2270 = private unnamed_addr constant [12 x i8] c"yuv422p10be\00", align 1
@.str.74.2271 = private unnamed_addr constant [12 x i8] c"yuv422p10le\00", align 1
@.str.75.2272 = private unnamed_addr constant [11 x i8] c"yuv444p9be\00", align 1
@.str.76.2273 = private unnamed_addr constant [11 x i8] c"yuv444p9le\00", align 1
@.str.77.2274 = private unnamed_addr constant [12 x i8] c"yuv444p10be\00", align 1
@.str.78.2275 = private unnamed_addr constant [12 x i8] c"yuv444p10le\00", align 1
@.str.79.2276 = private unnamed_addr constant [11 x i8] c"yuv422p9be\00", align 1
@.str.80.2277 = private unnamed_addr constant [11 x i8] c"yuv422p9le\00", align 1
@.str.81.2278 = private unnamed_addr constant [8 x i8] c"vda_vld\00", align 1
@.str.82.2279 = private unnamed_addr constant [5 x i8] c"gbrp\00", align 1
@.str.83.2280 = private unnamed_addr constant [8 x i8] c"gbrp9be\00", align 1
@.str.84.2281 = private unnamed_addr constant [8 x i8] c"gbrp9le\00", align 1
@.str.85.2282 = private unnamed_addr constant [9 x i8] c"gbrp10be\00", align 1
@.str.86.2283 = private unnamed_addr constant [9 x i8] c"gbrp10le\00", align 1
@.str.87.2284 = private unnamed_addr constant [9 x i8] c"gbrp16be\00", align 1
@.str.88.2285 = private unnamed_addr constant [9 x i8] c"gbrp16le\00", align 1
@.str.89.2286 = private unnamed_addr constant [12 x i8] c"yuva420p9be\00", align 1
@.str.90.2287 = private unnamed_addr constant [12 x i8] c"yuva420p9le\00", align 1
@.str.91.2288 = private unnamed_addr constant [12 x i8] c"yuva422p9be\00", align 1
@.str.92.2289 = private unnamed_addr constant [12 x i8] c"yuva422p9le\00", align 1
@.str.93.2290 = private unnamed_addr constant [12 x i8] c"yuva444p9be\00", align 1
@.str.94.2291 = private unnamed_addr constant [12 x i8] c"yuva444p9le\00", align 1
@.str.95.2292 = private unnamed_addr constant [13 x i8] c"yuva420p10be\00", align 1
@.str.96.2293 = private unnamed_addr constant [13 x i8] c"yuva420p10le\00", align 1
@.str.97.2294 = private unnamed_addr constant [13 x i8] c"yuva422p10be\00", align 1
@.str.98.2295 = private unnamed_addr constant [13 x i8] c"yuva422p10le\00", align 1
@.str.99.2296 = private unnamed_addr constant [13 x i8] c"yuva444p10be\00", align 1
@.str.100.2297 = private unnamed_addr constant [13 x i8] c"yuva444p10le\00", align 1
@.str.101.2298 = private unnamed_addr constant [13 x i8] c"yuva420p16be\00", align 1
@.str.102.2299 = private unnamed_addr constant [13 x i8] c"yuva420p16le\00", align 1
@.str.103.2300 = private unnamed_addr constant [13 x i8] c"yuva422p16be\00", align 1
@.str.104.2301 = private unnamed_addr constant [13 x i8] c"yuva422p16le\00", align 1
@.str.105.2302 = private unnamed_addr constant [13 x i8] c"yuva444p16be\00", align 1
@.str.106.2303 = private unnamed_addr constant [13 x i8] c"yuva444p16le\00", align 1
@.str.107.2304 = private unnamed_addr constant [6 x i8] c"vdpau\00", align 1
@.str.108.2305 = private unnamed_addr constant [9 x i8] c"rgba64be\00", align 1
@.str.109.2306 = private unnamed_addr constant [9 x i8] c"rgba64le\00", align 1
@.str.110.2307 = private unnamed_addr constant [9 x i8] c"bgra64be\00", align 1
@.str.111.2308 = private unnamed_addr constant [9 x i8] c"bgra64le\00", align 1
@.str.112.2309 = private unnamed_addr constant [5 x i8] c"0rgb\00", align 1
@.str.113.2310 = private unnamed_addr constant [5 x i8] c"rgb0\00", align 1
@.str.114.2311 = private unnamed_addr constant [5 x i8] c"0bgr\00", align 1
@.str.115.2312 = private unnamed_addr constant [5 x i8] c"bgr0\00", align 1
@.str.116.2313 = private unnamed_addr constant [9 x i8] c"yuva444p\00", align 1
@.str.117.2314 = private unnamed_addr constant [9 x i8] c"yuva422p\00", align 1
@.str.118.2315 = private unnamed_addr constant [12 x i8] c"yuv420p12be\00", align 1
@.str.119.2316 = private unnamed_addr constant [12 x i8] c"yuv420p12le\00", align 1
@.str.120.2317 = private unnamed_addr constant [12 x i8] c"yuv420p14be\00", align 1
@.str.121.2318 = private unnamed_addr constant [12 x i8] c"yuv420p14le\00", align 1
@.str.122.2319 = private unnamed_addr constant [12 x i8] c"yuv422p12be\00", align 1
@.str.123.2320 = private unnamed_addr constant [12 x i8] c"yuv422p12le\00", align 1
@.str.124.2321 = private unnamed_addr constant [12 x i8] c"yuv422p14be\00", align 1
@.str.125.2322 = private unnamed_addr constant [12 x i8] c"yuv422p14le\00", align 1
@.str.126.2323 = private unnamed_addr constant [12 x i8] c"yuv444p12be\00", align 1
@.str.127.2324 = private unnamed_addr constant [12 x i8] c"yuv444p12le\00", align 1
@.str.128.2325 = private unnamed_addr constant [12 x i8] c"yuv444p14be\00", align 1
@.str.129.2326 = private unnamed_addr constant [12 x i8] c"yuv444p14le\00", align 1
@.str.130.2327 = private unnamed_addr constant [9 x i8] c"gbrp12be\00", align 1
@.str.131.2328 = private unnamed_addr constant [9 x i8] c"gbrp12le\00", align 1
@.str.132.2329 = private unnamed_addr constant [9 x i8] c"gbrp14be\00", align 1
@.str.133.2330 = private unnamed_addr constant [9 x i8] c"gbrp14le\00", align 1
@.str.3.864 = private unnamed_addr constant [23 x i8] c"i < avci->buffer_count\00", align 1
@.str.4.865 = private unnamed_addr constant [58 x i8] c"default_release_buffer called on pic %p, %d buffers used\0A\00", align 1
@.str.80.852 = private unnamed_addr constant [50 x i8] c"pic->data[0]!=NULL in avcodec_default_get_buffer\0A\00", align 1
@.str.81.853 = private unnamed_addr constant [49 x i8] c"buffer_count overflow (missing release_buffer?)\0A\00", align 1
@.str.82.854 = private unnamed_addr constant [44 x i8] c"video_get_buffer: image parameters invalid\0A\00", align 1
@.str.83.855 = private unnamed_addr constant [54 x i8] c"default_get_buffer called on pic %p, %d buffers used\0A\00", align 1
@sample_fmt_info = internal unnamed_addr constant [10 x %struct.SampleFmtInfo] [%struct.SampleFmtInfo { [8 x i8] c"u8\00\00\00\00\00\00", i32 8, i32 0, i32 5 }, %struct.SampleFmtInfo { [8 x i8] c"s16\00\00\00\00\00", i32 16, i32 0, i32 6 }, %struct.SampleFmtInfo { [8 x i8] c"s32\00\00\00\00\00", i32 32, i32 0, i32 7 }, %struct.SampleFmtInfo { [8 x i8] c"flt\00\00\00\00\00", i32 32, i32 0, i32 8 }, %struct.SampleFmtInfo { [8 x i8] c"dbl\00\00\00\00\00", i32 64, i32 0, i32 9 }, %struct.SampleFmtInfo { [8 x i8] c"u8p\00\00\00\00\00", i32 8, i32 1, i32 0 }, %struct.SampleFmtInfo { [8 x i8] c"s16p\00\00\00\00", i32 16, i32 1, i32 1 }, %struct.SampleFmtInfo { [8 x i8] c"s32p\00\00\00\00", i32 32, i32 1, i32 2 }, %struct.SampleFmtInfo { [8 x i8] c"fltp\00\00\00\00", i32 32, i32 1, i32 3 }, %struct.SampleFmtInfo { [8 x i8] c"dblp\00\00\00\00", i32 64, i32 1, i32 4 }], align 16
@.str.84.856 = private unnamed_addr constant [67 x i8] c"default_get_buffer called on frame %p, internal audio buffer used\0A\00", align 1
@.str.429 = private unnamed_addr constant [15 x i8] c"AVCodecContext\00", align 1
@options.430 = internal constant <{ %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption }> <{ %struct.AVOption { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6.431, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.432, i32 0, i32 0), i32 96, i32 1, %union.anon.2 { i64 200000 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8.433, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.432, i32 0, i32 0), i32 96, i32 1, %union.anon.2 { i64 128000 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9.434, i32 0, i32 0), i8* getelementptr inbounds ([276 x i8], [276 x i8]* @.str.10.435, i32 0, i32 0), i32 100, i32 1, %union.anon.2 { i64 4000000 }, double 1.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0), i8* null, i32 112, i32 0, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x41EFFFFFFFE00000, i32 59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12.437, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.438, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.439, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.15.440, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16.441, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.17.442, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2048 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18.443, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19.444, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.445, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.446, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22.447, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.448, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 64 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.24.449, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25.450, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.26.451, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 512 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27.452, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.28.453, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1024 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.2205, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.30.455, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8192 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31.456, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32.457, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 16384 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33.458, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.34.459, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35.460, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36.461, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.37.462, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 131072 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38.463, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.39.464, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 262144 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40.465, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.41.466, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 524288 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.42.467, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.43.468, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4194304 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44.469, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.45.470, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8388608 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.46.471, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.47.472, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 16777216 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48.473, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.49.474, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 67108864 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50.475, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.49.474, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 134217728 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51.476, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.52.477, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 536870912 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53.478, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.54.479, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2147483648 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.436, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55.480, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.56.481, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.482, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58.483, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.49.474, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.482, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.59.484, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.60.485, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.482, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.61.486, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.62.487, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.482, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63.488, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.64.489, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.482, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65.490, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.66.491, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4194304 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.482, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67.492, i32 0, i32 0), i8* null, i32 68, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69.494, i32 0, i32 0), i32 172, i32 1, %union.anon.2 { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.70.495, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.71.496, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.72.497, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.73.498, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74.499, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.75.500, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76.501, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.77.502, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78.503, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.79.504, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 10 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.80.505, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.81.506, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82.507, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.83.508, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84.509, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.85.510, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86.511, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.87.512, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 6 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88.513, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.89.514, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 7 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90.515, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.91.516, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.92.517, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.93.518, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 9 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.493, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.94.519, i32 0, i32 0), i8* null, i32 128, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.95.520, i32 0, i32 0), i8* null, i32 132, i32 6, { double } zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96.521, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.97.522, i32 0, i32 0), i32 164, i32 1, %union.anon.2 { i64 12 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.98.523, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.99.524, i32 0, i32 0), i32 480, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 11, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.100.525, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.101.526, i32 0, i32 0), i32 484, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 11, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.102.527, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.103.528, i32 0, i32 0), i32 504, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.104.529, i32 0, i32 0), i8* null, i32 492, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.105.530, i32 0, i32 0), i8* null, i32 496, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106.531, i32 0, i32 0), i8* null, i32 144, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.107.532, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.108.533, i32 0, i32 0), i32 560, i32 4, { double } { double 5.000000e-01 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.109.534, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.110.535, i32 0, i32 0), i32 564, i32 4, { double } { double 5.000000e-01 }, double -1.000000e+00, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.111.536, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112.537, i32 0, i32 0), i32 568, i32 1, %union.anon.2 { i64 2 }, double -1.000000e+00, double 6.900000e+01, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113.538, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.114.539, i32 0, i32 0), i32 572, i32 1, %union.anon.2 { i64 31 }, double -1.000000e+00, double 1.024000e+03, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.115.540, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.116.541, i32 0, i32 0), i32 576, i32 1, %union.anon.2 { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.117.542, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.118.543, i32 0, i32 0), i32 192, i32 1, %union.anon.2 zeroinitializer, double -1.000000e+00, double 1.600000e+01, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.119.544, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.120.545, i32 0, i32 0), i32 196, i32 4, { double } { double 1.250000e+00 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121.546, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.122.547, i32 0, i32 0), i32 200, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.123.548, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.124.549, i32 0, i32 0), i32 204, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.125.550, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.126.551, i32 0, i32 0), i32 704, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.127.552, i32 0, i32 0), i8* null, i32 708, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.128.553, i32 0, i32 0), i8* null, i32 712, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.129.554, i32 0, i32 0), i8* null, i32 716, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.130.555, i32 0, i32 0), i8* null, i32 720, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.131.556, i32 0, i32 0), i8* null, i32 724, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.132.557, i32 0, i32 0), i8* null, i32 728, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.133.558, i32 0, i32 0), i8* null, i32 732, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.134.559, i32 0, i32 0), i8* null, i32 736, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.135.560, i32 0, i32 0), i8* null, i32 740, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.136.561, i32 0, i32 0), i8* null, i32 60, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.138.563, i32 0, i32 0), i32 760, i32 0, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.139.564, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.140.565, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.141.566, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142.567, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.143.568, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.144.569, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.145.570, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.146.571, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.147.572, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.148.573, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.149.574, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.150.575, i32 0, i32 0), i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.151.576, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 64 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.152.577, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.153.578, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 128 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.154.579, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.155.580, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.156.581, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 512 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.157.582, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.158.583, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1024 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.159.584, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 2048 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.160.585, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 4096 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.161.586, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.162.587, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8192 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.163.588, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.164.589, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 16384 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.562, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.165.590, i32 0, i32 0), i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.166.591, i32 0, i32 0), i32 208, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.167.592, i32 0, i32 0), i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str.168.593, i32 0, i32 0), i32 212, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.594, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.170.595, i32 0, i32 0), i32 764, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.594, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.171.596, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.172.597, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.594, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.594, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.173.598, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.594, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.174.599, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.594, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.175.600, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.176.601, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.594, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.177.602, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.178.603, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 -2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.594, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.179.604, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.180.605, i32 0, i32 0), i32 216, i32 4, { double } { double 1.250000e+00 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.606, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.182.607, i32 0, i32 0), i32 780, i32 0, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.606, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.183.608, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.184.609, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.606, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.185.610, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.186.611, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.606, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.187.612, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.188.613, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.606, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.189.614, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.190.615, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.606, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.191.616, i32 0, i32 0), i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.192.617, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.606, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.193.618, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.194.619, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 131072 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.606, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.195.620, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.196.621, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 262144 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.606, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.197.622, i32 0, i32 0), i8* null, i32 220, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.198.623, i32 0, i32 0), i8* null, i32 500, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.199.624, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.200.625, i32 0, i32 0), i32 224, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.201.626, i32 0, i32 0), i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.202.627, i32 0, i32 0), i32 580, i32 4, { double } zeroinitializer, double 0.000000e+00, double 9.900000e+01, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.203.628, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.204.629, i32 0, i32 0), i32 584, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.205.630, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.204.629, i32 0, i32 0), i32 588, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.206.631, i32 0, i32 0), i8* null, i32 596, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.207.632, i32 0, i32 0), i8* getelementptr inbounds ([356 x i8], [356 x i8]* @.str.208.633, i32 0, i32 0), i32 608, i32 5, { i8* } zeroinitializer, double -1.280000e+02, double 1.270000e+02, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.209.634, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.210.635, i32 0, i32 0), i32 616, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.211.636, i32 0, i32 0), i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.212.637, i32 0, i32 0), i32 620, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.213.638, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.214.639, i32 0, i32 0), i32 592, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.215.640, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.216.641, i32 0, i32 0), i32 624, i32 4, { double } { double 1.000000e+00 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.217.642, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.218.643, i32 0, i32 0), i32 228, i32 4, { double } { double -8.000000e-01 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.219.644, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.220.645, i32 0, i32 0), i32 232, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.221.646, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.222.647, i32 0, i32 0), i32 628, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.648, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.224.649, i32 0, i32 0), i32 872, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.648, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225.650, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.226.651, i32 0, i32 0), i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.648, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.227.652, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.228.653, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.648, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.229.654, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.230.655, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.648, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.231.656, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.648, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.232.657, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.648, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.233.658, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.234.659, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 6 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.648, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.235.660, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.236.661, i32 0, i32 0), i32 236, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.237.662, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.238.663, i32 0, i32 0), i32 240, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.239.664, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.240.665, i32 0, i32 0), i32 244, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.241.666, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.242.667, i32 0, i32 0), i32 248, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.243.668, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.244.669, i32 0, i32 0), i32 252, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.246.671, i32 0, i32 0), i32 876, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225.650, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.229.654, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.247.672, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.248.673, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.249.674, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.250.675, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.251.676, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 7 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.232.657, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.252.677, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 9 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.253.678, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 10 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.254.679, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.255.680, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 17 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.256.681, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 22 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.257.682, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 23 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.258.683, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 11 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.259.684, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 12 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.260.685, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 13 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.261.686, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 14 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.262.687, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.263.688, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 20 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.670, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.264.689, i32 0, i32 0), i8* null, i32 256, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.265.690, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.266.691, i32 0, i32 0), i32 768, i32 0, %union.anon.2 { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.265.690, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.267.692, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.268.693, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.265.690, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.269.694, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.270.695, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.265.690, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.271.696, i32 0, i32 0), i8* null, i32 884, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.697, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.273.698, i32 0, i32 0), i32 260, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.697, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.274.699, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.697, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.275.700, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.697, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.276.701, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.697, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.277.702, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.278.703, i32 0, i32 0), i32 272, i32 6, { double } zeroinitializer, double 0.000000e+00, double 1.000000e+01, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.280.705, i32 0, i32 0), i32 772, i32 0, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.281.706, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.282.707, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.283.708, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.284.709, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.185.610, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.285.710, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.286.711, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.287.712, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.288.713, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.289.714, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.290.715, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.291.716, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 64 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.292.717, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 128 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.293.718, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.294.719, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 512 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.295.720, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.296.721, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1024 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.297.722, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.298.723, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2048 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.299.724, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 4096 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.300.725, i32 0, i32 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.301.726, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8192 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.302.727, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.303.728, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 16384 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.304.729, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.305.730, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.306.731, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.307.732, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.704, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.308.733, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.309.734, i32 0, i32 0), i32 776, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310.735, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.311.736, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.312.737, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310.735, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.117.542, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.313.738, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310.735, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.314.739, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.315.740, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310.735, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.316.741, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.317.742, i32 0, i32 0), i32 280, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.319.744, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.320.745, i32 0, i32 0), i32 284, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.321.746, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.322.747, i32 0, i32 0), i32 288, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.323.748, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.324.749, i32 0, i32 0), i32 292, i32 1, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.325.750, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.326.751, i32 0, i32 0), i32 296, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.327.752, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.328.753, i32 0, i32 0), i32 300, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.329.754, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.330.755, i32 0, i32 0), i32 304, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.331.756, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.332.757, i32 0, i32 0), i32 308, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.333.758, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.334.759, i32 0, i32 0), i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.335.760, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.336.761, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.337.762, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.338.763, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.648, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.339.764, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33.458, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.340.765, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.341.766, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.342.767, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.343.768, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.344.769, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 6 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.70.495, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.345.770, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 7 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.346.771, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.347.772, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.348.773, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.349.774, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 9 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.350.775, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.351.776, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 10 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.352.777, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 13 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.353.778, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.354.779, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.355.780, i32 0, i32 0), i32 312, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.356.781, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.357.782, i32 0, i32 0), i32 316, i32 1, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.358.783, i32 0, i32 0), i8* null, i32 320, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.359, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.360, i32 0, i32 0), i32 324, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.361, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.362, i32 0, i32 0), i32 328, i32 1, %union.anon.2 { i64 999999 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.363, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.364, i32 0, i32 0), i32 332, i32 1, %union.anon.2 { i64 999999 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.365, i32 0, i32 0), i8* null, i32 336, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.366, i32 0, i32 0), i8* null, i32 104, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367, i32 0, i32 0), i8* null, i32 644, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.368, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.369, i32 0, i32 0), i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.100.525, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.370, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.371, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.372.784, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.373, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.374, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.375, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.376, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.377, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.378, i32 0, i32 0), i32 648, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.379, i32 0, i32 0), i8* null, i32 340, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.380, i32 0, i32 0), i8* null, i32 344, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.382, i32 0, i32 0), i32 348, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.247.672, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.383, i32 0, i32 0), i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.384.785, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.385, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.343.768, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.386, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.387, i32 0, i32 0), i8* null, i32 64, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.388, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.389, i32 0, i32 0), i32 368, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.390, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.391, i32 0, i32 0), i32 652, i32 1, %union.anon.2 { i64 236 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.392, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.393, i32 0, i32 0), i32 656, i32 1, %union.anon.2 { i64 3658 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.394, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.395, i32 0, i32 0), i32 372, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.396, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.397, i32 0, i32 0), i32 640, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.398, i32 0, i32 0), i8* null, i32 376, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.482, i32 0, i32 0), i8* null, i32 116, i32 0, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x41EFFFFFFFE00000, i32 27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.482, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.399, i32 0, i32 0), i8* null, i32 980, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.400, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.401, i32 0, i32 0), i32 380, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.402, i32 0, i32 0), i8* null, i32 904, i32 1, %union.anon.2 { i64 1 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.402, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225.650, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.403, i32 0, i32 0), i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.402, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.404, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.405, i32 0, i32 0), i32 384, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.406, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.407, i32 0, i32 0), i32 388, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.408, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.409, i32 0, i32 0), i32 392, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.410, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.411, i32 0, i32 0), i32 944, i32 1, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.412, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.413, i32 0, i32 0), i32 396, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.414, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.415, i32 0, i32 0), i32 400, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0), i8* null, i32 948, i32 1, %union.anon.2 { i64 -99 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.417, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 -99 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.418, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.419, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.420, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.421, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.422, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.423, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 28 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.424.786, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 22 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.425, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 38 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.426, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 20 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.427, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 30 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.428, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 40 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.429.787, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 50 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.430, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 60 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.528, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.431, i32 0, i32 0), i8* null, i32 952, i32 1, %union.anon.2 { i64 -99 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.431, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.417, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 -99 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.431, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.432, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.433, i32 0, i32 0), i32 892, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 26, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.434, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.435, i32 0, i32 0), i32 660, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.436, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.437, i32 0, i32 0), i32 664, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.438, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.439, i32 0, i32 0), i32 668, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.440, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.441, i32 0, i32 0), i32 672, i32 1, %union.anon.2 { i64 13 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.743, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.442, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.443, i32 0, i32 0), i32 404, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.444, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.445, i32 0, i32 0), i32 408, i32 1, %union.anon.2 { i64 236 }, double 1.000000e+00, double 3.276700e+04, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.446, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.447, i32 0, i32 0), i32 412, i32 1, %union.anon.2 { i64 3658 }, double 1.000000e+00, double 3.276700e+04, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.448, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.449, i32 0, i32 0), i32 416, i32 1, %union.anon.2 { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.450, i32 0, i32 0), i8* null, i32 956, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.529, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.452, i32 0, i32 0), i8* null, i32 960, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.529, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.453, i32 0, i32 0), i8* null, i32 964, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.529, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.454, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 -16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.529, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.455, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.529, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.456, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.529, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.457, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.529, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.458, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.529, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.459, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 48 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.529, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.460, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.461, i32 0, i32 0), i32 420, i32 1, %union.anon.2 { i64 1 }, double 0.000000e+00, double 4.000000e+00, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.462, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.463, i32 0, i32 0), i32 424, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 1.000000e+01, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.464, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.465, i32 0, i32 0), i32 428, i32 1, %union.anon.2 { i64 25 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.466, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.467, i32 0, i32 0), i32 432, i32 1, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.468, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.469, i32 0, i32 0), i32 436, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.470, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.471, i32 0, i32 0), i32 676, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.472, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.49.474, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 16384 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.482, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.473, i32 0, i32 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.474, i32 0, i32 0), i32 440, i32 1, %union.anon.2 { i64 6 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.475, i32 0, i32 0), i8* null, i32 444, i32 1, %union.anon.2 { i64 256 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.476, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.477, i32 0, i32 0), i32 448, i32 1, %union.anon.2 { i64 40 }, double 1.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.478, i32 0, i32 0), i8* null, i32 108, i32 1, %union.anon.2 { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.479, i32 0, i32 0), i8* null, i32 680, i32 1, %union.anon.2 { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.480, i32 0, i32 0), i8* null, i32 684, i32 1, %union.anon.2 { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.481, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.482, i32 0, i32 0), i32 688, i32 2, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x43E0000000000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.483, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.484, i32 0, i32 0), i32 508, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 10, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.485, i32 0, i32 0), i8* null, i32 888, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.486, i32 0, i32 0), i8* null, i32 512, i32 2, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x43E0000000000000, i32 11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.486, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.487, i32 0, i32 0), i8* null, i32 520, i32 2, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x43E0000000000000, i32 10, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.487, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.488, i32 0, i32 0), i8* null, i32 632, i32 4, { double } zeroinitializer, double 0.000000e+00, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.489, i32 0, i32 0), i8* null, i32 636, i32 4, { double } { double 3.000000e+00 }, double 0.000000e+00, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.490, i32 0, i32 0), i8* null, i32 140, i32 1, %union.anon.2 { i64 1 }, double 1.000000e+00, double 0x41DFFFFFFFC00000, i32 27, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.491, i32 0, i32 0), i8* null, i32 452, i32 1, %union.anon.2 { i64 2 }, double 1.000000e+00, double 8.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.492, i32 0, i32 0), i8* null, i32 456, i32 1, %union.anon.2 { i64 2 }, double 1.000000e+00, double 7.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.493, i32 0, i32 0), i8* null, i32 460, i32 1, %union.anon.2 { i64 2 }, double 1.000000e+00, double 8.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.494, i32 0, i32 0), i8* null, i32 464, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 2.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.495, i32 0, i32 0), i8* null, i32 468, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 6.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.496, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.497, i32 0, i32 0), i32 8, i32 1, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.498, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.499, i32 0, i32 0), i32 472, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.500, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.501, i32 0, i32 0), i32 908, i32 0, %union.anon.2 { i64 3 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.500, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.502, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.500, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.503, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.500, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.505, i32 0, i32 0), i32 528, i32 1, %union.anon.2 zeroinitializer, double 0.000000e+00, double 8.000000e+00, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.506, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.507, i32 0, i32 0), i32 0, i32 128, %union.anon.2 zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.508, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.509, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.510, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.511, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.512, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.513, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.514, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.515, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.516, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.517, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.518, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.519, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 6 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.520, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.521, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 7 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.522, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.523, i32 0, i32 0), i32 0, i32 128, %union.anon.2 { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.524, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.525, i32 0, i32 0), i32 532, i32 1397116244, %union.anon.2 { i64 -1 }, double -1.000000e+00, double 9.000000e+00, i32 10, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.524, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.526, i32 0, i32 0), i8* null, i32 1000, i32 6, { double } zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption zeroinitializer }>, align 16
@.str.6.431 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.7.432 = private unnamed_addr constant [24 x i8] c"set bitrate (in bits/s)\00", align 1
@.str.8.433 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.9.434 = private unnamed_addr constant [3 x i8] c"bt\00", align 1
@.str.10.435 = private unnamed_addr constant [276 x i8] c"Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.\00", align 1
@.str.11.436 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@.str.12.437 = private unnamed_addr constant [4 x i8] c"mv4\00", align 1
@.str.13.438 = private unnamed_addr constant [48 x i8] c"use four motion vectors per macroblock (MPEG-4)\00", align 1
@.str.14.439 = private unnamed_addr constant [5 x i8] c"qpel\00", align 1
@.str.15.440 = private unnamed_addr constant [32 x i8] c"use 1/4-pel motion compensation\00", align 1
@.str.16.441 = private unnamed_addr constant [5 x i8] c"loop\00", align 1
@.str.17.442 = private unnamed_addr constant [16 x i8] c"use loop filter\00", align 1
@.str.18.443 = private unnamed_addr constant [7 x i8] c"qscale\00", align 1
@.str.19.444 = private unnamed_addr constant [17 x i8] c"use fixed qscale\00", align 1
@.str.20.445 = private unnamed_addr constant [4 x i8] c"gmc\00", align 1
@.str.21.446 = private unnamed_addr constant [8 x i8] c"use gmc\00", align 1
@.str.22.447 = private unnamed_addr constant [4 x i8] c"mv0\00", align 1
@.str.23.448 = private unnamed_addr constant [30 x i8] c"always try a mb with mv=<0,0>\00", align 1
@.str.24.449 = private unnamed_addr constant [16 x i8] c"input_preserved\00", align 1
@.str.25.450 = private unnamed_addr constant [6 x i8] c"pass1\00", align 1
@.str.26.451 = private unnamed_addr constant [52 x i8] c"use internal 2-pass ratecontrol in first  pass mode\00", align 1
@.str.27.452 = private unnamed_addr constant [6 x i8] c"pass2\00", align 1
@.str.28.453 = private unnamed_addr constant [52 x i8] c"use internal 2-pass ratecontrol in second pass mode\00", align 1
@.str.30.455 = private unnamed_addr constant [29 x i8] c"only decode/encode grayscale\00", align 1
@.str.31.456 = private unnamed_addr constant [9 x i8] c"emu_edge\00", align 1
@.str.32.457 = private unnamed_addr constant [18 x i8] c"do not draw edges\00", align 1
@.str.33.458 = private unnamed_addr constant [5 x i8] c"psnr\00", align 1
@.str.34.459 = private unnamed_addr constant [47 x i8] c"error[?] variables will be set during encoding\00", align 1
@.str.35.460 = private unnamed_addr constant [10 x i8] c"truncated\00", align 1
@.str.36.461 = private unnamed_addr constant [4 x i8] c"naq\00", align 1
@.str.37.462 = private unnamed_addr constant [32 x i8] c"normalize adaptive quantization\00", align 1
@.str.38.463 = private unnamed_addr constant [6 x i8] c"ildct\00", align 1
@.str.39.464 = private unnamed_addr constant [19 x i8] c"use interlaced DCT\00", align 1
@.str.40.465 = private unnamed_addr constant [10 x i8] c"low_delay\00", align 1
@.str.41.466 = private unnamed_addr constant [16 x i8] c"force low delay\00", align 1
@.str.42.467 = private unnamed_addr constant [14 x i8] c"global_header\00", align 1
@.str.43.468 = private unnamed_addr constant [60 x i8] c"place global headers in extradata instead of every keyframe\00", align 1
@.str.44.469 = private unnamed_addr constant [9 x i8] c"bitexact\00", align 1
@.str.45.470 = private unnamed_addr constant [44 x i8] c"use only bitexact functions (except (I)DCT)\00", align 1
@.str.46.471 = private unnamed_addr constant [4 x i8] c"aic\00", align 1
@.str.47.472 = private unnamed_addr constant [51 x i8] c"H.263 advanced intra coding / MPEG-4 AC prediction\00", align 1
@.str.48.473 = private unnamed_addr constant [4 x i8] c"cbp\00", align 1
@.str.49.474 = private unnamed_addr constant [50 x i8] c"Deprecated, use mpegvideo private options instead\00", align 1
@.str.50.475 = private unnamed_addr constant [5 x i8] c"qprd\00", align 1
@.str.51.476 = private unnamed_addr constant [5 x i8] c"ilme\00", align 1
@.str.52.477 = private unnamed_addr constant [29 x i8] c"interlaced motion estimation\00", align 1
@.str.53.478 = private unnamed_addr constant [5 x i8] c"cgop\00", align 1
@.str.54.479 = private unnamed_addr constant [11 x i8] c"closed GOP\00", align 1
@.str.55.480 = private unnamed_addr constant [5 x i8] c"fast\00", align 1
@.str.56.481 = private unnamed_addr constant [40 x i8] c"allow non-spec-compliant speedup tricks\00", align 1
@.str.57.482 = private unnamed_addr constant [7 x i8] c"flags2\00", align 1
@.str.58.483 = private unnamed_addr constant [5 x i8] c"sgop\00", align 1
@.str.59.484 = private unnamed_addr constant [6 x i8] c"noout\00", align 1
@.str.60.485 = private unnamed_addr constant [24 x i8] c"skip bitstream encoding\00", align 1
@.str.61.486 = private unnamed_addr constant [13 x i8] c"local_header\00", align 1
@.str.62.487 = private unnamed_addr constant [63 x i8] c"place global headers at every keyframe instead of in extradata\00", align 1
@.str.63.488 = private unnamed_addr constant [7 x i8] c"chunks\00", align 1
@.str.64.489 = private unnamed_addr constant [47 x i8] c"Frame data might be split into multiple chunks\00", align 1
@.str.65.490 = private unnamed_addr constant [8 x i8] c"showall\00", align 1
@.str.66.491 = private unnamed_addr constant [42 x i8] c"Show all frames before the first keyframe\00", align 1
@.str.67.492 = private unnamed_addr constant [7 x i8] c"sub_id\00", align 1
@.str.68.493 = private unnamed_addr constant [10 x i8] c"me_method\00", align 1
@.str.69.494 = private unnamed_addr constant [29 x i8] c"set motion estimation method\00", align 1
@.str.70.495 = private unnamed_addr constant [5 x i8] c"zero\00", align 1
@.str.71.496 = private unnamed_addr constant [33 x i8] c"zero motion estimation (fastest)\00", align 1
@.str.72.497 = private unnamed_addr constant [5 x i8] c"full\00", align 1
@.str.73.498 = private unnamed_addr constant [33 x i8] c"full motion estimation (slowest)\00", align 1
@.str.74.499 = private unnamed_addr constant [5 x i8] c"epzs\00", align 1
@.str.75.500 = private unnamed_addr constant [33 x i8] c"EPZS motion estimation (default)\00", align 1
@.str.76.501 = private unnamed_addr constant [4 x i8] c"esa\00", align 1
@.str.77.502 = private unnamed_addr constant [39 x i8] c"esa motion estimation (alias for full)\00", align 1
@.str.78.503 = private unnamed_addr constant [5 x i8] c"tesa\00", align 1
@.str.79.504 = private unnamed_addr constant [23 x i8] c"tesa motion estimation\00", align 1
@.str.80.505 = private unnamed_addr constant [4 x i8] c"dia\00", align 1
@.str.81.506 = private unnamed_addr constant [43 x i8] c"diamond motion estimation (alias for EPZS)\00", align 1
@.str.82.507 = private unnamed_addr constant [4 x i8] c"log\00", align 1
@.str.83.508 = private unnamed_addr constant [22 x i8] c"log motion estimation\00", align 1
@.str.84.509 = private unnamed_addr constant [6 x i8] c"phods\00", align 1
@.str.85.510 = private unnamed_addr constant [24 x i8] c"phods motion estimation\00", align 1
@.str.86.511 = private unnamed_addr constant [3 x i8] c"x1\00", align 1
@.str.87.512 = private unnamed_addr constant [21 x i8] c"X1 motion estimation\00", align 1
@.str.88.513 = private unnamed_addr constant [4 x i8] c"hex\00", align 1
@.str.89.514 = private unnamed_addr constant [22 x i8] c"hex motion estimation\00", align 1
@.str.90.515 = private unnamed_addr constant [4 x i8] c"umh\00", align 1
@.str.91.516 = private unnamed_addr constant [22 x i8] c"umh motion estimation\00", align 1
@.str.92.517 = private unnamed_addr constant [5 x i8] c"iter\00", align 1
@.str.93.518 = private unnamed_addr constant [23 x i8] c"iter motion estimation\00", align 1
@.str.94.519 = private unnamed_addr constant [15 x i8] c"extradata_size\00", align 1
@.str.95.520 = private unnamed_addr constant [10 x i8] c"time_base\00", align 1
@.str.96.521 = private unnamed_addr constant [2 x i8] c"g\00", align 1
@.str.97.522 = private unnamed_addr constant [36 x i8] c"set the group of picture (GOP) size\00", align 1
@.str.98.523 = private unnamed_addr constant [3 x i8] c"ar\00", align 1
@.str.99.524 = private unnamed_addr constant [32 x i8] c"set audio sampling rate (in Hz)\00", align 1
@.str.100.525 = private unnamed_addr constant [3 x i8] c"ac\00", align 1
@.str.101.526 = private unnamed_addr constant [29 x i8] c"set number of audio channels\00", align 1
@.str.102.527 = private unnamed_addr constant [7 x i8] c"cutoff\00", align 1
@.str.103.528 = private unnamed_addr constant [21 x i8] c"set cutoff bandwidth\00", align 1
@.str.104.529 = private unnamed_addr constant [11 x i8] c"frame_size\00", align 1
@.str.105.530 = private unnamed_addr constant [13 x i8] c"frame_number\00", align 1
@.str.106.531 = private unnamed_addr constant [6 x i8] c"delay\00", align 1
@.str.107.532 = private unnamed_addr constant [6 x i8] c"qcomp\00", align 1
@.str.108.533 = private unnamed_addr constant [120 x i8] c"video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0\00", align 1
@.str.109.534 = private unnamed_addr constant [6 x i8] c"qblur\00", align 1
@.str.110.535 = private unnamed_addr constant [33 x i8] c"video quantizer scale blur (VBR)\00", align 1
@.str.111.536 = private unnamed_addr constant [5 x i8] c"qmin\00", align 1
@.str.112.537 = private unnamed_addr constant [36 x i8] c"minimum video quantizer scale (VBR)\00", align 1
@.str.113.538 = private unnamed_addr constant [5 x i8] c"qmax\00", align 1
@.str.114.539 = private unnamed_addr constant [36 x i8] c"maximum video quantizer scale (VBR)\00", align 1
@.str.115.540 = private unnamed_addr constant [6 x i8] c"qdiff\00", align 1
@.str.116.541 = private unnamed_addr constant [54 x i8] c"maximum difference between the quantizer scales (VBR)\00", align 1
@.str.117.542 = private unnamed_addr constant [3 x i8] c"bf\00", align 1
@.str.118.543 = private unnamed_addr constant [22 x i8] c"use 'frames' B frames\00", align 1
@.str.119.544 = private unnamed_addr constant [10 x i8] c"b_qfactor\00", align 1
@.str.120.545 = private unnamed_addr constant [34 x i8] c"QP factor between P- and B-frames\00", align 1
@.str.121.546 = private unnamed_addr constant [12 x i8] c"rc_strategy\00", align 1
@.str.122.547 = private unnamed_addr constant [19 x i8] c"ratecontrol method\00", align 1
@.str.123.548 = private unnamed_addr constant [11 x i8] c"b_strategy\00", align 1
@.str.124.549 = private unnamed_addr constant [40 x i8] c"strategy to choose between I/P/B-frames\00", align 1
@.str.125.550 = private unnamed_addr constant [3 x i8] c"ps\00", align 1
@.str.126.551 = private unnamed_addr constant [26 x i8] c"RTP payload size in bytes\00", align 1
@.str.127.552 = private unnamed_addr constant [8 x i8] c"mv_bits\00", align 1
@.str.128.553 = private unnamed_addr constant [12 x i8] c"header_bits\00", align 1
@.str.129.554 = private unnamed_addr constant [11 x i8] c"i_tex_bits\00", align 1
@.str.130.555 = private unnamed_addr constant [11 x i8] c"p_tex_bits\00", align 1
@.str.131.556 = private unnamed_addr constant [8 x i8] c"i_count\00", align 1
@.str.132.557 = private unnamed_addr constant [8 x i8] c"p_count\00", align 1
@.str.133.558 = private unnamed_addr constant [11 x i8] c"skip_count\00", align 1
@.str.134.559 = private unnamed_addr constant [10 x i8] c"misc_bits\00", align 1
@.str.135.560 = private unnamed_addr constant [11 x i8] c"frame_bits\00", align 1
@.str.136.561 = private unnamed_addr constant [10 x i8] c"codec_tag\00", align 1
@.str.137.562 = private unnamed_addr constant [4 x i8] c"bug\00", align 1
@.str.138.563 = private unnamed_addr constant [42 x i8] c"work around not autodetected encoder bugs\00", align 1
@.str.139.564 = private unnamed_addr constant [11 x i8] c"autodetect\00", align 1
@.str.140.565 = private unnamed_addr constant [12 x i8] c"old_msmpeg4\00", align 1
@.str.141.566 = private unnamed_addr constant [59 x i8] c"some old lavc-generated MSMPEG4v3 files (no autodetection)\00", align 1
@.str.142.567 = private unnamed_addr constant [11 x i8] c"xvid_ilace\00", align 1
@.str.143.568 = private unnamed_addr constant [54 x i8] c"Xvid interlacing bug (autodetected if FOURCC == XVIX)\00", align 1
@.str.144.569 = private unnamed_addr constant [5 x i8] c"ump4\00", align 1
@.str.145.570 = private unnamed_addr constant [33 x i8] c"(autodetected if FOURCC == UMP4)\00", align 1
@.str.146.571 = private unnamed_addr constant [11 x i8] c"no_padding\00", align 1
@.str.147.572 = private unnamed_addr constant [27 x i8] c"padding bug (autodetected)\00", align 1
@.str.149.574 = private unnamed_addr constant [7 x i8] c"ac_vlc\00", align 1
@.str.150.575 = private unnamed_addr constant [42 x i8] c"illegal VLC bug (autodetected per FOURCC)\00", align 1
@.str.151.576 = private unnamed_addr constant [12 x i8] c"qpel_chroma\00", align 1
@.str.152.577 = private unnamed_addr constant [9 x i8] c"std_qpel\00", align 1
@.str.153.578 = private unnamed_addr constant [52 x i8] c"old standard qpel (autodetected per FOURCC/version)\00", align 1
@.str.154.579 = private unnamed_addr constant [13 x i8] c"qpel_chroma2\00", align 1
@.str.155.580 = private unnamed_addr constant [17 x i8] c"direct_blocksize\00", align 1
@.str.156.581 = private unnamed_addr constant [60 x i8] c"direct-qpel-blocksize bug (autodetected per FOURCC/version)\00", align 1
@.str.157.582 = private unnamed_addr constant [5 x i8] c"edge\00", align 1
@.str.158.583 = private unnamed_addr constant [51 x i8] c"edge padding bug (autodetected per FOURCC/version)\00", align 1
@.str.159.584 = private unnamed_addr constant [12 x i8] c"hpel_chroma\00", align 1
@.str.160.585 = private unnamed_addr constant [8 x i8] c"dc_clip\00", align 1
@.str.161.586 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.162.587 = private unnamed_addr constant [56 x i8] c"work around various bugs in Microsoft's broken decoders\00", align 1
@.str.163.588 = private unnamed_addr constant [6 x i8] c"trunc\00", align 1
@.str.164.589 = private unnamed_addr constant [17 x i8] c"truncated frames\00", align 1
@.str.165.590 = private unnamed_addr constant [6 x i8] c"lelim\00", align 1
@.str.166.591 = private unnamed_addr constant [102 x i8] c"single coefficient elimination threshold for luminance (negative values also consider DC coefficient)\00", align 1
@.str.167.592 = private unnamed_addr constant [6 x i8] c"celim\00", align 1
@.str.168.593 = private unnamed_addr constant [104 x i8] c"single coefficient elimination threshold for chrominance (negative values also consider DC coefficient)\00", align 1
@.str.169.594 = private unnamed_addr constant [7 x i8] c"strict\00", align 1
@.str.170.595 = private unnamed_addr constant [37 x i8] c"how strictly to follow the standards\00", align 1
@.str.171.596 = private unnamed_addr constant [5 x i8] c"very\00", align 1
@.str.172.597 = private unnamed_addr constant [82 x i8] c"strictly conform to a older more strict version of the spec or reference software\00", align 1
@.str.173.598 = private unnamed_addr constant [79 x i8] c"strictly conform to all the things in the spec no matter what the consequences\00", align 1
@.str.174.599 = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@.str.175.600 = private unnamed_addr constant [11 x i8] c"unofficial\00", align 1
@.str.176.601 = private unnamed_addr constant [28 x i8] c"allow unofficial extensions\00", align 1
@.str.177.602 = private unnamed_addr constant [13 x i8] c"experimental\00", align 1
@.str.178.603 = private unnamed_addr constant [43 x i8] c"allow non-standardized experimental things\00", align 1
@.str.179.604 = private unnamed_addr constant [10 x i8] c"b_qoffset\00", align 1
@.str.180.605 = private unnamed_addr constant [34 x i8] c"QP offset between P- and B-frames\00", align 1
@.str.181.606 = private unnamed_addr constant [11 x i8] c"err_detect\00", align 1
@.str.182.607 = private unnamed_addr constant [26 x i8] c"set error detection flags\00", align 1
@.str.183.608 = private unnamed_addr constant [9 x i8] c"crccheck\00", align 1
@.str.184.609 = private unnamed_addr constant [21 x i8] c"verify embedded CRCs\00", align 1
@.str.185.610 = private unnamed_addr constant [10 x i8] c"bitstream\00", align 1
@.str.186.611 = private unnamed_addr constant [42 x i8] c"detect bitstream specification deviations\00", align 1
@.str.187.612 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.188.613 = private unnamed_addr constant [33 x i8] c"detect improper bitstream length\00", align 1
@.str.189.614 = private unnamed_addr constant [8 x i8] c"explode\00", align 1
@.str.190.615 = private unnamed_addr constant [40 x i8] c"abort decoding on minor error detection\00", align 1
@.str.191.616 = private unnamed_addr constant [8 x i8] c"careful\00", align 1
@.str.192.617 = private unnamed_addr constant [83 x i8] c"consider things that violate the spec and have not been seen in the wild as errors\00", align 1
@.str.193.618 = private unnamed_addr constant [10 x i8] c"compliant\00", align 1
@.str.194.619 = private unnamed_addr constant [45 x i8] c"consider all spec non compliancies as errors\00", align 1
@.str.195.620 = private unnamed_addr constant [11 x i8] c"aggressive\00", align 1
@.str.196.621 = private unnamed_addr constant [62 x i8] c"consider things that a sane encoder should not do as an error\00", align 1
@.str.197.622 = private unnamed_addr constant [13 x i8] c"has_b_frames\00", align 1
@.str.198.623 = private unnamed_addr constant [12 x i8] c"block_align\00", align 1
@.str.199.624 = private unnamed_addr constant [11 x i8] c"mpeg_quant\00", align 1
@.str.200.625 = private unnamed_addr constant [37 x i8] c"use MPEG quantizers instead of H.263\00", align 1
@.str.201.626 = private unnamed_addr constant [8 x i8] c"qsquish\00", align 1
@.str.202.627 = private unnamed_addr constant [88 x i8] c"how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)\00", align 1
@.str.203.628 = private unnamed_addr constant [12 x i8] c"rc_qmod_amp\00", align 1
@.str.204.629 = private unnamed_addr constant [34 x i8] c"experimental quantizer modulation\00", align 1
@.str.205.630 = private unnamed_addr constant [13 x i8] c"rc_qmod_freq\00", align 1
@.str.206.631 = private unnamed_addr constant [18 x i8] c"rc_override_count\00", align 1
@.str.207.632 = private unnamed_addr constant [6 x i8] c"rc_eq\00", align 1
@.str.208.633 = private unnamed_addr constant [356 x i8] c"Set rate control equation. When computing the expression, besides the standard functions defined in the section 'Expression Evaluation', the following functions are available: bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.\00", align 1
@.str.209.634 = private unnamed_addr constant [8 x i8] c"maxrate\00", align 1
@.str.210.635 = private unnamed_addr constant [71 x i8] c"Set maximum bitrate tolerance (in bits/s). Requires bufsize to be set.\00", align 1
@.str.211.636 = private unnamed_addr constant [8 x i8] c"minrate\00", align 1
@.str.212.637 = private unnamed_addr constant [114 x i8] c"Set minimum bitrate tolerance (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.\00", align 1
@.str.213.638 = private unnamed_addr constant [8 x i8] c"bufsize\00", align 1
@.str.214.639 = private unnamed_addr constant [38 x i8] c"set ratecontrol buffer size (in bits)\00", align 1
@.str.215.640 = private unnamed_addr constant [20 x i8] c"rc_buf_aggressivity\00", align 1
@.str.216.641 = private unnamed_addr constant [18 x i8] c"currently useless\00", align 1
@.str.217.642 = private unnamed_addr constant [10 x i8] c"i_qfactor\00", align 1
@.str.218.643 = private unnamed_addr constant [34 x i8] c"QP factor between P- and I-frames\00", align 1
@.str.219.644 = private unnamed_addr constant [10 x i8] c"i_qoffset\00", align 1
@.str.220.645 = private unnamed_addr constant [34 x i8] c"QP offset between P- and I-frames\00", align 1
@.str.221.646 = private unnamed_addr constant [13 x i8] c"rc_init_cplx\00", align 1
@.str.222.647 = private unnamed_addr constant [39 x i8] c"initial complexity for 1-pass encoding\00", align 1
@.str.223.648 = private unnamed_addr constant [4 x i8] c"dct\00", align 1
@.str.224.649 = private unnamed_addr constant [14 x i8] c"DCT algorithm\00", align 1
@.str.225.650 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.226.651 = private unnamed_addr constant [32 x i8] c"autoselect a good one (default)\00", align 1
@.str.227.652 = private unnamed_addr constant [8 x i8] c"fastint\00", align 1
@.str.228.653 = private unnamed_addr constant [13 x i8] c"fast integer\00", align 1
@.str.229.654 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.230.655 = private unnamed_addr constant [17 x i8] c"accurate integer\00", align 1
@.str.231.656 = private unnamed_addr constant [4 x i8] c"mmx\00", align 1
@.str.232.657 = private unnamed_addr constant [8 x i8] c"altivec\00", align 1
@.str.233.658 = private unnamed_addr constant [5 x i8] c"faan\00", align 1
@.str.234.659 = private unnamed_addr constant [23 x i8] c"floating point AAN DCT\00", align 1
@.str.235.660 = private unnamed_addr constant [10 x i8] c"lumi_mask\00", align 1
@.str.236.661 = private unnamed_addr constant [50 x i8] c"compresses bright areas stronger than medium ones\00", align 1
@.str.237.662 = private unnamed_addr constant [11 x i8] c"tcplx_mask\00", align 1
@.str.238.663 = private unnamed_addr constant [28 x i8] c"temporal complexity masking\00", align 1
@.str.239.664 = private unnamed_addr constant [11 x i8] c"scplx_mask\00", align 1
@.str.240.665 = private unnamed_addr constant [27 x i8] c"spatial complexity masking\00", align 1
@.str.241.666 = private unnamed_addr constant [7 x i8] c"p_mask\00", align 1
@.str.242.667 = private unnamed_addr constant [14 x i8] c"inter masking\00", align 1
@.str.243.668 = private unnamed_addr constant [10 x i8] c"dark_mask\00", align 1
@.str.244.669 = private unnamed_addr constant [48 x i8] c"compresses dark areas stronger than medium ones\00", align 1
@.str.245.670 = private unnamed_addr constant [5 x i8] c"idct\00", align 1
@.str.246.671 = private unnamed_addr constant [27 x i8] c"select IDCT implementation\00", align 1
@.str.247.672 = private unnamed_addr constant [7 x i8] c"simple\00", align 1
@.str.248.673 = private unnamed_addr constant [10 x i8] c"simplemmx\00", align 1
@.str.249.674 = private unnamed_addr constant [12 x i8] c"libmpeg2mmx\00", align 1
@.str.250.675 = private unnamed_addr constant [4 x i8] c"mmi\00", align 1
@.str.251.676 = private unnamed_addr constant [4 x i8] c"arm\00", align 1
@.str.252.677 = private unnamed_addr constant [4 x i8] c"sh4\00", align 1
@.str.253.678 = private unnamed_addr constant [10 x i8] c"simplearm\00", align 1
@.str.254.679 = private unnamed_addr constant [14 x i8] c"simplearmv5te\00", align 1
@.str.255.680 = private unnamed_addr constant [12 x i8] c"simplearmv6\00", align 1
@.str.256.681 = private unnamed_addr constant [11 x i8] c"simpleneon\00", align 1
@.str.257.682 = private unnamed_addr constant [12 x i8] c"simplealpha\00", align 1
@.str.260.685 = private unnamed_addr constant [4 x i8] c"ipp\00", align 1
@.str.261.686 = private unnamed_addr constant [8 x i8] c"xvidmmx\00", align 1
@.str.262.687 = private unnamed_addr constant [6 x i8] c"faani\00", align 1
@.str.263.688 = private unnamed_addr constant [24 x i8] c"floating point AAN IDCT\00", align 1
@.str.264.689 = private unnamed_addr constant [12 x i8] c"slice_count\00", align 1
@.str.265.690 = private unnamed_addr constant [3 x i8] c"ec\00", align 1
@.str.266.691 = private unnamed_addr constant [31 x i8] c"set error concealment strategy\00", align 1
@.str.267.692 = private unnamed_addr constant [10 x i8] c"guess_mvs\00", align 1
@.str.268.693 = private unnamed_addr constant [43 x i8] c"iterative motion vector (MV) search (slow)\00", align 1
@.str.269.694 = private unnamed_addr constant [8 x i8] c"deblock\00", align 1
@.str.270.695 = private unnamed_addr constant [42 x i8] c"use strong deblock filter for damaged MBs\00", align 1
@.str.271.696 = private unnamed_addr constant [22 x i8] c"bits_per_coded_sample\00", align 1
@.str.272.697 = private unnamed_addr constant [5 x i8] c"pred\00", align 1
@.str.273.698 = private unnamed_addr constant [18 x i8] c"prediction method\00", align 1
@.str.274.699 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@.str.275.700 = private unnamed_addr constant [6 x i8] c"plane\00", align 1
@.str.276.701 = private unnamed_addr constant [7 x i8] c"median\00", align 1
@.str.277.702 = private unnamed_addr constant [7 x i8] c"aspect\00", align 1
@.str.278.703 = private unnamed_addr constant [20 x i8] c"sample aspect ratio\00", align 1
@.str.279.704 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.280.705 = private unnamed_addr constant [26 x i8] c"print specific debug info\00", align 1
@.str.281.706 = private unnamed_addr constant [5 x i8] c"pict\00", align 1
@.str.282.707 = private unnamed_addr constant [13 x i8] c"picture info\00", align 1
@.str.283.708 = private unnamed_addr constant [3 x i8] c"rc\00", align 1
@.str.284.709 = private unnamed_addr constant [13 x i8] c"rate control\00", align 1
@.str.285.710 = private unnamed_addr constant [8 x i8] c"mb_type\00", align 1
@.str.286.711 = private unnamed_addr constant [21 x i8] c"macroblock (MB) type\00", align 1
@.str.287.712 = private unnamed_addr constant [3 x i8] c"qp\00", align 1
@.str.288.713 = private unnamed_addr constant [38 x i8] c"per-block quantization parameter (QP)\00", align 1
@.str.289.714 = private unnamed_addr constant [3 x i8] c"mv\00", align 1
@.str.290.715 = private unnamed_addr constant [14 x i8] c"motion vector\00", align 1
@.str.291.716 = private unnamed_addr constant [10 x i8] c"dct_coeff\00", align 1
@.str.292.717 = private unnamed_addr constant [5 x i8] c"skip\00", align 1
@.str.293.718 = private unnamed_addr constant [10 x i8] c"startcode\00", align 1
@.str.294.719 = private unnamed_addr constant [4 x i8] c"pts\00", align 1
@.str.295.720 = private unnamed_addr constant [3 x i8] c"er\00", align 1
@.str.296.721 = private unnamed_addr constant [18 x i8] c"error recognition\00", align 1
@.str.297.722 = private unnamed_addr constant [5 x i8] c"mmco\00", align 1
@.str.298.723 = private unnamed_addr constant [45 x i8] c"memory management control operations (H.264)\00", align 1
@.str.299.724 = private unnamed_addr constant [5 x i8] c"bugs\00", align 1
@.str.300.725 = private unnamed_addr constant [7 x i8] c"vis_qp\00", align 1
@.str.301.726 = private unnamed_addr constant [67 x i8] c"visualize quantization parameter (QP), lower QP are tinted greener\00", align 1
@.str.302.727 = private unnamed_addr constant [12 x i8] c"vis_mb_type\00", align 1
@.str.303.728 = private unnamed_addr constant [22 x i8] c"visualize block types\00", align 1
@.str.304.729 = private unnamed_addr constant [8 x i8] c"buffers\00", align 1
@.str.305.730 = private unnamed_addr constant [27 x i8] c"picture buffer allocations\00", align 1
@.str.306.731 = private unnamed_addr constant [11 x i8] c"thread_ops\00", align 1
@.str.307.732 = private unnamed_addr constant [21 x i8] c"threading operations\00", align 1
@.str.308.733 = private unnamed_addr constant [6 x i8] c"vismv\00", align 1
@.str.309.734 = private unnamed_addr constant [31 x i8] c"visualize motion vectors (MVs)\00", align 1
@.str.310.735 = private unnamed_addr constant [9 x i8] c"debug_mv\00", align 1
@.str.311.736 = private unnamed_addr constant [3 x i8] c"pf\00", align 1
@.str.312.737 = private unnamed_addr constant [34 x i8] c"forward predicted MVs of P-frames\00", align 1
@.str.313.738 = private unnamed_addr constant [34 x i8] c"forward predicted MVs of B-frames\00", align 1
@.str.314.739 = private unnamed_addr constant [3 x i8] c"bb\00", align 1
@.str.315.740 = private unnamed_addr constant [35 x i8] c"backward predicted MVs of B-frames\00", align 1
@.str.316.741 = private unnamed_addr constant [4 x i8] c"cmp\00", align 1
@.str.317.742 = private unnamed_addr constant [29 x i8] c"full-pel ME compare function\00", align 1
@.str.318.743 = private unnamed_addr constant [9 x i8] c"cmp_func\00", align 1
@.str.319.744 = private unnamed_addr constant [7 x i8] c"subcmp\00", align 1
@.str.320.745 = private unnamed_addr constant [28 x i8] c"sub-pel ME compare function\00", align 1
@.str.321.746 = private unnamed_addr constant [6 x i8] c"mbcmp\00", align 1
@.str.322.747 = private unnamed_addr constant [28 x i8] c"macroblock compare function\00", align 1
@.str.323.748 = private unnamed_addr constant [9 x i8] c"ildctcmp\00", align 1
@.str.324.749 = private unnamed_addr constant [32 x i8] c"interlaced DCT compare function\00", align 1
@.str.325.750 = private unnamed_addr constant [9 x i8] c"dia_size\00", align 1
@.str.326.751 = private unnamed_addr constant [42 x i8] c"diamond type & size for motion estimation\00", align 1
@.str.327.752 = private unnamed_addr constant [10 x i8] c"last_pred\00", align 1
@.str.328.753 = private unnamed_addr constant [52 x i8] c"amount of motion predictors from the previous frame\00", align 1
@.str.329.754 = private unnamed_addr constant [6 x i8] c"preme\00", align 1
@.str.330.755 = private unnamed_addr constant [22 x i8] c"pre motion estimation\00", align 1
@.str.331.756 = private unnamed_addr constant [7 x i8] c"precmp\00", align 1
@.str.332.757 = private unnamed_addr constant [39 x i8] c"pre motion estimation compare function\00", align 1
@.str.333.758 = private unnamed_addr constant [4 x i8] c"sad\00", align 1
@.str.334.759 = private unnamed_addr constant [44 x i8] c"sum of absolute differences, fast (default)\00", align 1
@.str.335.760 = private unnamed_addr constant [4 x i8] c"sse\00", align 1
@.str.336.761 = private unnamed_addr constant [22 x i8] c"sum of squared errors\00", align 1
@.str.337.762 = private unnamed_addr constant [5 x i8] c"satd\00", align 1
@.str.338.763 = private unnamed_addr constant [49 x i8] c"sum of absolute Hadamard transformed differences\00", align 1
@.str.339.764 = private unnamed_addr constant [44 x i8] c"sum of absolute DCT transformed differences\00", align 1
@.str.340.765 = private unnamed_addr constant [56 x i8] c"sum of squared quantization errors (avoid, low quality)\00", align 1
@.str.341.766 = private unnamed_addr constant [4 x i8] c"bit\00", align 1
@.str.342.767 = private unnamed_addr constant [36 x i8] c"number of bits needed for the block\00", align 1
@.str.343.768 = private unnamed_addr constant [3 x i8] c"rd\00", align 1
@.str.344.769 = private unnamed_addr constant [30 x i8] c"rate distortion optimal, slow\00", align 1
@.str.345.770 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.346.771 = private unnamed_addr constant [5 x i8] c"vsad\00", align 1
@.str.347.772 = private unnamed_addr constant [37 x i8] c"sum of absolute vertical differences\00", align 1
@.str.348.773 = private unnamed_addr constant [5 x i8] c"vsse\00", align 1
@.str.349.774 = private unnamed_addr constant [36 x i8] c"sum of squared vertical differences\00", align 1
@.str.350.775 = private unnamed_addr constant [5 x i8] c"nsse\00", align 1
@.str.351.776 = private unnamed_addr constant [44 x i8] c"noise preserving sum of squared differences\00", align 1
@.str.352.777 = private unnamed_addr constant [7 x i8] c"dctmax\00", align 1
@.str.353.778 = private unnamed_addr constant [7 x i8] c"chroma\00", align 1
@.str.354.779 = private unnamed_addr constant [13 x i8] c"pre_dia_size\00", align 1
@.str.355.780 = private unnamed_addr constant [51 x i8] c"diamond type & size for motion estimation pre-pass\00", align 1
@.str.356.781 = private unnamed_addr constant [5 x i8] c"subq\00", align 1
@.str.357.782 = private unnamed_addr constant [34 x i8] c"sub-pel motion estimation quality\00", align 1
@.str.358.783 = private unnamed_addr constant [18 x i8] c"dtg_active_format\00", align 1
@.str.359 = private unnamed_addr constant [9 x i8] c"me_range\00", align 1
@.str.360 = private unnamed_addr constant [50 x i8] c"limit motion vectors range (1023 for DivX player)\00", align 1
@.str.361 = private unnamed_addr constant [6 x i8] c"ibias\00", align 1
@.str.362 = private unnamed_addr constant [17 x i8] c"intra quant bias\00", align 1
@.str.363 = private unnamed_addr constant [6 x i8] c"pbias\00", align 1
@.str.364 = private unnamed_addr constant [17 x i8] c"inter quant bias\00", align 1
@.str.365 = private unnamed_addr constant [15 x i8] c"color_table_id\00", align 1
@.str.366 = private unnamed_addr constant [15 x i8] c"global_quality\00", align 1
@.str.367 = private unnamed_addr constant [6 x i8] c"coder\00", align 1
@.str.368 = private unnamed_addr constant [4 x i8] c"vlc\00", align 1
@.str.369 = private unnamed_addr constant [38 x i8] c"variable length coder / Huffman coder\00", align 1
@.str.370 = private unnamed_addr constant [17 x i8] c"arithmetic coder\00", align 1
@.str.371 = private unnamed_addr constant [4 x i8] c"raw\00", align 1
@.str.372.784 = private unnamed_addr constant [18 x i8] c"raw (no encoding)\00", align 1
@.str.373 = private unnamed_addr constant [4 x i8] c"rle\00", align 1
@.str.374 = private unnamed_addr constant [17 x i8] c"run-length coder\00", align 1
@.str.375 = private unnamed_addr constant [8 x i8] c"deflate\00", align 1
@.str.376 = private unnamed_addr constant [20 x i8] c"deflate-based coder\00", align 1
@.str.377 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@.str.378 = private unnamed_addr constant [14 x i8] c"context model\00", align 1
@.str.379 = private unnamed_addr constant [12 x i8] c"slice_flags\00", align 1
@.str.380 = private unnamed_addr constant [18 x i8] c"xvmc_acceleration\00", align 1
@.str.381 = private unnamed_addr constant [4 x i8] c"mbd\00", align 1
@.str.382 = private unnamed_addr constant [50 x i8] c"macroblock decision algorithm (high quality mode)\00", align 1
@.str.383 = private unnamed_addr constant [20 x i8] c"use mbcmp (default)\00", align 1
@.str.384.785 = private unnamed_addr constant [5 x i8] c"bits\00", align 1
@.str.385 = private unnamed_addr constant [16 x i8] c"use fewest bits\00", align 1
@.str.386 = private unnamed_addr constant [25 x i8] c"use best rate distortion\00", align 1
@.str.387 = private unnamed_addr constant [17 x i8] c"stream_codec_tag\00", align 1
@.str.388 = private unnamed_addr constant [13 x i8] c"sc_threshold\00", align 1
@.str.389 = private unnamed_addr constant [23 x i8] c"scene change threshold\00", align 1
@.str.390 = private unnamed_addr constant [5 x i8] c"lmin\00", align 1
@.str.391 = private unnamed_addr constant [30 x i8] c"minimum Lagrange factor (VBR)\00", align 1
@.str.392 = private unnamed_addr constant [5 x i8] c"lmax\00", align 1
@.str.393 = private unnamed_addr constant [30 x i8] c"maximum Lagrange factor (VBR)\00", align 1
@.str.394 = private unnamed_addr constant [3 x i8] c"nr\00", align 1
@.str.395 = private unnamed_addr constant [16 x i8] c"noise reduction\00", align 1
@.str.396 = private unnamed_addr constant [18 x i8] c"rc_init_occupancy\00", align 1
@.str.397 = private unnamed_addr constant [80 x i8] c"number of bits which should be loaded into the rc buffer before decoding starts\00", align 1
@.str.398 = private unnamed_addr constant [16 x i8] c"inter_threshold\00", align 1
@.str.399 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.400 = private unnamed_addr constant [4 x i8] c"qns\00", align 1
@.str.401 = private unnamed_addr constant [50 x i8] c"deprecated, use mpegvideo private options instead\00", align 1
@.str.402 = private unnamed_addr constant [8 x i8] c"threads\00", align 1
@.str.403 = private unnamed_addr constant [47 x i8] c"autodetect a suitable number of threads to use\00", align 1
@.str.404 = private unnamed_addr constant [13 x i8] c"me_threshold\00", align 1
@.str.405 = private unnamed_addr constant [28 x i8] c"motion estimation threshold\00", align 1
@.str.406 = private unnamed_addr constant [13 x i8] c"mb_threshold\00", align 1
@.str.407 = private unnamed_addr constant [21 x i8] c"macroblock threshold\00", align 1
@.str.408 = private unnamed_addr constant [3 x i8] c"dc\00", align 1
@.str.409 = private unnamed_addr constant [19 x i8] c"intra_dc_precision\00", align 1
@.str.410 = private unnamed_addr constant [6 x i8] c"nssew\00", align 1
@.str.411 = private unnamed_addr constant [12 x i8] c"nsse weight\00", align 1
@.str.412 = private unnamed_addr constant [9 x i8] c"skip_top\00", align 1
@.str.413 = private unnamed_addr constant [55 x i8] c"number of macroblock rows at the top which are skipped\00", align 1
@.str.414 = private unnamed_addr constant [12 x i8] c"skip_bottom\00", align 1
@.str.415 = private unnamed_addr constant [58 x i8] c"number of macroblock rows at the bottom which are skipped\00", align 1
@.str.416.528 = private unnamed_addr constant [8 x i8] c"profile\00", align 1
@.str.417 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@.str.418 = private unnamed_addr constant [9 x i8] c"aac_main\00", align 1
@.str.419 = private unnamed_addr constant [8 x i8] c"aac_low\00", align 1
@.str.420 = private unnamed_addr constant [8 x i8] c"aac_ssr\00", align 1
@.str.421 = private unnamed_addr constant [8 x i8] c"aac_ltp\00", align 1
@.str.422 = private unnamed_addr constant [7 x i8] c"aac_he\00", align 1
@.str.423 = private unnamed_addr constant [10 x i8] c"aac_he_v2\00", align 1
@.str.424.786 = private unnamed_addr constant [7 x i8] c"aac_ld\00", align 1
@.str.425 = private unnamed_addr constant [8 x i8] c"aac_eld\00", align 1
@.str.427 = private unnamed_addr constant [7 x i8] c"dts_es\00", align 1
@.str.428 = private unnamed_addr constant [10 x i8] c"dts_96_24\00", align 1
@.str.429.787 = private unnamed_addr constant [11 x i8] c"dts_hd_hra\00", align 1
@.str.430 = private unnamed_addr constant [10 x i8] c"dts_hd_ma\00", align 1
@.str.431 = private unnamed_addr constant [6 x i8] c"level\00", align 1
@.str.432 = private unnamed_addr constant [7 x i8] c"lowres\00", align 1
@.str.433 = private unnamed_addr constant [43 x i8] c"decode at 1= 1/2, 2=1/4, 3=1/8 resolutions\00", align 1
@.str.434 = private unnamed_addr constant [15 x i8] c"skip_threshold\00", align 1
@.str.435 = private unnamed_addr constant [21 x i8] c"frame skip threshold\00", align 1
@.str.436 = private unnamed_addr constant [12 x i8] c"skip_factor\00", align 1
@.str.437 = private unnamed_addr constant [18 x i8] c"frame skip factor\00", align 1
@.str.438 = private unnamed_addr constant [9 x i8] c"skip_exp\00", align 1
@.str.439 = private unnamed_addr constant [20 x i8] c"frame skip exponent\00", align 1
@.str.440 = private unnamed_addr constant [8 x i8] c"skipcmp\00", align 1
@.str.441 = private unnamed_addr constant [28 x i8] c"frame skip compare function\00", align 1
@.str.442 = private unnamed_addr constant [12 x i8] c"border_mask\00", align 1
@.str.443 = private unnamed_addr constant [56 x i8] c"increase the quantizer for macroblocks close to borders\00", align 1
@.str.444 = private unnamed_addr constant [7 x i8] c"mblmin\00", align 1
@.str.445 = private unnamed_addr constant [41 x i8] c"minimum macroblock Lagrange factor (VBR)\00", align 1
@.str.446 = private unnamed_addr constant [7 x i8] c"mblmax\00", align 1
@.str.447 = private unnamed_addr constant [41 x i8] c"maximum macroblock Lagrange factor (VBR)\00", align 1
@.str.448 = private unnamed_addr constant [5 x i8] c"mepc\00", align 1
@.str.449 = private unnamed_addr constant [59 x i8] c"motion estimation bitrate penalty compensation (1.0 = 256)\00", align 1
@.str.450 = private unnamed_addr constant [17 x i8] c"skip_loop_filter\00", align 1
@.str.451.529 = private unnamed_addr constant [10 x i8] c"avdiscard\00", align 1
@.str.452 = private unnamed_addr constant [10 x i8] c"skip_idct\00", align 1
@.str.453 = private unnamed_addr constant [11 x i8] c"skip_frame\00", align 1
@.str.454 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.455 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.456 = private unnamed_addr constant [6 x i8] c"noref\00", align 1
@.str.457 = private unnamed_addr constant [6 x i8] c"bidir\00", align 1
@.str.458 = private unnamed_addr constant [6 x i8] c"nokey\00", align 1
@.str.459 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.460 = private unnamed_addr constant [13 x i8] c"bidir_refine\00", align 1
@.str.461 = private unnamed_addr constant [64 x i8] c"refine the two motion vectors used in bidirectional macroblocks\00", align 1
@.str.462 = private unnamed_addr constant [10 x i8] c"brd_scale\00", align 1
@.str.463 = private unnamed_addr constant [46 x i8] c"downscale frames for dynamic B-frame decision\00", align 1
@.str.464 = private unnamed_addr constant [11 x i8] c"keyint_min\00", align 1
@.str.465 = private unnamed_addr constant [36 x i8] c"minimum interval between IDR-frames\00", align 1
@.str.466 = private unnamed_addr constant [5 x i8] c"refs\00", align 1
@.str.467 = private unnamed_addr constant [53 x i8] c"reference frames to consider for motion compensation\00", align 1
@.str.468 = private unnamed_addr constant [13 x i8] c"chromaoffset\00", align 1
@.str.469 = private unnamed_addr constant [27 x i8] c"chroma QP offset from luma\00", align 1
@.str.470 = private unnamed_addr constant [8 x i8] c"trellis\00", align 1
@.str.471 = private unnamed_addr constant [37 x i8] c"rate-distortion optimal quantization\00", align 1
@.str.472 = private unnamed_addr constant [7 x i8] c"skiprd\00", align 1
@.str.473 = private unnamed_addr constant [10 x i8] c"sc_factor\00", align 1
@.str.474 = private unnamed_addr constant [68 x i8] c"multiplied by qscale for each frame and added to scene_change_score\00", align 1
@.str.475 = private unnamed_addr constant [14 x i8] c"mv0_threshold\00", align 1
@.str.476 = private unnamed_addr constant [14 x i8] c"b_sensitivity\00", align 1
@.str.477 = private unnamed_addr constant [41 x i8] c"adjust sensitivity of b_frame_strategy 1\00", align 1
@.str.478 = private unnamed_addr constant [18 x i8] c"compression_level\00", align 1
@.str.479 = private unnamed_addr constant [21 x i8] c"min_prediction_order\00", align 1
@.str.480 = private unnamed_addr constant [21 x i8] c"max_prediction_order\00", align 1
@.str.481 = private unnamed_addr constant [21 x i8] c"timecode_frame_start\00", align 1
@.str.482 = private unnamed_addr constant [58 x i8] c"GOP timecode frame start number, in non-drop-frame format\00", align 1
@.str.483 = private unnamed_addr constant [17 x i8] c"request_channels\00", align 1
@.str.484 = private unnamed_addr constant [37 x i8] c"set desired number of audio channels\00", align 1
@.str.485 = private unnamed_addr constant [20 x i8] c"bits_per_raw_sample\00", align 1
@.str.486 = private unnamed_addr constant [15 x i8] c"channel_layout\00", align 1
@.str.487 = private unnamed_addr constant [23 x i8] c"request_channel_layout\00", align 1
@.str.488 = private unnamed_addr constant [15 x i8] c"rc_max_vbv_use\00", align 1
@.str.489 = private unnamed_addr constant [15 x i8] c"rc_min_vbv_use\00", align 1
@.str.490 = private unnamed_addr constant [16 x i8] c"ticks_per_frame\00", align 1
@.str.491 = private unnamed_addr constant [16 x i8] c"color_primaries\00", align 1
@.str.492 = private unnamed_addr constant [10 x i8] c"color_trc\00", align 1
@.str.493 = private unnamed_addr constant [11 x i8] c"colorspace\00", align 1
@.str.494 = private unnamed_addr constant [12 x i8] c"color_range\00", align 1
@.str.495 = private unnamed_addr constant [23 x i8] c"chroma_sample_location\00", align 1
@.str.496 = private unnamed_addr constant [17 x i8] c"log_level_offset\00", align 1
@.str.497 = private unnamed_addr constant [25 x i8] c"set the log level offset\00", align 1
@.str.498 = private unnamed_addr constant [7 x i8] c"slices\00", align 1
@.str.499 = private unnamed_addr constant [48 x i8] c"number of slices, used in parallelized encoding\00", align 1
@.str.500 = private unnamed_addr constant [12 x i8] c"thread_type\00", align 1
@.str.501 = private unnamed_addr constant [27 x i8] c"select multithreading type\00", align 1
@.str.502 = private unnamed_addr constant [6 x i8] c"slice\00", align 1
@.str.503 = private unnamed_addr constant [6 x i8] c"frame\00", align 1
@.str.504 = private unnamed_addr constant [19 x i8] c"audio_service_type\00", align 1
@.str.505 = private unnamed_addr constant [19 x i8] c"audio service type\00", align 1
@.str.506 = private unnamed_addr constant [3 x i8] c"ma\00", align 1
@.str.507 = private unnamed_addr constant [19 x i8] c"Main Audio Service\00", align 1
@.str.508 = private unnamed_addr constant [3 x i8] c"ef\00", align 1
@.str.509 = private unnamed_addr constant [8 x i8] c"Effects\00", align 1
@.str.510 = private unnamed_addr constant [3 x i8] c"vi\00", align 1
@.str.511 = private unnamed_addr constant [18 x i8] c"Visually Impaired\00", align 1
@.str.512 = private unnamed_addr constant [3 x i8] c"hi\00", align 1
@.str.513 = private unnamed_addr constant [17 x i8] c"Hearing Impaired\00", align 1
@.str.514 = private unnamed_addr constant [3 x i8] c"di\00", align 1
@.str.515 = private unnamed_addr constant [9 x i8] c"Dialogue\00", align 1
@.str.516 = private unnamed_addr constant [3 x i8] c"co\00", align 1
@.str.517 = private unnamed_addr constant [11 x i8] c"Commentary\00", align 1
@.str.518 = private unnamed_addr constant [3 x i8] c"em\00", align 1
@.str.519 = private unnamed_addr constant [10 x i8] c"Emergency\00", align 1
@.str.520 = private unnamed_addr constant [3 x i8] c"vo\00", align 1
@.str.521 = private unnamed_addr constant [11 x i8] c"Voice Over\00", align 1
@.str.522 = private unnamed_addr constant [3 x i8] c"ka\00", align 1
@.str.523 = private unnamed_addr constant [8 x i8] c"Karaoke\00", align 1
@.str.524 = private unnamed_addr constant [19 x i8] c"request_sample_fmt\00", align 1
@.str.525 = private unnamed_addr constant [43 x i8] c"sample format audio decoders should prefer\00", align 1
@.str.526 = private unnamed_addr constant [13 x i8] c"pkt_timebase\00", align 1
@.str.5.788 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@gif87a_sig = internal unnamed_addr constant [6 x i8] c"GIF87a", align 1
@gif89a_sig = internal unnamed_addr constant [6 x i8] c"GIF89a", align 1
@.str.7.378 = private unnamed_addr constant [24 x i8] c"picture size too large\0A\00", align 1
@.str.4.379 = private unnamed_addr constant [21 x i8] c"get_buffer() failed\0A\00", align 1
@.str.5.380 = private unnamed_addr constant [38 x i8] c"cannot decode frame without keyframe\0A\00", align 1
@.str.6.381 = private unnamed_addr constant [23 x i8] c"reget_buffer() failed\0A\00", align 1
@.str.8.382 = private unnamed_addr constant [54 x i8] c"picture doesn't have either global or local palette.\0A\00", align 1
@.str.9.383 = private unnamed_addr constant [17 x i8] c"LZW init failed\0A\00", align 1
@mask = internal unnamed_addr constant [17 x i16] [i16 0, i16 1, i16 3, i16 7, i16 15, i16 31, i16 63, i16 127, i16 255, i16 511, i16 1023, i16 2047, i16 4095, i16 8191, i16 16383, i16 32767, i16 -1], align 16
@.str.424 = private unnamed_addr constant [14 x i8] c"lzw overread\0A\00", align 1
@secret_file = dso_local constant <{ [100 x i8], [156 x i8] }> <{ [100 x i8] c"GIF89a\08\00\08\00\80\00\00\00\00\00\FF\FF\FF!\FF\0BNETSCAPE2.0\03\01\00\00\00!\F9\04\0D|\00\02\00,\00\00\06\00\08\00\02\00\00\02\06\04\12\86\9A\17\05\00!\F9\04\08{\00\FF\00,\00\00\00\00\08\00\08\00\00\02\0DL\00\86\9A\D7\EB\98\8C\14\DA\87Y\01\00;", [156 x i8] zeroinitializer }>, section ".data.secret", align 16
@secret_file_len = dso_local constant i64 100, section ".data.secret", align 8
@secret_packet_data = dso_local constant <{ [98 x i8], [158 x i8] }> <{ [98 x i8] c"GIF89a\08\00\08\00\80\00\00\00\00\00\FF\FF\FF!\FF\0BNETSCAPE2.0\03\01\00\00\00!\F9\04\0D|\00\02\00,\00\00\06\00\08\00\02\00\00\02\06\04\12\86\9A\17\05\00!\F9\04\08{\00\FF\00,\00\00\00\00\08\00\08\00\00\02\0DL\00\86\9A\D7\EB\98\8C\14\DA\87Y\01", [158 x i8] zeroinitializer }>, section ".data.secret", align 16
@secret_packet_lens = dso_local constant [8 x i8] c"A\22\00\00\00\00\00\00", section ".data.secret", align 1
@secret_packet_count = dso_local constant i64 2, section ".data.secret", align 8

; Function Attrs:  norecurse nounwind optsize uwtable
define internal void @posix_exit() #0 {
  %1 = load %struct.__file.34*, %struct.__file.34** bitcast (%struct.__file** getelementptr inbounds ([0 x %struct.__file*], [0 x %struct.__file*]* @__iob, i64 0, i64 1) to %struct.__file.34**), align 8, !tbaa !6
  %2 = getelementptr inbounds %struct.__file.34, %struct.__file.34* %1, i64 1, i32 4
  %3 = bitcast {}** %2 to i32*
  %4 = load i32, i32* %3, align 8, !tbaa !10
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %__posix_flush.exit, label %.preheader.i

.preheader.i:                                     ; preds = %0
  store i32 0, i32* %3, align 8, !tbaa !10
  br label %__posix_flush.exit

__posix_flush.exit:                               ; preds = %0, %.preheader.i
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) local_unnamed_addr #1 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.AVCodec*, align 8
  %8 = alloca %struct.AVCodecContext*, align 8
  %9 = alloca %struct.AVFrame*, align 8
  %10 = alloca %struct.AVPacket, align 8
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store %struct.AVCodec* bitcast (%struct.AVCodec.107* @ff_gif_decoder to %struct.AVCodec*), %struct.AVCodec** %7, align 8
  call void (...) bitcast (void ()* @heap_do_relocs to void (...)*)()
  call fastcc void @__cc_malloc_init_from_snapshot()
  store %struct.AVCodecContext* inttoptr (i64 4294967312 to %struct.AVCodecContext*), %struct.AVCodecContext** %8, align 8
  store %struct.AVFrame* inttoptr (i64 4294987936 to %struct.AVFrame*), %struct.AVFrame** %9, align 8
  store i32 0, i32* %11, align 4
  store i64 0, i64* %12, align 8
  store i64 0, i64* %13, align 8
  br label %15

15:                                               ; preds = %48, %2
  %16 = load i64, i64* %13, align 8
  %17 = load i64, i64* @secret_packet_count, align 8
  %18 = icmp ult i64 %16, %17
  br i1 %18, label %19, label %51

19:                                               ; preds = %15
  %20 = load i64, i64* %13, align 8
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* @secret_packet_lens, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  store i64 %23, i64* %14, align 8
  %24 = load i64, i64* %14, align 8
  %25 = load i64, i64* %12, align 8
  %26 = sub i64 256, %25
  %27 = icmp ule i64 %24, %26
  %28 = zext i1 %27 to i32
  call fastcc void @__cc_valid_if(i32 %28)
  %29 = load i64, i64* %14, align 8
  %30 = trunc i64 %29 to i32
  %31 = call i32 bitcast (i32 (%struct.AVPacket.21*, i32)* @av_new_packet to i32 (%struct.AVPacket*, i32)*)(%struct.AVPacket* %10, i32 %30)
  %32 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %10, i32 0, i32 2
  %33 = load i8*, i8** %32, align 8
  %34 = load i64, i64* %12, align 8
  %35 = getelementptr inbounds i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* bitcast (<{ [98 x i8], [158 x i8] }>* @secret_packet_data to [256 x i8]*), i64 0, i64 0), i64 %34
  %36 = load i64, i64* %14, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %35, i64 %36, i1 false)
  %37 = load i64, i64* %14, align 8
  %38 = load i64, i64* %12, align 8
  %39 = add i64 %38, %37
  store i64 %39, i64* %12, align 8
  %40 = load %struct.AVCodecContext*, %struct.AVCodecContext** %8, align 8
  %41 = load %struct.AVFrame*, %struct.AVFrame** %9, align 8
  %42 = call fastcc i32 @avcodec_decode_video2(%struct.AVCodecContext* %40, %struct.AVFrame* %41, i32* %11, %struct.AVPacket* %10)
  store i32 %42, i32* %6, align 4
  %43 = load i32, i32* %6, align 4
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %19
  br label %46

46:                                               ; preds = %45
  call fastcc void @exit() #19
  unreachable

47:                                               ; preds = %19
  call void bitcast (void (%struct.AVPacket.21*)* @av_free_packet to void (%struct.AVPacket*)*)(%struct.AVPacket* %10)
  br label %48

48:                                               ; preds = %47
  %49 = load i64, i64* %13, align 8
  %50 = add i64 %49, 1
  store i64 %50, i64* %13, align 8
  br label %15

51:                                               ; preds = %15
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @heap_do_relocs() unnamed_addr #1 {
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 16) to i64*), i64 ptrtoint ({ i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass.90* (%struct.AVClass.90*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }* @av_codec_context_class to i64))
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 32) to i64*), i64 ptrtoint (%struct.AVCodec.107* @ff_gif_decoder to i64))
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 200) to i64*), i64 ptrtoint (i32 (%struct.AVCodecContext*, i32*)* @avcodec_default_get_format to i64))
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 552) to i64*), i64 ptrtoint (i32 (%struct.AVCodecContext*, %struct.AVFrame*)* @avcodec_default_get_buffer to i64))
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 560) to i64*), i64 ptrtoint (void (%struct.AVCodecContext*, %struct.AVFrame*)* @avcodec_default_release_buffer to i64))
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 568) to i64*), i64 ptrtoint (i32 (%struct.AVCodecContext*, %struct.AVFrame*)* @avcodec_default_reget_buffer to i64))
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 936) to i64*), i64 ptrtoint (i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)* @avcodec_default_execute to i64))
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 944) to i64*), i64 ptrtoint (i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)* @avcodec_default_execute2 to i64))
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 1024) to i64*), i64 ptrtoint (i8* getelementptr (i8, i8* bitcast ([358 x %struct.AVCodecDescriptor]* @codec_descriptors to i8*), i64 3136) to i64))
  call void @__cc_write_unchecked(i64* bitcast (i8* getelementptr (i8, i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i64 1152) to i64*), i64 ptrtoint ({ i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass.90* (%struct.AVClass.90*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }* @gif_decoder_class to i64))
  ret void
}

; Function Attrs: noinline nounwind optsize uwtable
define internal fastcc void @__cc_malloc_init_from_snapshot() unnamed_addr #2 {
  br i1 icmp eq (<{ [2645 x i64], [8 x i64] }>* inttoptr (i64 4294967296 to <{ [2645 x i64], [8 x i64] }>*), <{ [2645 x i64], [8 x i64] }>* @heap_data), label %2, label %1

1:                                                ; preds = %0
  tail call void @__cc_flag_invalid() #20
  br label %2

2:                                                ; preds = %1, %0
  %3 = tail call fastcc i8* @__cc_malloc_heap_end() #20
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %2
  tail call void @__cc_flag_invalid() #20
  br label %6

6:                                                ; preds = %5, %2
  tail call fastcc void @__cc_malloc_set_heap_end() #20
  tail call void @__cc_access_valid(i8* bitcast (<{ [2645 x i64], [8 x i64] }>* @heap_data to i8*), i8* bitcast (i64* getelementptr inbounds (<{ [2645 x i64], [8 x i64] }>, <{ [2645 x i64], [8 x i64] }>* @heap_data, i64 1, i32 0, i64 0) to i8*)) #20
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal fastcc void @__cc_valid_if(i32) unnamed_addr #1 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4.260, i64 0, i64 0), i8** %3, align 8
  %4 = load i32, i32* %2, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  call void @__cc_flag_invalid()
  br label %7

7:                                                ; preds = %6, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @av_new_packet(%struct.AVPacket.21* nocapture, i32) unnamed_addr #3 {
  %3 = icmp ult i32 %1, -16
  br i1 %3, label %4, label %12

4:                                                ; preds = %2
  %5 = add nuw i32 %1, 16
  %6 = sext i32 %5 to i64
  %7 = tail call fastcc noalias i8* @av_malloc(i64 %6) #20
  %8 = icmp eq i8* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %11, i8 0, i64 16, i1 false)
  br label %12

12:                                               ; preds = %9, %4, %2
  %13 = phi i32 [ 0, %9 ], [ -12, %4 ], [ -12, %2 ]
  %14 = phi i8* [ %7, %9 ], [ null, %4 ], [ null, %2 ]
  %15 = phi i32 [ %1, %9 ], [ 0, %4 ], [ 0, %2 ]
  %16 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 0
  store i64 -9223372036854775808, i64* %16, align 8, !tbaa !16
  %17 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 1
  store i64 -9223372036854775808, i64* %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 11
  store i64 -1, i64* %18, align 8, !tbaa !20
  %19 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 12
  store i64 0, i64* %19, align 8, !tbaa !21
  %20 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 5
  store i32 0, i32* %20, align 8, !tbaa !22
  %21 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 4
  store i32 0, i32* %21, align 4, !tbaa !23
  %22 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  %23 = bitcast %struct.anon.4** %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 16, i1 false) #10
  %24 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  store i8* %14, i8** %24, align 8, !tbaa !24
  %25 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  store i32 %15, i32* %25, align 8, !tbaa !25
  %26 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 9
  %27 = bitcast {}** %26 to void (%struct.AVPacket.21*)**
  store void (%struct.AVPacket.21*)* @av_destruct_packet, void (%struct.AVPacket.21*)** %27, align 8, !tbaa !26
  ret i32 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @avcodec_decode_video2(%struct.AVCodecContext*, %struct.AVFrame*, i32*, %struct.AVPacket* nocapture readonly) unnamed_addr #3 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.AVPacket, align 8
  %9 = bitcast %struct.AVPacket* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %9) #10
  %10 = bitcast %struct.AVPacket* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 8 %10, i64 88, i1 false), !tbaa.struct !27
  %11 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 3
  %12 = load %struct.AVCodec*, %struct.AVCodec** %11, align 8, !tbaa !30
  %13 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %12, i64 0, i32 2
  %14 = load i32, i32* %13, align 8, !tbaa !34
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %4
  %17 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %17, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.40.920, i64 0, i64 0)) #20
  br label %440

18:                                               ; preds = %4
  store i32 0, i32* %2, align 4, !tbaa !29
  %19 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 25
  %20 = load i32, i32* %19, align 4, !tbaa !36
  %21 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 26
  %22 = load i32, i32* %21, align 8, !tbaa !37
  %23 = or i32 %22, %20
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %18
  %26 = bitcast %struct.AVCodecContext* %0 to i8*
  %27 = tail call fastcc i32 @av_image_check_size(i32 %20, i32 %22, i8* %26) #20
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %440

29:                                               ; preds = %25, %18
  %30 = bitcast %struct.AVFrame* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 520, i1 false) #10
  %31 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 42
  store i64 -9223372036854775808, i64* %31, align 8, !tbaa !38
  %32 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 12
  store i64 -9223372036854775808, i64* %32, align 8, !tbaa !40
  %33 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 13
  store i64 -9223372036854775808, i64* %33, align 8, !tbaa !41
  %34 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 11
  store i64 -9223372036854775808, i64* %34, align 8, !tbaa !42
  %35 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 44
  store i64 0, i64* %35, align 8, !tbaa !43
  %36 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 43
  store i64 -1, i64* %36, align 8, !tbaa !44
  %37 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 48
  store i32 -1, i32* %37, align 8, !tbaa !45
  %38 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 7
  store i32 1, i32* %38, align 8, !tbaa !46
  %39 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 10, i32 0
  store i32 0, i32* %39, align 8
  %40 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 10, i32 1
  store i32 1, i32* %40, align 4
  %41 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 6
  store i32 -1, i32* %41, align 4, !tbaa !47
  %42 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 0
  %43 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 2
  store i8** %42, i8*** %43, align 8, !tbaa !48
  %44 = load %struct.AVCodec*, %struct.AVCodec** %11, align 8, !tbaa !30
  %45 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %44, i64 0, i32 4
  %46 = load i32, i32* %45, align 8, !tbaa !49
  %47 = and i32 %46, 32
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %58

49:                                               ; preds = %29
  %50 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %51 = load i32, i32* %50, align 8, !tbaa !25
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %58

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 178
  %55 = load i32, i32* %54, align 8, !tbaa !50
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %438, label %58

58:                                               ; preds = %53, %49, %29
  %59 = bitcast %struct.AVPacket* %8 to %struct.AVPacket.21*
  %60 = call fastcc i32 @av_packet_split_side_data(%struct.AVPacket.21* nonnull %59) #20
  %61 = load %struct.AVCodec*, %struct.AVCodec** %11, align 8, !tbaa !30
  %62 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %61, i64 0, i32 4
  %63 = load i32, i32* %62, align 8, !tbaa !49
  %64 = and i32 %63, 16384
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %apply_param_change.exit, label %66

66:                                               ; preds = %58
  %67 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %8, i64 0, i32 7
  %68 = load i32, i32* %67, align 8, !tbaa !51
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %apply_param_change.exit

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %8, i64 0, i32 6
  %72 = load %struct.anon.4*, %struct.anon.4** %71, align 8, !tbaa !52
  %73 = sext i32 %68 to i64
  br label %75

74:                                               ; preds = %75
  %exitcond.i.i = icmp eq i64 %80, %73
  br i1 %exitcond.i.i, label %apply_param_change.exit, label %75

75:                                               ; preds = %74, %70
  %76 = phi i64 [ 0, %70 ], [ %80, %74 ]
  %77 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %72, i64 %76, i32 2
  %78 = load i32, i32* %77, align 4, !tbaa !53
  %79 = icmp eq i32 %78, 2
  %80 = add nuw nsw i64 %76, 1
  br i1 %79, label %av_packet_get_side_data.exit.i, label %74

av_packet_get_side_data.exit.i:                   ; preds = %75
  %81 = and i64 %76, 4294967295
  %82 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %72, i64 %81, i32 1
  %83 = load i32, i32* %82, align 8, !tbaa !55
  %84 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %72, i64 %81, i32 0
  %85 = load i8*, i8** %84, align 8, !tbaa !56
  %86 = icmp eq i8* %85, null
  %87 = icmp slt i32 %83, 4
  %88 = or i1 %87, %86
  br i1 %88, label %apply_param_change.exit, label %89

89:                                               ; preds = %av_packet_get_side_data.exit.i
  %90 = getelementptr inbounds i8, i8* %85, i64 4
  %91 = bitcast i8* %85 to i32*
  %92 = load i32, i32* %91, align 1, !tbaa !57
  %93 = add nsw i32 %83, -4
  %94 = icmp slt i32 %93, 4
  br i1 %94, label %apply_param_change.exit, label %95

95:                                               ; preds = %89
  %96 = and i32 %92, 1
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %104, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds i8, i8* %85, i64 8
  %100 = bitcast i8* %90 to i32*
  %101 = load i32, i32* %100, align 1, !tbaa !57
  %102 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 101
  store i32 %101, i32* %102, align 4, !tbaa !58
  %103 = add nsw i32 %83, -8
  br label %104

104:                                              ; preds = %98, %95
  %105 = phi i32 [ %93, %95 ], [ %103, %98 ]
  %106 = phi i8* [ %90, %95 ], [ %99, %98 ]
  %107 = and i32 %92, 2
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %117, label %109

109:                                              ; preds = %104
  %110 = icmp slt i32 %105, 8
  br i1 %110, label %apply_param_change.exit, label %111

111:                                              ; preds = %109
  %112 = getelementptr inbounds i8, i8* %106, i64 8
  %113 = bitcast i8* %106 to i64*
  %114 = load i64, i64* %113, align 1, !tbaa !57
  %115 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 108
  store i64 %114, i64* %115, align 8, !tbaa !59
  %116 = add nsw i32 %105, -8
  br label %117

117:                                              ; preds = %111, %104
  %118 = phi i32 [ %116, %111 ], [ %105, %104 ]
  %119 = phi i8* [ %112, %111 ], [ %106, %104 ]
  %120 = icmp slt i32 %118, 4
  br i1 %120, label %apply_param_change.exit, label %121

121:                                              ; preds = %117
  %122 = and i32 %92, 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %130, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds i8, i8* %119, i64 4
  %126 = bitcast i8* %119 to i32*
  %127 = load i32, i32* %126, align 1, !tbaa !57
  %128 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 100
  store i32 %127, i32* %128, align 8, !tbaa !60
  %129 = add nsw i32 %118, -4
  br label %130

130:                                              ; preds = %124, %121
  %131 = phi i32 [ %118, %121 ], [ %129, %124 ]
  %132 = phi i8* [ %119, %121 ], [ %125, %124 ]
  %133 = and i32 %92, 8
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %131, 8
  %136 = or i1 %134, %135
  br i1 %136, label %apply_param_change.exit, label %137

137:                                              ; preds = %130
  %138 = getelementptr inbounds i8, i8* %132, i64 4
  %139 = bitcast i8* %132 to i32*
  %140 = load i32, i32* %139, align 1, !tbaa !57
  %141 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 23
  store i32 %140, i32* %141, align 4, !tbaa !61
  %142 = bitcast i8* %138 to i32*
  %143 = load i32, i32* %142, align 1, !tbaa !57
  %144 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 24
  store i32 %140, i32* %19, align 4, !tbaa !36
  store i32 %143, i32* %21, align 8, !tbaa !37
  %145 = sub nsw i32 0, %140
  %146 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 174
  %147 = load i32, i32* %146, align 4, !tbaa !62
  %148 = ashr i32 %145, %147
  %149 = sub nsw i32 0, %148
  store i32 %149, i32* %141, align 4, !tbaa !61
  %150 = sub nsw i32 0, %143
  %151 = ashr i32 %150, %147
  %152 = sub nsw i32 0, %151
  store i32 %152, i32* %144, align 8, !tbaa !63
  br label %apply_param_change.exit

apply_param_change.exit:                          ; preds = %74, %58, %66, %av_packet_get_side_data.exit.i, %89, %109, %117, %130, %137
  %153 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 192
  store %struct.AVPacket* %8, %struct.AVPacket** %153, align 8, !tbaa !64
  %154 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %61, i64 0, i32 22
  %155 = load i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)** %154, align 8, !tbaa !65
  %156 = call i32 %155(%struct.AVCodecContext* nonnull %0, i8* %30, i32* nonnull %2, %struct.AVPacket* nonnull %8) #20
  %157 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %158 = load i64, i64* %157, align 8, !tbaa !19
  store i64 %158, i64* %33, align 8, !tbaa !41
  %159 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 39
  %160 = load i32, i32* %159, align 4, !tbaa !66
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %165

162:                                              ; preds = %apply_param_change.exit
  %163 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 11
  %164 = load i64, i64* %163, align 8, !tbaa !20
  store i64 %164, i64* %36, align 8, !tbaa !44
  br label %165

165:                                              ; preds = %162, %apply_param_change.exit
  %166 = load %struct.AVCodec*, %struct.AVCodec** %11, align 8, !tbaa !30
  %167 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %166, i64 0, i32 4
  %168 = load i32, i32* %167, align 8, !tbaa !49
  %169 = and i32 %168, 2
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %201

171:                                              ; preds = %165
  %172 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 10
  %173 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %172, i64 0, i32 0
  %174 = load i32, i32* %173, align 8, !tbaa !67
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %181

176:                                              ; preds = %171
  %177 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 51
  %178 = bitcast %struct.AVRational* %177 to i64*
  %179 = bitcast %struct.AVRational* %172 to i64*
  %180 = load i64, i64* %178, align 8
  store i64 %180, i64* %179, align 8
  br label %181

181:                                              ; preds = %176, %171
  %182 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 3
  %183 = load i32, i32* %182, align 8, !tbaa !68
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %181
  %186 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 23
  %187 = load i32, i32* %186, align 4, !tbaa !61
  store i32 %187, i32* %182, align 8, !tbaa !68
  br label %188

188:                                              ; preds = %185, %181
  %189 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 4
  %190 = load i32, i32* %189, align 4, !tbaa !69
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %195

192:                                              ; preds = %188
  %193 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 24
  %194 = load i32, i32* %193, align 8, !tbaa !63
  store i32 %194, i32* %189, align 4, !tbaa !69
  br label %195

195:                                              ; preds = %192, %188
  %196 = load i32, i32* %41, align 4, !tbaa !47
  %197 = icmp eq i32 %196, -1
  br i1 %197, label %198, label %201

198:                                              ; preds = %195
  %199 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 28
  %200 = load i32, i32* %199, align 8, !tbaa !70
  store i32 %200, i32* %41, align 4, !tbaa !47
  br label %201

201:                                              ; preds = %198, %195, %165
  %202 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 200
  %203 = load %struct.AVDictionary*, %struct.AVDictionary** %202, align 8, !tbaa !6
  %204 = icmp eq %struct.AVDictionary* %203, null
  br i1 %204, label %._crit_edge.i.i, label %205

._crit_edge.i.i:                                  ; preds = %201
  %.pre1.i.i = bitcast %struct.AVDictionary** %202 to i8**
  br label %av_dict_free.exit.i

205:                                              ; preds = %201
  %206 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %203, i64 0, i32 0
  %207 = load i32, i32* %206, align 8, !tbaa !71
  %208 = add nsw i32 %207, -1
  store i32 %208, i32* %206, align 8, !tbaa !71
  %209 = icmp eq i32 %207, 0
  %210 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %203, i64 0, i32 1
  %211 = load %struct.entry*, %struct.entry** %210, align 8, !tbaa !73
  br i1 %209, label %.loopexit.i.i, label %.preheader.i.i

.preheader.i.i:                                   ; preds = %205, %.preheader.i.i
  %212 = phi %struct.entry* [ %225, %.preheader.i.i ], [ %211, %205 ]
  %213 = phi i32 [ %223, %.preheader.i.i ], [ %208, %205 ]
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds %struct.entry, %struct.entry* %212, i64 %214, i32 0
  %216 = load i8*, i8** %215, align 8, !tbaa !74
  call fastcc void @free(i8* %216) #20
  %217 = load %struct.entry*, %struct.entry** %210, align 8, !tbaa !73
  %218 = load i32, i32* %206, align 8, !tbaa !71
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds %struct.entry, %struct.entry* %217, i64 %219, i32 1
  %221 = load i8*, i8** %220, align 8, !tbaa !76
  call fastcc void @free(i8* %221) #20
  %222 = load i32, i32* %206, align 8, !tbaa !71
  %223 = add nsw i32 %222, -1
  store i32 %223, i32* %206, align 8, !tbaa !71
  %224 = icmp eq i32 %222, 0
  %225 = load %struct.entry*, %struct.entry** %210, align 8, !tbaa !73
  br i1 %224, label %.loopexit.i.i, label %.preheader.i.i

.loopexit.i.i:                                    ; preds = %.preheader.i.i, %205
  %226 = phi %struct.entry* [ %211, %205 ], [ %225, %.preheader.i.i ]
  %227 = bitcast %struct.entry* %226 to i8*
  call fastcc void @free(i8* %227) #20
  %.phi.trans.insert.i.i = bitcast %struct.AVDictionary** %202 to i8**
  %.pre.i.i = load i8*, i8** %.phi.trans.insert.i.i, align 8, !tbaa !6
  br label %av_dict_free.exit.i

av_dict_free.exit.i:                              ; preds = %.loopexit.i.i, %._crit_edge.i.i
  %.pre-phi.i.i = phi i8** [ %.pre1.i.i, %._crit_edge.i.i ], [ %.phi.trans.insert.i.i, %.loopexit.i.i ]
  %228 = phi i8* [ null, %._crit_edge.i.i ], [ %.pre.i.i, %.loopexit.i.i ]
  call fastcc void @free(i8* %228) #20
  store i8* null, i8** %.pre-phi.i.i, align 8, !tbaa !6
  %229 = bitcast %struct.AVPacket** %153 to %struct.AVPacket.21**
  %230 = load %struct.AVPacket.21*, %struct.AVPacket.21** %229, align 8, !tbaa !64
  %231 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %230, i64 0, i32 7
  %232 = load i32, i32* %231, align 8, !tbaa !51
  %233 = icmp sgt i32 %232, 0
  br i1 %233, label %234, label %add_metadata_from_side_data.exit

234:                                              ; preds = %av_dict_free.exit.i
  %235 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %230, i64 0, i32 6
  %236 = load %struct.anon.4*, %struct.anon.4** %235, align 8, !tbaa !52
  %237 = sext i32 %232 to i64
  br label %239

238:                                              ; preds = %239
  %exitcond.i.i1 = icmp eq i64 %244, %237
  br i1 %exitcond.i.i1, label %add_metadata_from_side_data.exit, label %239

239:                                              ; preds = %238, %234
  %240 = phi i64 [ 0, %234 ], [ %244, %238 ]
  %241 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %236, i64 %240, i32 2
  %242 = load i32, i32* %241, align 4, !tbaa !53
  %243 = icmp eq i32 %242, 72
  %244 = add nuw nsw i64 %240, 1
  br i1 %243, label %av_packet_get_side_data.exit.i2, label %238

av_packet_get_side_data.exit.i2:                  ; preds = %239
  %245 = and i64 %240, 4294967295
  %246 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %236, i64 %245, i32 1
  %247 = load i32, i32* %246, align 8, !tbaa !55
  %248 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %236, i64 %245, i32 0
  %249 = load i8*, i8** %248, align 8, !tbaa !56
  %250 = icmp eq i8* %249, null
  br i1 %250, label %add_metadata_from_side_data.exit, label %251

251:                                              ; preds = %av_packet_get_side_data.exit.i2
  %252 = sext i32 %247 to i64
  %253 = getelementptr inbounds i8, i8* %249, i64 %252
  %254 = icmp sgt i32 %247, 0
  br i1 %254, label %255, label %add_metadata_from_side_data.exit

255:                                              ; preds = %251
  %256 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 45
  %257 = bitcast i8** %7 to i8*
  %258 = bitcast %struct.AVDictionary** %256 to i8**
  %259 = bitcast i8** %5 to i8*
  %260 = bitcast i8** %6 to i8*
  br label %261

261:                                              ; preds = %strlen.exit6.i, %255
  %262 = phi i8* [ %249, %255 ], [ %385, %strlen.exit6.i ]
  br label %263

263:                                              ; preds = %263, %261
  %264 = phi i8* [ %262, %261 ], [ %267, %263 ]
  %265 = load i8, i8* %264, align 1, !tbaa !57
  %266 = icmp eq i8 %265, 0
  %267 = getelementptr inbounds i8, i8* %264, i64 1
  br i1 %266, label %strlen.exit.i, label %263

strlen.exit.i:                                    ; preds = %263
  %268 = ptrtoint i8* %264 to i64
  %269 = ptrtoint i8* %262 to i64
  %270 = sub i64 %268, %269
  %271 = getelementptr inbounds i8, i8* %262, i64 1
  %272 = getelementptr inbounds i8, i8* %271, i64 %270
  %273 = load %struct.AVDictionary*, %struct.AVDictionary** %256, align 8, !tbaa !6
  %274 = icmp eq %struct.AVDictionary* %273, null
  br i1 %274, label %av_dict_get.exit.thread.i.i, label %275

275:                                              ; preds = %strlen.exit.i
  %276 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %273, i64 0, i32 0
  %277 = load i32, i32* %276, align 8, !tbaa !71
  %278 = icmp eq i32 %277, 0
  %279 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %273, i64 0, i32 1
  br i1 %278, label %.thread.i.thread.i, label %280

280:                                              ; preds = %275
  %281 = load %struct.entry*, %struct.entry** %279, align 8, !tbaa !73
  %282 = zext i32 %277 to i64
  br label %283

283:                                              ; preds = %315, %280
  %284 = phi i64 [ 0, %280 ], [ %316, %315 ]
  %285 = getelementptr inbounds %struct.entry, %struct.entry* %281, i64 %284, i32 0
  %286 = load i8*, i8** %285, align 8, !tbaa !74
  br label %.preheader.i.i.i

.preheader.i.i.i:                                 ; preds = %.preheader.i.i.i, %283
  %287 = phi i32 [ %312, %.preheader.i.i.i ], [ 0, %283 ]
  %288 = zext i32 %287 to i64
  %289 = getelementptr inbounds i8, i8* %286, i64 %288
  %290 = load i8, i8* %289, align 1, !tbaa !57
  %291 = sext i8 %290 to i32
  %292 = sext i8 %290 to i64
  %293 = getelementptr inbounds i8, i8* getelementptr inbounds (<{ [256 x i8], [128 x i8] }>, <{ [256 x i8], [128 x i8] }>* @_ctype_b, i64 0, i32 0, i64 128), i64 %292
  %294 = load i8, i8* %293, align 1, !tbaa !57
  %295 = and i8 %294, 3
  %296 = icmp eq i8 %295, 2
  %297 = add nsw i32 %291, -32
  %298 = select i1 %296, i32 %297, i32 %291
  %299 = getelementptr inbounds i8, i8* %262, i64 %288
  %300 = load i8, i8* %299, align 1, !tbaa !57
  %301 = sext i8 %300 to i32
  %302 = sext i8 %300 to i64
  %303 = getelementptr inbounds i8, i8* getelementptr inbounds (<{ [256 x i8], [128 x i8] }>, <{ [256 x i8], [128 x i8] }>* @_ctype_b, i64 0, i32 0, i64 128), i64 %302
  %304 = load i8, i8* %303, align 1, !tbaa !57
  %305 = and i8 %304, 3
  %306 = icmp eq i8 %305, 2
  %307 = add nsw i32 %301, -32
  %308 = select i1 %306, i32 %307, i32 %301
  %309 = icmp ne i32 %298, %308
  %310 = icmp eq i8 %300, 0
  %311 = or i1 %310, %309
  %312 = add i32 %287, 1
  br i1 %311, label %.loopexit.i.i.i, label %.preheader.i.i.i

.loopexit.i.i.i:                                  ; preds = %.preheader.i.i.i
  %313 = or i8 %300, %290
  %314 = icmp eq i8 %313, 0
  br i1 %314, label %av_dict_get.exit.i.i, label %315

315:                                              ; preds = %.loopexit.i.i.i
  %316 = add nuw nsw i64 %284, 1
  %exitcond.i.i.i = icmp eq i64 %316, %282
  br i1 %exitcond.i.i.i, label %.thread.i.i, label %283

av_dict_get.exit.thread.i.i:                      ; preds = %strlen.exit.i
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %257) #10
  store i8* null, i8** %7, align 8, !tbaa !6
  call fastcc void @posix_memalign(i8** nonnull %7, i64 16) #20
  %317 = load i8*, i8** %7, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %257) #10
  %318 = icmp eq i8* %317, null
  br i1 %318, label %av_mallocz.exit.i.i, label %319

319:                                              ; preds = %av_dict_get.exit.thread.i.i
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %317, i8 0, i64 16, i1 false) #10
  br label %av_mallocz.exit.i.i

av_mallocz.exit.i.i:                              ; preds = %319, %av_dict_get.exit.thread.i.i
  %320 = bitcast i8* %317 to %struct.AVDictionary*
  store i8* %317, i8** %258, align 8, !tbaa !6
  br label %.thread.i.i

av_dict_get.exit.i.i:                             ; preds = %.loopexit.i.i.i
  %321 = and i64 %284, 4294967295
  %322 = getelementptr inbounds %struct.entry, %struct.entry* %281, i64 %321
  %323 = icmp eq %struct.entry* %322, null
  br i1 %323, label %.thread.i.i, label %324

324:                                              ; preds = %av_dict_get.exit.i.i
  %325 = getelementptr inbounds %struct.entry, %struct.entry* %281, i64 %321, i32 1
  %326 = load i8*, i8** %325, align 8, !tbaa !76
  call fastcc void @free(i8* %326) #20
  %327 = getelementptr inbounds %struct.entry, %struct.entry* %322, i64 0, i32 0
  %328 = load i8*, i8** %327, align 8, !tbaa !74
  call fastcc void @free(i8* %328) #20
  %329 = load %struct.entry*, %struct.entry** %279, align 8, !tbaa !73
  %330 = load i32, i32* %276, align 8, !tbaa !71
  %331 = add nsw i32 %330, -1
  store i32 %331, i32* %276, align 8, !tbaa !71
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds %struct.entry, %struct.entry* %329, i64 %332
  %334 = bitcast %struct.entry* %322 to i8*
  %335 = bitcast %struct.entry* %333 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %334, i8* align 8 %335, i64 16, i1 false) #10, !tbaa.struct !77
  br label %359

.thread.i.i:                                      ; preds = %315, %av_dict_get.exit.i.i, %av_mallocz.exit.i.i
  %.pre.i4.i = phi i32 [ %277, %av_dict_get.exit.i.i ], [ 0, %av_mallocz.exit.i.i ], [ %277, %315 ]
  %336 = phi %struct.AVDictionary* [ %273, %av_dict_get.exit.i.i ], [ %320, %av_mallocz.exit.i.i ], [ %273, %315 ]
  %phitmp.i.i = add i32 %.pre.i4.i, 1
  %phitmp54.i.i = sext i32 %phitmp.i.i to i64
  %phitmp55.i.i = shl nsw i64 %phitmp54.i.i, 4
  %337 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %336, i64 0, i32 1
  %338 = icmp ugt i64 %phitmp55.i.i, 2147483615
  br i1 %338, label %add_metadata_from_side_data.exit, label %.thread.i.thread.i

.thread.i.thread.i:                               ; preds = %.thread.i.i, %275
  %.in.in.i = phi %struct.entry** [ %337, %.thread.i.i ], [ %279, %275 ]
  %339 = phi %struct.AVDictionary* [ %336, %.thread.i.i ], [ %273, %275 ]
  %340 = phi i64 [ %phitmp55.i.i, %.thread.i.i ], [ 16, %275 ]
  %.in.i = bitcast %struct.entry** %.in.in.i to i8**
  %341 = load i8*, i8** %.in.i, align 8, !tbaa !73
  %342 = icmp eq i64 %340, 0
  %343 = zext i1 %342 to i64
  %344 = or i64 %340, %343
  %345 = icmp eq i8* %341, null
  br i1 %345, label %346, label %free.exit.i.i.i

346:                                              ; preds = %.thread.i.thread.i
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %260) #10
  call fastcc void @posix_memalign(i8** nonnull %6, i64 %344) #20
  %347 = load i8*, i8** %6, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %260) #10
  br label %av_realloc.exit.i

free.exit.i.i.i:                                  ; preds = %.thread.i.thread.i
  %348 = getelementptr i8, i8* %341, i64 -8
  %349 = bitcast i8* %348 to i64*
  %350 = load i64, i64* %349, align 8, !tbaa !28
  %351 = icmp ult i64 %350, %344
  %352 = select i1 %351, i64 %350, i64 %344
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %259) #10
  call fastcc void @posix_memalign(i8** nonnull %5, i64 %344) #20
  %353 = load i8*, i8** %5, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %259) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %353, i8* nonnull align 1 %341, i64 %352, i1 false) #10
  %354 = call i64 @__cc_read_unchecked(i64* %349) #20
  %355 = getelementptr i8, i8* %341, i64 %354
  call void @__cc_access_invalid(i8* nonnull %341, i8* %355) #20
  br label %av_realloc.exit.i

av_realloc.exit.i:                                ; preds = %free.exit.i.i.i, %346
  %356 = phi i8* [ %347, %346 ], [ %353, %free.exit.i.i.i ]
  %357 = icmp eq i8* %356, null
  br i1 %357, label %add_metadata_from_side_data.exit, label %358

358:                                              ; preds = %av_realloc.exit.i
  store i8* %356, i8** %.in.i, align 8, !tbaa !73
  br label %359

359:                                              ; preds = %358, %324
  %360 = phi %struct.AVDictionary* [ %273, %324 ], [ %339, %358 ]
  %361 = call fastcc noalias i8* @av_strdup(i8* %262) #20
  %362 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %360, i64 0, i32 1
  %363 = load %struct.entry*, %struct.entry** %362, align 8, !tbaa !73
  %364 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %360, i64 0, i32 0
  %365 = load i32, i32* %364, align 8, !tbaa !71
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds %struct.entry, %struct.entry* %363, i64 %366, i32 0
  store i8* %361, i8** %367, align 8, !tbaa !74
  %368 = call fastcc noalias i8* @av_strdup(i8* nonnull %272) #20
  %369 = load %struct.entry*, %struct.entry** %362, align 8, !tbaa !73
  %370 = load i32, i32* %364, align 8, !tbaa !71
  %.pre38.i.i = sext i32 %370 to i64
  %371 = getelementptr inbounds %struct.entry, %struct.entry* %369, i64 %.pre38.i.i, i32 1
  store i8* %368, i8** %371, align 8, !tbaa !76
  %372 = add nsw i32 %370, 1
  store i32 %372, i32* %364, align 8, !tbaa !71
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %374, label %av_dict_set.exit.i.preheader

374:                                              ; preds = %359
  %375 = bitcast %struct.entry* %369 to i8*
  call fastcc void @free(i8* %375) #20
  %376 = load i8*, i8** %258, align 8, !tbaa !6
  call fastcc void @free(i8* %376) #20
  store i8* null, i8** %258, align 8, !tbaa !6
  br label %av_dict_set.exit.i.preheader

av_dict_set.exit.i.preheader:                     ; preds = %374, %359
  br label %av_dict_set.exit.i

av_dict_set.exit.i:                               ; preds = %av_dict_set.exit.i.preheader, %av_dict_set.exit.i
  %377 = phi i8* [ %380, %av_dict_set.exit.i ], [ %272, %av_dict_set.exit.i.preheader ]
  %378 = load i8, i8* %377, align 1, !tbaa !57
  %379 = icmp eq i8 %378, 0
  %380 = getelementptr inbounds i8, i8* %377, i64 1
  br i1 %379, label %strlen.exit6.i, label %av_dict_set.exit.i

strlen.exit6.i:                                   ; preds = %av_dict_set.exit.i
  %381 = ptrtoint i8* %377 to i64
  %382 = ptrtoint i8* %272 to i64
  %383 = sub i64 %381, %382
  %384 = getelementptr inbounds i8, i8* %272, i64 1
  %385 = getelementptr inbounds i8, i8* %384, i64 %383
  %386 = icmp ult i8* %385, %253
  br i1 %386, label %261, label %add_metadata_from_side_data.exit

add_metadata_from_side_data.exit:                 ; preds = %238, %.thread.i.i, %av_realloc.exit.i, %strlen.exit6.i, %av_dict_free.exit.i, %av_packet_get_side_data.exit.i2, %251
  %387 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 45
  %388 = bitcast %struct.AVDictionary** %387 to i64*
  %389 = load i64, i64* %388, align 8, !tbaa !78
  %390 = bitcast %struct.AVDictionary** %202 to i64*
  store i64 %389, i64* %390, align 8, !tbaa !79
  store %struct.AVPacket* null, %struct.AVPacket** %153, align 8, !tbaa !64
  %391 = icmp eq i32 %60, 0
  br i1 %391, label %399, label %392

392:                                              ; preds = %add_metadata_from_side_data.exit
  call fastcc void @ff_packet_free_side_data(%struct.AVPacket.21* nonnull %59) #20
  %393 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %8, i64 0, i32 3
  %394 = load i32, i32* %393, align 8, !tbaa !25
  %395 = icmp eq i32 %156, %394
  br i1 %395, label %396, label %399

396:                                              ; preds = %392
  %397 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %398 = load i32, i32* %397, align 8, !tbaa !25
  br label %399

399:                                              ; preds = %396, %392, %add_metadata_from_side_data.exit
  %400 = phi i32 [ %398, %396 ], [ %156, %392 ], [ %156, %add_metadata_from_side_data.exit ]
  %401 = load i32, i32* %2, align 4, !tbaa !29
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %438, label %403

403:                                              ; preds = %399
  %404 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 104
  %405 = load i32, i32* %404, align 8, !tbaa !80
  %406 = add nsw i32 %405, 1
  store i32 %406, i32* %404, align 8, !tbaa !80
  %407 = load i64, i64* %32, align 8, !tbaa !40
  %408 = load i64, i64* %33, align 8, !tbaa !41
  %409 = icmp eq i64 %408, -9223372036854775808
  br i1 %409, label %418, label %410

410:                                              ; preds = %403
  %411 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 199
  %412 = load i64, i64* %411, align 8, !tbaa !81
  %413 = icmp sge i64 %412, %408
  %414 = zext i1 %413 to i64
  %415 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 197
  %416 = load i64, i64* %415, align 8, !tbaa !82
  %417 = add nsw i64 %416, %414
  store i64 %417, i64* %415, align 8, !tbaa !82
  store i64 %408, i64* %411, align 8, !tbaa !81
  br label %418

418:                                              ; preds = %410, %403
  %419 = icmp ne i64 %407, -9223372036854775808
  br i1 %419, label %423, label %420

420:                                              ; preds = %418
  %421 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 196
  %422 = load i64, i64* %421, align 8, !tbaa !83
  br label %guess_correct_pts.exit

423:                                              ; preds = %418
  %424 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 198
  %425 = load i64, i64* %424, align 8, !tbaa !84
  %426 = icmp sge i64 %425, %407
  %427 = zext i1 %426 to i64
  %428 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 196
  %429 = load i64, i64* %428, align 8, !tbaa !83
  %430 = add nsw i64 %429, %427
  store i64 %430, i64* %428, align 8, !tbaa !83
  store i64 %407, i64* %424, align 8, !tbaa !84
  br label %guess_correct_pts.exit

guess_correct_pts.exit:                           ; preds = %420, %423
  %431 = phi i64 [ %422, %420 ], [ %430, %423 ]
  %432 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 197
  %433 = load i64, i64* %432, align 8, !tbaa !82
  %434 = icmp sle i64 %431, %433
  %435 = or i1 %409, %434
  %436 = and i1 %419, %435
  %437 = select i1 %436, i64 %407, i64 %408
  store i64 %437, i64* %31, align 8, !tbaa !38
  br label %438

438:                                              ; preds = %guess_correct_pts.exit, %399, %53
  %439 = phi i32 [ %400, %399 ], [ %400, %guess_correct_pts.exit ], [ 0, %53 ]
  store i8** %42, i8*** %43, align 8, !tbaa !48
  br label %440

440:                                              ; preds = %438, %25, %16
  %441 = phi i32 [ -22, %16 ], [ %439, %438 ], [ -22, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %9) #10
  ret i32 %441
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal fastcc void @exit() unnamed_addr #5 {
  tail call fastcc void @__call_exitprocs() #20
  tail call fastcc void @__libc_fini_array() #20
  tail call fastcc void @_exit() #21
  unreachable
}

; Function Attrs: nounwind optsize uwtable
define internal void @av_free_packet(%struct.AVPacket.21*) unnamed_addr #3 {
  %2 = icmp eq %struct.AVPacket.21* %0, null
  br i1 %2, label %26, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 9
  %5 = bitcast {}** %4 to void (%struct.AVPacket.21*)**
  %6 = load void (%struct.AVPacket.21*)*, void (%struct.AVPacket.21*)** %5, align 8, !tbaa !26
  %7 = icmp eq void (%struct.AVPacket.21*)* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void %6(%struct.AVPacket.21* nonnull %0) #20
  br label %9

9:                                                ; preds = %8, %3
  %10 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  store i8* null, i8** %10, align 8, !tbaa !24
  %11 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  store i32 0, i32* %11, align 8, !tbaa !25
  %12 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %13 = load i32, i32* %12, align 8, !tbaa !51
  %14 = icmp sgt i32 %13, 0
  %15 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  br i1 %14, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %9, %.preheader
  %16 = phi i64 [ %20, %.preheader ], [ 0, %9 ]
  %17 = load %struct.anon.4*, %struct.anon.4** %15, align 8, !tbaa !52
  %18 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %17, i64 %16, i32 0
  %19 = load i8*, i8** %18, align 8, !tbaa !56
  tail call fastcc void @free(i8* %19) #20
  %20 = add nuw nsw i64 %16, 1
  %21 = load i32, i32* %12, align 8, !tbaa !51
  %22 = sext i32 %21 to i64
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %9
  %24 = bitcast %struct.anon.4** %15 to i8**
  %25 = load i8*, i8** %24, align 8, !tbaa !6
  tail call fastcc void @free(i8* %25) #20
  store i8* null, i8** %24, align 8, !tbaa !6
  store i32 0, i32* %12, align 8, !tbaa !51
  br label %26

26:                                               ; preds = %.loopexit, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @free(i8*) unnamed_addr #6 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = getelementptr i8, i8* %0, i64 -8
  %5 = bitcast i8* %4 to i64*
  %6 = tail call i64 @__cc_read_unchecked(i64* %5) #20
  %7 = getelementptr i8, i8* %0, i64 %6
  tail call void @__cc_access_invalid(i8* nonnull %0, i8* %7) #20
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: optsize
declare dso_local i64 @__cc_read_unchecked(i64*) local_unnamed_addr #7

; Function Attrs: optsize
declare dso_local void @__cc_access_invalid(i8*, i8*) local_unnamed_addr #7

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @__call_exitprocs() unnamed_addr #6 {
  br label %.backedge

1:                                                ; preds = %.backedge
  %2 = add nsw i64 %4, -1
  %3 = icmp eq i64 %4, 0
  br i1 %3, label %12, label %.backedge.backedge

.backedge:                                        ; preds = %.backedge.backedge, %0
  %4 = phi i64 [ 31, %0 ], [ %.be, %.backedge.backedge ]
  %5 = getelementptr inbounds [32 x %struct._on_exit], [32 x %struct._on_exit]* @on_exits, i64 0, i64 %4, i32 0
  %6 = load void (i32, i8*)*, void (i32, i8*)** %5, align 16, !tbaa !85
  %7 = icmp eq void (i32, i8*)* %6, null
  br i1 %7, label %1, label %8

8:                                                ; preds = %.backedge
  %9 = getelementptr inbounds [32 x %struct._on_exit], [32 x %struct._on_exit]* @on_exits, i64 0, i64 %4, i32 1
  %10 = load i8*, i8** %9, align 8, !tbaa !87
  %11 = bitcast void (i32, i8*)** %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 16, i1 false)
  tail call void %6(i32 1, i8* %10) #20
  br label %.backedge.backedge

.backedge.backedge:                               ; preds = %8, %1
  %.be = phi i64 [ %2, %1 ], [ 31, %8 ]
  br label %.backedge

12:                                               ; preds = %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @__libc_fini_array() unnamed_addr #6 {
  br i1 icmp eq (i64 sdiv (i64 sub (i64 ptrtoint ([0 x void ()*]* @__fini_array_end to i64), i64 ptrtoint ([0 x void ()*]* @__fini_array_start to i64)), i64 8), i64 0), label %.loopexit, label %.preheader

.preheader:                                       ; preds = %0, %.preheader
  %1 = phi i64 [ %2, %.preheader ], [ sdiv (i64 sub (i64 ptrtoint ([0 x void ()*]* @__fini_array_end to i64), i64 ptrtoint ([0 x void ()*]* @__fini_array_start to i64)), i64 8), %0 ]
  %2 = add i64 %1, -1
  %3 = getelementptr inbounds [0 x void ()*], [0 x void ()*]* @__fini_array_start, i64 0, i64 %2
  %4 = load void ()*, void ()** %3, align 8, !tbaa !6
  tail call void %4() #20
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.preheader, %0
  ret void
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal fastcc void @_exit() unnamed_addr #5 {
  br label %1

1:                                                ; preds = %1, %0
  tail call void @__cc_trace(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.15, i64 0, i64 0)) #20
  br label %1
}

; Function Attrs: optsize
declare dso_local void @__cc_trace(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind optsize uwtable
define internal void @av_log(i8*, i32, i8* nocapture readonly, ...) unnamed_addr #3 {
  %4 = alloca %struct.__file_str, align 8
  %5 = alloca [3 x [1024 x i8]], align 16
  %6 = alloca [1024 x i8], align 16
  %7 = alloca [1 x %struct.__va_list_tag], align 16
  %8 = icmp eq i8* %0, null
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = bitcast [1 x %struct.__va_list_tag]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #10
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %7, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %10)
  br label %34

12:                                               ; preds = %3
  %13 = bitcast i8* %0 to %struct.AVClass**
  %14 = load %struct.AVClass*, %struct.AVClass** %13, align 8, !tbaa !6
  %15 = bitcast [1 x %struct.__va_list_tag]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #10
  %16 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %7, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %15)
  %17 = icmp eq %struct.AVClass* %14, null
  br i1 %17, label %34, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %14, i64 0, i32 3
  %20 = load i32, i32* %19, align 8, !tbaa !88
  %21 = icmp sgt i32 %20, 3280641
  br i1 %21, label %22, label %34

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %14, i64 0, i32 4
  %24 = load i32, i32* %23, align 4, !tbaa !90
  %25 = icmp ne i32 %24, 0
  %26 = icmp sgt i32 %1, 7
  %27 = and i1 %26, %25
  br i1 %27, label %28, label %34

28:                                               ; preds = %22
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 4, !tbaa !29
  %33 = add nsw i32 %32, %1
  br label %34

34:                                               ; preds = %9, %12, %18, %22, %28
  %35 = phi %struct.__va_list_tag* [ %16, %28 ], [ %16, %22 ], [ %16, %18 ], [ %16, %12 ], [ %11, %9 ]
  %36 = phi i8* [ %15, %28 ], [ %15, %22 ], [ %15, %18 ], [ %15, %12 ], [ %10, %9 ]
  %37 = phi i32 [ %33, %28 ], [ %1, %22 ], [ %1, %18 ], [ %1, %12 ], [ %1, %9 ]
  %38 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* %5, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3072, i8* nonnull %38) #10
  %39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %39) #10
  %40 = icmp sgt i32 %37, 32
  br i1 %40, label %av_log_default_callback.exit, label %41

41:                                               ; preds = %34
  br i1 %8, label %45, label %42

42:                                               ; preds = %41
  %43 = bitcast i8* %0 to %struct.AVClass**
  %44 = load %struct.AVClass*, %struct.AVClass** %43, align 8, !tbaa !6
  br label %45

45:                                               ; preds = %42, %41
  %46 = phi %struct.AVClass* [ %44, %42 ], [ null, %41 ]
  %47 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* %5, i64 0, i64 2, i64 0
  store i8 0, i8* %47, align 16, !tbaa !57
  %48 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* %5, i64 0, i64 1, i64 0
  store i8 0, i8* %48, align 16, !tbaa !57
  store i8 0, i8* %38, align 16, !tbaa !57
  %49 = load i32, i32* @av_log_default_callback.print_prefix, align 4, !tbaa !29
  %50 = icmp ne i32 %49, 0
  %51 = icmp ne %struct.AVClass* %46, null
  %52 = and i1 %51, %50
  br i1 %52, label %53, label %80

53:                                               ; preds = %45
  %54 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %46, i64 0, i32 5
  %55 = load i32, i32* %54, align 8, !tbaa !91
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %75, label %57

57:                                               ; preds = %53
  %58 = sext i32 %55 to i64
  %59 = getelementptr inbounds i8, i8* %0, i64 %58
  %60 = bitcast i8* %59 to %struct.AVClass***
  %61 = load %struct.AVClass**, %struct.AVClass*** %60, align 8, !tbaa !6
  %62 = icmp eq %struct.AVClass** %61, null
  br i1 %62, label %75, label %63

63:                                               ; preds = %57
  %64 = load %struct.AVClass*, %struct.AVClass** %61, align 8, !tbaa !6
  %65 = icmp eq %struct.AVClass* %64, null
  br i1 %65, label %75, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %64, i64 0, i32 1
  %68 = load i8* (i8*)*, i8* (i8*)** %67, align 8, !tbaa !92
  %69 = bitcast %struct.AVClass** %61 to i8*
  %70 = call i8* %68(i8* nonnull %69) #20
  call void (i8*, i64, i8*, ...) @snprintf(i8* nonnull %38, i64 undef, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.1857, i64 0, i64 0), i8* %70, %struct.AVClass** nonnull %61) #20
  %71 = load i32, i32* %54, align 8, !tbaa !91
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %0, i64 %72
  %74 = call fastcc i32 @get_category.1858(i8* %73) #20
  br label %75

75:                                               ; preds = %66, %63, %57, %53
  %.sroa.0.0.i = phi i32 [ 16, %53 ], [ 16, %57 ], [ 16, %63 ], [ %74, %66 ]
  %76 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %46, i64 0, i32 1
  %77 = load i8* (i8*)*, i8* (i8*)** %76, align 8, !tbaa !92
  %78 = call i8* %77(i8* %0) #20
  call void (i8*, i64, i8*, ...) @snprintf(i8* nonnull %48, i64 undef, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.1857, i64 0, i64 0), i8* %78, i8* %0) #20
  %79 = call fastcc i32 @get_category.1858(i8* %0) #20
  br label %80

80:                                               ; preds = %75, %45
  %.sroa.5.0.i = phi i32 [ %79, %75 ], [ 16, %45 ]
  %.sroa.0.1.i = phi i32 [ %.sroa.0.0.i, %75 ], [ 16, %45 ]
  %81 = bitcast %struct.__file_str* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %81) #10
  %82 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %4, i64 0, i32 0
  %83 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %4, i64 0, i32 0, i32 0
  store i16 0, i16* %83, align 8, !tbaa !93
  %84 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %4, i64 0, i32 0, i32 1
  store i8 2, i8* %84, align 2, !tbaa !94
  %85 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %4, i64 0, i32 0, i32 2
  store i32 (i8, %struct.__file*)* bitcast (i32 (i8, %struct.__file.39*)* @__file_str_put to i32 (i8, %struct.__file*)*), i32 (i8, %struct.__file*)** %85, align 8, !tbaa !95
  %86 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %4, i64 0, i32 0, i32 3
  %87 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %4, i64 0, i32 1
  %88 = bitcast i32 (%struct.__file*)** %86 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %88, i8 0, i64 16, i1 false) #10
  store i8* %47, i8** %87, align 8, !tbaa !96
  %89 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %4, i64 0, i32 2
  store i32 0, i32* %89, align 8, !tbaa !98
  %90 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %4, i64 0, i32 3
  store i32 1023, i32* %90, align 4, !tbaa !99
  %91 = call fastcc i32 @vfprintf(%struct.__file* nonnull %82, i8* %2, %struct.__va_list_tag* nonnull %35) #20
  %92 = icmp sgt i32 %91, -1
  br i1 %92, label %93, label %vsnprintf.exit.i.i

93:                                               ; preds = %80
  %94 = sext i32 %91 to i64
  %95 = icmp ult i64 %94, 1023
  %96 = select i1 %95, i64 %94, i64 1023
  %97 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* %5, i64 0, i64 2, i64 %96
  store i8 0, i8* %97, align 1, !tbaa !57
  br label %vsnprintf.exit.i.i

vsnprintf.exit.i.i:                               ; preds = %93, %80
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %81) #10
  br label %98

98:                                               ; preds = %98, %vsnprintf.exit.i.i
  %99 = phi i8* [ %47, %vsnprintf.exit.i.i ], [ %102, %98 ]
  %100 = load i8, i8* %99, align 1, !tbaa !57
  %101 = icmp eq i8 %100, 0
  %102 = getelementptr inbounds i8, i8* %99, i64 1
  br i1 %101, label %strlen.exit.i.i, label %98

strlen.exit.i.i:                                  ; preds = %98
  %103 = ptrtoint i8* %99 to i64
  %104 = ptrtoint i8* %47 to i64
  %105 = sub i64 %103, %104
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %format_line.exit.i, label %107

107:                                              ; preds = %strlen.exit.i.i
  %108 = add i64 %105, -1
  %109 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* %5, i64 0, i64 2, i64 %108
  %110 = load i8, i8* %109, align 1, !tbaa !57
  %111 = icmp eq i8 %110, 10
  %112 = zext i1 %111 to i32
  br label %format_line.exit.i

format_line.exit.i:                               ; preds = %107, %strlen.exit.i.i
  %113 = phi i32 [ 0, %strlen.exit.i.i ], [ %112, %107 ]
  store i32 %113, i32* @av_log_default_callback.print_prefix, align 4, !tbaa !29
  call void (i8*, i64, i8*, ...) @snprintf(i8* nonnull %39, i64 undef, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1856, i64 0, i64 0), i8* nonnull %38, i8* nonnull %48, i8* nonnull %47) #20
  br label %114

114:                                              ; preds = %114, %format_line.exit.i
  %115 = phi i8* [ %39, %format_line.exit.i ], [ %117, %114 ]
  %116 = phi i8* [ getelementptr inbounds ([1024 x i8], [1024 x i8]* @av_log_default_callback.prev, i64 0, i64 0), %format_line.exit.i ], [ %119, %114 ]
  %117 = getelementptr inbounds i8, i8* %115, i64 1
  %118 = load i8, i8* %115, align 1, !tbaa !57
  %119 = getelementptr inbounds i8, i8* %116, i64 1
  store i8 %118, i8* %116, align 1, !tbaa !57
  %120 = icmp eq i8 %118, 0
  br i1 %120, label %strcpy.exit.i, label %114

strcpy.exit.i:                                    ; preds = %114
  %121 = load i8, i8* %38, align 16, !tbaa !57
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %.loopexit13.i, label %.preheader12.i

.preheader12.i:                                   ; preds = %strcpy.exit.i, %130
  %123 = phi i8 [ %132, %130 ], [ %121, %strcpy.exit.i ]
  %124 = phi i8* [ %131, %130 ], [ %38, %strcpy.exit.i ]
  %125 = icmp ult i8 %123, 8
  %126 = add i8 %123, -14
  %127 = icmp ult i8 %126, 18
  %128 = or i1 %125, %127
  br i1 %128, label %129, label %130

129:                                              ; preds = %.preheader12.i
  store i8 63, i8* %124, align 1, !tbaa !57
  br label %130

130:                                              ; preds = %129, %.preheader12.i
  %131 = getelementptr inbounds i8, i8* %124, i64 1
  %132 = load i8, i8* %131, align 1, !tbaa !57
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %.loopexit13.i, label %.preheader12.i

.loopexit13.i:                                    ; preds = %130, %strcpy.exit.i
  call fastcc void @colored_fputs(i32 %.sroa.0.1.i, i8* nonnull %38) #20
  %134 = load i8, i8* %48, align 16, !tbaa !57
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %.loopexit11.i, label %.preheader10.i

.preheader10.i:                                   ; preds = %.loopexit13.i, %143
  %136 = phi i8 [ %145, %143 ], [ %134, %.loopexit13.i ]
  %137 = phi i8* [ %144, %143 ], [ %48, %.loopexit13.i ]
  %138 = icmp ult i8 %136, 8
  %139 = add i8 %136, -14
  %140 = icmp ult i8 %139, 18
  %141 = or i1 %138, %140
  br i1 %141, label %142, label %143

142:                                              ; preds = %.preheader10.i
  store i8 63, i8* %137, align 1, !tbaa !57
  br label %143

143:                                              ; preds = %142, %.preheader10.i
  %144 = getelementptr inbounds i8, i8* %137, i64 1
  %145 = load i8, i8* %144, align 1, !tbaa !57
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %.loopexit11.i, label %.preheader10.i

.loopexit11.i:                                    ; preds = %143, %.loopexit13.i
  call fastcc void @colored_fputs(i32 %.sroa.5.0.i, i8* nonnull %48) #20
  %147 = load i8, i8* %47, align 16, !tbaa !57
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %.loopexit.i, label %.preheader.i

.preheader.i:                                     ; preds = %.loopexit11.i, %156
  %149 = phi i8 [ %158, %156 ], [ %147, %.loopexit11.i ]
  %150 = phi i8* [ %157, %156 ], [ %47, %.loopexit11.i ]
  %151 = icmp ult i8 %149, 8
  %152 = add i8 %149, -14
  %153 = icmp ult i8 %152, 18
  %154 = or i1 %151, %153
  br i1 %154, label %155, label %156

155:                                              ; preds = %.preheader.i
  store i8 63, i8* %150, align 1, !tbaa !57
  br label %156

156:                                              ; preds = %155, %.preheader.i
  %157 = getelementptr inbounds i8, i8* %150, i64 1
  %158 = load i8, i8* %157, align 1, !tbaa !57
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %.loopexit.i, label %.preheader.i

.loopexit.i:                                      ; preds = %156, %.loopexit11.i
  %160 = ashr i32 %37, 3
  %161 = icmp slt i32 %160, 6
  %162 = select i1 %161, i32 %160, i32 6
  %163 = icmp sgt i32 %162, 0
  %164 = select i1 %163, i32 %162, i32 0
  call fastcc void @colored_fputs(i32 %164, i8* nonnull %47) #20
  br label %av_log_default_callback.exit

av_log_default_callback.exit:                     ; preds = %34, %.loopexit.i
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %39) #10
  call void @llvm.lifetime.end.p0i8(i64 3072, i8* nonnull %38) #10
  call void @llvm.va_end(i8* nonnull %36)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #10
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @av_image_check_size(i32, i32, i8*) unnamed_addr #3 {
  %4 = alloca %struct.FileLogContext, align 8
  %5 = bitcast %struct.FileLogContext* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #10
  %6 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %4, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %6, align 8, !tbaa !100
  %7 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %4, i64 0, i32 1
  store i32 0, i32* %7, align 8, !tbaa !102
  %8 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %4, i64 0, i32 2
  store i8* %2, i8** %8, align 8, !tbaa !103
  %9 = icmp sgt i32 %0, 0
  %10 = icmp sgt i32 %1, 0
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %3
  %13 = add nuw i32 %0, 128
  %14 = zext i32 %13 to i64
  %15 = add nuw i32 %1, 128
  %16 = zext i32 %15 to i64
  %17 = mul nuw i64 %16, %14
  %18 = icmp ult i64 %17, 268435455
  br i1 %18, label %20, label %19

19:                                               ; preds = %12, %3
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %5, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1835, i64 0, i64 0), i32 %0, i32 %1) #20
  br label %20

20:                                               ; preds = %19, %12
  %21 = phi i32 [ -22, %19 ], [ 0, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #10
  ret i32 %21
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @av_packet_split_side_data(%struct.AVPacket.21* nocapture) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8, !tbaa !51
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %.loopexit

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8, !tbaa !25
  %8 = icmp sgt i32 %7, 12
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8, !tbaa !24
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds i8, i8* %11, i64 %12
  %14 = getelementptr inbounds i8, i8* %13, i64 -8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1, !tbaa !57
  %17 = trunc i64 %16 to i32
  %18 = tail call i32 @llvm.bswap.i32(i32 %17) #10
  %19 = zext i32 %18 to i64
  %20 = shl nuw i64 %19, 32
  %21 = lshr i64 %16, 32
  %22 = trunc i64 %21 to i32
  %23 = tail call i32 @llvm.bswap.i32(i32 %22) #10
  %24 = zext i32 %23 to i64
  %25 = or i64 %20, %24
  %26 = icmp eq i64 %25, -8336834640763033090
  %27 = ptrtoint i8* %11 to i64
  br i1 %26, label %28, label %.loopexit

28:                                               ; preds = %9
  %29 = getelementptr inbounds i8, i8* %14, i64 -5
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1, !tbaa !57
  %32 = tail call i32 @llvm.bswap.i32(i32 %31) #10
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %.loopexit, label %34

34:                                               ; preds = %28
  %35 = bitcast i8** %10 to i64*
  br label %36

36:                                               ; preds = %48, %34
  %37 = phi i32 [ %32, %34 ], [ %56, %48 ]
  %38 = phi i8* [ %29, %34 ], [ %52, %48 ]
  %39 = phi i32 [ 1, %34 ], [ %53, %48 ]
  %40 = ptrtoint i8* %38 to i64
  %41 = sub i64 %40, %27
  %42 = zext i32 %37 to i64
  %43 = icmp slt i64 %41, %42
  br i1 %43, label %.loopexit, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds i8, i8* %38, i64 4
  %46 = load i8, i8* %45, align 1, !tbaa !57
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %58, label %48

48:                                               ; preds = %44
  %49 = add nuw i32 %37, 5
  %50 = zext i32 %49 to i64
  %51 = sub nsw i64 0, %50
  %52 = getelementptr inbounds i8, i8* %38, i64 %51
  %53 = add nuw nsw i32 %39, 1
  %54 = bitcast i8* %52 to i32*
  %55 = load i32, i32* %54, align 1, !tbaa !57
  %56 = tail call i32 @llvm.bswap.i32(i32 %55) #10
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %.loopexit, label %36

58:                                               ; preds = %44
  %59 = zext i32 %39 to i64
  %60 = shl nuw nsw i64 %59, 4
  %61 = tail call fastcc noalias i8* @av_malloc(i64 %60) #20
  %62 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  %63 = bitcast %struct.anon.4** %62 to i8**
  store i8* %61, i8** %63, align 8, !tbaa !52
  %64 = icmp eq i8* %61, null
  br i1 %64, label %.loopexit, label %65

65:                                               ; preds = %58
  %66 = load i8*, i8** %10, align 8, !tbaa !24
  %67 = load i32, i32* %6, align 8, !tbaa !25
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = getelementptr inbounds i8, i8* %69, i64 -8
  %71 = getelementptr inbounds i8, i8* %70, i64 -5
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 1, !tbaa !57
  %74 = tail call i32 @llvm.bswap.i32(i32 %73) #10
  %75 = icmp sgt i32 %74, -1
  br i1 %75, label %76, label %.loopexit8

76:                                               ; preds = %65
  %77 = ptrtoint i8* %66 to i64
  %78 = ptrtoint i8* %71 to i64
  %79 = sub i64 %78, %77
  %80 = zext i32 %74 to i64
  %81 = icmp slt i64 %79, %80
  br i1 %81, label %.loopexit8, label %.preheader

.loopexit8:                                       ; preds = %114, %106, %76, %65
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.1839, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4.17, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2.13, i64 0, i64 0), i32 288) #20
  tail call fastcc void @abort() #21
  unreachable

.preheader:                                       ; preds = %76, %114
  %82 = phi i64 [ %119, %114 ], [ %80, %76 ]
  %83 = phi i8* [ %109, %114 ], [ %71, %76 ]
  %84 = phi i32 [ %112, %114 ], [ %74, %76 ]
  %85 = phi i64 [ %115, %114 ], [ 0, %76 ]
  %86 = add nuw i32 %84, 16
  %87 = zext i32 %86 to i64
  %88 = tail call fastcc noalias i8* @av_malloc(i64 %87) #20
  %89 = load %struct.anon.4*, %struct.anon.4** %62, align 8, !tbaa !52
  %90 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %89, i64 %85, i32 0
  store i8* %88, i8** %90, align 8, !tbaa !56
  %91 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %89, i64 %85, i32 1
  store i32 %84, i32* %91, align 8, !tbaa !55
  %92 = getelementptr inbounds i8, i8* %83, i64 4
  %93 = load i8, i8* %92, align 1, !tbaa !57
  %94 = and i8 %93, 127
  %95 = zext i8 %94 to i32
  %96 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %89, i64 %85, i32 2
  store i32 %95, i32* %96, align 4, !tbaa !53
  %97 = icmp eq i8* %88, null
  br i1 %97, label %.loopexit, label %98

98:                                               ; preds = %.preheader
  %99 = sub nsw i64 0, %82
  %100 = getelementptr inbounds i8, i8* %83, i64 %99
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %88, i8* align 1 %100, i64 %82, i1 false)
  %101 = add nuw i32 %84, 5
  %102 = load i32, i32* %6, align 8, !tbaa !25
  %103 = sub i32 %102, %101
  store i32 %103, i32* %6, align 8, !tbaa !25
  %104 = load i8, i8* %92, align 1, !tbaa !57
  %105 = icmp slt i8 %104, 0
  br i1 %105, label %121, label %106

106:                                              ; preds = %98
  %107 = zext i32 %101 to i64
  %108 = sub nsw i64 0, %107
  %109 = getelementptr inbounds i8, i8* %83, i64 %108
  %110 = bitcast i8* %109 to i32*
  %111 = load i32, i32* %110, align 1, !tbaa !57
  %112 = tail call i32 @llvm.bswap.i32(i32 %111) #10
  %113 = icmp sgt i32 %112, -1
  br i1 %113, label %114, label %.loopexit8

114:                                              ; preds = %106
  %115 = add nuw i64 %85, 1
  %116 = load i64, i64* %35, align 8, !tbaa !24
  %117 = ptrtoint i8* %109 to i64
  %118 = sub i64 %117, %116
  %119 = zext i32 %112 to i64
  %120 = icmp slt i64 %118, %119
  br i1 %120, label %.loopexit8, label %.preheader

121:                                              ; preds = %98
  %122 = trunc i64 %85 to i32
  %123 = add nsw i32 %103, -8
  store i32 %123, i32* %6, align 8, !tbaa !25
  %124 = add nuw nsw i32 %122, 1
  store i32 %124, i32* %2, align 8, !tbaa !51
  br label %.loopexit

.loopexit:                                        ; preds = %48, %36, %.preheader, %121, %58, %28, %9, %5, %1
  %125 = phi i32 [ 1, %121 ], [ -12, %58 ], [ 0, %1 ], [ 0, %9 ], [ 0, %5 ], [ 0, %28 ], [ -12, %.preheader ], [ 0, %36 ], [ 0, %48 ]
  ret i32 %125
}

; Function Attrs: noinline nounwind optsize uwtable
define internal fastcc void @posix_memalign(i8** nocapture nonnull, i64) unnamed_addr #2 {
  %3 = load i64, i64* @pos, align 8, !tbaa !28
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  store i64 4294967296, i64* @pos, align 8, !tbaa !28
  br label %6

6:                                                ; preds = %5, %2
  %7 = phi i64 [ %3, %2 ], [ 4294967296, %5 ]
  %8 = add i64 %7, 23
  %9 = and i64 %8, -16
  store i64 %9, i64* @pos, align 8, !tbaa !28
  %10 = inttoptr i64 %9 to i8*
  store i8* %10, i8** %0, align 8, !tbaa !6
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @__cc_access_valid(i8* %10, i8* %11) #20
  %12 = load i64, i64* @pos, align 8, !tbaa !28
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  tail call void @__cc_write_unchecked(i64* %14, i64 %1) #20
  %15 = load i64, i64* @pos, align 8, !tbaa !28
  %16 = add i64 %15, %1
  %17 = inttoptr i64 %16 to i8*
  %18 = add i64 %16, 64
  store i64 %18, i64* @pos, align 8, !tbaa !28
  %19 = inttoptr i64 %18 to i8*
  %20 = tail call i64* @__cc_advise_poison(i8* %17, i8* %19) #20
  %21 = icmp eq i64* %20, null
  br i1 %21, label %37, label %22

22:                                               ; preds = %6
  %23 = ptrtoint i64* %20 to i64
  %24 = and i64 %23, 7
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void @__cc_flag_invalid() #20
  br label %27

27:                                               ; preds = %26, %22
  %28 = bitcast i64* %20 to i8*
  %29 = icmp ugt i8* %17, %28
  br i1 %29, label %30, label %31

30:                                               ; preds = %27
  tail call void @__cc_flag_invalid() #20
  br label %31

31:                                               ; preds = %30, %27
  %32 = getelementptr inbounds i64, i64* %20, i64 1
  %33 = bitcast i64* %32 to i8*
  %34 = icmp ugt i8* %33, %19
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  tail call void @__cc_flag_invalid() #20
  br label %36

36:                                               ; preds = %35, %31
  tail call void @__cc_write_and_poison(i64* nonnull %20, i64 0) #20
  br label %37

37:                                               ; preds = %36, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind optsize uwtable
define internal fastcc noalias i8* @av_strdup(i8* readonly) unnamed_addr #3 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %16, label %.preheader

.preheader:                                       ; preds = %1, %.preheader
  %3 = phi i8* [ %6, %.preheader ], [ %0, %1 ]
  %4 = load i8, i8* %3, align 1, !tbaa !57
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds i8, i8* %3, i64 1
  br i1 %5, label %strlen.exit, label %.preheader

strlen.exit:                                      ; preds = %.preheader
  %7 = ptrtoint i8* %3 to i64
  %8 = ptrtoint i8* %0 to i64
  %9 = sub i64 %7, %8
  %10 = shl i64 %9, 32
  %11 = add i64 %10, 4294967296
  %12 = ashr exact i64 %11, 32
  %13 = tail call fastcc noalias i8* @av_malloc(i64 %12) #22
  %14 = icmp eq i8* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %strlen.exit
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %13, i8* nonnull align 1 %0, i64 %12, i1 false)
  br label %16

16:                                               ; preds = %15, %strlen.exit, %1
  %17 = phi i8* [ null, %1 ], [ null, %strlen.exit ], [ %13, %15 ]
  ret i8* %17
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @ff_packet_free_side_data(%struct.AVPacket.21* nocapture) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8, !tbaa !51
  %4 = icmp sgt i32 %3, 0
  %5 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  br i1 %4, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %1, %.preheader
  %6 = phi i64 [ %10, %.preheader ], [ 0, %1 ]
  %7 = load %struct.anon.4*, %struct.anon.4** %5, align 8, !tbaa !52
  %8 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %7, i64 %6, i32 0
  %9 = load i8*, i8** %8, align 8, !tbaa !56
  tail call fastcc void @free(i8* %9) #20
  %10 = add nuw nsw i64 %6, 1
  %11 = load i32, i32* %2, align 8, !tbaa !51
  %12 = sext i32 %11 to i64
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %1
  %14 = bitcast %struct.anon.4** %5 to i8**
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  tail call fastcc void @free(i8* %15) #20
  store i8* null, i8** %14, align 8, !tbaa !6
  store i32 0, i32* %2, align 8, !tbaa !51
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc noalias i8* @av_malloc(i64) unnamed_addr #3 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #10
  store i8* null, i8** %3, align 8, !tbaa !6
  %5 = icmp ugt i64 %0, 2147483615
  br i1 %5, label %13, label %6

6:                                                ; preds = %1
  %7 = icmp eq i64 %0, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %6
  call fastcc void @posix_memalign(i8** nonnull %3, i64 %0) #20
  %9 = load i8*, i8** %3, align 8, !tbaa !6
  br label %13

10:                                               ; preds = %6
  %11 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #10
  store i8* null, i8** %2, align 8, !tbaa !6
  call fastcc void @posix_memalign(i8** nonnull %2, i64 1) #20
  %12 = load i8*, i8** %2, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #10
  store i8* %12, i8** %3, align 8, !tbaa !6
  br label %13

13:                                               ; preds = %10, %8, %1
  %14 = phi i8* [ null, %1 ], [ %9, %8 ], [ %12, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #10
  ret i8* %14
}

; Function Attrs: optsize
declare dso_local void @__cc_access_valid(i8*, i8*) local_unnamed_addr #7

; Function Attrs: optsize
declare dso_local void @__cc_write_unchecked(i64*, i64) local_unnamed_addr #7

; Function Attrs: optsize
declare dso_local i64* @__cc_advise_poison(i8*, i8*) local_unnamed_addr #7

; Function Attrs: optsize
declare dso_local void @__cc_flag_invalid() local_unnamed_addr #7

; Function Attrs: optsize
declare dso_local void @__cc_write_and_poison(i64*, i64) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

; Function Attrs: noreturn nounwind optsize uwtable
define internal fastcc void @abort() unnamed_addr #5 {
  tail call fastcc void @raise() #20
  tail call fastcc void @_exit() #21
  unreachable
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @raise() unnamed_addr #6 {
  tail call void @__cc_flag_invalid() #20
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly uwtable
define internal i8* @av_default_item_name(i8* nocapture readonly) #9 {
  %2 = bitcast i8* %0 to %struct.AVClass**
  %3 = load %struct.AVClass*, %struct.AVClass** %2, align 8, !tbaa !6
  %4 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %3, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8, !tbaa !104
  ret i8* %5
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind optsize uwtable
define internal void @snprintf(i8*, i64, i8* nocapture readonly, ...) unnamed_addr #6 {
  %4 = alloca [1 x %struct.__va_list_tag], align 16
  %5 = alloca %struct.__file_str, align 8
  %6 = bitcast [1 x %struct.__va_list_tag]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = bitcast %struct.__file_str* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #10
  %8 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %5, i64 0, i32 0
  %9 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %5, i64 0, i32 0, i32 0
  store i16 0, i16* %9, align 8, !tbaa !93
  %10 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %5, i64 0, i32 0, i32 1
  store i8 2, i8* %10, align 2, !tbaa !94
  %11 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %5, i64 0, i32 0, i32 2
  store i32 (i8, %struct.__file*)* bitcast (i32 (i8, %struct.__file.39*)* @__file_str_put to i32 (i8, %struct.__file*)*), i32 (i8, %struct.__file*)** %11, align 8, !tbaa !95
  %12 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %5, i64 0, i32 0, i32 3
  %13 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %5, i64 0, i32 1
  %14 = bitcast i32 (%struct.__file*)** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 16, i1 false)
  store i8* %0, i8** %13, align 8, !tbaa !96
  %15 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %5, i64 0, i32 2
  store i32 0, i32* %15, align 8, !tbaa !98
  %16 = getelementptr inbounds %struct.__file_str, %struct.__file_str* %5, i64 0, i32 3
  store i32 1023, i32* %16, align 4, !tbaa !99
  %17 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %4, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %6)
  %18 = call fastcc i32 @vfprintf(%struct.__file* nonnull %8, i8* %2, %struct.__va_list_tag* nonnull %17) #22
  call void @llvm.va_end(i8* nonnull %6)
  %19 = icmp sgt i32 %18, -1
  br i1 %19, label %20, label %25

20:                                               ; preds = %3
  %21 = sext i32 %18 to i64
  %22 = icmp ult i64 %21, 1023
  %23 = select i1 %22, i64 %21, i64 1023
  %24 = getelementptr inbounds i8, i8* %0, i64 %23
  store i8 0, i8* %24, align 1, !tbaa !57
  br label %25

25:                                               ; preds = %20, %3
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @get_category.1858(i8*) unnamed_addr #3 {
  %2 = bitcast i8* %0 to %struct.AVClass**
  %3 = load %struct.AVClass*, %struct.AVClass** %2, align 8, !tbaa !6
  %4 = icmp eq %struct.AVClass* %3, null
  br i1 %4, label %25, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %3, i64 0, i32 3
  %7 = load i32, i32* %6, align 8, !tbaa !88
  %8 = and i32 %7, 252
  %9 = icmp ult i32 %8, 100
  %10 = icmp slt i32 %7, 3357440
  %11 = or i1 %10, %9
  br i1 %11, label %25, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %3, i64 0, i32 8
  %14 = load i32, i32* %13, align 8, !tbaa !105
  %15 = icmp ugt i32 %14, 10
  br i1 %15, label %25, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %3, i64 0, i32 9
  %18 = load i32 (i8*)*, i32 (i8*)** %17, align 8, !tbaa !106
  %19 = icmp eq i32 (i8*)* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = tail call i32 %18(i8* nonnull %0) #20
  %22 = add i32 %21, 16
  br label %25

23:                                               ; preds = %16
  %24 = add nuw nsw i32 %14, 16
  br label %25

25:                                               ; preds = %23, %20, %12, %5, %1
  %26 = phi i32 [ %22, %20 ], [ %24, %23 ], [ 16, %1 ], [ 16, %12 ], [ 16, %5 ]
  ret i32 %26
}

; Function Attrs:  norecurse nounwind optsize uwtable
define internal i32 @__file_str_put(i8 signext, %struct.__file.39* nocapture) #0 {
  %3 = bitcast %struct.__file.39* %1 to %struct.__file_str.40*
  %4 = getelementptr inbounds %struct.__file.39, %struct.__file.39* %1, i64 1, i32 2
  %5 = bitcast {}** %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !98
  %7 = getelementptr inbounds %struct.__file_str.40, %struct.__file_str.40* %3, i64 0, i32 3
  %8 = load i32, i32* %7, align 4, !tbaa !99
  %9 = icmp slt i32 %6, %8
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__file.39, %struct.__file.39* %1, i64 1
  %12 = bitcast %struct.__file.39* %11 to i8**
  %13 = load i8*, i8** %12, align 8, !tbaa !96
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %12, align 8, !tbaa !96
  store i8 %0, i8* %13, align 1, !tbaa !57
  %15 = load i32, i32* %5, align 8, !tbaa !98
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %5, align 8, !tbaa !98
  %17 = sext i8 %0 to i32
  br label %18

18:                                               ; preds = %10, %2
  %19 = phi i32 [ %17, %10 ], [ -1, %2 ]
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @vfprintf(%struct.__file*, i8* nocapture readonly, %struct.__va_list_tag*) unnamed_addr #6 {
  %4 = alloca %union.anon.380, align 4
  %5 = bitcast %union.anon.380* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #10
  %6 = getelementptr inbounds %struct.__file, %struct.__file* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 2, !tbaa !94
  %8 = and i8 %7, 2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %.loopexit92, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %12 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %14 = ptrtoint %union.anon.380* %4 to i64
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon.380, %union.anon.380* %4, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %union.anon.380, %union.anon.380* %4, i64 0, i32 0, i32 2, i64 0
  %18 = bitcast %union.anon.380* %4 to [22 x i8]*
  %19 = getelementptr inbounds %struct.__file, %struct.__file* %0, i64 0, i32 2
  %20 = getelementptr inbounds %union.anon.380, %union.anon.380* %4, i64 0, i32 0, i32 0
  br label %fputc.exit

fputc.exit:                                       ; preds = %fputc.exit.backedge, %10
  %21 = phi i32 [ 0, %10 ], [ %.be, %fputc.exit.backedge ]
  %22 = phi i8* [ %1, %10 ], [ %.be616, %fputc.exit.backedge ]
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  %24 = load i8, i8* %22, align 1, !tbaa !57
  switch i8 %24, label %29 [
    i8 0, label %.loopexit92
    i8 37, label %25
  ]

25:                                               ; preds = %fputc.exit
  %26 = getelementptr inbounds i8, i8* %22, i64 2
  %27 = load i8, i8* %23, align 1, !tbaa !57
  %28 = icmp eq i8 %27, 37
  br i1 %28, label %29, label %.preheader91

29:                                               ; preds = %25, %fputc.exit
  %30 = phi i8* [ %26, %25 ], [ %23, %fputc.exit ]
  %31 = add nsw i32 %21, 1
  %32 = load i8, i8* %6, align 2, !tbaa !94
  %33 = and i8 %32, 2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %fputc.exit.backedge, label %35

35:                                               ; preds = %29
  %36 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %37 = call i32 %36(i8 signext %24, %struct.__file* nonnull %0) #20
  br label %fputc.exit.backedge

.preheader91:                                     ; preds = %25, %131
  %38 = phi i8 [ %136, %131 ], [ %27, %25 ]
  %39 = phi i16 [ %132, %131 ], [ 0, %25 ]
  %40 = phi i32 [ %133, %131 ], [ 0, %25 ]
  %41 = phi i32 [ %134, %131 ], [ 0, %25 ]
  %42 = phi i8* [ %135, %131 ], [ %26, %25 ]
  %43 = zext i16 %39 to i32
  %44 = icmp ult i16 %39, 32
  br i1 %44, label %45, label %57

45:                                               ; preds = %.preheader91
  switch i8 %38, label %59 [
    i8 48, label %46
    i8 43, label %48
    i8 32, label %50
    i8 45, label %53
    i8 35, label %55
  ]

46:                                               ; preds = %45
  %47 = or i16 %39, 1
  br label %131

48:                                               ; preds = %45
  %49 = or i16 %39, 2
  br label %50

50:                                               ; preds = %48, %45
  %51 = phi i16 [ %39, %45 ], [ %49, %48 ]
  %52 = or i16 %51, 4
  br label %131

53:                                               ; preds = %45
  %54 = or i16 %39, 8
  br label %131

55:                                               ; preds = %45
  %56 = or i16 %39, 16
  br label %131

57:                                               ; preds = %.preheader91
  %58 = icmp ult i16 %39, 128
  br i1 %58, label %59, label %118

59:                                               ; preds = %57, %45
  %60 = add i8 %38, -48
  %61 = icmp ult i8 %60, 10
  br i1 %61, label %62, label %74

62:                                               ; preds = %59
  %63 = and i32 %43, 64
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %62
  %66 = mul nsw i32 %41, 10
  %67 = zext i8 %60 to i32
  %68 = add nsw i32 %66, %67
  br label %131

69:                                               ; preds = %62
  %70 = mul nsw i32 %40, 10
  %71 = zext i8 %60 to i32
  %72 = add nsw i32 %70, %71
  %73 = or i16 %39, 32
  br label %131

74:                                               ; preds = %59
  switch i8 %38, label %138 [
    i8 42, label %75
    i8 46, label %113
    i8 108, label %119
    i8 104, label %125
  ]

75:                                               ; preds = %74
  %76 = and i32 %43, 64
  %77 = icmp eq i32 %76, 0
  %78 = load i32, i32* %11, align 8
  %79 = icmp ult i32 %78, 41
  br i1 %77, label %95, label %80

80:                                               ; preds = %75
  br i1 %79, label %81, label %86

81:                                               ; preds = %80
  %82 = load i8*, i8** %13, align 8
  %83 = sext i32 %78 to i64
  %84 = getelementptr i8, i8* %82, i64 %83
  %85 = add nuw nsw i32 %78, 8
  store i32 %85, i32* %11, align 8
  br label %89

86:                                               ; preds = %80
  %87 = load i8*, i8** %12, align 8
  %88 = getelementptr i8, i8* %87, i64 8
  store i8* %88, i8** %12, align 8
  br label %89

89:                                               ; preds = %86, %81
  %90 = phi i8* [ %84, %81 ], [ %87, %86 ]
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = icmp sgt i32 %92, 0
  %94 = select i1 %93, i32 %92, i32 0
  br label %131

95:                                               ; preds = %75
  br i1 %79, label %96, label %101

96:                                               ; preds = %95
  %97 = load i8*, i8** %13, align 8
  %98 = sext i32 %78 to i64
  %99 = getelementptr i8, i8* %97, i64 %98
  %100 = add nuw nsw i32 %78, 8
  store i32 %100, i32* %11, align 8
  br label %104

101:                                              ; preds = %95
  %102 = load i8*, i8** %12, align 8
  %103 = getelementptr i8, i8* %102, i64 8
  store i8* %103, i8** %12, align 8
  br label %104

104:                                              ; preds = %101, %96
  %105 = phi i8* [ %99, %96 ], [ %102, %101 ]
  %106 = bitcast i8* %105 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = or i16 %39, 32
  %109 = icmp slt i32 %107, 0
  br i1 %109, label %110, label %131

110:                                              ; preds = %104
  %111 = sub nsw i32 0, %107
  %112 = or i16 %39, 40
  br label %131

113:                                              ; preds = %74
  %114 = and i32 %43, 64
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %.loopexit92

116:                                              ; preds = %113
  %117 = or i16 %39, 64
  br label %131

118:                                              ; preds = %57
  switch i8 %38, label %138 [
    i8 108, label %119
    i8 104, label %125
  ]

119:                                              ; preds = %118, %74
  %120 = shl i16 %39, 2
  %121 = and i16 %120, 512
  %122 = and i16 %39, -385
  %123 = or i16 %122, %121
  %124 = or i16 %123, 128
  br label %131

125:                                              ; preds = %118, %74
  %126 = shl i16 %39, 1
  %127 = and i16 %126, 512
  %128 = and i16 %39, -385
  %129 = or i16 %128, %127
  %130 = or i16 %129, 256
  br label %131

131:                                              ; preds = %125, %119, %116, %110, %104, %89, %69, %65, %55, %53, %50, %46
  %132 = phi i16 [ %39, %65 ], [ %73, %69 ], [ %39, %89 ], [ %112, %110 ], [ %108, %104 ], [ %117, %116 ], [ %124, %119 ], [ %130, %125 ], [ %56, %55 ], [ %54, %53 ], [ %52, %50 ], [ %47, %46 ]
  %133 = phi i32 [ %40, %65 ], [ %72, %69 ], [ %40, %89 ], [ %111, %110 ], [ %107, %104 ], [ %40, %116 ], [ %40, %119 ], [ %40, %125 ], [ %40, %55 ], [ %40, %53 ], [ %40, %50 ], [ %40, %46 ]
  %134 = phi i32 [ %68, %65 ], [ %41, %69 ], [ %94, %89 ], [ %41, %110 ], [ %41, %104 ], [ %41, %116 ], [ %41, %119 ], [ %41, %125 ], [ %41, %55 ], [ %41, %53 ], [ %41, %50 ], [ %41, %46 ]
  %135 = getelementptr inbounds i8, i8* %42, i64 1
  %136 = load i8, i8* %42, align 1, !tbaa !57
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %877, label %.preheader91

138:                                              ; preds = %118, %74
  %139 = add i8 %38, -69
  %140 = icmp ult i8 %139, 3
  br i1 %140, label %141, label %144

141:                                              ; preds = %138
  %142 = or i16 %39, 8192
  %143 = add nuw nsw i8 %38, 32
  br label %149

144:                                              ; preds = %138
  %145 = add i8 %38, -101
  %146 = icmp ult i8 %145, 3
  br i1 %146, label %147, label %664

147:                                              ; preds = %144
  %148 = and i16 %39, -8193
  br label %149

149:                                              ; preds = %147, %141
  %150 = phi i8 [ %143, %141 ], [ %38, %147 ]
  %151 = phi i16 [ %142, %141 ], [ %148, %147 ]
  %152 = and i16 %151, 64
  %153 = icmp eq i16 %152, 0
  %154 = select i1 %153, i32 6, i32 %41
  %155 = and i16 %151, 16383
  switch i8 %150, label %163 [
    i8 101, label %156
    i8 102, label %160
  ]

156:                                              ; preds = %149
  %157 = trunc i32 %154 to i8
  %158 = add i8 %157, 1
  %159 = or i16 %155, 16384
  br label %167

160:                                              ; preds = %149
  %161 = add nsw i32 %154, 1
  %162 = or i16 %155, -32768
  br label %172

163:                                              ; preds = %149
  %164 = trunc i32 %154 to i8
  %165 = and i32 %154, 255
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %172, label %167

167:                                              ; preds = %163, %156
  %168 = phi i16 [ %159, %156 ], [ %155, %163 ]
  %169 = phi i8 [ %158, %156 ], [ %164, %163 ]
  %170 = icmp ult i8 %169, 17
  %171 = select i1 %170, i8 %169, i8 17
  br label %172

172:                                              ; preds = %167, %163, %160
  %173 = phi i32 [ %161, %160 ], [ 0, %163 ], [ 0, %167 ]
  %174 = phi i16 [ %162, %160 ], [ %155, %163 ], [ %168, %167 ]
  %175 = phi i8 [ 17, %160 ], [ 1, %163 ], [ %171, %167 ]
  %176 = load i32, i32* %15, align 4
  %177 = icmp ult i32 %176, 161
  br i1 %177, label %178, label %183

178:                                              ; preds = %172
  %179 = load i8*, i8** %13, align 8
  %180 = sext i32 %176 to i64
  %181 = getelementptr i8, i8* %179, i64 %180
  %182 = add nuw nsw i32 %176, 16
  store i32 %182, i32* %15, align 4
  br label %186

183:                                              ; preds = %172
  %184 = load i8*, i8** %12, align 8
  %185 = getelementptr i8, i8* %184, i64 8
  store i8* %185, i8** %12, align 8
  br label %186

186:                                              ; preds = %183, %178
  %187 = phi i8* [ %181, %178 ], [ %184, %183 ]
  %188 = bitcast i8* %187 to double*
  %189 = load double, double* %188, align 8
  %190 = zext i8 %175 to i32
  %191 = and i32 %173, 255
  %192 = bitcast double %189 to i64
  %193 = icmp slt i64 %192, 0
  %194 = fsub double -0.000000e+00, %189
  %195 = lshr i64 %192, 63
  %196 = trunc i64 %195 to i8
  %197 = select i1 %193, double %194, double %189
  %198 = fcmp oeq double %197, 0.000000e+00
  br i1 %198, label %199, label %201

199:                                              ; preds = %186
  %200 = or i8 %196, 2
  store i8 48, i8* %17, align 1, !tbaa !57
  br label %__dtoa_engine.exit

201:                                              ; preds = %186
  %202 = fcmp uno double %197, 0.000000e+00
  br i1 %202, label %203, label %205

203:                                              ; preds = %201
  %204 = or i8 %196, 8
  br label %__dtoa_engine.exit

205:                                              ; preds = %201
  %206 = call double @llvm.fabs.f64(double %197) #23
  %207 = fcmp oeq double %206, 0x7FF0000000000000
  br i1 %207, label %208, label %210

208:                                              ; preds = %205
  %209 = or i8 %196, 4
  br label %__dtoa_engine.exit

210:                                              ; preds = %205
  %211 = fcmp olt double %197, 1.000000e+17
  br i1 %211, label %.preheader.i, label %.preheader7.i

.preheader.i:                                     ; preds = %210, %.preheader.i
  %212 = phi i64 [ %224, %.preheader.i ], [ 8, %210 ]
  %213 = phi double [ %223, %.preheader.i ], [ %197, %210 ]
  %214 = phi i32 [ %222, %.preheader.i ], [ 17, %210 ]
  %215 = getelementptr inbounds [9 x double], [9 x double]* @__dtoa_scale_up, i64 0, i64 %212
  %216 = load double, double* %215, align 8, !tbaa !107
  %217 = fmul double %213, %216
  %218 = fcmp olt double %217, 1.000000e+18
  %219 = trunc i64 %212 to i32
  %220 = shl i32 1, %219
  %221 = select i1 %218, i32 %220, i32 0
  %222 = sub nsw i32 %214, %221
  %223 = select i1 %218, double %217, double %213
  %224 = add nsw i64 %212, -1
  %225 = icmp eq i64 %212, 0
  br i1 %225, label %.loopexit6.i, label %.preheader.i

.preheader7.i:                                    ; preds = %210, %.preheader7.i
  %226 = phi i64 [ %238, %.preheader7.i ], [ 8, %210 ]
  %227 = phi double [ %237, %.preheader7.i ], [ %197, %210 ]
  %228 = phi i32 [ %236, %.preheader7.i ], [ 17, %210 ]
  %229 = getelementptr inbounds [9 x double], [9 x double]* @__dtoa_scale_down, i64 0, i64 %226
  %230 = load double, double* %229, align 8, !tbaa !107
  %231 = fmul double %227, %230
  %232 = fcmp ult double %231, 1.000000e+17
  %233 = trunc i64 %226 to i32
  %234 = shl i32 1, %233
  %235 = select i1 %232, i32 0, i32 %234
  %236 = add nsw i32 %235, %228
  %237 = select i1 %232, double %227, double %231
  %238 = add nsw i64 %226, -1
  %239 = icmp eq i64 %226, 0
  br i1 %239, label %.loopexit6.i, label %.preheader7.i

.loopexit6.i:                                     ; preds = %.preheader7.i, %.preheader.i
  %240 = phi i32 [ %222, %.preheader.i ], [ %236, %.preheader7.i ]
  %241 = phi double [ %223, %.preheader.i ], [ %237, %.preheader7.i ]
  %242 = icmp ne i32 %191, 0
  br i1 %242, label %243, label %249

243:                                              ; preds = %.loopexit6.i
  %244 = add i32 %240, %191
  %245 = icmp sgt i32 %244, 0
  %246 = select i1 %245, i32 %244, i32 0
  %247 = icmp sgt i32 %246, %190
  %248 = select i1 %247, i32 %190, i32 %246
  br label %249

249:                                              ; preds = %243, %.loopexit6.i
  %250 = phi i32 [ %248, %243 ], [ %190, %.loopexit6.i ]
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds [18 x double], [18 x double]* @__dtoa_round, i64 0, i64 %251
  %253 = load double, double* %252, align 8, !tbaa !107
  %254 = fadd double %241, %253
  %255 = fcmp ult double %254, 1.000000e+18
  br i1 %255, label %266, label %256

256:                                              ; preds = %249
  %257 = fdiv double %254, 1.000000e+01
  %258 = add nsw i32 %240, 1
  br i1 %242, label %259, label %266

259:                                              ; preds = %256
  %260 = add i32 %240, %191
  %261 = icmp sgt i32 %260, -1
  %262 = select i1 %261, i32 %260, i32 -1
  %263 = add nsw i32 %262, 1
  %264 = icmp sgt i32 %263, %190
  %265 = select i1 %264, i32 %190, i32 %263
  br label %266

266:                                              ; preds = %259, %256, %249
  %267 = phi i32 [ %258, %259 ], [ %258, %256 ], [ %240, %249 ]
  %268 = phi i32 [ %265, %259 ], [ %250, %256 ], [ %250, %249 ]
  %269 = phi double [ %257, %259 ], [ %257, %256 ], [ %254, %249 ]
  %270 = icmp sgt i32 %268, 0
  br i1 %270, label %271, label %__dtoa_engine.exit

271:                                              ; preds = %266
  %272 = fptoui double %269 to i64
  %273 = zext i32 %268 to i64
  br label %274

274:                                              ; preds = %274, %271
  %275 = phi i64 [ 0, %271 ], [ %284, %274 ]
  %276 = phi i64 [ 100000000000000000, %271 ], [ %283, %274 ]
  %277 = phi i64 [ %272, %271 ], [ %282, %274 ]
  %278 = udiv i64 %277, %276
  %279 = trunc i64 %278 to i8
  %280 = add i8 %279, 48
  %281 = getelementptr inbounds %union.anon.380, %union.anon.380* %4, i64 0, i32 0, i32 2, i64 %275
  store i8 %280, i8* %281, align 1, !tbaa !57
  %282 = urem i64 %277, %276
  %283 = udiv i64 %276, 10
  %284 = add nuw nsw i64 %275, 1
  %285 = icmp eq i64 %284, %273
  br i1 %285, label %__dtoa_engine.exit, label %274

__dtoa_engine.exit:                               ; preds = %274, %199, %203, %208, %266
  %286 = phi i32 [ 0, %199 ], [ 0, %203 ], [ 0, %208 ], [ %267, %266 ], [ %267, %274 ]
  %287 = phi i8 [ %200, %199 ], [ %204, %203 ], [ %209, %208 ], [ %196, %266 ], [ %196, %274 ]
  %288 = phi i32 [ 1, %199 ], [ %190, %203 ], [ %190, %208 ], [ %268, %266 ], [ %268, %274 ]
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds %union.anon.380, %union.anon.380* %4, i64 0, i32 0, i32 2, i64 %289
  store i8 0, i8* %290, align 1, !tbaa !57
  store i8 %287, i8* %16, align 4, !tbaa !109
  store i32 %286, i32* %20, align 4, !tbaa !111
  %291 = trunc i32 %288 to i8
  %292 = add i32 %286, 99
  %293 = icmp ugt i32 %292, 198
  %294 = and i8 %287, 9
  %295 = icmp eq i8 %294, 1
  br i1 %295, label %303, label %296

296:                                              ; preds = %__dtoa_engine.exit
  %297 = and i16 %174, 2
  %298 = icmp eq i16 %297, 0
  br i1 %298, label %299, label %303

299:                                              ; preds = %296
  %300 = trunc i16 %174 to i8
  %301 = shl i8 %300, 3
  %302 = and i8 %301, 32
  br label %303

303:                                              ; preds = %299, %296, %__dtoa_engine.exit
  %304 = phi i8 [ 45, %__dtoa_engine.exit ], [ 43, %296 ], [ %302, %299 ]
  %305 = and i8 %287, 12
  %306 = icmp eq i8 %305, 0
  br i1 %306, label %364, label %307

307:                                              ; preds = %303
  %308 = icmp eq i8 %304, 0
  %309 = select i1 %308, i32 3, i32 4
  %310 = icmp sgt i32 %40, %309
  br i1 %310, label %311, label %327

311:                                              ; preds = %307
  %312 = sub nsw i32 %40, %309
  %313 = and i16 %174, 8
  %314 = icmp eq i16 %313, 0
  br i1 %314, label %.preheader236, label %327

.preheader236:                                    ; preds = %311, %fputc.exit47
  %315 = phi i32 [ %322, %fputc.exit47 ], [ %312, %311 ]
  %316 = load i8, i8* %6, align 2, !tbaa !94
  %317 = and i8 %316, 2
  %318 = icmp eq i8 %317, 0
  br i1 %318, label %fputc.exit47, label %319

319:                                              ; preds = %.preheader236
  %320 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %321 = call i32 %320(i8 signext 32, %struct.__file* nonnull %0) #20
  br label %fputc.exit47

fputc.exit47:                                     ; preds = %.preheader236, %319
  %322 = add nsw i32 %315, -1
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %324, label %.preheader236

324:                                              ; preds = %fputc.exit47
  %325 = add i32 %40, %21
  %326 = sub i32 %325, %309
  br label %327

327:                                              ; preds = %324, %311, %307
  %328 = phi i32 [ %312, %311 ], [ 0, %307 ], [ 0, %324 ]
  %329 = phi i32 [ %21, %311 ], [ %21, %307 ], [ %326, %324 ]
  br i1 %308, label %fputc.exit48, label %330

330:                                              ; preds = %327
  %331 = add nsw i32 %329, 1
  %332 = load i8, i8* %6, align 2, !tbaa !94
  %333 = and i8 %332, 2
  %334 = icmp eq i8 %333, 0
  br i1 %334, label %fputc.exit48, label %335

335:                                              ; preds = %330
  %336 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %337 = call i32 %336(i8 signext %304, %struct.__file* nonnull %0) #20
  br label %fputc.exit48

fputc.exit48:                                     ; preds = %335, %330, %327
  %338 = phi i32 [ %329, %327 ], [ %331, %330 ], [ %331, %335 ]
  %339 = load i8, i8* %16, align 4, !tbaa !57
  %340 = and i8 %339, 8
  %341 = icmp eq i8 %340, 0
  %342 = select i1 %341, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.904, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.905, i64 0, i64 0)
  %343 = load i8, i8* %342, align 1, !tbaa !57
  %344 = icmp eq i8 %343, 0
  br i1 %344, label %fputc.exit56, label %345

345:                                              ; preds = %fputc.exit48
  %346 = and i16 %174, 8192
  %347 = icmp eq i16 %346, 0
  br label %348

348:                                              ; preds = %fputc.exit49, %345
  %349 = phi i8 [ %343, %345 ], [ %362, %fputc.exit49 ]
  %350 = phi i8* [ %342, %345 ], [ %361, %fputc.exit49 ]
  %351 = phi i32 [ %338, %345 ], [ %352, %fputc.exit49 ]
  %352 = add nsw i32 %351, 1
  %353 = load i8, i8* %6, align 2, !tbaa !94
  %354 = and i8 %353, 2
  %355 = icmp eq i8 %354, 0
  br i1 %355, label %fputc.exit49, label %356

356:                                              ; preds = %348
  %357 = add i8 %349, -32
  %358 = select i1 %347, i8 %349, i8 %357
  %359 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %360 = call i32 %359(i8 signext %358, %struct.__file* nonnull %0) #20
  br label %fputc.exit49

fputc.exit49:                                     ; preds = %348, %356
  %361 = getelementptr inbounds i8, i8* %350, i64 1
  %362 = load i8, i8* %361, align 1, !tbaa !57
  %363 = icmp eq i8 %362, 0
  br i1 %363, label %fputc.exit56, label %348

364:                                              ; preds = %303
  %365 = zext i16 %174 to i32
  %366 = and i32 %365, 49152
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %368, label %401

368:                                              ; preds = %364
  %369 = icmp eq i32 %154, 0
  %370 = select i1 %369, i32 1, i32 %154
  %371 = and i32 %288, 255
  %372 = icmp eq i8 %291, 0
  br i1 %372, label %.loopexit84, label %.preheader83

.preheader83:                                     ; preds = %368, %380
  %373 = phi i32 [ %382, %380 ], [ %371, %368 ]
  %374 = phi i8 [ %381, %380 ], [ %291, %368 ]
  %375 = add nsw i32 %373, -1
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds %union.anon.380, %union.anon.380* %4, i64 0, i32 0, i32 2, i64 %376
  %378 = load i8, i8* %377, align 1, !tbaa !57
  %379 = icmp eq i8 %378, 48
  br i1 %379, label %380, label %.loopexit84

380:                                              ; preds = %.preheader83
  %381 = add i8 %374, -1
  %382 = zext i8 %381 to i32
  %383 = icmp eq i8 %381, 0
  br i1 %383, label %.loopexit84, label %.preheader83

.loopexit84:                                      ; preds = %380, %.preheader83, %368
  %384 = phi i8 [ 0, %368 ], [ 0, %380 ], [ %374, %.preheader83 ]
  %385 = phi i32 [ %371, %368 ], [ 0, %380 ], [ %373, %.preheader83 ]
  %386 = and i32 %365, 16
  %387 = icmp eq i32 %386, 0
  %388 = select i1 %387, i32 %385, i32 %370
  %389 = icmp sgt i32 %286, -5
  %390 = icmp slt i32 %286, %370
  %391 = and i1 %389, %390
  br i1 %391, label %392, label %399

392:                                              ; preds = %.loopexit84
  %393 = or i16 %174, -32768
  %394 = icmp slt i32 %286, %388
  %395 = xor i32 %286, -1
  %396 = add i32 %388, %395
  %397 = select i1 %394, i32 %396, i32 0
  %398 = zext i16 %393 to i32
  br label %405

399:                                              ; preds = %.loopexit84
  %400 = add nsw i32 %388, -1
  br label %401

401:                                              ; preds = %399, %364
  %402 = phi i32 [ %154, %364 ], [ %400, %399 ]
  %403 = phi i8 [ %291, %364 ], [ %384, %399 ]
  %404 = icmp slt i16 %174, 0
  br i1 %404, label %405, label %412

405:                                              ; preds = %401, %392
  %406 = phi i32 [ %398, %392 ], [ %365, %401 ]
  %407 = phi i8 [ %384, %392 ], [ %403, %401 ]
  %408 = phi i32 [ %397, %392 ], [ %402, %401 ]
  %409 = icmp sgt i32 %286, 0
  %410 = add nsw i32 %286, 1
  %411 = select i1 %409, i32 %410, i32 1
  br label %414

412:                                              ; preds = %401
  %413 = select i1 %293, i32 6, i32 5
  br label %414

414:                                              ; preds = %412, %405
  %415 = phi i1 [ true, %405 ], [ false, %412 ]
  %416 = phi i32 [ %406, %405 ], [ %365, %412 ]
  %417 = phi i8 [ %407, %405 ], [ %403, %412 ]
  %418 = phi i32 [ %408, %405 ], [ %402, %412 ]
  %419 = phi i32 [ %411, %405 ], [ %413, %412 ]
  %420 = icmp ne i8 %304, 0
  %421 = zext i1 %420 to i32
  %422 = add nsw i32 %419, %421
  %423 = icmp eq i32 %418, 0
  %424 = add nsw i32 %418, 1
  %425 = lshr i32 %416, 4
  %426 = and i32 %425, 1
  %427 = select i1 %423, i32 %426, i32 %424
  %428 = add nsw i32 %422, %427
  %429 = icmp sgt i32 %40, %428
  %430 = sub nsw i32 %40, %428
  %431 = select i1 %429, i32 %430, i32 0
  %432 = and i32 %416, 9
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %434, label %.loopexit82

434:                                              ; preds = %414
  %435 = icmp eq i32 %431, 0
  br i1 %435, label %.loopexit82, label %.preheader81

.preheader81:                                     ; preds = %434, %fputc.exit50
  %436 = phi i32 [ %443, %fputc.exit50 ], [ %430, %434 ]
  %437 = load i8, i8* %6, align 2, !tbaa !94
  %438 = and i8 %437, 2
  %439 = icmp eq i8 %438, 0
  br i1 %439, label %fputc.exit50, label %440

440:                                              ; preds = %.preheader81
  %441 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %442 = call i32 %441(i8 signext 32, %struct.__file* nonnull %0) #20
  br label %fputc.exit50

fputc.exit50:                                     ; preds = %.preheader81, %440
  %443 = add nsw i32 %436, -1
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %.loopexit82.loopexit, label %.preheader81

.loopexit82.loopexit:                             ; preds = %fputc.exit50
  %.neg431 = add i32 %40, %21
  %445 = zext i1 %420 to i32
  %.neg432 = sub i32 %.neg431, %445
  %446 = sub i32 %.neg432, %419
  %447 = sub i32 %446, %427
  br label %.loopexit82

.loopexit82:                                      ; preds = %.loopexit82.loopexit, %434, %414
  %448 = phi i32 [ %431, %414 ], [ 0, %434 ], [ 0, %.loopexit82.loopexit ]
  %449 = phi i32 [ %21, %414 ], [ %21, %434 ], [ %447, %.loopexit82.loopexit ]
  br i1 %420, label %450, label %fputc.exit51

450:                                              ; preds = %.loopexit82
  %451 = add nsw i32 %449, 1
  %452 = load i8, i8* %6, align 2, !tbaa !94
  %453 = and i8 %452, 2
  %454 = icmp eq i8 %453, 0
  br i1 %454, label %fputc.exit51, label %455

455:                                              ; preds = %450
  %456 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %457 = call i32 %456(i8 signext %304, %struct.__file* nonnull %0) #20
  br label %fputc.exit51

fputc.exit51:                                     ; preds = %455, %450, %.loopexit82
  %458 = phi i32 [ %449, %.loopexit82 ], [ %451, %450 ], [ %451, %455 ]
  %459 = and i32 %416, 8
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %461, label %474

461:                                              ; preds = %fputc.exit51
  %462 = icmp eq i32 %448, 0
  br i1 %462, label %474, label %.preheader80

.preheader80:                                     ; preds = %461, %fputc.exit52
  %463 = phi i32 [ %470, %fputc.exit52 ], [ %448, %461 ]
  %464 = load i8, i8* %6, align 2, !tbaa !94
  %465 = and i8 %464, 2
  %466 = icmp eq i8 %465, 0
  br i1 %466, label %fputc.exit52, label %467

467:                                              ; preds = %.preheader80
  %468 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %469 = call i32 %468(i8 signext 48, %struct.__file* nonnull %0) #20
  br label %fputc.exit52

fputc.exit52:                                     ; preds = %.preheader80, %467
  %470 = add nsw i32 %463, -1
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %472, label %.preheader80

472:                                              ; preds = %fputc.exit52
  %473 = add i32 %458, %448
  br label %474

474:                                              ; preds = %472, %461, %fputc.exit51
  %475 = phi i32 [ %448, %fputc.exit51 ], [ 0, %461 ], [ 0, %472 ]
  %476 = phi i32 [ %458, %fputc.exit51 ], [ %458, %461 ], [ %473, %472 ]
  br i1 %415, label %477, label %550

477:                                              ; preds = %474
  %478 = icmp sgt i32 %286, 0
  %479 = select i1 %478, i32 %286, i32 0
  %480 = zext i8 %417 to i32
  %481 = sub nsw i32 0, %418
  %482 = zext i32 %479 to i64
  %483 = sext i32 %286 to i64
  %484 = sext i32 %481 to i64
  br label %fputc.exit54

fputc.exit54:                                     ; preds = %fputc.exit54.backedge, %477
  %485 = phi i64 [ %482, %477 ], [ %505, %fputc.exit54.backedge ]
  %486 = phi i32 [ %476, %477 ], [ %508, %fputc.exit54.backedge ]
  %487 = icmp eq i64 %485, -1
  br i1 %487, label %488, label %fputc.exit53

488:                                              ; preds = %fputc.exit54
  %489 = add nsw i32 %486, 1
  %490 = load i8, i8* %6, align 2, !tbaa !94
  %491 = and i8 %490, 2
  %492 = icmp eq i8 %491, 0
  br i1 %492, label %fputc.exit53, label %493

493:                                              ; preds = %488
  %494 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %495 = call i32 %494(i8 signext 46, %struct.__file* nonnull %0) #20
  br label %fputc.exit53

fputc.exit53:                                     ; preds = %493, %488, %fputc.exit54
  %496 = phi i32 [ %486, %fputc.exit54 ], [ %489, %488 ], [ %489, %493 ]
  %497 = sub nsw i64 %483, %485
  %498 = trunc i64 %497 to i32
  %499 = icmp ult i32 %498, %480
  br i1 %499, label %500, label %503

500:                                              ; preds = %fputc.exit53
  %501 = getelementptr inbounds %union.anon.380, %union.anon.380* %4, i64 0, i32 0, i32 2, i64 %497
  %502 = load i8, i8* %501, align 1, !tbaa !57
  br label %503

503:                                              ; preds = %500, %fputc.exit53
  %504 = phi i8 [ %502, %500 ], [ 48, %fputc.exit53 ]
  %505 = add nsw i64 %485, -1
  %506 = icmp sgt i64 %485, %484
  br i1 %506, label %507, label %515

507:                                              ; preds = %503
  %508 = add nsw i32 %496, 1
  %509 = load i8, i8* %6, align 2, !tbaa !94
  %510 = and i8 %509, 2
  %511 = icmp eq i8 %510, 0
  br i1 %511, label %fputc.exit54.backedge, label %512

fputc.exit54.backedge:                            ; preds = %507, %512
  br label %fputc.exit54

512:                                              ; preds = %507
  %513 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %514 = call i32 %513(i8 signext %504, %struct.__file* nonnull %0) #20
  br label %fputc.exit54.backedge

515:                                              ; preds = %503
  %516 = trunc i64 %485 to i32
  %517 = trunc i64 %505 to i32
  %518 = icmp eq i32 %286, %517
  br i1 %518, label %519, label %529

519:                                              ; preds = %515
  %520 = load i8, i8* %17, align 1, !tbaa !57
  %521 = icmp sgt i8 %520, 53
  br i1 %521, label %528, label %522

522:                                              ; preds = %519
  %523 = icmp eq i8 %520, 53
  br i1 %523, label %524, label %529

524:                                              ; preds = %522
  %525 = load i8, i8* %16, align 4, !tbaa !57
  %526 = and i8 %525, 16
  %527 = icmp eq i8 %526, 0
  br i1 %527, label %528, label %529

528:                                              ; preds = %524, %519
  br label %529

529:                                              ; preds = %528, %524, %522, %515
  %530 = phi i8 [ 49, %528 ], [ %504, %524 ], [ %504, %522 ], [ %504, %515 ]
  %531 = add nsw i32 %496, 1
  %532 = load i8, i8* %6, align 2, !tbaa !94
  %533 = and i8 %532, 2
  %534 = icmp eq i8 %533, 0
  br i1 %534, label %fputc.exit55, label %535

535:                                              ; preds = %529
  %536 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %537 = call i32 %536(i8 signext %530, %struct.__file* nonnull %0) #20
  br label %fputc.exit55

fputc.exit55:                                     ; preds = %529, %535
  %538 = and i32 %416, 16
  %539 = icmp ne i32 %538, 0
  %540 = icmp eq i32 %516, 0
  %541 = and i1 %539, %540
  br i1 %541, label %542, label %fputc.exit56

542:                                              ; preds = %fputc.exit55
  %543 = add nsw i32 %496, 2
  %544 = load i8, i8* %6, align 2, !tbaa !94
  %545 = and i8 %544, 2
  %546 = icmp eq i8 %545, 0
  br i1 %546, label %fputc.exit56, label %547

547:                                              ; preds = %542
  %548 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %549 = call i32 %548(i8 signext 46, %struct.__file* nonnull %0) #20
  br label %fputc.exit56

550:                                              ; preds = %474
  %551 = load i8, i8* %17, align 1, !tbaa !57
  %552 = icmp eq i8 %551, 49
  br i1 %552, label %556, label %553

553:                                              ; preds = %550
  %554 = load i8, i8* %16, align 4, !tbaa !57
  %555 = and i8 %554, -17
  store i8 %555, i8* %16, align 4, !tbaa !57
  br label %556

556:                                              ; preds = %553, %550
  %557 = load i8, i8* %6, align 2, !tbaa !94
  %558 = and i8 %557, 2
  %559 = icmp eq i8 %558, 0
  br i1 %559, label %fputc.exit57, label %560

560:                                              ; preds = %556
  %561 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %562 = call i32 %561(i8 signext %551, %struct.__file* nonnull %0) #20
  br label %fputc.exit57

fputc.exit57:                                     ; preds = %556, %560
  %563 = icmp sgt i32 %418, 0
  br i1 %563, label %564, label %591

564:                                              ; preds = %fputc.exit57
  %565 = add nsw i32 %476, 2
  %566 = load i8, i8* %6, align 2, !tbaa !94
  %567 = and i8 %566, 2
  %568 = icmp eq i8 %567, 0
  br i1 %568, label %fputc.exit58.preheader, label %569

569:                                              ; preds = %564
  %570 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %571 = call i32 %570(i8 signext 46, %struct.__file* nonnull %0) #20
  br label %fputc.exit58.preheader

fputc.exit58.preheader:                           ; preds = %564, %569
  br label %fputc.exit58

fputc.exit58:                                     ; preds = %fputc.exit58.preheader, %fputc.exit59
  %572 = phi i8 [ %588, %fputc.exit59 ], [ 1, %fputc.exit58.preheader ]
  %573 = phi i32 [ %574, %fputc.exit59 ], [ %565, %fputc.exit58.preheader ]
  %574 = add nsw i32 %573, 1
  %575 = icmp ult i8 %572, %417
  br i1 %575, label %576, label %580

576:                                              ; preds = %fputc.exit58
  %577 = zext i8 %572 to i64
  %578 = getelementptr inbounds %union.anon.380, %union.anon.380* %4, i64 0, i32 0, i32 2, i64 %577
  %579 = load i8, i8* %578, align 1, !tbaa !57
  br label %580

580:                                              ; preds = %576, %fputc.exit58
  %581 = phi i8 [ %579, %576 ], [ 48, %fputc.exit58 ]
  %582 = load i8, i8* %6, align 2, !tbaa !94
  %583 = and i8 %582, 2
  %584 = icmp eq i8 %583, 0
  br i1 %584, label %fputc.exit59, label %585

585:                                              ; preds = %580
  %586 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %587 = call i32 %586(i8 signext %581, %struct.__file* nonnull %0) #20
  br label %fputc.exit59

fputc.exit59:                                     ; preds = %580, %585
  %588 = add i8 %572, 1
  %589 = zext i8 %588 to i32
  %590 = icmp slt i32 %418, %589
  br i1 %590, label %fputc.exit60, label %fputc.exit58

591:                                              ; preds = %fputc.exit57
  %592 = add nsw i32 %476, 1
  %593 = and i32 %416, 16
  %594 = icmp eq i32 %593, 0
  br i1 %594, label %fputc.exit60, label %595

595:                                              ; preds = %591
  %596 = add nsw i32 %476, 2
  %597 = load i8, i8* %6, align 2, !tbaa !94
  %598 = and i8 %597, 2
  %599 = icmp eq i8 %598, 0
  br i1 %599, label %fputc.exit60, label %600

600:                                              ; preds = %595
  %601 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %602 = call i32 %601(i8 signext 46, %struct.__file* nonnull %0) #20
  br label %fputc.exit60

fputc.exit60:                                     ; preds = %fputc.exit59, %600, %595, %591
  %603 = phi i32 [ %592, %591 ], [ %596, %595 ], [ %596, %600 ], [ %574, %fputc.exit59 ]
  %604 = load i8, i8* %6, align 2, !tbaa !94
  %605 = and i8 %604, 2
  %606 = icmp eq i8 %605, 0
  br i1 %606, label %fputc.exit61, label %607

607:                                              ; preds = %fputc.exit60
  %608 = and i32 %416, 8192
  %609 = icmp eq i32 %608, 0
  %610 = select i1 %609, i8 101, i8 69
  %611 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %612 = call i32 %611(i8 signext %610, %struct.__file* nonnull %0) #20
  br label %fputc.exit61

fputc.exit61:                                     ; preds = %fputc.exit60, %607
  %613 = icmp slt i32 %286, 0
  br i1 %613, label %620, label %614

614:                                              ; preds = %fputc.exit61
  %615 = icmp eq i32 %286, 0
  br i1 %615, label %616, label %622

616:                                              ; preds = %614
  %617 = load i8, i8* %16, align 4, !tbaa !57
  %618 = and i8 %617, 16
  %619 = icmp eq i8 %618, 0
  br i1 %619, label %622, label %620

620:                                              ; preds = %616, %fputc.exit61
  %621 = sub nsw i32 0, %286
  br label %622

622:                                              ; preds = %620, %616, %614
  %623 = phi i32 [ %621, %620 ], [ 0, %616 ], [ %286, %614 ]
  %624 = phi i8 [ 45, %620 ], [ 43, %616 ], [ 43, %614 ]
  %625 = add nsw i32 %603, 2
  %626 = load i8, i8* %6, align 2, !tbaa !94
  %627 = and i8 %626, 2
  %628 = icmp eq i8 %627, 0
  br i1 %628, label %fputc.exit62, label %629

629:                                              ; preds = %622
  %630 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %631 = call i32 %630(i8 signext %624, %struct.__file* nonnull %0) #20
  br label %fputc.exit62

fputc.exit62:                                     ; preds = %622, %629
  br i1 %293, label %632, label %644

632:                                              ; preds = %fputc.exit62
  %633 = add nsw i32 %603, 3
  %634 = load i8, i8* %6, align 2, !tbaa !94
  %635 = and i8 %634, 2
  %636 = icmp eq i8 %635, 0
  br i1 %636, label %fputc.exit63, label %637

637:                                              ; preds = %632
  %638 = sdiv i32 %623, 100
  %639 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %640 = trunc i32 %638 to i8
  %641 = add i8 %640, 48
  %642 = call i32 %639(i8 signext %641, %struct.__file* nonnull %0) #20
  br label %fputc.exit63

fputc.exit63:                                     ; preds = %632, %637
  %643 = srem i32 %623, 100
  br label %644

644:                                              ; preds = %fputc.exit63, %fputc.exit62
  %645 = phi i32 [ %633, %fputc.exit63 ], [ %625, %fputc.exit62 ]
  %646 = phi i32 [ %643, %fputc.exit63 ], [ %623, %fputc.exit62 ]
  %647 = load i8, i8* %6, align 2, !tbaa !94
  %648 = and i8 %647, 2
  %649 = icmp eq i8 %648, 0
  br i1 %649, label %fputc.exit64.thread, label %fputc.exit64

fputc.exit64.thread:                              ; preds = %644
  %650 = add nsw i32 %645, 2
  br label %fputc.exit56

fputc.exit64:                                     ; preds = %644
  %651 = sdiv i32 %646, 10
  %652 = srem i32 %646, 10
  %653 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %654 = trunc i32 %651 to i8
  %655 = add i8 %654, 48
  %656 = call i32 %653(i8 signext %655, %struct.__file* nonnull %0) #20
  %.pre = load i8, i8* %6, align 2, !tbaa !94
  %.pre186 = and i8 %.pre, 2
  %657 = add nsw i32 %645, 2
  %658 = icmp eq i8 %.pre186, 0
  br i1 %658, label %fputc.exit56, label %659

659:                                              ; preds = %fputc.exit64
  %660 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %661 = trunc i32 %652 to i8
  %662 = add nsw i8 %661, 48
  %663 = call i32 %660(i8 signext %662, %struct.__file* nonnull %0) #20
  br label %fputc.exit56

664:                                              ; preds = %144
  switch i8 %38, label %879 [
    i8 99, label %665
    i8 115, label %681
    i8 83, label %681
    i8 100, label %756
    i8 105, label %756
  ]

665:                                              ; preds = %664
  %666 = load i32, i32* %11, align 8
  %667 = icmp ult i32 %666, 41
  br i1 %667, label %668, label %673

668:                                              ; preds = %665
  %669 = load i8*, i8** %13, align 8
  %670 = sext i32 %666 to i64
  %671 = getelementptr i8, i8* %669, i64 %670
  %672 = add nuw nsw i32 %666, 8
  store i32 %672, i32* %11, align 8
  br label %676

673:                                              ; preds = %665
  %674 = load i8*, i8** %12, align 8
  %675 = getelementptr i8, i8* %674, i64 8
  store i8* %675, i8** %12, align 8
  br label %676

676:                                              ; preds = %673, %668
  %677 = phi i8* [ %671, %668 ], [ %674, %673 ]
  %678 = bitcast i8* %677 to i32*
  %679 = load i32, i32* %678, align 4
  %680 = trunc i32 %679 to i8
  store i8 %680, i8* %5, align 4, !tbaa !57
  br label %715

681:                                              ; preds = %664, %664
  %682 = load i32, i32* %11, align 8
  %683 = icmp ult i32 %682, 41
  br i1 %683, label %684, label %689

684:                                              ; preds = %681
  %685 = load i8*, i8** %13, align 8
  %686 = sext i32 %682 to i64
  %687 = getelementptr i8, i8* %685, i64 %686
  %688 = add nuw nsw i32 %682, 8
  store i32 %688, i32* %11, align 8
  br label %692

689:                                              ; preds = %681
  %690 = load i8*, i8** %12, align 8
  %691 = getelementptr i8, i8* %690, i64 8
  store i8* %691, i8** %12, align 8
  br label %692

692:                                              ; preds = %689, %684
  %693 = phi i8* [ %687, %684 ], [ %690, %689 ]
  %694 = bitcast i8* %693 to i8**
  %695 = load i8*, i8** %694, align 8
  %696 = icmp eq i8* %695, null
  %697 = select i1 %696, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2.906, i64 0, i64 0), i8* %695
  %698 = and i16 %39, 64
  %699 = icmp eq i16 %698, 0
  %700 = sext i32 %41 to i64
  %701 = select i1 %699, i64 -1, i64 %700
  %702 = icmp eq i64 %701, 0
  br i1 %702, label %strnlen.exit, label %.preheader.i66

.preheader.i66:                                   ; preds = %692, %708
  %703 = phi i64 [ %705, %708 ], [ %701, %692 ]
  %704 = phi i8* [ %709, %708 ], [ %697, %692 ]
  %705 = add i64 %703, -1
  %706 = load i8, i8* %704, align 1, !tbaa !57
  %707 = icmp eq i8 %706, 0
  br i1 %707, label %strnlen.exit, label %708

708:                                              ; preds = %.preheader.i66
  %709 = getelementptr inbounds i8, i8* %704, i64 1
  %710 = icmp eq i64 %705, 0
  br i1 %710, label %strnlen.exit, label %.preheader.i66

strnlen.exit:                                     ; preds = %.preheader.i66, %708, %692
  %711 = phi i8* [ %697, %692 ], [ %709, %708 ], [ %704, %.preheader.i66 ]
  %712 = ptrtoint i8* %711 to i64
  %713 = ptrtoint i8* %697 to i64
  %714 = sub i64 %712, %713
  br label %715

715:                                              ; preds = %strnlen.exit, %676
  %716 = phi i8* [ %697, %strnlen.exit ], [ %5, %676 ]
  %717 = phi i64 [ %714, %strnlen.exit ], [ 1, %676 ]
  %718 = and i16 %39, 8
  %719 = icmp eq i16 %718, 0
  %720 = sext i32 %40 to i64
  %721 = icmp ult i64 %717, %720
  %722 = and i1 %719, %721
  br i1 %722, label %.preheader88, label %736

.preheader88:                                     ; preds = %715, %fputc.exit68
  %723 = phi i64 [ %730, %fputc.exit68 ], [ %720, %715 ]
  %724 = load i8, i8* %6, align 2, !tbaa !94
  %725 = and i8 %724, 2
  %726 = icmp eq i8 %725, 0
  br i1 %726, label %fputc.exit68, label %727

727:                                              ; preds = %.preheader88
  %728 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %729 = call i32 %728(i8 signext 32, %struct.__file* nonnull %0) #20
  br label %fputc.exit68

fputc.exit68:                                     ; preds = %.preheader88, %727
  %730 = add i64 %723, -1
  %731 = icmp ult i64 %717, %730
  br i1 %731, label %.preheader88, label %732

732:                                              ; preds = %fputc.exit68
  %733 = trunc i64 %717 to i32
  %734 = add i32 %40, %21
  %735 = sub i32 %734, %733
  br label %736

736:                                              ; preds = %732, %715
  %737 = phi i32 [ %40, %715 ], [ %733, %732 ]
  %738 = phi i32 [ %21, %715 ], [ %735, %732 ]
  %739 = icmp eq i64 %717, 0
  br i1 %739, label %fputc.exit56, label %.preheader238

.preheader238:                                    ; preds = %736, %fputc.exit69
  %740 = phi i64 [ %754, %fputc.exit69 ], [ %717, %736 ]
  %741 = phi i8* [ %743, %fputc.exit69 ], [ %716, %736 ]
  %742 = phi i32 [ %753, %fputc.exit69 ], [ %737, %736 ]
  %743 = getelementptr inbounds i8, i8* %741, i64 1
  %744 = load i8, i8* %6, align 2, !tbaa !94
  %745 = and i8 %744, 2
  %746 = icmp eq i8 %745, 0
  br i1 %746, label %fputc.exit69, label %747

747:                                              ; preds = %.preheader238
  %748 = load i8, i8* %741, align 1, !tbaa !57
  %749 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %750 = call i32 %749(i8 signext %748, %struct.__file* nonnull %0) #20
  br label %fputc.exit69

fputc.exit69:                                     ; preds = %.preheader238, %747
  %751 = icmp eq i32 %742, 0
  %752 = add nsw i32 %742, -1
  %753 = select i1 %751, i32 0, i32 %752
  %754 = add i64 %740, -1
  %755 = icmp eq i64 %754, 0
  br i1 %755, label %1202, label %.preheader238

756:                                              ; preds = %664, %664
  %757 = trunc i16 %39 to i8
  %758 = icmp slt i8 %757, 0
  br i1 %758, label %759, label %790

759:                                              ; preds = %756
  %760 = and i32 %43, 512
  %761 = icmp eq i32 %760, 0
  %762 = load i32, i32* %11, align 8
  %763 = icmp ult i32 %762, 41
  br i1 %761, label %777, label %764

764:                                              ; preds = %759
  br i1 %763, label %765, label %770

765:                                              ; preds = %764
  %766 = load i8*, i8** %13, align 8
  %767 = sext i32 %762 to i64
  %768 = getelementptr i8, i8* %766, i64 %767
  %769 = add nuw nsw i32 %762, 8
  store i32 %769, i32* %11, align 8
  br label %773

770:                                              ; preds = %764
  %771 = load i8*, i8** %12, align 8
  %772 = getelementptr i8, i8* %771, i64 8
  store i8* %772, i8** %12, align 8
  br label %773

773:                                              ; preds = %770, %765
  %774 = phi i8* [ %768, %765 ], [ %771, %770 ]
  %775 = bitcast i8* %774 to i64*
  %776 = load i64, i64* %775, align 8
  br label %846

777:                                              ; preds = %759
  br i1 %763, label %778, label %783

778:                                              ; preds = %777
  %779 = load i8*, i8** %13, align 8
  %780 = sext i32 %762 to i64
  %781 = getelementptr i8, i8* %779, i64 %780
  %782 = add nuw nsw i32 %762, 8
  store i32 %782, i32* %11, align 8
  br label %786

783:                                              ; preds = %777
  %784 = load i8*, i8** %12, align 8
  %785 = getelementptr i8, i8* %784, i64 8
  store i8* %785, i8** %12, align 8
  br label %786

786:                                              ; preds = %783, %778
  %787 = phi i8* [ %781, %778 ], [ %784, %783 ]
  %788 = bitcast i8* %787 to i64*
  %789 = load i64, i64* %788, align 8
  br label %846

790:                                              ; preds = %756
  %791 = and i32 %43, 256
  %792 = icmp eq i32 %791, 0
  br i1 %792, label %830, label %793

793:                                              ; preds = %790
  %794 = and i32 %43, 512
  %795 = icmp eq i32 %794, 0
  %796 = load i32, i32* %11, align 8
  %797 = icmp ult i32 %796, 41
  br i1 %795, label %814, label %798

798:                                              ; preds = %793
  br i1 %797, label %799, label %804

799:                                              ; preds = %798
  %800 = load i8*, i8** %13, align 8
  %801 = sext i32 %796 to i64
  %802 = getelementptr i8, i8* %800, i64 %801
  %803 = add nuw nsw i32 %796, 8
  store i32 %803, i32* %11, align 8
  br label %807

804:                                              ; preds = %798
  %805 = load i8*, i8** %12, align 8
  %806 = getelementptr i8, i8* %805, i64 8
  store i8* %806, i8** %12, align 8
  br label %807

807:                                              ; preds = %804, %799
  %808 = phi i8* [ %802, %799 ], [ %805, %804 ]
  %809 = bitcast i8* %808 to i32*
  %810 = load i32, i32* %809, align 4
  %811 = zext i32 %810 to i64
  %812 = shl i64 %811, 56
  %813 = ashr exact i64 %812, 56
  br label %846

814:                                              ; preds = %793
  br i1 %797, label %815, label %820

815:                                              ; preds = %814
  %816 = load i8*, i8** %13, align 8
  %817 = sext i32 %796 to i64
  %818 = getelementptr i8, i8* %816, i64 %817
  %819 = add nuw nsw i32 %796, 8
  store i32 %819, i32* %11, align 8
  br label %823

820:                                              ; preds = %814
  %821 = load i8*, i8** %12, align 8
  %822 = getelementptr i8, i8* %821, i64 8
  store i8* %822, i8** %12, align 8
  br label %823

823:                                              ; preds = %820, %815
  %824 = phi i8* [ %818, %815 ], [ %821, %820 ]
  %825 = bitcast i8* %824 to i32*
  %826 = load i32, i32* %825, align 4
  %827 = zext i32 %826 to i64
  %828 = shl i64 %827, 48
  %829 = ashr exact i64 %828, 48
  br label %846

830:                                              ; preds = %790
  %831 = load i32, i32* %11, align 8
  %832 = icmp ult i32 %831, 41
  br i1 %832, label %833, label %838

833:                                              ; preds = %830
  %834 = load i8*, i8** %13, align 8
  %835 = sext i32 %831 to i64
  %836 = getelementptr i8, i8* %834, i64 %835
  %837 = add nuw nsw i32 %831, 8
  store i32 %837, i32* %11, align 8
  br label %841

838:                                              ; preds = %830
  %839 = load i8*, i8** %12, align 8
  %840 = getelementptr i8, i8* %839, i64 8
  store i8* %840, i8** %12, align 8
  br label %841

841:                                              ; preds = %838, %833
  %842 = phi i8* [ %836, %833 ], [ %839, %838 ]
  %843 = bitcast i8* %842 to i32*
  %844 = load i32, i32* %843, align 4
  %845 = sext i32 %844 to i64
  br label %846

846:                                              ; preds = %841, %823, %807, %786, %773
  %847 = phi i64 [ %776, %773 ], [ %789, %786 ], [ %813, %807 ], [ %829, %823 ], [ %845, %841 ]
  %848 = and i16 %39, -1041
  %849 = icmp slt i64 %847, 0
  %850 = sub nsw i64 0, %847
  %851 = or i16 %848, 1024
  %852 = select i1 %849, i16 %851, i16 %848
  %853 = select i1 %849, i64 %850, i64 %847
  %854 = and i16 %852, 64
  %855 = icmp ne i16 %854, 0
  %856 = icmp eq i32 %41, 0
  %857 = and i1 %856, %855
  %858 = icmp eq i64 %853, 0
  %859 = and i1 %858, %857
  br i1 %859, label %860, label %.preheader90

860:                                              ; preds = %846
  %861 = and i16 %852, -18
  br label %1055

.preheader90:                                     ; preds = %846, %.preheader90
  %862 = phi i8* [ %871, %.preheader90 ], [ %5, %846 ]
  %863 = phi i64 [ %864, %.preheader90 ], [ %853, %846 ]
  %864 = udiv i64 %863, 10
  %865 = urem i64 %863, 10
  %866 = trunc i64 %865 to i8
  %867 = icmp ult i8 %866, 10
  %868 = or i8 %866, 48
  %869 = add nuw nsw i8 %866, 87
  %870 = select i1 %867, i8 %868, i8 %869
  %871 = getelementptr inbounds i8, i8* %862, i64 1
  store i8 %870, i8* %862, align 1, !tbaa !57
  %872 = icmp ult i64 %863, 10
  br i1 %872, label %873, label %.preheader90

873:                                              ; preds = %.preheader90
  %874 = ptrtoint i8* %871 to i64
  %875 = sub i64 %874, %14
  %876 = trunc i64 %875 to i8
  br label %1037

877:                                              ; preds = %131
  %878 = zext i16 %132 to i32
  br label %879

879:                                              ; preds = %877, %664
  %880 = phi i32 [ %878, %877 ], [ %43, %664 ]
  %881 = phi i8 [ 0, %877 ], [ %38, %664 ]
  %882 = phi i8* [ %135, %877 ], [ %42, %664 ]
  %883 = phi i32 [ %134, %877 ], [ %41, %664 ]
  %884 = phi i32 [ %133, %877 ], [ %40, %664 ]
  %885 = phi i16 [ %132, %877 ], [ %39, %664 ]
  %886 = trunc i16 %885 to i8
  %887 = icmp slt i8 %886, 0
  br i1 %887, label %888, label %919

888:                                              ; preds = %879
  %889 = and i32 %880, 512
  %890 = icmp eq i32 %889, 0
  %891 = load i32, i32* %11, align 8
  %892 = icmp ult i32 %891, 41
  br i1 %890, label %906, label %893

893:                                              ; preds = %888
  br i1 %892, label %894, label %899

894:                                              ; preds = %893
  %895 = load i8*, i8** %13, align 8
  %896 = sext i32 %891 to i64
  %897 = getelementptr i8, i8* %895, i64 %896
  %898 = add nuw nsw i32 %891, 8
  store i32 %898, i32* %11, align 8
  br label %902

899:                                              ; preds = %893
  %900 = load i8*, i8** %12, align 8
  %901 = getelementptr i8, i8* %900, i64 8
  store i8* %901, i8** %12, align 8
  br label %902

902:                                              ; preds = %899, %894
  %903 = phi i8* [ %897, %894 ], [ %900, %899 ]
  %904 = bitcast i8* %903 to i64*
  %905 = load i64, i64* %904, align 8
  br label %973

906:                                              ; preds = %888
  br i1 %892, label %907, label %912

907:                                              ; preds = %906
  %908 = load i8*, i8** %13, align 8
  %909 = sext i32 %891 to i64
  %910 = getelementptr i8, i8* %908, i64 %909
  %911 = add nuw nsw i32 %891, 8
  store i32 %911, i32* %11, align 8
  br label %915

912:                                              ; preds = %906
  %913 = load i8*, i8** %12, align 8
  %914 = getelementptr i8, i8* %913, i64 8
  store i8* %914, i8** %12, align 8
  br label %915

915:                                              ; preds = %912, %907
  %916 = phi i8* [ %910, %907 ], [ %913, %912 ]
  %917 = bitcast i8* %916 to i64*
  %918 = load i64, i64* %917, align 8
  br label %973

919:                                              ; preds = %879
  %920 = and i32 %880, 256
  %921 = icmp eq i32 %920, 0
  br i1 %921, label %957, label %922

922:                                              ; preds = %919
  %923 = and i32 %880, 512
  %924 = icmp eq i32 %923, 0
  %925 = load i32, i32* %11, align 8
  %926 = icmp ult i32 %925, 41
  br i1 %924, label %942, label %927

927:                                              ; preds = %922
  br i1 %926, label %928, label %933

928:                                              ; preds = %927
  %929 = load i8*, i8** %13, align 8
  %930 = sext i32 %925 to i64
  %931 = getelementptr i8, i8* %929, i64 %930
  %932 = add nuw nsw i32 %925, 8
  store i32 %932, i32* %11, align 8
  br label %936

933:                                              ; preds = %927
  %934 = load i8*, i8** %12, align 8
  %935 = getelementptr i8, i8* %934, i64 8
  store i8* %935, i8** %12, align 8
  br label %936

936:                                              ; preds = %933, %928
  %937 = phi i8* [ %931, %928 ], [ %934, %933 ]
  %938 = bitcast i8* %937 to i32*
  %939 = load i32, i32* %938, align 4
  %940 = and i32 %939, 255
  %941 = zext i32 %940 to i64
  br label %973

942:                                              ; preds = %922
  br i1 %926, label %943, label %948

943:                                              ; preds = %942
  %944 = load i8*, i8** %13, align 8
  %945 = sext i32 %925 to i64
  %946 = getelementptr i8, i8* %944, i64 %945
  %947 = add nuw nsw i32 %925, 8
  store i32 %947, i32* %11, align 8
  br label %951

948:                                              ; preds = %942
  %949 = load i8*, i8** %12, align 8
  %950 = getelementptr i8, i8* %949, i64 8
  store i8* %950, i8** %12, align 8
  br label %951

951:                                              ; preds = %948, %943
  %952 = phi i8* [ %946, %943 ], [ %949, %948 ]
  %953 = bitcast i8* %952 to i32*
  %954 = load i32, i32* %953, align 4
  %955 = and i32 %954, 65535
  %956 = zext i32 %955 to i64
  br label %973

957:                                              ; preds = %919
  %958 = load i32, i32* %11, align 8
  %959 = icmp ult i32 %958, 41
  br i1 %959, label %960, label %965

960:                                              ; preds = %957
  %961 = load i8*, i8** %13, align 8
  %962 = sext i32 %958 to i64
  %963 = getelementptr i8, i8* %961, i64 %962
  %964 = add nuw nsw i32 %958, 8
  store i32 %964, i32* %11, align 8
  br label %968

965:                                              ; preds = %957
  %966 = load i8*, i8** %12, align 8
  %967 = getelementptr i8, i8* %966, i64 8
  store i8* %967, i8** %12, align 8
  br label %968

968:                                              ; preds = %965, %960
  %969 = phi i8* [ %963, %960 ], [ %966, %965 ]
  %970 = bitcast i8* %969 to i32*
  %971 = load i32, i32* %970, align 4
  %972 = zext i32 %971 to i64
  br label %973

973:                                              ; preds = %968, %951, %936, %915, %902
  %974 = phi i64 [ %905, %902 ], [ %918, %915 ], [ %941, %936 ], [ %956, %951 ], [ %972, %968 ]
  %975 = and i16 %885, -7
  switch i8 %881, label %1023 [
    i8 117, label %976
    i8 111, label %990
    i8 112, label %978
    i8 120, label %980
    i8 88, label %985
  ]

976:                                              ; preds = %973
  %977 = and i16 %885, -23
  br label %990

978:                                              ; preds = %973
  %979 = or i16 %975, 16
  br label %980

980:                                              ; preds = %978, %973
  %981 = phi i16 [ %975, %973 ], [ %979, %978 ]
  %982 = shl i16 %981, 8
  %983 = and i16 %982, 4096
  %984 = or i16 %983, %981
  br label %990

985:                                              ; preds = %973
  %986 = and i16 %885, 16
  %987 = icmp eq i16 %986, 0
  %988 = or i16 %975, 6144
  %989 = select i1 %987, i16 %975, i16 %988
  br label %990

990:                                              ; preds = %985, %980, %976, %973
  %991 = phi i16 [ %989, %985 ], [ %984, %980 ], [ %977, %976 ], [ %975, %973 ]
  %992 = phi i32 [ 528, %985 ], [ 16, %980 ], [ 10, %976 ], [ 8, %973 ]
  %993 = and i16 %991, 64
  %994 = icmp ne i16 %993, 0
  %995 = icmp eq i32 %883, 0
  %996 = and i1 %995, %994
  %997 = icmp eq i64 %974, 0
  %998 = and i1 %997, %996
  br i1 %998, label %1020, label %999

999:                                              ; preds = %990
  %1000 = and i32 %992, 512
  %1001 = icmp eq i32 %1000, 0
  %1002 = and i32 %992, 26
  %1003 = zext i32 %1002 to i64
  %1004 = select i1 %1001, i8 87, i8 55
  br label %1005

1005:                                             ; preds = %1005, %999
  %1006 = phi i8* [ %5, %999 ], [ %1014, %1005 ]
  %1007 = phi i64 [ %974, %999 ], [ %1008, %1005 ]
  %1008 = udiv i64 %1007, %1003
  %1009 = urem i64 %1007, %1003
  %1010 = trunc i64 %1009 to i8
  %1011 = icmp ult i8 %1010, 10
  %1012 = select i1 %1011, i8 48, i8 %1004
  %1013 = add nuw nsw i8 %1012, %1010
  %1014 = getelementptr inbounds i8, i8* %1006, i64 1
  store i8 %1013, i8* %1006, align 1, !tbaa !57
  %1015 = icmp ult i64 %1007, %1003
  br i1 %1015, label %1016, label %1005

1016:                                             ; preds = %1005
  %1017 = ptrtoint i8* %1014 to i64
  %1018 = sub i64 %1017, %14
  %1019 = trunc i64 %1018 to i8
  br label %1020

1020:                                             ; preds = %1016, %990
  %1021 = phi i8 [ %1019, %1016 ], [ 0, %990 ]
  %1022 = and i16 %991, -1025
  br label %1037

1023:                                             ; preds = %973
  %1024 = load i8, i8* %6, align 2, !tbaa !94
  %1025 = and i8 %1024, 2
  %1026 = icmp eq i8 %1025, 0
  br i1 %1026, label %fputc.exit70.thread, label %fputc.exit70

fputc.exit70.thread:                              ; preds = %1023
  %1027 = add nsw i32 %21, 2
  br label %fputc.exit.backedge

fputc.exit.backedge:                              ; preds = %fputc.exit70.thread, %1032, %fputc.exit70, %35, %29, %fputc.exit56, %1035
  %.be = phi i32 [ %1207, %fputc.exit56 ], [ %1036, %1035 ], [ %31, %29 ], [ %31, %35 ], [ %1030, %fputc.exit70 ], [ %1030, %1032 ], [ %1027, %fputc.exit70.thread ]
  %.be616 = phi i8* [ %1205, %fputc.exit56 ], [ %1205, %1035 ], [ %30, %29 ], [ %30, %35 ], [ %882, %fputc.exit70 ], [ %882, %1032 ], [ %882, %fputc.exit70.thread ]
  br label %fputc.exit

fputc.exit70:                                     ; preds = %1023
  %1028 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %1029 = call i32 %1028(i8 signext 37, %struct.__file* nonnull %0) #20
  %.pre184 = load i8, i8* %6, align 2, !tbaa !94
  %.pre185 = and i8 %.pre184, 2
  %1030 = add nsw i32 %21, 2
  %1031 = icmp eq i8 %.pre185, 0
  br i1 %1031, label %fputc.exit.backedge, label %1032

1032:                                             ; preds = %fputc.exit70
  %1033 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %1034 = call i32 %1033(i8 signext %881, %struct.__file* nonnull %0) #20
  br label %fputc.exit.backedge

1035:                                             ; preds = %fputc.exit46
  %1036 = add i32 %1207, %1206
  br label %fputc.exit.backedge

1037:                                             ; preds = %1020, %873
  %1038 = phi i16 [ %993, %1020 ], [ %854, %873 ]
  %1039 = phi i8* [ %882, %1020 ], [ %42, %873 ]
  %1040 = phi i32 [ %884, %1020 ], [ %40, %873 ]
  %1041 = phi i32 [ %883, %1020 ], [ %41, %873 ]
  %1042 = phi i8 [ %1021, %1020 ], [ %876, %873 ]
  %1043 = phi i16 [ %1022, %1020 ], [ %852, %873 ]
  %1044 = icmp eq i16 %1038, 0
  br i1 %1044, label %1055, label %1045

1045:                                             ; preds = %1037
  %1046 = and i16 %1043, -2
  %1047 = zext i8 %1042 to i32
  %1048 = icmp sgt i32 %1041, %1047
  br i1 %1048, label %1049, label %1055

1049:                                             ; preds = %1045
  %1050 = trunc i32 %1041 to i8
  %1051 = and i16 %1043, 4112
  %1052 = icmp eq i16 %1051, 16
  %1053 = and i16 %1043, -18
  %1054 = select i1 %1052, i16 %1053, i16 %1046
  br label %1055

1055:                                             ; preds = %1049, %1045, %1037, %860
  %1056 = phi i8 [ %1042, %1045 ], [ %1042, %1037 ], [ %1042, %1049 ], [ 0, %860 ]
  %1057 = phi i32 [ %1041, %1045 ], [ %1041, %1037 ], [ %1041, %1049 ], [ 0, %860 ]
  %1058 = phi i32 [ %1040, %1045 ], [ %1040, %1037 ], [ %1040, %1049 ], [ %40, %860 ]
  %1059 = phi i8* [ %1039, %1045 ], [ %1039, %1037 ], [ %1039, %1049 ], [ %42, %860 ]
  %1060 = phi i16 [ %1046, %1045 ], [ %1043, %1037 ], [ %1054, %1049 ], [ %861, %860 ]
  %1061 = phi i8 [ %1042, %1045 ], [ %1042, %1037 ], [ %1050, %1049 ], [ 0, %860 ]
  %1062 = zext i16 %1060 to i32
  %1063 = and i32 %1062, 16
  %1064 = icmp eq i32 %1063, 0
  br i1 %1064, label %1079, label %1065

1065:                                             ; preds = %1055
  %1066 = zext i8 %1056 to i64
  %1067 = add nsw i64 %1066, -1
  %1068 = getelementptr inbounds [22 x i8], [22 x i8]* %18, i64 0, i64 %1067
  %1069 = load i8, i8* %1068, align 1, !tbaa !57
  %1070 = icmp eq i8 %1069, 48
  br i1 %1070, label %1071, label %1074

1071:                                             ; preds = %1065
  %1072 = and i16 %1060, -6161
  %1073 = zext i16 %1072 to i32
  br label %1084

1074:                                             ; preds = %1065
  %1075 = and i32 %1062, 4096
  %1076 = icmp eq i32 %1075, 0
  %1077 = select i1 %1076, i8 1, i8 2
  %1078 = add i8 %1077, %1061
  br label %1084

1079:                                             ; preds = %1055
  %1080 = and i32 %1062, 1030
  %1081 = icmp ne i32 %1080, 0
  %1082 = zext i1 %1081 to i8
  %1083 = add i8 %1061, %1082
  br label %1084

1084:                                             ; preds = %1079, %1074, %1071
  %1085 = phi i32 [ %1062, %1079 ], [ %1062, %1074 ], [ %1073, %1071 ]
  %1086 = phi i8 [ %1083, %1079 ], [ %1078, %1074 ], [ %1061, %1071 ]
  %1087 = and i32 %1085, 8
  %1088 = icmp eq i32 %1087, 0
  br i1 %1088, label %1091, label %1089

1089:                                             ; preds = %1084
  %1090 = zext i8 %1086 to i32
  br label %.loopexit

1091:                                             ; preds = %1084
  %1092 = and i32 %1085, 1
  %1093 = icmp eq i32 %1092, 0
  br i1 %1093, label %1102, label %1094

1094:                                             ; preds = %1091
  %1095 = zext i8 %1056 to i32
  %1096 = zext i8 %1086 to i32
  %1097 = icmp sgt i32 %1058, %1096
  br i1 %1097, label %1098, label %1102

1098:                                             ; preds = %1094
  %1099 = add i32 %1058, %1095
  %1100 = sub i32 %1099, %1096
  %1101 = trunc i32 %1058 to i8
  br label %1102

1102:                                             ; preds = %1098, %1094, %1091
  %1103 = phi i32 [ %1100, %1098 ], [ %1095, %1094 ], [ %1057, %1091 ]
  %1104 = phi i8 [ %1101, %1098 ], [ %1086, %1094 ], [ %1086, %1091 ]
  %1105 = zext i8 %1104 to i32
  %1106 = icmp sgt i32 %1058, %1105
  br i1 %1106, label %.preheader79, label %.loopexit

.preheader79:                                     ; preds = %1102, %fputc.exit72
  %1107 = phi i32 [ %1109, %fputc.exit72 ], [ %21, %1102 ]
  %1108 = phi i8 [ %1116, %fputc.exit72 ], [ %1104, %1102 ]
  %1109 = add nsw i32 %1107, 1
  %1110 = load i8, i8* %6, align 2, !tbaa !94
  %1111 = and i8 %1110, 2
  %1112 = icmp eq i8 %1111, 0
  br i1 %1112, label %fputc.exit72, label %1113

1113:                                             ; preds = %.preheader79
  %1114 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %1115 = call i32 %1114(i8 signext 32, %struct.__file* nonnull %0) #20
  br label %fputc.exit72

fputc.exit72:                                     ; preds = %.preheader79, %1113
  %1116 = add i8 %1108, 1
  %1117 = zext i8 %1116 to i32
  %1118 = icmp sgt i32 %1058, %1117
  br i1 %1118, label %.preheader79, label %.loopexit

.loopexit:                                        ; preds = %fputc.exit72, %1102, %1089
  %1119 = phi i32 [ %1090, %1089 ], [ %1105, %1102 ], [ %1117, %fputc.exit72 ]
  %1120 = phi i32 [ %1057, %1089 ], [ %1103, %1102 ], [ %1103, %fputc.exit72 ]
  %1121 = phi i32 [ %21, %1089 ], [ %21, %1102 ], [ %1109, %fputc.exit72 ]
  %1122 = icmp sgt i32 %1058, %1119
  %1123 = sub nsw i32 %1058, %1119
  %1124 = select i1 %1122, i32 %1123, i32 0
  %1125 = and i32 %1085, 16
  %1126 = icmp eq i32 %1125, 0
  br i1 %1126, label %1148, label %1127

1127:                                             ; preds = %.loopexit
  %1128 = add nsw i32 %1121, 1
  %1129 = load i8, i8* %6, align 2, !tbaa !94
  %1130 = and i8 %1129, 2
  %1131 = icmp eq i8 %1130, 0
  br i1 %1131, label %fputc.exit73, label %1132

1132:                                             ; preds = %1127
  %1133 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %1134 = call i32 %1133(i8 signext 48, %struct.__file* nonnull %0) #20
  br label %fputc.exit73

fputc.exit73:                                     ; preds = %1127, %1132
  %1135 = and i32 %1085, 4096
  %1136 = icmp eq i32 %1135, 0
  br i1 %1136, label %fputc.exit74, label %1137

1137:                                             ; preds = %fputc.exit73
  %1138 = add nsw i32 %1121, 2
  %1139 = load i8, i8* %6, align 2, !tbaa !94
  %1140 = and i8 %1139, 2
  %1141 = icmp eq i8 %1140, 0
  br i1 %1141, label %fputc.exit74, label %1142

1142:                                             ; preds = %1137
  %1143 = and i32 %1085, 2048
  %1144 = icmp eq i32 %1143, 0
  %1145 = select i1 %1144, i8 120, i8 88
  %1146 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %1147 = call i32 %1146(i8 signext %1145, %struct.__file* nonnull %0) #20
  br label %fputc.exit74

1148:                                             ; preds = %.loopexit
  %1149 = and i32 %1085, 1030
  %1150 = icmp eq i32 %1149, 0
  br i1 %1150, label %fputc.exit74, label %1151

1151:                                             ; preds = %1148
  %1152 = add nsw i32 %1121, 1
  %1153 = load i8, i8* %6, align 2, !tbaa !94
  %1154 = and i8 %1153, 2
  %1155 = icmp eq i8 %1154, 0
  br i1 %1155, label %fputc.exit74, label %1156

1156:                                             ; preds = %1151
  %1157 = and i32 %1085, 1024
  %1158 = icmp eq i32 %1157, 0
  %1159 = and i32 %1085, 2
  %1160 = icmp eq i32 %1159, 0
  %1161 = select i1 %1160, i8 32, i8 43
  %1162 = select i1 %1158, i8 %1161, i8 45
  %1163 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %1164 = call i32 %1163(i8 signext %1162, %struct.__file* nonnull %0) #20
  br label %fputc.exit74

fputc.exit74:                                     ; preds = %1156, %1151, %1142, %1137, %1148, %fputc.exit73
  %1165 = phi i32 [ %1128, %fputc.exit73 ], [ %1121, %1148 ], [ %1138, %1137 ], [ %1138, %1142 ], [ %1152, %1151 ], [ %1152, %1156 ]
  %1166 = zext i8 %1056 to i32
  %1167 = icmp sgt i32 %1120, %1166
  br i1 %1167, label %.preheader136, label %1171

1168:                                             ; preds = %fputc.exit76
  %1169 = sub i32 %1120, %1166
  %1170 = add i32 %1169, %1165
  br label %1171

1171:                                             ; preds = %1168, %fputc.exit74
  %1172 = phi i32 [ %1165, %fputc.exit74 ], [ %1170, %1168 ]
  %1173 = icmp eq i8 %1056, 0
  br i1 %1173, label %fputc.exit56, label %1174

1174:                                             ; preds = %1171
  %1175 = zext i8 %1056 to i64
  br label %1185

.preheader136:                                    ; preds = %fputc.exit74, %fputc.exit76
  %1176 = phi i32 [ %1183, %fputc.exit76 ], [ %1120, %fputc.exit74 ]
  %1177 = load i8, i8* %6, align 2, !tbaa !94
  %1178 = and i8 %1177, 2
  %1179 = icmp eq i8 %1178, 0
  br i1 %1179, label %fputc.exit76, label %1180

1180:                                             ; preds = %.preheader136
  %1181 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %1182 = call i32 %1181(i8 signext 48, %struct.__file* nonnull %0) #20
  br label %fputc.exit76

fputc.exit76:                                     ; preds = %.preheader136, %1180
  %1183 = add nsw i32 %1176, -1
  %1184 = icmp sgt i32 %1183, %1166
  br i1 %1184, label %.preheader136, label %1168

1185:                                             ; preds = %fputc.exit67, %1174
  %1186 = phi i64 [ %1175, %1174 ], [ %1201, %fputc.exit67 ]
  %1187 = phi i32 [ %1172, %1174 ], [ %1188, %fputc.exit67 ]
  %1188 = add nsw i32 %1187, 1
  %1189 = trunc i64 %1186 to i8
  %1190 = add i8 %1189, -1
  %1191 = load i8, i8* %6, align 2, !tbaa !94
  %1192 = and i8 %1191, 2
  %1193 = icmp eq i8 %1192, 0
  br i1 %1193, label %fputc.exit67, label %1194

1194:                                             ; preds = %1185
  %1195 = zext i8 %1190 to i64
  %1196 = getelementptr inbounds [22 x i8], [22 x i8]* %18, i64 0, i64 %1195
  %1197 = load i8, i8* %1196, align 1, !tbaa !57
  %1198 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %1199 = call i32 %1198(i8 signext %1197, %struct.__file* nonnull %0) #20
  br label %fputc.exit67

fputc.exit67:                                     ; preds = %1185, %1194
  %1200 = icmp eq i8 %1190, 0
  %1201 = add nsw i64 %1186, -1
  br i1 %1200, label %fputc.exit56, label %1185

1202:                                             ; preds = %fputc.exit69
  %1203 = trunc i64 %717 to i32
  %1204 = add i32 %738, %1203
  br label %fputc.exit56

fputc.exit56:                                     ; preds = %fputc.exit49, %fputc.exit67, %fputc.exit64.thread, %659, %fputc.exit64, %547, %542, %1202, %1171, %736, %fputc.exit55, %fputc.exit48
  %1205 = phi i8* [ %42, %fputc.exit55 ], [ %1059, %1171 ], [ %42, %fputc.exit48 ], [ %42, %736 ], [ %42, %1202 ], [ %42, %542 ], [ %42, %547 ], [ %42, %fputc.exit64 ], [ %42, %659 ], [ %42, %fputc.exit64.thread ], [ %1059, %fputc.exit67 ], [ %42, %fputc.exit49 ]
  %1206 = phi i32 [ %475, %fputc.exit55 ], [ %1124, %1171 ], [ %328, %fputc.exit48 ], [ %737, %736 ], [ %753, %1202 ], [ %475, %542 ], [ %475, %547 ], [ %475, %fputc.exit64 ], [ %475, %659 ], [ %475, %fputc.exit64.thread ], [ %1124, %fputc.exit67 ], [ %328, %fputc.exit49 ]
  %1207 = phi i32 [ %531, %fputc.exit55 ], [ %1172, %1171 ], [ %338, %fputc.exit48 ], [ %738, %736 ], [ %1204, %1202 ], [ %543, %542 ], [ %543, %547 ], [ %657, %fputc.exit64 ], [ %657, %659 ], [ %650, %fputc.exit64.thread ], [ %1188, %fputc.exit67 ], [ %352, %fputc.exit49 ]
  %1208 = icmp eq i32 %1206, 0
  br i1 %1208, label %fputc.exit.backedge, label %.preheader

.preheader:                                       ; preds = %fputc.exit56, %fputc.exit46
  %1209 = phi i32 [ %1216, %fputc.exit46 ], [ %1206, %fputc.exit56 ]
  %1210 = load i8, i8* %6, align 2, !tbaa !94
  %1211 = and i8 %1210, 2
  %1212 = icmp eq i8 %1211, 0
  br i1 %1212, label %fputc.exit46, label %1213

1213:                                             ; preds = %.preheader
  %1214 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %19, align 8, !tbaa !95
  %1215 = call i32 %1214(i8 signext 32, %struct.__file* nonnull %0) #20
  br label %fputc.exit46

fputc.exit46:                                     ; preds = %.preheader, %1213
  %1216 = add nsw i32 %1209, -1
  %1217 = icmp eq i32 %1216, 0
  br i1 %1217, label %1035, label %.preheader

.loopexit92:                                      ; preds = %fputc.exit, %113, %3
  %1218 = phi i32 [ -1, %3 ], [ %21, %113 ], [ %21, %fputc.exit ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #10
  ret i32 %1218
}

; Function Attrs:  nounwind optsize uwtable
define internal fastcc void @colored_fputs(i32, i8* nocapture readonly) unnamed_addr #11 {
  %.b3 = load i1, i1* @use_color, align 4
  br i1 %.b3, label %4, label %3

3:                                                ; preds = %2
  store i1 true, i1* @use_color, align 4
  br label %4

4:                                                ; preds = %3, %2
  %5 = load %struct.__file*, %struct.__file** getelementptr inbounds ([0 x %struct.__file*], [0 x %struct.__file*]* @__iob, i64 0, i64 2), align 8, !tbaa !6
  %6 = getelementptr inbounds %struct.__file, %struct.__file* %5, i64 0, i32 1
  %7 = load i8, i8* %6, align 2, !tbaa !94
  %8 = and i8 %7, 2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %fputs.exit, label %10

10:                                               ; preds = %4
  %11 = load i8, i8* %1, align 1, !tbaa !57
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %fputs.exit, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.__file, %struct.__file* %5, i64 0, i32 2
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i8 [ %11, %13 ], [ %21, %15 ]
  %17 = phi i8* [ %1, %13 ], [ %18, %15 ]
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  %19 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %14, align 8, !tbaa !95
  %20 = tail call i32 %19(i8 signext %16, %struct.__file* nonnull %5) #20
  %21 = load i8, i8* %18, align 1, !tbaa !57
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %fputs.exit, label %15

fputs.exit:                                       ; preds = %15, %4, %10
  %.b = load i1, i1* @use_color, align 4
  br i1 %.b, label %fwrite.exit, label %23

23:                                               ; preds = %fputs.exit
  %24 = load i8, i8* %6, align 2, !tbaa !94
  %25 = and i8 %24, 2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %fwrite.exit, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.__file, %struct.__file* %5, i64 0, i32 2
  br label %.preheader.i

.preheader.i:                                     ; preds = %35, %27
  %29 = phi i8* [ %36, %35 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9.1866, i64 0, i64 0), %27 ]
  %30 = phi i64 [ %37, %35 ], [ 0, %27 ]
  %31 = load i32 (i8, %struct.__file*)*, i32 (i8, %struct.__file*)** %28, align 8, !tbaa !95
  %32 = load i8, i8* %29, align 1, !tbaa !57
  %33 = tail call i32 %31(i8 signext %32, %struct.__file* nonnull %5) #20
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %fwrite.exit

35:                                               ; preds = %.preheader.i
  %36 = getelementptr inbounds i8, i8* %29, i64 1
  %37 = add nuw nsw i64 %30, 1
  %38 = icmp eq i64 %37, 4
  br i1 %38, label %fwrite.exit, label %.preheader.i

fwrite.exit:                                      ; preds = %35, %.preheader.i, %23, %fputs.exit
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #8

; Function Attrs: nounwind optsize uwtable
define internal void @av_destruct_packet(%struct.AVPacket.21* nocapture) #3 {
  %2 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8, !tbaa !24
  tail call fastcc void @free(i8* %3) #20
  store i8* null, i8** %2, align 8, !tbaa !24
  %4 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  store i32 0, i32* %4, align 8, !tbaa !25
  ret void
}

; Function Attrs: noinline norecurse nounwind optsize readonly uwtable
define internal fastcc i8* @__cc_malloc_heap_end() unnamed_addr #12 {
  %1 = load i8*, i8** bitcast (i64* @pos to i8**), align 8, !tbaa !28
  ret i8* %1
}

; Function Attrs:  noinline norecurse nounwind optsize uwtable writeonly
define internal fastcc void @__cc_malloc_set_heap_end() unnamed_addr #13 {
  store i64 ptrtoint (i64* getelementptr inbounds (<{ [2645 x i64], [8 x i64] }>, <{ [2645 x i64], [8 x i64] }>* @heap_data, i64 1, i32 0, i64 0) to i64), i64* @pos, align 8, !tbaa !28
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly uwtable
define internal i32 @avcodec_default_get_format(%struct.AVCodecContext* nocapture readnone, i32* nocapture readonly) #9 {
  %3 = load i32, i32* %1, align 4, !tbaa !57
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %2, %15
  %5 = phi i32 [ %17, %15 ], [ %3, %2 ]
  %6 = phi i32* [ %16, %15 ], [ %1, %2 ]
  %7 = icmp ugt i32 %5, 316
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %8
  %10 = select i1 %7, %struct.AVPixFmtDescriptor* null, %struct.AVPixFmtDescriptor* %9
  %11 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %10, i64 0, i32 4
  %12 = load i8, i8* %11, align 1, !tbaa !112
  %13 = and i8 %12, 8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %.loopexit, label %15

15:                                               ; preds = %.preheader
  %16 = getelementptr inbounds i32, i32* %6, i64 1
  %17 = load i32, i32* %16, align 4, !tbaa !57
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %15, %.preheader, %2
  %19 = phi i32 [ -1, %2 ], [ %5, %.preheader ], [ -1, %15 ]
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @avcodec_default_get_buffer(%struct.AVCodecContext*, %struct.AVFrame*) #3 {
  %3 = alloca [4 x i32], align 16
  %4 = alloca [4 x i32], align 16
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca [4 x i32], align 16
  %8 = alloca %struct.AVPicture, align 8
  %9 = alloca [8 x i32], align 16
  %10 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 28
  store i32 1, i32* %10, align 8, !tbaa !114
  %11 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4, !tbaa !115
  switch i32 %12, label %626 [
    i32 0, label %13
    i32 1, label %510
  ]

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 23
  %15 = load i32, i32* %14, align 4, !tbaa !61
  %16 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 24
  %17 = load i32, i32* %16, align 8, !tbaa !63
  %18 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 10
  %19 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %18, align 8, !tbaa !116
  %20 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 0
  %21 = load i8*, i8** %20, align 8, !tbaa !6
  %22 = icmp eq i8* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %13
  %24 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %24, i32 16, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.80.852, i64 0, i64 0)) #20
  br label %626

25:                                               ; preds = %13
  %26 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %19, i64 0, i32 0
  %27 = load i32, i32* %26, align 8, !tbaa !117
  %28 = icmp sgt i32 %27, 32
  %29 = bitcast %struct.AVCodecContext* %0 to i8*
  br i1 %28, label %30, label %31

30:                                               ; preds = %25
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %29, i32 16, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.81.853, i64 0, i64 0)) #20
  br label %626

31:                                               ; preds = %25
  %32 = tail call fastcc i32 @av_image_check_size(i32 %15, i32 %17, i8* %29) #20
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 28
  %36 = load i32, i32* %35, align 8, !tbaa !70
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %34, %31
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %29, i32 16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.82.854, i64 0, i64 0)) #20
  br label %626

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %19, i64 0, i32 1
  %41 = load %struct.InternalBuffer*, %struct.InternalBuffer** %40, align 8, !tbaa !119
  %42 = icmp eq %struct.InternalBuffer* %41, null
  br i1 %42, label %43, label %50

43:                                               ; preds = %39
  %44 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #10
  store i8* null, i8** %6, align 8, !tbaa !6
  call fastcc void @posix_memalign(i8** nonnull %6, i64 5984) #20
  %45 = load i8*, i8** %6, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #10
  %46 = icmp eq i8* %45, null
  br i1 %46, label %av_mallocz.exit, label %47

47:                                               ; preds = %43
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %45, i8 0, i64 5984, i1 false) #10
  br label %av_mallocz.exit

av_mallocz.exit:                                  ; preds = %43, %47
  %48 = bitcast %struct.InternalBuffer** %40 to i8**
  store i8* %45, i8** %48, align 8, !tbaa !119
  %49 = bitcast i8* %45 to %struct.InternalBuffer*
  br label %50

50:                                               ; preds = %av_mallocz.exit, %39
  %51 = phi %struct.InternalBuffer* [ %41, %39 ], [ %49, %av_mallocz.exit ]
  %52 = load i32, i32* %26, align 8, !tbaa !117
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53
  %55 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %54, i64 0, i32 0, i64 0
  %56 = load i8*, i8** %55, align 8, !tbaa !6
  %57 = icmp eq i8* %56, null
  br i1 %57, label %80, label %58

58:                                               ; preds = %50
  %59 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 3
  %60 = load i32, i32* %59, align 8, !tbaa !120
  %61 = icmp eq i32 %60, %15
  br i1 %61, label %62, label %.preheader77.preheader

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 4
  %64 = load i32, i32* %63, align 4, !tbaa !122
  %65 = icmp eq i32 %64, %17
  br i1 %65, label %66, label %.preheader77.preheader

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 5
  %68 = load i32, i32* %67, align 8, !tbaa !123
  %69 = load i32, i32* %35, align 8, !tbaa !70
  %70 = icmp eq i32 %68, %69
  br i1 %70, label %.preheader75.preheader, label %.preheader77.preheader

.preheader77.preheader:                           ; preds = %66, %62, %58
  br label %.preheader77

.preheader77:                                     ; preds = %.preheader77.preheader, %.preheader77
  %71 = phi i64 [ %75, %.preheader77 ], [ 0, %.preheader77.preheader ]
  %72 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 0, i64 %71
  %73 = load i8*, i8** %72, align 8, !tbaa !6
  tail call fastcc void @free(i8* %73) #20
  store i8* null, i8** %72, align 8, !tbaa !6
  %74 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 1, i64 %71
  store i8* null, i8** %74, align 8, !tbaa !6
  %75 = add nuw nsw i64 %71, 1
  %76 = icmp eq i64 %75, 8
  br i1 %76, label %77, label %.preheader77

77:                                               ; preds = %.preheader77
  %78 = load i8*, i8** %55, align 8, !tbaa !6
  %79 = icmp eq i8* %78, null
  br i1 %79, label %80, label %.preheader75.preheader

80:                                               ; preds = %77, %50
  %81 = bitcast [4 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %81, i8 0, i64 16, i1 false) #10
  %82 = bitcast %struct.AVPicture* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %82) #10
  %83 = bitcast [8 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %83) #10
  %84 = load i32, i32* %35, align 8, !tbaa !70
  %85 = icmp ugt i32 %84, 316
  %86 = sext i32 %84 to i64
  %87 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %86
  %88 = select i1 %85, %struct.AVPixFmtDescriptor* null, %struct.AVPixFmtDescriptor* %87
  %89 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %88, i64 0, i32 5, i64 0, i32 0
  %90 = load i16, i16* %89, align 4
  %91 = icmp eq %struct.AVPixFmtDescriptor* %87, null
  %92 = or i1 %85, %91
  br i1 %92, label %av_pix_fmt_get_chroma_sub_sample.exit, label %93

93:                                               ; preds = %80
  %94 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %86, i32 2
  %95 = load i8, i8* %94, align 1, !tbaa !124
  %96 = zext i8 %95 to i32
  %97 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %86, i32 3
  %98 = load i8, i8* %97, align 2, !tbaa !125
  %99 = zext i8 %98 to i32
  br label %av_pix_fmt_get_chroma_sub_sample.exit

av_pix_fmt_get_chroma_sub_sample.exit:            ; preds = %80, %93
  %.024 = phi i32 [ undef, %80 ], [ %96, %93 ]
  %.0 = phi i32 [ undef, %80 ], [ %99, %93 ]
  switch i32 %84, label %100 [
    i32 0, label %125
    i32 1, label %125
    i32 17, label %125
    i32 4, label %125
    i32 33, label %125
    i32 5, label %125
    i32 82, label %125
    i32 8, label %125
    i32 31, label %125
    i32 32, label %125
    i32 12, label %125
    i32 13, label %125
    i32 34, label %125
    i32 14, label %125
    i32 35, label %125
    i32 300, label %125
    i32 299, label %125
    i32 70, label %125
    i32 69, label %125
    i32 72, label %125
    i32 71, label %125
    i32 302, label %125
    i32 301, label %125
    i32 304, label %125
    i32 303, label %125
    i32 80, label %125
    i32 79, label %125
    i32 74, label %125
    i32 73, label %125
    i32 306, label %125
    i32 305, label %125
    i32 308, label %125
    i32 307, label %125
    i32 76, label %125
    i32 75, label %125
    i32 78, label %125
    i32 77, label %125
    i32 310, label %125
    i32 309, label %125
    i32 312, label %125
    i32 311, label %125
    i32 84, label %125
    i32 83, label %125
    i32 86, label %125
    i32 85, label %125
    i32 314, label %125
    i32 313, label %125
    i32 316, label %125
    i32 315, label %125
    i32 7, label %103
    i32 18, label %103
    i32 6, label %132
    i32 46, label %104
    i32 11, label %109
    i32 19, label %109
    i32 22, label %109
    i32 3, label %114
  ]

100:                                              ; preds = %av_pix_fmt_get_chroma_sub_sample.exit
  %101 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 5
  %102 = load i32, i32* %101, align 8, !tbaa !126
  br label %120

103:                                              ; preds = %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit
  br label %125

104:                                              ; preds = %av_pix_fmt_get_chroma_sub_sample.exit
  %105 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 5
  %106 = load i32, i32* %105, align 8, !tbaa !126
  %107 = icmp eq i32 %106, 43
  %108 = select i1 %107, i32 4, i32 1
  br label %120

109:                                              ; preds = %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit
  %110 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 5
  %111 = load i32, i32* %110, align 8, !tbaa !126
  %112 = icmp eq i32 %111, 50
  %113 = select i1 %112, i32 4, i32 1
  br label %120

114:                                              ; preds = %av_pix_fmt_get_chroma_sub_sample.exit
  %115 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 5
  %116 = load i32, i32* %115, align 8, !tbaa !126
  %117 = and i32 %116, -2
  %118 = icmp eq i32 %117, 54
  %119 = select i1 %118, i32 4, i32 1
  br label %120

120:                                              ; preds = %114, %109, %104, %100
  %121 = phi i32 [ %116, %114 ], [ %111, %109 ], [ %106, %104 ], [ %102, %100 ]
  %122 = phi i32 [ %119, %114 ], [ %113, %109 ], [ %108, %104 ], [ 1, %100 ]
  %123 = and i32 %121, -2
  %124 = icmp eq i32 %123, 138
  br label %143

125:                                              ; preds = %103, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit, %av_pix_fmt_get_chroma_sub_sample.exit
  %126 = phi i32 [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 16, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %103 ]
  %127 = phi i32 [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 32, %av_pix_fmt_get_chroma_sub_sample.exit ], [ 8, %103 ]
  %128 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 5
  %129 = load i32, i32* %128, align 8, !tbaa !126
  %130 = and i32 %129, -2
  %131 = icmp eq i32 %130, 138
  br label %138

132:                                              ; preds = %av_pix_fmt_get_chroma_sub_sample.exit
  %133 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 5
  %134 = load i32, i32* %133, align 8, !tbaa !126
  %135 = icmp eq i32 %134, 23
  %136 = and i32 %134, -2
  %137 = icmp eq i32 %136, 138
  br i1 %135, label %138, label %143

138:                                              ; preds = %132, %125
  %139 = phi i1 [ %131, %125 ], [ %137, %132 ]
  %140 = phi i32 [ %129, %125 ], [ 23, %132 ]
  %141 = phi i32 [ %127, %125 ], [ 64, %132 ]
  %142 = phi i32 [ %126, %125 ], [ 64, %132 ]
  br label %143

143:                                              ; preds = %138, %132, %120
  %144 = phi i1 [ %139, %138 ], [ %137, %132 ], [ %124, %120 ]
  %145 = phi i32 [ %140, %138 ], [ %134, %132 ], [ %121, %120 ]
  %146 = phi i32 [ %141, %138 ], [ 1, %132 ], [ %122, %120 ]
  %147 = phi i32 [ %142, %138 ], [ 1, %132 ], [ %122, %120 ]
  %148 = phi i32 [ %142, %138 ], [ 8, %132 ], [ 8, %120 ]
  %149 = select i1 %144, i32 %148, i32 %147
  %150 = add i32 %15, -1
  %151 = add i32 %150, %149
  %152 = sub nsw i32 0, %149
  %153 = and i32 %151, %152
  %154 = add i32 %17, -1
  %155 = add i32 %154, %146
  %156 = sub nsw i32 0, %146
  %157 = and i32 %155, %156
  %158 = icmp eq i32 %145, 28
  br i1 %158, label %163, label %159

159:                                              ; preds = %143
  %160 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 174
  %161 = load i32, i32* %160, align 4, !tbaa !62
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %165, label %163

163:                                              ; preds = %159, %143
  %164 = add nsw i32 %157, 2
  br label %165

165:                                              ; preds = %163, %159
  %.025 = phi i32 [ %164, %163 ], [ %157, %159 ]
  br label %166

166:                                              ; preds = %166, %165
  %167 = phi i64 [ %169, %166 ], [ 0, %165 ]
  %168 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %167
  store i32 8, i32* %168, align 4, !tbaa !29
  %169 = add nuw nsw i64 %167, 1
  %170 = icmp eq i64 %169, 4
  br i1 %170, label %avcodec_align_dimensions2.exit, label %166

avcodec_align_dimensions2.exit:                   ; preds = %166
  %171 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 16
  %172 = load i32, i32* %171, align 8, !tbaa !127
  %173 = and i32 %172, 16384
  %174 = icmp eq i32 %173, 0
  %175 = add nsw i32 %153, 32
  %176 = select i1 %174, i32 %175, i32 %153
  %177 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 1, i64 0
  %178 = bitcast [4 x i32]* %3 to i8*
  %179 = bitcast [4 x i32]* %4 to i8*
  %180 = bitcast i32* %177 to i8*
  %181 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 0
  %182 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  br label %183

183:                                              ; preds = %._crit_edge, %avcodec_align_dimensions2.exit
  %184 = phi i32 [ %.pre, %._crit_edge ], [ %84, %avcodec_align_dimensions2.exit ]
  %185 = phi i32 [ %246, %._crit_edge ], [ %176, %avcodec_align_dimensions2.exit ]
  %186 = icmp ugt i32 %184, 316
  %187 = sext i32 %184 to i64
  %188 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %187
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %178) #10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %179) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %180, i8 0, i64 16, i1 false) #10
  %189 = icmp eq %struct.AVPixFmtDescriptor* %188, null
  %190 = or i1 %186, %189
  br i1 %190, label %av_image_fill_linesizes.exit, label %191

191:                                              ; preds = %183
  %192 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %187, i32 4
  %193 = load i8, i8* %192, align 1, !tbaa !112
  %194 = and i8 %193, 8
  %195 = icmp eq i8 %194, 0
  br i1 %195, label %196, label %av_image_fill_linesizes.exit

196:                                              ; preds = %191
  call fastcc void @av_image_fill_max_pixsteps(i32* nonnull %181, i32* nonnull %182, %struct.AVPixFmtDescriptor* nonnull %188) #20
  %197 = icmp slt i32 %185, 0
  %198 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %187, i32 2
  %199 = add nsw i32 %185, -1
  br i1 %197, label %av_image_fill_linesizes.exit, label %.split.preheader.i

.split.preheader.i:                               ; preds = %196
  %200 = and i8 %193, 4
  %201 = icmp eq i8 %200, 0
  br label %.split.i

.split.i:                                         ; preds = %227, %.split.preheader.i
  %202 = phi i64 [ %229, %227 ], [ 0, %.split.preheader.i ]
  %203 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %202
  %204 = load i32, i32* %203, align 4, !tbaa !29
  %205 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %202
  %206 = load i32, i32* %205, align 4, !tbaa !29
  %207 = add i32 %206, -1
  %208 = icmp ult i32 %207, 2
  br i1 %208, label %209, label %212

209:                                              ; preds = %.split.i
  %210 = load i8, i8* %198, align 1, !tbaa !124
  %211 = zext i8 %210 to i32
  br label %212

212:                                              ; preds = %209, %.split.i
  %213 = phi i32 [ %211, %209 ], [ 0, %.split.i ]
  %214 = shl i32 1, %213
  %215 = add i32 %199, %214
  %216 = ashr i32 %215, %213
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %221, label %218

218:                                              ; preds = %212
  %219 = sdiv i32 2147483647, %216
  %220 = icmp slt i32 %219, %204
  br i1 %220, label %av_image_fill_linesizes.exit, label %221

221:                                              ; preds = %218, %212
  %222 = mul nsw i32 %216, %204
  %223 = add nsw i32 %222, 7
  %224 = ashr i32 %223, 3
  %225 = select i1 %201, i32 %222, i32 %224
  %226 = icmp slt i32 %225, 0
  br i1 %226, label %av_image_fill_linesizes.exit, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 1, i64 %202
  store i32 %225, i32* %228, align 4, !tbaa !29
  %229 = add nuw nsw i64 %202, 1
  %230 = icmp eq i64 %229, 4
  br i1 %230, label %av_image_fill_linesizes.exit, label %.split.i

av_image_fill_linesizes.exit:                     ; preds = %218, %221, %227, %183, %191, %196
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %179) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %178) #10
  br label %231

231:                                              ; preds = %231, %av_image_fill_linesizes.exit
  %232 = phi i64 [ 0, %av_image_fill_linesizes.exit ], [ %240, %231 ]
  %233 = phi i32 [ 0, %av_image_fill_linesizes.exit ], [ %239, %231 ]
  %234 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 1, i64 %232
  %235 = load i32, i32* %234, align 4, !tbaa !29
  %236 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %232
  %237 = load i32, i32* %236, align 4, !tbaa !29
  %238 = srem i32 %235, %237
  %239 = or i32 %238, %233
  %240 = add nuw nsw i64 %232, 1
  %241 = icmp eq i64 %240, 4
  br i1 %241, label %242, label %231

242:                                              ; preds = %231
  %243 = icmp eq i32 %239, 0
  br i1 %243, label %247, label %._crit_edge

._crit_edge:                                      ; preds = %242
  %244 = sub i32 0, %185
  %245 = and i32 %185, %244
  %246 = add nsw i32 %245, %185
  %.pre = load i32, i32* %35, align 8, !tbaa !70
  br label %183

247:                                              ; preds = %242
  %248 = add nsw i32 %.025, 32
  %.1 = select i1 %174, i32 %248, i32 %.025
  %249 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 0
  %250 = load i32, i32* %35, align 8, !tbaa !70
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %178) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %178, i8 0, i64 16, i1 false) #10
  %251 = icmp ugt i32 %250, 316
  %252 = sext i32 %250 to i64
  %253 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %252
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %82, i8 0, i64 32, i1 false) #10
  %254 = icmp eq %struct.AVPixFmtDescriptor* %253, null
  %255 = or i1 %251, %254
  br i1 %255, label %av_image_fill_pointers.exit.thread, label %256

256:                                              ; preds = %247
  %257 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %252, i32 4
  %258 = load i8, i8* %257, align 1, !tbaa !112
  %259 = and i8 %258, 8
  %260 = icmp eq i8 %259, 0
  br i1 %260, label %261, label %av_image_fill_pointers.exit.thread

261:                                              ; preds = %256
  store i8* null, i8** %249, align 8, !tbaa !6
  %262 = load i32, i32* %177, align 8, !tbaa !29
  %263 = sdiv i32 2147482623, %.1
  %264 = icmp sgt i32 %262, %263
  br i1 %264, label %av_image_fill_pointers.exit.thread, label %265

265:                                              ; preds = %261
  %266 = mul nsw i32 %262, %.1
  %267 = and i8 %258, 66
  %268 = icmp eq i8 %267, 0
  br i1 %268, label %.preheader.i, label %269

269:                                              ; preds = %265
  %270 = add nsw i32 %266, 3
  %271 = and i32 %270, -4
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds i8, i8* null, i64 %272
  %274 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 1
  store i8* %273, i8** %274, align 8, !tbaa !6
  %275 = add nsw i32 %271, 1024
  br label %av_image_fill_pointers.exit

276:                                              ; preds = %.preheader.i
  %277 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %252, i32 3
  %278 = add i32 %.1, -1
  br label %287

.preheader.i:                                     ; preds = %265, %.preheader.i
  %279 = phi i64 [ %285, %.preheader.i ], [ 0, %265 ]
  %280 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %252, i32 5, i64 %279, i32 0
  %281 = load i16, i16* %280, align 2
  %282 = and i16 %281, 3
  %283 = zext i16 %282 to i64
  %284 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %283
  store i32 1, i32* %284, align 4, !tbaa !29
  %285 = add nuw nsw i64 %279, 1
  %286 = icmp eq i64 %285, 4
  br i1 %286, label %276, label %.preheader.i

287:                                              ; preds = %317, %276
  %288 = phi i32 [ %266, %276 ], [ %314, %317 ]
  %289 = phi i8* [ null, %276 ], [ %304, %317 ]
  %290 = phi i64 [ 1, %276 ], [ %319, %317 ]
  %291 = phi i32 [ %266, %276 ], [ %318, %317 ]
  %292 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %290
  %293 = load i32, i32* %292, align 4, !tbaa !29
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %av_image_fill_pointers.exit, label %295

295:                                              ; preds = %287
  %296 = add nsw i64 %290, -1
  %297 = icmp ult i64 %296, 2
  br i1 %297, label %298, label %301

298:                                              ; preds = %295
  %299 = load i8, i8* %277, align 2, !tbaa !125
  %300 = zext i8 %299 to i32
  br label %301

301:                                              ; preds = %298, %295
  %302 = phi i32 [ %300, %298 ], [ 0, %295 ]
  %303 = sext i32 %288 to i64
  %304 = getelementptr inbounds i8, i8* %289, i64 %303
  %305 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 %290
  store i8* %304, i8** %305, align 8, !tbaa !6
  %306 = shl i32 1, %302
  %307 = add i32 %278, %306
  %308 = ashr i32 %307, %302
  %309 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 1, i64 %290
  %310 = load i32, i32* %309, align 4, !tbaa !29
  %311 = sdiv i32 2147483647, %308
  %312 = icmp sgt i32 %310, %311
  br i1 %312, label %av_image_fill_pointers.exit.thread, label %313

313:                                              ; preds = %301
  %314 = mul nsw i32 %308, %310
  %315 = sub nsw i32 2147483647, %314
  %316 = icmp sgt i32 %291, %315
  br i1 %316, label %av_image_fill_pointers.exit.thread, label %317

317:                                              ; preds = %313
  %318 = add nsw i32 %314, %291
  %319 = add nuw nsw i64 %290, 1
  %320 = icmp eq i64 %319, 4
  br i1 %320, label %av_image_fill_pointers.exit, label %287

av_image_fill_pointers.exit.thread:               ; preds = %313, %301, %256, %247, %261
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %178) #10
  br label %.thread

av_image_fill_pointers.exit:                      ; preds = %287, %317, %269
  %321 = phi i32 [ %275, %269 ], [ %291, %287 ], [ %318, %317 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %178) #10
  %322 = icmp slt i32 %321, 0
  br i1 %322, label %.thread, label %.preheader

.preheader:                                       ; preds = %av_image_fill_pointers.exit, %330
  %323 = phi i64 [ %325, %330 ], [ 0, %av_image_fill_pointers.exit ]
  %324 = phi i32 [ %326, %330 ], [ 0, %av_image_fill_pointers.exit ]
  %325 = add nuw nsw i64 %323, 1
  %326 = add nuw nsw i32 %324, 1
  %327 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 %325
  %328 = load i8*, i8** %327, align 8, !tbaa !6
  %329 = icmp eq i8* %328, null
  br i1 %329, label %339, label %330

330:                                              ; preds = %.preheader
  %331 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 %323
  %332 = bitcast i8** %331 to i64*
  %333 = load i64, i64* %332, align 8, !tbaa !6
  %334 = ptrtoint i8* %328 to i64
  %335 = sub i64 %334, %333
  %336 = trunc i64 %335 to i32
  %337 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %323
  store i32 %336, i32* %337, align 4, !tbaa !29
  %338 = icmp eq i64 %325, 3
  br i1 %338, label %.loopexit29, label %.preheader

339:                                              ; preds = %.preheader
  %340 = trunc i64 %323 to i32
  br label %.loopexit29

.loopexit29:                                      ; preds = %330, %339
  %341 = phi i32 [ %340, %339 ], [ %326, %330 ]
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 %342
  %344 = bitcast i8** %343 to i64*
  %345 = load i64, i64* %344, align 8, !tbaa !6
  %346 = bitcast %struct.AVPicture* %8 to i64*
  %347 = load i64, i64* %346, align 8, !tbaa !6
  %348 = sub i64 %347, %345
  %349 = trunc i64 %348 to i32
  %350 = add i32 %321, %349
  %351 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %342
  store i32 %350, i32* %351, align 4, !tbaa !29
  %352 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 2
  %353 = bitcast %struct.InternalBuffer* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %353, i8 0, i64 128, i1 false) #10
  %354 = load i32, i32* %352, align 8
  %355 = icmp eq i32 %354, 0
  %356 = shl i16 %90, 2
  %357 = and i16 %356, 112
  %358 = add nuw nsw i16 %357, 16
  %359 = zext i16 %358 to i32
  br label %360

360:                                              ; preds = %405, %.loopexit29
  %361 = phi i64 [ 0, %.loopexit29 ], [ %406, %405 ]
  %362 = phi i32 [ 0, %.loopexit29 ], [ %407, %405 ]
  %363 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %361
  %364 = load i32, i32* %363, align 4, !tbaa !29
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %409, label %366

366:                                              ; preds = %360
  %367 = icmp eq i64 %361, 0
  %368 = select i1 %367, i32 0, i32 %.024
  %369 = select i1 %367, i32 0, i32 %.0
  %370 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 1, i64 %361
  %371 = load i32, i32* %370, align 4, !tbaa !29
  %372 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 2, i64 %361
  store i32 %371, i32* %372, align 4, !tbaa !29
  %373 = add nsw i32 %364, 16
  %374 = sext i32 %373 to i64
  %375 = call fastcc noalias i8* @av_malloc(i64 %374) #20
  %376 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 0, i64 %361
  store i8* %375, i8** %376, align 8, !tbaa !6
  %377 = icmp eq i8* %375, null
  br i1 %377, label %.thread, label %378

378:                                              ; preds = %366
  %379 = sext i32 %364 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %375, i8 -128, i64 %379, i1 false) #10
  %380 = load i32, i32* %171, align 8, !tbaa !127
  %381 = and i32 %380, 16384
  %382 = icmp ne i32 %381, 0
  %383 = or i1 %355, %382
  br i1 %383, label %384, label %389

384:                                              ; preds = %378
  %385 = bitcast i8** %376 to i64*
  %386 = load i64, i64* %385, align 8, !tbaa !6
  %387 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 1, i64 %361
  %388 = bitcast i8** %387 to i64*
  store i64 %386, i64* %388, align 8, !tbaa !6
  br label %405

389:                                              ; preds = %378
  %390 = load i8*, i8** %376, align 8, !tbaa !6
  %391 = load i32, i32* %372, align 4, !tbaa !29
  %392 = shl nsw i32 %391, 4
  %393 = ashr i32 %392, %369
  %394 = lshr i32 %359, %368
  %395 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %361
  %396 = load i32, i32* %395, align 4, !tbaa !29
  %397 = add i32 %394, -1
  %398 = add i32 %397, %396
  %399 = add i32 %398, %393
  %400 = sub i32 0, %396
  %401 = and i32 %399, %400
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds i8, i8* %390, i64 %402
  %404 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 1, i64 %361
  store i8* %403, i8** %404, align 8, !tbaa !6
  br label %405

405:                                              ; preds = %389, %384
  %406 = add nuw nsw i64 %361, 1
  %407 = add nuw nsw i32 %362, 1
  %408 = icmp eq i64 %406, 4
  br i1 %408, label %.loopexit28, label %360

409:                                              ; preds = %360
  %410 = trunc i64 %361 to i32
  br label %.loopexit28

.loopexit28:                                      ; preds = %405, %409
  %411 = phi i32 [ %410, %409 ], [ %407, %405 ]
  %412 = icmp ult i32 %411, 8
  br i1 %412, label %413, label %.loopexit27

413:                                              ; preds = %.loopexit28
  %414 = zext i32 %411 to i64
  br label %415

415:                                              ; preds = %415, %413
  %416 = phi i64 [ %414, %413 ], [ %420, %415 ]
  %417 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 1, i64 %416
  store i8* null, i8** %417, align 8, !tbaa !6
  %418 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 0, i64 %416
  store i8* null, i8** %418, align 8, !tbaa !6
  %419 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 2, i64 %416
  store i32 0, i32* %419, align 4, !tbaa !29
  %420 = add nuw nsw i64 %416, 1
  %421 = icmp eq i64 %420, 8
  br i1 %421, label %.loopexit27, label %415

.loopexit27:                                      ; preds = %415, %.loopexit28
  %422 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  %423 = load i32, i32* %422, align 4, !tbaa !29
  %424 = icmp eq i32 %423, 0
  %425 = xor i1 %355, true
  %426 = or i1 %424, %425
  br i1 %426, label %.loopexit27..loopexit_crit_edge, label %427

.loopexit27..loopexit_crit_edge:                  ; preds = %.loopexit27
  %.pre55 = load i32, i32* %35, align 8, !tbaa !70
  br label %.loopexit

427:                                              ; preds = %.loopexit27
  %428 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 1, i64 1
  %429 = bitcast i8** %428 to i32**
  %430 = load i32*, i32** %429, align 8, !tbaa !6
  %431 = load i32, i32* %35, align 8, !tbaa !70
  br label %432

432:                                              ; preds = %467, %427
  %433 = phi i64 [ 0, %427 ], [ %477, %467 ]
  %434 = trunc i64 %433 to i32
  switch i32 %431, label %.loopexit [
    i32 22, label %435
    i32 19, label %443
    i32 24, label %451
    i32 21, label %459
    i32 8, label %467
  ]

435:                                              ; preds = %432
  %436 = lshr i32 %434, 5
  %437 = mul nuw nsw i32 %436, 36
  %438 = lshr i32 %434, 2
  %439 = and i32 %438, 7
  %440 = mul nuw nsw i32 %439, 36
  %441 = and i32 %434, 3
  %442 = mul nuw nsw i32 %441, 85
  br label %467

443:                                              ; preds = %432
  %444 = lshr i32 %434, 6
  %445 = mul nuw nsw i32 %444, 85
  %446 = lshr i32 %434, 3
  %447 = and i32 %446, 7
  %448 = mul nuw nsw i32 %447, 36
  %449 = and i32 %434, 7
  %450 = mul nuw nsw i32 %449, 36
  br label %467

451:                                              ; preds = %432
  %452 = lshr i32 %434, 3
  %453 = mul nsw i32 %452, 255
  %454 = lshr i32 %434, 1
  %455 = and i32 %454, 3
  %456 = mul nuw nsw i32 %455, 85
  %457 = and i32 %434, 1
  %458 = mul nuw nsw i32 %457, 255
  br label %467

459:                                              ; preds = %432
  %460 = lshr i32 %434, 3
  %461 = mul nsw i32 %460, 255
  %462 = lshr i32 %434, 1
  %463 = and i32 %462, 3
  %464 = mul nuw nsw i32 %463, 85
  %465 = and i32 %434, 1
  %466 = mul nuw nsw i32 %465, 255
  br label %467

467:                                              ; preds = %459, %451, %443, %435, %432
  %468 = phi i32 [ %466, %459 ], [ %453, %451 ], [ %450, %443 ], [ %437, %435 ], [ %434, %432 ]
  %469 = phi i32 [ %464, %459 ], [ %456, %451 ], [ %448, %443 ], [ %440, %435 ], [ %434, %432 ]
  %470 = phi i32 [ %461, %459 ], [ %458, %451 ], [ %445, %443 ], [ %442, %435 ], [ %434, %432 ]
  %471 = shl i32 %469, 8
  %472 = shl i32 %468, 16
  %473 = add i32 %472, -16777216
  %474 = add i32 %473, %471
  %475 = add i32 %474, %470
  %476 = getelementptr inbounds i32, i32* %430, i64 %433
  store i32 %475, i32* %476, align 4, !tbaa !29
  %477 = add nuw nsw i64 %433, 1
  %478 = icmp eq i64 %477, 256
  br i1 %478, label %.loopexit, label %432

.thread:                                          ; preds = %366, %av_image_fill_pointers.exit, %av_image_fill_pointers.exit.thread
  %.ph = phi i32 [ -1, %av_image_fill_pointers.exit.thread ], [ -1, %av_image_fill_pointers.exit ], [ -12, %366 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %83) #10
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %82) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #10
  br label %626

.loopexit:                                        ; preds = %432, %467, %.loopexit27..loopexit_crit_edge
  %479 = phi i32 [ %.pre55, %.loopexit27..loopexit_crit_edge ], [ %431, %467 ], [ %431, %432 ]
  %480 = load i32, i32* %14, align 4, !tbaa !61
  %481 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 3
  store i32 %480, i32* %481, align 8, !tbaa !120
  %482 = load i32, i32* %16, align 8, !tbaa !63
  %483 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 4
  store i32 %482, i32* %483, align 4, !tbaa !122
  %484 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 5
  store i32 %479, i32* %484, align 8, !tbaa !123
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %83) #10
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %82) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #10
  br label %.preheader75.preheader

.preheader75.preheader:                           ; preds = %.loopexit, %77, %66
  br label %.preheader75

.preheader75:                                     ; preds = %.preheader75.preheader, %.preheader75
  %485 = phi i64 [ %499, %.preheader75 ], [ 0, %.preheader75.preheader ]
  %486 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 0, i64 %485
  %487 = bitcast i8** %486 to i64*
  %488 = load i64, i64* %487, align 8, !tbaa !6
  %489 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 9, i64 %485
  %490 = bitcast i8** %489 to i64*
  store i64 %488, i64* %490, align 8, !tbaa !6
  %491 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 1, i64 %485
  %492 = bitcast i8** %491 to i64*
  %493 = load i64, i64* %492, align 8, !tbaa !6
  %494 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 %485
  %495 = bitcast i8** %494 to i64*
  store i64 %493, i64* %495, align 8, !tbaa !6
  %496 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %51, i64 %53, i32 2, i64 %485
  %497 = load i32, i32* %496, align 4, !tbaa !29
  %498 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 1, i64 %485
  store i32 %497, i32* %498, align 4, !tbaa !29
  %499 = add nuw nsw i64 %485, 1
  %500 = icmp eq i64 %499, 8
  br i1 %500, label %501, label %.preheader75

501:                                              ; preds = %.preheader75
  %502 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 2
  store i8** %20, i8*** %502, align 8, !tbaa !48
  %503 = load i32, i32* %26, align 8, !tbaa !117
  %504 = add nsw i32 %503, 1
  store i32 %504, i32* %26, align 8, !tbaa !117
  %505 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 162
  %506 = load i32, i32* %505, align 4, !tbaa !128
  %507 = trunc i32 %506 to i16
  %508 = icmp slt i16 %507, 0
  br i1 %508, label %509, label %626

509:                                              ; preds = %501
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %29, i32 48, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.83.855, i64 0, i64 0), %struct.AVFrame* nonnull %1, i32 %504) #20
  br label %626

510:                                              ; preds = %2
  %511 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 10
  %512 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %511, align 8, !tbaa !116
  %513 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %512, i64 0, i32 5
  %514 = load i8*, i8** %513, align 8, !tbaa !6
  tail call fastcc void @free(i8* %514) #20
  store i8* null, i8** %513, align 8, !tbaa !6
  %515 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 101
  %516 = load i32, i32* %515, align 4, !tbaa !58
  %517 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 5
  %518 = load i32, i32* %517, align 8, !tbaa !129
  %519 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 102
  %520 = load i32, i32* %519, align 8, !tbaa !130
  %521 = tail call fastcc i32 @av_samples_get_buffer_size(i32* null, i32 %516, i32 %518, i32 %520) #20
  %522 = icmp slt i32 %521, 0
  br i1 %522, label %626, label %523

523:                                              ; preds = %510
  %524 = sext i32 %521 to i64
  %525 = tail call fastcc noalias i8* @av_malloc(i64 %524) #20
  %526 = icmp eq i8* %525, null
  br i1 %526, label %av_mallocz.exit10.thread, label %528

av_mallocz.exit10.thread:                         ; preds = %523
  %527 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 0
  store i8* null, i8** %527, align 8, !tbaa !6
  br label %626

528:                                              ; preds = %523
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %525, i8 0, i64 %524, i1 false) #10
  %529 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 0
  store i8* %525, i8** %529, align 8, !tbaa !6
  %530 = load i32, i32* %515, align 4, !tbaa !58
  %531 = load i32, i32* %519, align 8, !tbaa !130
  %532 = load i32, i32* %517, align 8, !tbaa !129
  %533 = tail call fastcc i32 @av_samples_get_buffer_size(i32* null, i32 %530, i32 %532, i32 %531) #20
  %534 = icmp sgt i32 %533, %521
  br i1 %534, label %616, label %535

535:                                              ; preds = %528
  %536 = icmp ugt i32 %531, 9
  br i1 %536, label %av_sample_fmt_is_planar.exit.thread.i.thread, label %av_sample_fmt_is_planar.exit.i

av_sample_fmt_is_planar.exit.thread.i.thread:     ; preds = %535
  %537 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 2
  store i8** %529, i8*** %537, align 8, !tbaa !48
  %538 = load i32, i32* %517, align 8, !tbaa !129
  %539 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %539) #10
  br label %563

av_sample_fmt_is_planar.exit.i:                   ; preds = %535
  %540 = sext i32 %531 to i64
  %541 = add nsw i64 %540, -5
  %542 = icmp ult i64 %541, 5
  %543 = icmp sgt i32 %530, 8
  %544 = and i1 %543, %542
  br i1 %544, label %545, label %av_sample_fmt_is_planar.exit.thread._crit_edge.i

545:                                              ; preds = %av_sample_fmt_is_planar.exit.i
  %546 = sext i32 %530 to i64
  %547 = shl nsw i64 %546, 3
  %548 = tail call fastcc noalias i8* @av_malloc(i64 %547) #20
  %549 = icmp eq i8* %548, null
  br i1 %549, label %av_mallocz.exit.thread.i, label %.thread.i

av_mallocz.exit.thread.i:                         ; preds = %545
  %550 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 2
  %551 = bitcast i8*** %550 to i8**
  store i8* null, i8** %551, align 8, !tbaa !48
  br label %616

.thread.i:                                        ; preds = %545
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %548, i8 0, i64 %547, i1 false) #10
  %552 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 2
  %553 = bitcast i8*** %552 to i8**
  store i8* %548, i8** %553, align 8, !tbaa !48
  %554 = bitcast i8* %548 to i8**
  br label %556

av_sample_fmt_is_planar.exit.thread._crit_edge.i: ; preds = %av_sample_fmt_is_planar.exit.i
  %555 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 2
  store i8** %529, i8*** %555, align 8, !tbaa !48
  br label %556

556:                                              ; preds = %av_sample_fmt_is_planar.exit.thread._crit_edge.i, %.thread.i
  %557 = phi i8*** [ %555, %av_sample_fmt_is_planar.exit.thread._crit_edge.i ], [ %552, %.thread.i ]
  %558 = phi i8** [ %529, %av_sample_fmt_is_planar.exit.thread._crit_edge.i ], [ %554, %.thread.i ]
  %559 = load i32, i32* %517, align 8, !tbaa !129
  %560 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %560) #10
  %561 = getelementptr inbounds [10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %540, i32 2
  %562 = load i32, i32* %561, align 4, !tbaa !131
  br label %563

563:                                              ; preds = %av_sample_fmt_is_planar.exit.thread.i.thread, %556
  %564 = phi i8* [ %560, %556 ], [ %539, %av_sample_fmt_is_planar.exit.thread.i.thread ]
  %565 = phi i32 [ %559, %556 ], [ %538, %av_sample_fmt_is_planar.exit.thread.i.thread ]
  %566 = phi i8*** [ %557, %556 ], [ %537, %av_sample_fmt_is_planar.exit.thread.i.thread ]
  %567 = phi i8** [ %558, %556 ], [ %529, %av_sample_fmt_is_planar.exit.thread.i.thread ]
  %568 = phi i32 [ %562, %556 ], [ 0, %av_sample_fmt_is_planar.exit.thread.i.thread ]
  %569 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 1, i64 0
  %570 = call fastcc i32 @av_samples_get_buffer_size(i32* nonnull %5, i32 %530, i32 %565, i32 %531) #20
  %571 = icmp slt i32 %570, 0
  br i1 %571, label %586, label %572

572:                                              ; preds = %563
  store i8* %525, i8** %567, align 8, !tbaa !6
  %573 = icmp ne i32 %568, 0
  %574 = icmp sgt i32 %530, 1
  %575 = and i1 %574, %573
  %576 = load i32, i32* %5, align 4, !tbaa !29
  br i1 %575, label %577, label %.loopexit1.i

577:                                              ; preds = %572
  %578 = sext i32 %576 to i64
  %579 = sext i32 %530 to i64
  br label %580

580:                                              ; preds = %580, %577
  %581 = phi i8* [ %525, %577 ], [ %583, %580 ]
  %582 = phi i64 [ 1, %577 ], [ %585, %580 ]
  %583 = getelementptr inbounds i8, i8* %581, i64 %578
  %584 = getelementptr inbounds i8*, i8** %567, i64 %582
  store i8* %583, i8** %584, align 8, !tbaa !6
  %585 = add nuw nsw i64 %582, 1
  %exitcond.i.i = icmp eq i64 %585, %579
  br i1 %exitcond.i.i, label %.loopexit1.i, label %580

586:                                              ; preds = %563
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %564) #10
  %587 = load i8**, i8*** %566, align 8, !tbaa !48
  %588 = icmp eq i8** %587, %529
  br i1 %588, label %616, label %589

589:                                              ; preds = %586
  %590 = bitcast i8** %587 to i8*
  %591 = bitcast i8*** %566 to i8**
  tail call fastcc void @free(i8* %590) #20
  store i8* null, i8** %591, align 8, !tbaa !6
  br label %616

.loopexit1.i:                                     ; preds = %580, %572
  store i32 %576, i32* %569, align 4, !tbaa !29
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %564) #10
  %592 = load i8**, i8*** %566, align 8, !tbaa !48
  %593 = icmp eq i8** %592, %529
  br i1 %593, label %.loopexit1.i.avcodec_fill_audio_frame.exit_crit_edge, label %594

.loopexit1.i.avcodec_fill_audio_frame.exit_crit_edge: ; preds = %.loopexit1.i
  %.pre56 = bitcast %struct.AVFrame* %1 to i64*
  br label %avcodec_fill_audio_frame.exit

594:                                              ; preds = %.loopexit1.i
  %595 = bitcast i8** %592 to i64*
  %596 = load i64, i64* %595, align 8, !tbaa !6
  %597 = bitcast %struct.AVFrame* %1 to i64*
  store i64 %596, i64* %597, align 8, !tbaa !6
  %598 = getelementptr inbounds i8*, i8** %592, i64 1
  %599 = bitcast i8** %598 to i64*
  %600 = load i64, i64* %599, align 8, !tbaa !6
  %601 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 1
  %602 = bitcast i8** %601 to i64*
  store i64 %600, i64* %602, align 8, !tbaa !6
  %603 = getelementptr inbounds i8*, i8** %592, i64 2
  %604 = bitcast i8** %603 to i64*
  %605 = load i64, i64* %604, align 8, !tbaa !6
  %606 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 2
  %607 = bitcast i8** %606 to i64*
  store i64 %605, i64* %607, align 8, !tbaa !6
  br label %._crit_edge.i.._crit_edge.i_crit_edge

._crit_edge.i.._crit_edge.i_crit_edge:            ; preds = %594, %._crit_edge.i.._crit_edge.i_crit_edge
  %608 = phi i64 [ 3, %594 ], [ %614, %._crit_edge.i.._crit_edge.i_crit_edge ]
  %.pre2.i.pre = load i8**, i8*** %566, align 8, !tbaa !48
  %609 = getelementptr inbounds i8*, i8** %.pre2.i.pre, i64 %608
  %610 = bitcast i8** %609 to i64*
  %611 = load i64, i64* %610, align 8, !tbaa !6
  %612 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 %608
  %613 = bitcast i8** %612 to i64*
  store i64 %611, i64* %613, align 8, !tbaa !6
  %614 = add nuw nsw i64 %608, 1
  %615 = icmp eq i64 %614, 8
  br i1 %615, label %avcodec_fill_audio_frame.exit, label %._crit_edge.i.._crit_edge.i_crit_edge

616:                                              ; preds = %528, %589, %586, %av_mallocz.exit.thread.i
  %.ph26 = phi i32 [ -12, %av_mallocz.exit.thread.i ], [ %570, %586 ], [ %570, %589 ], [ -22, %528 ]
  %617 = load i8*, i8** %529, align 8, !tbaa !6
  tail call fastcc void @free(i8* %617) #20
  store i8* null, i8** %529, align 8, !tbaa !6
  br label %626

avcodec_fill_audio_frame.exit:                    ; preds = %._crit_edge.i.._crit_edge.i_crit_edge, %.loopexit1.i.avcodec_fill_audio_frame.exit_crit_edge
  %.pre-phi = phi i64* [ %.pre56, %.loopexit1.i.avcodec_fill_audio_frame.exit_crit_edge ], [ %597, %._crit_edge.i.._crit_edge.i_crit_edge ]
  %618 = load i64, i64* %.pre-phi, align 8, !tbaa !6
  %619 = bitcast i8** %513 to i64*
  store i64 %618, i64* %619, align 8, !tbaa !133
  %620 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 162
  %621 = load i32, i32* %620, align 4, !tbaa !128
  %622 = trunc i32 %621 to i16
  %623 = icmp slt i16 %622, 0
  br i1 %623, label %624, label %626

624:                                              ; preds = %avcodec_fill_audio_frame.exit
  %625 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %625, i32 48, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.84.856, i64 0, i64 0), %struct.AVFrame* nonnull %1) #20
  br label %626

626:                                              ; preds = %av_mallocz.exit10.thread, %23, %30, %38, %501, %509, %.thread, %624, %avcodec_fill_audio_frame.exit, %616, %510, %2
  %627 = phi i32 [ -1, %2 ], [ %.ph26, %616 ], [ -22, %510 ], [ 0, %624 ], [ 0, %avcodec_fill_audio_frame.exit ], [ -1, %23 ], [ -1, %30 ], [ -1, %38 ], [ 0, %509 ], [ 0, %501 ], [ %.ph, %.thread ], [ -12, %av_mallocz.exit10.thread ]
  ret i32 %627
}

; Function Attrs: nounwind optsize uwtable
define internal void @avcodec_default_release_buffer(%struct.AVCodecContext*, %struct.AVFrame*) #3 {
  %3 = bitcast %struct.AVFrame* %1 to i8*
  %4 = alloca %struct.InternalBuffer, align 8
  %5 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 10
  %6 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %5, align 8, !tbaa !116
  %7 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4, !tbaa !115
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.1839, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1.862, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.863, i64 0, i64 0), i32 554) #20
  tail call fastcc void @abort() #21
  unreachable

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %6, i64 0, i32 1
  %13 = load %struct.InternalBuffer*, %struct.InternalBuffer** %12, align 8, !tbaa !119
  %14 = icmp eq %struct.InternalBuffer* %13, null
  br i1 %14, label %41, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %6, i64 0, i32 0
  %17 = load i32, i32* %16, align 8, !tbaa !117
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %.loopexit

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 0
  %21 = load i8*, i8** %20, align 8, !tbaa !6
  %22 = sext i32 %17 to i64
  br label %24

23:                                               ; preds = %24
  %exitcond = icmp eq i64 %29, %22
  br i1 %exitcond, label %.loopexit, label %24

24:                                               ; preds = %23, %19
  %25 = phi i64 [ 0, %19 ], [ %29, %23 ]
  %26 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %13, i64 %25, i32 1, i64 0
  %27 = load i8*, i8** %26, align 8, !tbaa !6
  %28 = icmp eq i8* %27, %21
  %29 = add nuw nsw i64 %25, 1
  br i1 %28, label %30, label %23

.loopexit:                                        ; preds = %23, %15
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.1839, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3.864, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.863, i64 0, i64 0), i32 566) #20
  tail call fastcc void @abort() #21
  unreachable

30:                                               ; preds = %24
  %31 = and i64 %25, 4294967295
  %32 = add nsw i32 %17, -1
  store i32 %32, i32* %16, align 8, !tbaa !117
  %33 = sext i32 %32 to i64
  %34 = icmp eq i64 %31, %33
  br i1 %34, label %41, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %13, i64 %31
  %37 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %13, i64 %33
  %38 = bitcast %struct.InternalBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %38)
  %39 = bitcast %struct.InternalBuffer* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %38, i8* nonnull align 8 %39, i64 176, i1 false), !tbaa.struct !134
  %40 = bitcast %struct.InternalBuffer* %36 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %39, i8* nonnull align 8 %40, i64 176, i1 false), !tbaa.struct !134
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %40, i8* nonnull align 8 %38, i64 176, i1 false), !tbaa.struct !134
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %38)
  br label %41

41:                                               ; preds = %35, %30, %11
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 64, i1 false)
  %42 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 162
  %43 = load i32, i32* %42, align 4, !tbaa !128
  %44 = trunc i32 %43 to i16
  %45 = icmp slt i16 %44, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %41
  %47 = bitcast %struct.AVCodecContext* %0 to i8*
  %48 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %6, i64 0, i32 0
  %49 = load i32, i32* %48, align 8, !tbaa !117
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %47, i32 48, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4.865, i64 0, i64 0), %struct.AVFrame* nonnull %1, i32 %49) #20
  br label %50

50:                                               ; preds = %46, %41
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @avcodec_default_reget_buffer(%struct.AVCodecContext*, %struct.AVFrame*) #3 {
  %3 = alloca [4 x i32], align 16
  %4 = alloca [4 x i32], align 16
  %5 = bitcast %struct.AVFrame* %1 to i8*
  %6 = alloca %struct.AVFrame, align 8
  %7 = bitcast %struct.AVFrame* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %7) #10
  %8 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4, !tbaa !115
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.1839, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1.862, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.863, i64 0, i64 0), i32 588) #20
  tail call fastcc void @abort() #21
  unreachable

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 0
  %14 = load i8*, i8** %13, align 8, !tbaa !6
  %15 = icmp eq i8* %14, null
  br i1 %15, label %56, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 3
  %18 = load i32, i32* %17, align 8, !tbaa !68
  %19 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 23
  %20 = load i32, i32* %19, align 4, !tbaa !61
  %21 = icmp eq i32 %18, %20
  %22 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 4
  %23 = load i32, i32* %22, align 4, !tbaa !69
  br i1 %21, label %24, label %34

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 24
  %26 = load i32, i32* %25, align 8, !tbaa !63
  %27 = icmp eq i32 %23, %26
  br i1 %27, label %28, label %34

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 6
  %30 = load i32, i32* %29, align 4, !tbaa !47
  %31 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 28
  %32 = load i32, i32* %31, align 8, !tbaa !70
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %56, label %34

34:                                               ; preds = %28, %24, %16
  %35 = bitcast %struct.AVCodecContext* %0 to i8*
  %36 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 6
  %37 = load i32, i32* %36, align 4, !tbaa !47
  %38 = icmp ult i32 %37, 317
  br i1 %38, label %39, label %av_get_pix_fmt_name.exit

39:                                               ; preds = %34
  %40 = sext i32 %37 to i64
  %41 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %40, i32 0
  %42 = load i8*, i8** %41, align 8, !tbaa !135
  br label %av_get_pix_fmt_name.exit

av_get_pix_fmt_name.exit:                         ; preds = %34, %39
  %43 = phi i8* [ %42, %39 ], [ null, %34 ]
  %44 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 24
  %45 = load i32, i32* %44, align 8, !tbaa !63
  %46 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 28
  %47 = load i32, i32* %46, align 8, !tbaa !70
  %48 = icmp ult i32 %47, 317
  br i1 %48, label %49, label %av_get_pix_fmt_name.exit1

49:                                               ; preds = %av_get_pix_fmt_name.exit
  %50 = sext i32 %47 to i64
  %51 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %50, i32 0
  %52 = load i8*, i8** %51, align 8, !tbaa !135
  br label %av_get_pix_fmt_name.exit1

av_get_pix_fmt_name.exit1:                        ; preds = %av_get_pix_fmt_name.exit, %49
  %53 = phi i8* [ %52, %49 ], [ null, %av_get_pix_fmt_name.exit ]
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %35, i32 24, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.5.868, i64 0, i64 0), i32 %18, i32 %23, i8* %43, i32 %20, i32 %45, i8* %53) #20
  %54 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 113
  %55 = load void (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*, %struct.AVFrame*)** %54, align 8, !tbaa !136
  tail call void %55(%struct.AVCodecContext* nonnull %0, %struct.AVFrame* nonnull %1) #20
  br label %56

56:                                               ; preds = %av_get_pix_fmt_name.exit1, %28, %12
  tail call fastcc void @ff_init_buffer_info(%struct.AVCodecContext* nonnull %0, %struct.AVFrame* nonnull %1) #22
  %57 = load i8*, i8** %13, align 8, !tbaa !6
  %58 = icmp eq i8* %57, null
  br i1 %58, label %59, label %66

59:                                               ; preds = %56
  %60 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 33
  %61 = load i32, i32* %60, align 4, !tbaa !137
  %62 = or i32 %61, 2
  store i32 %62, i32* %60, align 4, !tbaa !137
  tail call fastcc void @ff_init_buffer_info(%struct.AVCodecContext* nonnull %0, %struct.AVFrame* nonnull %1) #20
  %63 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 112
  %64 = load i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)** %63, align 8, !tbaa !138
  %65 = tail call i32 %64(%struct.AVCodecContext* nonnull %0, %struct.AVFrame* nonnull %1) #20
  br label %196

66:                                               ; preds = %56
  %67 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 28
  %68 = load i32, i32* %67, align 8, !tbaa !114
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %196, label %70

70:                                               ; preds = %66
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* nonnull align 8 %5, i64 520, i1 false), !tbaa.struct !139
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 64, i1 false)
  %scevgep = getelementptr %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 9, i64 0
  %scevgep2 = bitcast i8** %scevgep to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %scevgep2, i8 0, i64 64, i1 false)
  %71 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 26
  store i8* null, i8** %71, align 8, !tbaa !140
  tail call fastcc void @ff_init_buffer_info(%struct.AVCodecContext* nonnull %0, %struct.AVFrame* nonnull %1) #20
  %72 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 112
  %73 = load i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)** %72, align 8, !tbaa !138
  %74 = tail call i32 %73(%struct.AVCodecContext* nonnull %0, %struct.AVFrame* nonnull %1) #20
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %196

76:                                               ; preds = %70
  %77 = bitcast %struct.AVFrame* %1 to %struct.AVPicture*
  %78 = bitcast %struct.AVFrame* %6 to %struct.AVPicture*
  %79 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 28
  %80 = load i32, i32* %79, align 8, !tbaa !70
  %81 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 23
  %82 = load i32, i32* %81, align 4, !tbaa !61
  %83 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 24
  %84 = load i32, i32* %83, align 8, !tbaa !63
  %85 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 1, i64 0
  %86 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6, i64 0, i32 0, i64 0
  %87 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6, i64 0, i32 1, i64 0
  %88 = icmp ugt i32 %80, 316
  %89 = sext i32 %80 to i64
  %90 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %89
  %91 = icmp eq %struct.AVPixFmtDescriptor* %90, null
  %92 = or i1 %88, %91
  br i1 %92, label %av_picture_copy.exit, label %93

93:                                               ; preds = %76
  %94 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %89, i32 4
  %95 = load i8, i8* %94, align 1, !tbaa !112
  %96 = zext i8 %95 to i32
  %97 = and i32 %96, 8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %av_picture_copy.exit

99:                                               ; preds = %93
  %100 = and i32 %96, 66
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %108

102:                                              ; preds = %99
  %103 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %89, i32 1
  %104 = load i8, i8* %103, align 8, !tbaa !141
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %av_picture_copy.exit, label %106

106:                                              ; preds = %102
  %107 = zext i8 %104 to i64
  br label %134

108:                                              ; preds = %99
  %109 = load i8*, i8** %13, align 8, !tbaa !6
  %110 = load i32, i32* %85, align 4, !tbaa !29
  %111 = load i8*, i8** %86, align 8, !tbaa !6
  %112 = load i32, i32* %87, align 8, !tbaa !29
  tail call fastcc void @av_image_copy_plane(i8* %109, i32 %110, i8* %111, i32 %112, i32 %82, i32 %84) #20
  %113 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 0, i64 1
  %114 = load i8*, i8** %113, align 8, !tbaa !6
  %115 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %6, i64 0, i32 0, i64 1
  %116 = load i8*, i8** %115, align 8, !tbaa !6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %116, i64 1024, i1 false) #10
  br label %av_picture_copy.exit

117:                                              ; preds = %134
  %118 = icmp sgt i32 %143, 0
  br i1 %118, label %119, label %av_picture_copy.exit

119:                                              ; preds = %117
  %120 = sub nsw i32 0, %84
  %121 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %89, i32 3
  %122 = zext i32 %143 to i64
  %123 = bitcast [4 x i32]* %3 to i8*
  %124 = bitcast [4 x i32]* %4 to i8*
  %125 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 0
  %126 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %127 = icmp slt i32 %82, 0
  %128 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %89, i32 2
  %129 = add nsw i32 %82, -1
  %130 = and i8 %95, 8
  %131 = icmp eq i8 %130, 0
  %132 = and i8 %95, 4
  %133 = icmp eq i8 %132, 0
  br label %145

134:                                              ; preds = %134, %106
  %135 = phi i64 [ 0, %106 ], [ %144, %134 ]
  %136 = phi i32 [ 0, %106 ], [ %143, %134 ]
  %137 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %89, i32 5, i64 %135, i32 0
  %138 = load i16, i16* %137, align 2
  %139 = and i16 %138, 3
  %140 = add nuw nsw i16 %139, 1
  %141 = zext i16 %140 to i32
  %142 = icmp ugt i32 %136, %141
  %143 = select i1 %142, i32 %136, i32 %141
  %144 = add nuw nsw i64 %135, 1
  %exitcond.i.i = icmp eq i64 %144, %107
  br i1 %exitcond.i.i, label %117, label %134

145:                                              ; preds = %182, %119
  %146 = phi i64 [ 0, %119 ], [ %192, %182 ]
  %147 = trunc i64 %146 to i32
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %123) #10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %124) #10
  br i1 %131, label %148, label %av_image_get_linesize.exit.thread.i.i

148:                                              ; preds = %145
  call fastcc void @av_image_fill_max_pixsteps(i32* nonnull %125, i32* nonnull %126, %struct.AVPixFmtDescriptor* nonnull %90) #20
  %sext.i.i = shl i64 %146, 32
  %149 = ashr exact i64 %sext.i.i, 32
  %150 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %149
  %151 = load i32, i32* %150, align 4, !tbaa !29
  br i1 %127, label %av_image_get_linesize.exit.thread.i.i, label %152

152:                                              ; preds = %148
  %153 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %149
  %154 = load i32, i32* %153, align 4, !tbaa !29
  %155 = add i32 %154, -1
  %156 = icmp ult i32 %155, 2
  br i1 %156, label %157, label %160

157:                                              ; preds = %152
  %158 = load i8, i8* %128, align 1, !tbaa !124
  %159 = zext i8 %158 to i32
  br label %160

160:                                              ; preds = %157, %152
  %161 = phi i32 [ %159, %157 ], [ 0, %152 ]
  %162 = shl i32 1, %161
  %163 = add i32 %129, %162
  %164 = ashr i32 %163, %161
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %av_image_get_linesize.exit.i.i, label %166

166:                                              ; preds = %160
  %167 = sdiv i32 2147483647, %164
  %168 = icmp slt i32 %167, %151
  br i1 %168, label %av_image_get_linesize.exit.thread.i.i, label %av_image_get_linesize.exit.i.i

av_image_get_linesize.exit.thread.i.i:            ; preds = %166, %148, %145
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %124) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %123) #10
  br label %.loopexit.i.i

av_image_get_linesize.exit.i.i:                   ; preds = %166, %160
  %169 = mul nsw i32 %164, %151
  %170 = add nsw i32 %169, 7
  %171 = ashr i32 %170, 3
  %172 = select i1 %133, i32 %169, i32 %171
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %124) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %123) #10
  %173 = icmp slt i32 %172, 0
  br i1 %173, label %.loopexit.i.i, label %174

174:                                              ; preds = %av_image_get_linesize.exit.i.i
  %175 = add i32 %147, -1
  %176 = icmp ult i32 %175, 2
  br i1 %176, label %177, label %182

177:                                              ; preds = %174
  %178 = load i8, i8* %121, align 2, !tbaa !125
  %179 = zext i8 %178 to i32
  %180 = ashr i32 %120, %179
  %181 = sub nsw i32 0, %180
  br label %182

.loopexit.i.i:                                    ; preds = %av_image_get_linesize.exit.i.i, %av_image_get_linesize.exit.thread.i.i
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5.1845, i64 0, i64 0)) #20
  br label %av_picture_copy.exit

182:                                              ; preds = %177, %174
  %183 = phi i32 [ %181, %177 ], [ %84, %174 ]
  %184 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %77, i64 0, i32 0, i64 %146
  %185 = load i8*, i8** %184, align 8, !tbaa !6
  %186 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %77, i64 0, i32 1, i64 %146
  %187 = load i32, i32* %186, align 4, !tbaa !29
  %188 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %78, i64 0, i32 0, i64 %146
  %189 = load i8*, i8** %188, align 8, !tbaa !6
  %190 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %78, i64 0, i32 1, i64 %146
  %191 = load i32, i32* %190, align 4, !tbaa !29
  call fastcc void @av_image_copy_plane(i8* %185, i32 %187, i8* %189, i32 %191, i32 %172, i32 %183) #20
  %192 = add nuw nsw i64 %146, 1
  %193 = icmp eq i64 %192, %122
  br i1 %193, label %av_picture_copy.exit, label %145

av_picture_copy.exit:                             ; preds = %182, %76, %93, %102, %108, %117, %.loopexit.i.i
  %194 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 113
  %195 = load void (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*, %struct.AVFrame*)** %194, align 8, !tbaa !136
  call void %195(%struct.AVCodecContext* nonnull %0, %struct.AVFrame* nonnull %6) #20
  br label %196

196:                                              ; preds = %av_picture_copy.exit, %70, %66, %59
  %197 = phi i32 [ %65, %59 ], [ 0, %av_picture_copy.exit ], [ 0, %66 ], [ %74, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %7) #10
  ret i32 %197
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @avcodec_default_execute(%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)* nocapture, i8*, i32*, i32, i32) #3 {
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %.loopexit

8:                                                ; preds = %6
  %9 = icmp eq i32* %3, null
  %10 = sext i32 %5 to i64
  %11 = zext i32 %4 to i64
  br label %12

12:                                               ; preds = %19, %8
  %13 = phi i64 [ 0, %8 ], [ %20, %19 ]
  %14 = mul nsw i64 %13, %10
  %15 = getelementptr inbounds i8, i8* %2, i64 %14
  %16 = tail call i32 %1(%struct.AVCodecContext* %0, i8* %15) #20
  br i1 %9, label %19, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds i32, i32* %3, i64 %13
  store i32 %16, i32* %18, align 4, !tbaa !29
  br label %19

19:                                               ; preds = %17, %12
  %20 = add nuw nsw i64 %13, 1
  %21 = icmp eq i64 %20, %11
  br i1 %21, label %.loopexit, label %12

.loopexit:                                        ; preds = %19, %6
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @avcodec_default_execute2(%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)* nocapture, i8*, i32*, i32) #3 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %.loopexit

7:                                                ; preds = %5
  %8 = icmp eq i32* %3, null
  %9 = zext i32 %4 to i64
  br label %10

10:                                               ; preds = %16, %7
  %11 = phi i64 [ 0, %7 ], [ %17, %16 ]
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 %1(%struct.AVCodecContext* %0, i8* %2, i32 %12, i32 0) #20
  br i1 %8, label %16, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds i32, i32* %3, i64 %11
  store i32 %13, i32* %15, align 4, !tbaa !29
  br label %16

16:                                               ; preds = %14, %10
  %17 = add nuw nsw i64 %11, 1
  %18 = icmp eq i64 %17, %9
  br i1 %18, label %.loopexit, label %10

.loopexit:                                        ; preds = %16, %5
  ret i32 0
}

; Function Attrs:  norecurse nounwind optsize uwtable
define internal fastcc void @ff_init_buffer_info(%struct.AVCodecContext* nocapture readonly, %struct.AVFrame* nocapture) unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 192
  %4 = load %struct.AVPacket*, %struct.AVPacket** %3, align 8, !tbaa !64
  %5 = icmp eq %struct.AVPacket* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !16
  %9 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 11
  %10 = load i64, i64* %9, align 8, !tbaa !20
  %11 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 8
  %12 = load i32, i32* %11, align 4, !tbaa !142
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 3
  %15 = load i32, i32* %14, align 8, !tbaa !25
  br label %16

16:                                               ; preds = %6, %2
  %17 = phi i64 [ %8, %6 ], [ -9223372036854775808, %2 ]
  %18 = phi i64 [ %10, %6 ], [ -1, %2 ]
  %19 = phi i64 [ %13, %6 ], [ 0, %2 ]
  %20 = phi i32 [ %15, %6 ], [ -1, %2 ]
  %21 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 12
  store i64 %17, i64* %21, align 8
  %22 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 43
  store i64 %18, i64* %22, align 8
  %23 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 44
  store i64 %19, i64* %23, align 8
  %24 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 48
  store i32 %20, i32* %24, align 8
  %25 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 165
  %26 = load i64, i64* %25, align 8, !tbaa !143
  %27 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 35
  store i64 %26, i64* %27, align 8, !tbaa !144
  %28 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 3
  %29 = load %struct.AVCodec*, %struct.AVCodec** %28, align 8, !tbaa !30
  %30 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %29, i64 0, i32 2
  %31 = load i32, i32* %30, align 8, !tbaa !34
  switch i32 %31, label %61 [
    i32 0, label %32
    i32 1, label %47
  ]

32:                                               ; preds = %16
  %33 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 23
  %34 = load i32, i32* %33, align 4, !tbaa !61
  %35 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 3
  store i32 %34, i32* %35, align 8, !tbaa !68
  %36 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 24
  %37 = load i32, i32* %36, align 8, !tbaa !63
  %38 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 4
  store i32 %37, i32* %38, align 4, !tbaa !69
  %39 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 28
  %40 = load i32, i32* %39, align 8, !tbaa !70
  %41 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 6
  store i32 %40, i32* %41, align 4, !tbaa !47
  %42 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 10
  %43 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 51
  %44 = bitcast %struct.AVRational* %43 to i64*
  %45 = bitcast %struct.AVRational* %42 to i64*
  %46 = load i64, i64* %44, align 8
  store i64 %46, i64* %45, align 8
  br label %61

47:                                               ; preds = %16
  %48 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 100
  %49 = load i32, i32* %48, align 8, !tbaa !60
  %50 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 40
  store i32 %49, i32* %50, align 4, !tbaa !145
  %51 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 102
  %52 = load i32, i32* %51, align 8, !tbaa !130
  %53 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 6
  store i32 %52, i32* %53, align 4, !tbaa !47
  %54 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 108
  %55 = load i64, i64* %54, align 8, !tbaa !59
  %56 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 41
  store i64 %55, i64* %56, align 8, !tbaa !146
  %57 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 101
  %58 = load i32, i32* %57, align 4, !tbaa !58
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %1, i64 0, i32 47
  store i64 %59, i64* %60, align 8, !tbaa !147
  br label %61

61:                                               ; preds = %47, %32, %16
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @av_image_copy_plane(i8*, i32, i8* readonly, i32, i32, i32) unnamed_addr #3 {
  %7 = icmp ne i8* %0, null
  %8 = icmp ne i8* %2, null
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %.loopexit

10:                                               ; preds = %6
  %11 = icmp slt i32 %3, 0
  %12 = sub nsw i32 0, %3
  %13 = select i1 %11, i32 %12, i32 %3
  %14 = icmp slt i32 %13, %4
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.1839, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2.1840, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.1841, i64 0, i64 0), i32 248) #20
  tail call fastcc void @abort() #21
  unreachable

16:                                               ; preds = %10
  %17 = icmp slt i32 %1, 0
  %18 = sub nsw i32 0, %1
  %19 = select i1 %17, i32 %18, i32 %1
  %20 = icmp slt i32 %19, %4
  br i1 %20, label %27, label %21

21:                                               ; preds = %16
  %22 = icmp sgt i32 %5, 0
  br i1 %22, label %23, label %.loopexit

23:                                               ; preds = %21
  %24 = sext i32 %4 to i64
  %25 = sext i32 %1 to i64
  %26 = sext i32 %3 to i64
  br label %28

27:                                               ; preds = %16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.1839, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4.1842, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.1841, i64 0, i64 0), i32 249) #20
  tail call fastcc void @abort() #21
  unreachable

28:                                               ; preds = %28, %23
  %29 = phi i32 [ %5, %23 ], [ %34, %28 ]
  %30 = phi i8* [ %0, %23 ], [ %32, %28 ]
  %31 = phi i8* [ %2, %23 ], [ %33, %28 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %24, i1 false)
  %32 = getelementptr inbounds i8, i8* %30, i64 %25
  %33 = getelementptr inbounds i8, i8* %31, i64 %26
  %34 = add nsw i32 %29, -1
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %28, label %.loopexit

.loopexit:                                        ; preds = %28, %21, %6
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @av_image_fill_max_pixsteps(i32* nocapture, i32*, %struct.AVPixFmtDescriptor* nocapture readonly) unnamed_addr #3 {
  %4 = bitcast i32* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 16, i1 false)
  %5 = icmp ne i32* %1, null
  br i1 %5, label %6, label %.preheader.preheader

6:                                                ; preds = %3
  %7 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %7, i8 0, i64 16, i1 false)
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %6, %3
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %27
  %8 = phi i64 [ %28, %27 ], [ 0, %.preheader.preheader ]
  %9 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 %8, i32 0
  %10 = load i16, i16* %9, align 2
  %11 = lshr i16 %10, 2
  %12 = and i16 %11, 7
  %13 = add nuw nsw i16 %12, 1
  %14 = zext i16 %13 to i32
  %15 = and i16 %10, 3
  %16 = zext i16 %15 to i64
  %17 = getelementptr inbounds i32, i32* %0, i64 %16
  %18 = load i32, i32* %17, align 4, !tbaa !29
  %19 = icmp slt i32 %18, %14
  br i1 %19, label %20, label %27

20:                                               ; preds = %.preheader
  store i32 %14, i32* %17, align 4, !tbaa !29
  br i1 %5, label %21, label %27

21:                                               ; preds = %20
  %22 = load i16, i16* %9, align 2
  %23 = and i16 %22, 3
  %24 = zext i16 %23 to i64
  %25 = getelementptr inbounds i32, i32* %1, i64 %24
  %26 = trunc i64 %8 to i32
  store i32 %26, i32* %25, align 4, !tbaa !29
  br label %27

27:                                               ; preds = %21, %20, %.preheader
  %28 = add nuw nsw i64 %8, 1
  %29 = icmp eq i64 %28, 4
  br i1 %29, label %30, label %.preheader

30:                                               ; preds = %27
  ret void
}

; Function Attrs:  norecurse nounwind optsize uwtable writeonly
define internal fastcc i32 @av_samples_get_buffer_size(i32*, i32, i32, i32) unnamed_addr #15 {
  %5 = icmp ugt i32 %3, 9
  br i1 %5, label %37, label %6

6:                                                ; preds = %4
  %7 = sext i32 %3 to i64
  %8 = getelementptr inbounds [10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %7, i32 1
  %9 = load i32, i32* %8, align 4, !tbaa !148
  %10 = ashr i32 %9, 3
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %2, 1
  %13 = or i1 %12, %11
  %14 = icmp slt i32 %1, 1
  %15 = or i1 %14, %13
  br i1 %15, label %37, label %16

16:                                               ; preds = %6
  %17 = add nuw nsw i32 %2, 31
  %18 = and i32 %17, -32
  %19 = sext i32 %1 to i64
  %20 = sext i32 %18 to i64
  %21 = mul nsw i64 %20, %19
  %22 = sub nuw nsw i32 2147483647, %1
  %23 = sdiv i32 %22, %10
  %24 = sext i32 %23 to i64
  %25 = icmp sgt i64 %21, %24
  br i1 %25, label %37, label %26

26:                                               ; preds = %16
  %27 = add nsw i64 %7, -5
  %28 = icmp ult i64 %27, 5
  %29 = select i1 %28, i32 1, i32 %1
  %30 = mul i32 %29, %18
  %31 = mul i32 %30, %10
  %32 = icmp eq i32* %0, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %26
  store i32 %31, i32* %0, align 4, !tbaa !29
  br label %34

34:                                               ; preds = %33, %26
  %35 = select i1 %28, i32 %1, i32 1
  %36 = mul nsw i32 %31, %35
  br label %37

37:                                               ; preds = %34, %16, %6, %4
  %38 = phi i32 [ %36, %34 ], [ -22, %6 ], [ -22, %16 ], [ -22, %4 ]
  ret i32 %38
}

; Function Attrs: norecurse nounwind optsize readonly uwtable
define internal i8* @context_to_name(i8* readonly) #9 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to %struct.AVCodec.125**
  %6 = load %struct.AVCodec.125*, %struct.AVCodec.125** %5, align 8, !tbaa !30
  %7 = icmp eq %struct.AVCodec.125* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.AVCodec.125, %struct.AVCodec.125* %6, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8, !tbaa !149
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %8, %3, %1
  br label %13

13:                                               ; preds = %12, %8
  %14 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.788, i64 0, i64 0), %12 ], [ %10, %8 ]
  ret i8* %14
}

; Function Attrs: norecurse nounwind optsize readonly uwtable
define internal i8* @codec_child_next(i8* nocapture readonly, i8* readnone) #9 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %18

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = bitcast i8* %5 to %struct.AVCodec.125**
  %7 = load %struct.AVCodec.125*, %struct.AVCodec.125** %6, align 8, !tbaa !30
  %8 = icmp eq %struct.AVCodec.125* %7, null
  br i1 %8, label %18, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.AVCodec.125, %struct.AVCodec.125* %7, i64 0, i32 11
  %11 = load %struct.AVClass.90*, %struct.AVClass.90** %10, align 8, !tbaa !150
  %12 = icmp eq %struct.AVClass.90* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %0, i64 72
  %15 = bitcast i8* %14 to i8**
  %16 = load i8*, i8** %15, align 8, !tbaa !151
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %13, %9, %4, %2
  br label %19

19:                                               ; preds = %18, %13
  %20 = phi i8* [ null, %18 ], [ %16, %13 ]
  ret i8* %20
}

; Function Attrs: norecurse nounwind optsize readnone uwtable
define internal noalias %struct.AVClass.90* @codec_child_class_next(%struct.AVClass.90* nocapture readnone) #16 {
  ret %struct.AVClass.90* null
}

; Function Attrs: norecurse nounwind optsize readonly uwtable
define internal i32 @get_category(i8* nocapture readonly) #9 {
  %2 = getelementptr inbounds i8, i8* %0, i64 16
  %3 = bitcast i8* %2 to %struct.AVCodec.125**
  %4 = load %struct.AVCodec.125*, %struct.AVCodec.125** %3, align 8, !tbaa !30
  %5 = icmp eq %struct.AVCodec.125* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.AVCodec.125, %struct.AVCodec.125* %4, i64 0, i32 22
  %8 = load i32 (%struct.AVCodecContext.131*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.131*, i8*, i32*, %struct.AVPacket*)** %7, align 8, !tbaa !65
  %9 = icmp eq i32 (%struct.AVCodecContext.131*, i8*, i32*, %struct.AVPacket*)* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %6, %1
  br label %11

11:                                               ; preds = %10, %6
  %12 = phi i32 [ 5, %10 ], [ 6, %6 ]
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gif_decode_init(%struct.AVCodecContext.102*) #3 {
  %2 = alloca i8*, align 8
  %3 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 9
  %4 = bitcast i8** %3 to %struct.GifState**
  %5 = load %struct.GifState*, %struct.GifState** %4, align 8, !tbaa !151
  %6 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 25
  store %struct.AVCodecContext.102* %0, %struct.AVCodecContext.102** %6, align 8, !tbaa !152
  %7 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 28
  store i32 30, i32* %7, align 8, !tbaa !70
  %8 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1
  %9 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 0, i64 1
  %10 = bitcast i8** %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 512, i1 false) #10
  %11 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 42
  store i64 -9223372036854775808, i64* %11, align 8, !tbaa !38
  %12 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 12
  store i64 -9223372036854775808, i64* %12, align 8, !tbaa !40
  %13 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 13
  store i64 -9223372036854775808, i64* %13, align 8, !tbaa !41
  %14 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 11
  store i64 -9223372036854775808, i64* %14, align 8, !tbaa !42
  %15 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 44
  store i64 0, i64* %15, align 8, !tbaa !43
  %16 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 43
  store i64 -1, i64* %16, align 8, !tbaa !44
  %17 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 48
  store i32 -1, i32* %17, align 8, !tbaa !45
  %18 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 7
  store i32 1, i32* %18, align 8, !tbaa !46
  %19 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 10, i32 0
  store i32 0, i32* %19, align 8
  %20 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 10, i32 1
  store i32 1, i32* %20, align 4
  %21 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 6
  store i32 -1, i32* %21, align 4, !tbaa !47
  %22 = getelementptr inbounds %struct.AVFrame.96, %struct.AVFrame.96* %8, i64 0, i32 0, i64 0
  %23 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 1, i32 2
  store i8** %22, i8*** %23, align 8, !tbaa !48
  %24 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 175
  store %struct.AVFrame.96* %8, %struct.AVFrame.96** %24, align 8, !tbaa !155
  store i8* null, i8** %22, align 8, !tbaa !6
  %25 = getelementptr inbounds %struct.GifState, %struct.GifState* %5, i64 0, i32 22
  %26 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #10
  store i8* null, i8** %2, align 8, !tbaa !6
  call fastcc void @posix_memalign(i8** nonnull %2, i64 16472) #20
  %27 = load i8*, i8** %2, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #10
  %28 = icmp eq i8* %27, null
  br i1 %28, label %ff_lzw_decode_open.exit, label %29

29:                                               ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %27, i8 0, i64 16472, i1 false) #10
  br label %ff_lzw_decode_open.exit

ff_lzw_decode_open.exit:                          ; preds = %1, %29
  store i8* %27, i8** %25, align 8, !tbaa !6
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gif_decode_frame(%struct.AVCodecContext.102*, i8* nocapture, i32* nocapture, %struct.AVPacket* nocapture readonly) #3 {
  %5 = alloca [6 x i8], align 1
  %6 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 9
  %7 = bitcast i8** %6 to %struct.GifState**
  %8 = load %struct.GifState*, %struct.GifState** %7, align 8, !tbaa !151
  %9 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21
  %10 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8, !tbaa !24
  %12 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %13 = load i32, i32* %12, align 8, !tbaa !25
  %14 = getelementptr inbounds %struct.lc_numeric_T, %struct.lc_numeric_T* %9, i64 0, i32 0
  store i8* %11, i8** %14, align 8, !tbaa !156
  %15 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21, i32 2
  store i8* %11, i8** %15, align 8, !tbaa !157
  %16 = sext i32 %13 to i64
  %17 = getelementptr inbounds i8, i8* %11, i64 %16
  %18 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21, i32 1
  store i8* %17, i8** %18, align 8, !tbaa !158
  %19 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 0
  %20 = load i64, i64* %19, align 8, !tbaa !16
  %21 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1
  %22 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 11
  store i64 %20, i64* %22, align 8, !tbaa !159
  %23 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 12
  store i64 %20, i64* %23, align 8, !tbaa !160
  %24 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %25 = load i64, i64* %24, align 8, !tbaa !19
  %26 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 13
  store i64 %25, i64* %26, align 8, !tbaa !161
  %27 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 8
  %28 = load i32, i32* %27, align 4, !tbaa !142
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 44
  store i64 %29, i64* %30, align 8, !tbaa !162
  %31 = icmp sgt i32 %13, 5
  br i1 %31, label %.preheader.i.i, label %bcmp.exit17

.preheader.i.i:                                   ; preds = %4, %39
  %32 = phi i64 [ %35, %39 ], [ 6, %4 ]
  %33 = phi i8* [ %41, %39 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @gif87a_sig, i64 0, i64 0), %4 ]
  %34 = phi i8* [ %40, %39 ], [ %11, %4 ]
  %35 = add nsw i64 %32, -1
  %36 = load i8, i8* %34, align 1, !tbaa !57
  %37 = load i8, i8* %33, align 1, !tbaa !57
  %38 = icmp eq i8 %36, %37
  br i1 %38, label %39, label %.preheader.i.i16

39:                                               ; preds = %.preheader.i.i
  %40 = getelementptr inbounds i8, i8* %34, i64 1
  %41 = getelementptr inbounds i8, i8* %33, i64 1
  %42 = icmp eq i64 %35, 0
  br i1 %42, label %bcmp.exit.thread, label %.preheader.i.i

.preheader.i.i16:                                 ; preds = %.preheader.i.i, %50
  %43 = phi i64 [ %46, %50 ], [ 6, %.preheader.i.i ]
  %44 = phi i8* [ %52, %50 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @gif89a_sig, i64 0, i64 0), %.preheader.i.i ]
  %45 = phi i8* [ %51, %50 ], [ %11, %.preheader.i.i ]
  %46 = add nsw i64 %43, -1
  %47 = load i8, i8* %45, align 1, !tbaa !57
  %48 = load i8, i8* %44, align 1, !tbaa !57
  %49 = icmp eq i8 %47, %48
  br i1 %49, label %50, label %bcmp.exit17

50:                                               ; preds = %.preheader.i.i16
  %51 = getelementptr inbounds i8, i8* %45, i64 1
  %52 = getelementptr inbounds i8, i8* %44, i64 1
  %53 = icmp eq i64 %46, 0
  br i1 %53, label %bcmp.exit.thread, label %.preheader.i.i16

bcmp.exit.thread:                                 ; preds = %39, %50
  %.sink = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 26
  store i32 1, i32* %.sink, align 8, !tbaa !163
  %54 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 27
  store i32 0, i32* %54, align 4, !tbaa !164
  %55 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %55) #10
  %56 = bitcast i8** %18 to i64*
  %57 = icmp ult i32 %13, 13
  br i1 %57, label %bcmp.exit21, label %58

58:                                               ; preds = %bcmp.exit.thread
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %55, i8* align 1 %11, i64 6, i1 false) #10
  %59 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %59, i8** %14, align 8, !tbaa !156
  br label %.preheader.i.i18

.preheader.i.i18:                                 ; preds = %67, %58
  %60 = phi i64 [ %63, %67 ], [ 6, %58 ]
  %61 = phi i8* [ %69, %67 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @gif87a_sig, i64 0, i64 0), %58 ]
  %62 = phi i8* [ %68, %67 ], [ %55, %58 ]
  %63 = add nsw i64 %60, -1
  %64 = load i8, i8* %62, align 1, !tbaa !57
  %65 = load i8, i8* %61, align 1, !tbaa !57
  %66 = icmp eq i8 %64, %65
  br i1 %66, label %67, label %.preheader.i.i20

67:                                               ; preds = %.preheader.i.i18
  %68 = getelementptr inbounds i8, i8* %62, i64 1
  %69 = getelementptr inbounds i8, i8* %61, i64 1
  %70 = icmp eq i64 %63, 0
  br i1 %70, label %bcmp.exit19.thread, label %.preheader.i.i18

.preheader.i.i20:                                 ; preds = %.preheader.i.i18, %78
  %71 = phi i64 [ %74, %78 ], [ 6, %.preheader.i.i18 ]
  %72 = phi i8* [ %80, %78 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @gif89a_sig, i64 0, i64 0), %.preheader.i.i18 ]
  %73 = phi i8* [ %79, %78 ], [ %55, %.preheader.i.i18 ]
  %74 = add nsw i64 %71, -1
  %75 = load i8, i8* %73, align 1, !tbaa !57
  %76 = load i8, i8* %72, align 1, !tbaa !57
  %77 = icmp eq i8 %75, %76
  br i1 %77, label %78, label %bcmp.exit21

78:                                               ; preds = %.preheader.i.i20
  %79 = getelementptr inbounds i8, i8* %73, i64 1
  %80 = getelementptr inbounds i8, i8* %72, i64 1
  %81 = icmp eq i64 %74, 0
  br i1 %81, label %bcmp.exit19.thread, label %.preheader.i.i20

bcmp.exit19.thread:                               ; preds = %67, %78
  %82 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 8
  store i32 -1, i32* %82, align 8, !tbaa !165
  %83 = getelementptr inbounds i8, i8* %11, i64 8
  store i8* %83, i8** %14, align 8, !tbaa !6
  %84 = bitcast i8* %59 to i16*
  %85 = load i16, i16* %84, align 1, !tbaa !57
  %86 = zext i16 %85 to i32
  %87 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 2
  store i32 %86, i32* %87, align 8, !tbaa !166
  %88 = getelementptr inbounds i8, i8* %11, i64 10
  store i8* %88, i8** %14, align 8, !tbaa !6
  %89 = bitcast i8* %83 to i16*
  %90 = load i16, i16* %89, align 1, !tbaa !57
  %91 = zext i16 %90 to i32
  %92 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 3
  store i32 %91, i32* %92, align 4, !tbaa !167
  %93 = or i16 %90, %85
  %94 = icmp slt i16 %93, 0
  br i1 %94, label %95, label %99

95:                                               ; preds = %bcmp.exit19.thread
  %96 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 25
  %97 = bitcast %struct.AVCodecContext.102** %96 to i8**
  %98 = load i8*, i8** %97, align 8, !tbaa !152
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %98, i32 16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.378, i64 0, i64 0)) #20
  br label %bcmp.exit21

99:                                               ; preds = %bcmp.exit19.thread
  %100 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 10
  %101 = bitcast i8** %100 to i8*
  %102 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 11
  %103 = zext i16 %85 to i64
  tail call fastcc void @av_fast_malloc(i8* nonnull %101, i32* nonnull %102, i64 %103) #20
  %104 = load i8*, i8** %100, align 8, !tbaa !168
  %105 = icmp eq i8* %104, null
  br i1 %105, label %bcmp.exit21, label %106

106:                                              ; preds = %99
  %107 = load i8*, i8** %14, align 8, !tbaa !6
  %108 = getelementptr inbounds i8, i8* %107, i64 1
  store i8* %108, i8** %14, align 8, !tbaa !6
  %109 = load i8, i8* %107, align 1, !tbaa !57
  %110 = zext i8 %109 to i32
  %111 = lshr i32 %110, 4
  %112 = and i32 %111, 7
  %113 = add nuw nsw i32 %112, 1
  %114 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 9
  store i32 %113, i32* %114, align 4, !tbaa !169
  %115 = and i32 %110, 128
  %116 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 4
  store i32 %115, i32* %116, align 8, !tbaa !170
  %117 = and i32 %110, 7
  %118 = add nuw nsw i32 %117, 1
  %119 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 5
  store i32 %118, i32* %119, align 4, !tbaa !171
  %120 = getelementptr inbounds i8, i8* %107, i64 2
  store i8* %120, i8** %14, align 8, !tbaa !6
  %121 = load i8, i8* %108, align 1, !tbaa !57
  %122 = zext i8 %121 to i32
  %123 = getelementptr inbounds i8, i8* %107, i64 3
  store i8* %123, i8** %14, align 8, !tbaa !6
  %124 = load i8, i8* %120, align 1, !tbaa !57
  %125 = icmp eq i8 %124, 0
  %126 = ptrtoint i8* %123 to i64
  br i1 %125, label %134, label %127

127:                                              ; preds = %106
  %128 = zext i8 %124 to i32
  %129 = add nuw nsw i32 %128, 15
  %130 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 25
  %131 = load %struct.AVCodecContext.102*, %struct.AVCodecContext.102** %130, align 8, !tbaa !152
  %132 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %131, i64 0, i32 51, i32 0
  store i32 %129, i32* %132, align 8, !tbaa !172
  %133 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %131, i64 0, i32 51, i32 1
  store i32 64, i32* %133, align 4, !tbaa !173
  br label %134

134:                                              ; preds = %127, %106
  %135 = icmp eq i32 %115, 0
  %136 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 7
  br i1 %135, label %174, label %137

137:                                              ; preds = %134
  store i32 %122, i32* %136, align 4, !tbaa !174
  %138 = load i64, i64* %56, align 8, !tbaa !158
  %139 = sub i64 %138, %126
  %140 = trunc i64 %139 to i32
  %141 = shl i32 6, %117
  %142 = icmp ugt i32 %141, %140
  br i1 %142, label %bcmp.exit21, label %143

143:                                              ; preds = %137
  %144 = shl i32 2, %117
  %145 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 23, i64 0
  %146 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21, i32 0
  br label %147

147:                                              ; preds = %147, %143
  %148 = phi i8* [ %123, %143 ], [ %151, %147 ]
  %149 = phi i32 [ 0, %143 ], [ %165, %147 ]
  %150 = phi i32* [ %145, %143 ], [ %166, %147 ]
  %151 = getelementptr inbounds i8, i8* %148, i64 3
  store i8* %151, i8** %146, align 8, !tbaa !6
  %152 = load i8, i8* %148, align 1, !tbaa !57
  %153 = zext i8 %152 to i32
  %154 = shl nuw nsw i32 %153, 16
  %155 = getelementptr inbounds i8, i8* %148, i64 1
  %156 = load i8, i8* %155, align 1, !tbaa !57
  %157 = zext i8 %156 to i32
  %158 = shl nuw nsw i32 %157, 8
  %159 = getelementptr inbounds i8, i8* %148, i64 2
  %160 = load i8, i8* %159, align 1, !tbaa !57
  %161 = zext i8 %160 to i32
  %162 = or i32 %154, %158
  %163 = or i32 %162, %161
  %164 = or i32 %163, -16777216
  store i32 %164, i32* %150, align 4, !tbaa !29
  %165 = add nuw nsw i32 %149, 1
  %166 = getelementptr inbounds i32, i32* %150, i64 1
  %167 = icmp eq i32 %165, %144
  br i1 %167, label %168, label %147

168:                                              ; preds = %147
  %169 = load i32, i32* %136, align 4, !tbaa !174
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 23, i64 %170
  %172 = load i32, i32* %171, align 4, !tbaa !29
  %173 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 6
  store i32 %172, i32* %173, align 8, !tbaa !175
  br label %176

174:                                              ; preds = %134
  store i32 -1, i32* %136, align 4, !tbaa !174
  br label %176

bcmp.exit21:                                      ; preds = %.preheader.i.i20, %137, %99, %95, %bcmp.exit.thread
  %175 = phi i32 [ -1094995529, %137 ], [ -12, %99 ], [ -1094995529, %bcmp.exit.thread ], [ -1094995529, %95 ], [ -1094995529, %.preheader.i.i20 ]
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %55) #10
  br label %.loopexit35

176:                                              ; preds = %174, %168
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %55) #10
  %177 = load i32, i32* %87, align 8, !tbaa !166
  %178 = load i32, i32* %92, align 4, !tbaa !167
  %179 = bitcast %struct.AVCodecContext.102* %0 to i8*
  %180 = tail call fastcc i32 @av_image_check_size(i32 %177, i32 %178, i8* %179) #20
  %181 = icmp slt i32 %180, 0
  br i1 %181, label %.loopexit35, label %182

182:                                              ; preds = %176
  %183 = load i32, i32* %87, align 8, !tbaa !166
  %184 = load i32, i32* %92, align 4, !tbaa !167
  %185 = bitcast %struct.AVCodecContext.102* %0 to %struct.AVCodecContext*
  %186 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 25
  store i32 %183, i32* %186, align 4, !tbaa !36
  %187 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 26
  store i32 %184, i32* %187, align 8, !tbaa !37
  %188 = sub nsw i32 0, %183
  %189 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 174
  %190 = load i32, i32* %189, align 4, !tbaa !62
  %191 = ashr i32 %188, %190
  %192 = sub nsw i32 0, %191
  %193 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 23
  store i32 %192, i32* %193, align 4, !tbaa !61
  %194 = sub nsw i32 0, %184
  %195 = ashr i32 %194, %190
  %196 = sub nsw i32 0, %195
  %197 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 24
  store i32 %196, i32* %197, align 8, !tbaa !63
  %198 = getelementptr inbounds %struct.AVFrame.96, %struct.AVFrame.96* %21, i64 0, i32 0, i64 0
  %199 = load i8*, i8** %198, align 8, !tbaa !6
  %200 = icmp eq i8* %199, null
  br i1 %200, label %204, label %201

201:                                              ; preds = %182
  %202 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 113
  %203 = load void (%struct.AVCodecContext.102*, %struct.AVFrame.96*)*, void (%struct.AVCodecContext.102*, %struct.AVFrame.96*)** %202, align 8, !tbaa !136
  tail call void %203(%struct.AVCodecContext.102* nonnull %0, %struct.AVFrame.96* nonnull %21) #20
  br label %204

204:                                              ; preds = %201, %182
  %205 = bitcast %struct.AVFrame.96* %21 to %struct.AVFrame*
  tail call fastcc void @ff_init_buffer_info(%struct.AVCodecContext* %185, %struct.AVFrame* nonnull %205) #20
  %206 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 112
  %207 = bitcast i32 (%struct.AVCodecContext.102*, %struct.AVFrame.96*)** %206 to i32 (%struct.AVCodecContext*, %struct.AVFrame*)**
  %208 = load i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)** %207, align 8, !tbaa !138
  %209 = tail call i32 %208(%struct.AVCodecContext* %185, %struct.AVFrame* nonnull %205) #20
  %210 = icmp slt i32 %209, 0
  br i1 %210, label %211, label %212

211:                                              ; preds = %204
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %179, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4.379, i64 0, i64 0)) #20
  br label %.loopexit35

212:                                              ; preds = %204
  %213 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 8
  store i32 1, i32* %213, align 4, !tbaa !176
  %214 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 7
  store i32 1, i32* %214, align 8, !tbaa !177
  store i32 1, i32* %54, align 4, !tbaa !164
  br label %231

bcmp.exit17:                                      ; preds = %.preheader.i.i16, %4
  %.sink182 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 26
  store i32 0, i32* %.sink182, align 8, !tbaa !163
  %215 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 27
  %216 = load i32, i32* %215, align 4, !tbaa !164
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %220

218:                                              ; preds = %bcmp.exit17
  %219 = bitcast %struct.AVCodecContext.102* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %219, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5.380, i64 0, i64 0)) #20
  br label %.loopexit35

220:                                              ; preds = %bcmp.exit17
  %221 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 114
  %222 = load i32 (%struct.AVCodecContext.102*, %struct.AVFrame.96*)*, i32 (%struct.AVCodecContext.102*, %struct.AVFrame.96*)** %221, align 8, !tbaa !178
  %223 = tail call i32 %222(%struct.AVCodecContext.102* nonnull %0, %struct.AVFrame.96* nonnull %21) #20
  %224 = icmp slt i32 %223, 0
  br i1 %224, label %225, label %227

225:                                              ; preds = %220
  %226 = bitcast %struct.AVCodecContext.102* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %226, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6.381, i64 0, i64 0)) #20
  br label %.loopexit35

227:                                              ; preds = %220
  %228 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 8
  store i32 2, i32* %228, align 4, !tbaa !176
  %229 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 7
  store i32 0, i32* %229, align 8, !tbaa !177
  %230 = bitcast i8** %18 to i64*
  br label %231

231:                                              ; preds = %227, %212
  %232 = phi i32* [ %.sink182, %227 ], [ %.sink, %212 ]
  %233 = phi i64* [ %230, %227 ], [ %56, %212 ]
  %234 = bitcast %struct.lc_numeric_T* %9 to i64*
  store i32 1, i32* %2, align 4, !tbaa !29
  %235 = load i64, i64* %233, align 8, !tbaa !158
  %236 = load i64, i64* %234, align 8, !tbaa !156
  %237 = sub i64 %235, %236
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %.loopexit35, label %240

240:                                              ; preds = %231
  %241 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 8
  %242 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 13
  br label %243

243:                                              ; preds = %.loopexit36, %240
  %244 = phi i64 [ %237, %240 ], [ %927, %.loopexit36 ]
  %245 = phi i64 [ %236, %240 ], [ %926, %.loopexit36 ]
  %246 = icmp slt i64 %244, 1
  %247 = inttoptr i64 %245 to i8*
  br i1 %246, label %.loopexit35, label %248

248:                                              ; preds = %243
  %249 = getelementptr inbounds i8, i8* %247, i64 1
  store i8* %249, i8** %14, align 8, !tbaa !6
  %250 = load i8, i8* %247, align 1, !tbaa !57
  switch i8 %250, label %.loopexit35 [
    i8 44, label %251
    i8 33, label %867
    i8 59, label %924
  ]

251:                                              ; preds = %248
  %252 = inttoptr i64 %245 to i8*
  %253 = ptrtoint i8* %249 to i64
  %254 = sub i64 %235, %253
  %255 = trunc i64 %254 to i32
  %256 = icmp ult i32 %255, 9
  br i1 %256, label %.loopexit35, label %257

257:                                              ; preds = %251
  %258 = getelementptr inbounds i8, i8* %252, i64 3
  store i8* %258, i8** %14, align 8, !tbaa !6
  %259 = bitcast i8* %249 to i16*
  %260 = load i16, i16* %259, align 1, !tbaa !57
  %261 = zext i16 %260 to i32
  %262 = getelementptr inbounds i8, i8* %252, i64 5
  store i8* %262, i8** %14, align 8, !tbaa !6
  %263 = bitcast i8* %258 to i16*
  %264 = load i16, i16* %263, align 1, !tbaa !57
  %265 = zext i16 %264 to i32
  %266 = getelementptr inbounds i8, i8* %252, i64 7
  store i8* %266, i8** %14, align 8, !tbaa !6
  %267 = bitcast i8* %262 to i16*
  %268 = load i16, i16* %267, align 1, !tbaa !57
  %269 = zext i16 %268 to i32
  %270 = getelementptr inbounds i8, i8* %252, i64 9
  store i8* %270, i8** %14, align 8, !tbaa !6
  %271 = bitcast i8* %266 to i16*
  %272 = load i16, i16* %271, align 1, !tbaa !57
  %273 = zext i16 %272 to i32
  %274 = getelementptr inbounds i8, i8* %252, i64 10
  store i8* %274, i8** %14, align 8, !tbaa !6
  %275 = load i8, i8* %270, align 1, !tbaa !57
  %276 = zext i8 %275 to i32
  %277 = and i32 %276, 64
  %278 = icmp slt i8 %275, 0
  br i1 %278, label %279, label %311

279:                                              ; preds = %257
  %280 = ptrtoint i8* %274 to i64
  %281 = and i32 %276, 7
  %282 = shl i32 2, %281
  %283 = sub i64 %235, %280
  %284 = trunc i64 %283 to i32
  %285 = mul nuw nsw i32 %282, 3
  %286 = icmp ugt i32 %285, %284
  br i1 %286, label %.loopexit35, label %287

287:                                              ; preds = %279
  %288 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 24, i64 0
  %289 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21, i32 0
  br label %290

290:                                              ; preds = %290, %287
  %291 = phi i8* [ %274, %287 ], [ %294, %290 ]
  %292 = phi i32 [ 0, %287 ], [ %308, %290 ]
  %293 = phi i32* [ %288, %287 ], [ %309, %290 ]
  %294 = getelementptr inbounds i8, i8* %291, i64 3
  store i8* %294, i8** %289, align 8, !tbaa !6
  %295 = load i8, i8* %291, align 1, !tbaa !57
  %296 = zext i8 %295 to i32
  %297 = shl nuw nsw i32 %296, 16
  %298 = getelementptr inbounds i8, i8* %291, i64 1
  %299 = load i8, i8* %298, align 1, !tbaa !57
  %300 = zext i8 %299 to i32
  %301 = shl nuw nsw i32 %300, 8
  %302 = getelementptr inbounds i8, i8* %291, i64 2
  %303 = load i8, i8* %302, align 1, !tbaa !57
  %304 = zext i8 %303 to i32
  %305 = or i32 %297, %301
  %306 = or i32 %305, %304
  %307 = or i32 %306, -16777216
  store i32 %307, i32* %293, align 4, !tbaa !29
  %308 = add nuw nsw i32 %292, 1
  %309 = getelementptr inbounds i32, i32* %293, i64 1
  %310 = icmp eq i32 %308, %282
  br i1 %310, label %.loopexit33, label %290

311:                                              ; preds = %257
  %312 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 4
  %313 = load i32, i32* %312, align 8, !tbaa !170
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %319

315:                                              ; preds = %311
  %316 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 25
  %317 = bitcast %struct.AVCodecContext.102** %316 to i8**
  %318 = load i8*, i8** %317, align 8, !tbaa !152
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %318, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8.382, i64 0, i64 0)) #20
  br label %.loopexit35

319:                                              ; preds = %311
  %320 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 23, i64 0
  br label %.loopexit33

.loopexit33:                                      ; preds = %290, %319
  %321 = phi i32* [ %320, %319 ], [ %288, %290 ]
  %322 = load i32, i32* %232, align 8, !tbaa !163
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %.loopexit30, label %324

324:                                              ; preds = %.loopexit33
  %325 = load i32, i32* %241, align 8, !tbaa !165
  %326 = icmp eq i32 %325, -1
  br i1 %326, label %327, label %349

327:                                              ; preds = %324
  %328 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 4
  %329 = load i32, i32* %328, align 8, !tbaa !170
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %349, label %331

331:                                              ; preds = %327
  %332 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 6
  %333 = load i32, i32* %332, align 8, !tbaa !175
  %334 = bitcast %struct.AVFrame.96* %21 to i32**
  %335 = load i32*, i32** %334, align 8, !tbaa !6
  %336 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %337 = load i32, i32* %336, align 8, !tbaa !29
  %338 = sext i32 %337 to i64
  %339 = lshr i64 %338, 2
  %340 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 4
  %341 = load i32, i32* %340, align 4, !tbaa !69
  %342 = sext i32 %341 to i64
  %343 = mul i64 %339, %342
  %344 = getelementptr inbounds i32, i32* %335, i64 %343
  %345 = icmp sgt i64 %343, 0
  br i1 %345, label %.preheader31, label %.loopexit30

.preheader31:                                     ; preds = %331, %.preheader31
  %346 = phi i32* [ %347, %.preheader31 ], [ %335, %331 ]
  store i32 %333, i32* %346, align 4, !tbaa !29
  %347 = getelementptr inbounds i32, i32* %346, i64 1
  %348 = icmp ult i32* %347, %344
  br i1 %348, label %.preheader31, label %.loopexit30

349:                                              ; preds = %327, %324
  %350 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 28
  %351 = load i32, i32* %350, align 8, !tbaa !179
  %352 = bitcast %struct.AVFrame.96* %21 to i32**
  %353 = load i32*, i32** %352, align 8, !tbaa !6
  %354 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %355 = load i32, i32* %354, align 8, !tbaa !29
  %356 = sext i32 %355 to i64
  %357 = lshr i64 %356, 2
  %358 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 4
  %359 = load i32, i32* %358, align 4, !tbaa !69
  %360 = sext i32 %359 to i64
  %361 = mul i64 %357, %360
  %362 = getelementptr inbounds i32, i32* %353, i64 %361
  %363 = icmp sgt i64 %361, 0
  br i1 %363, label %.preheader29, label %.loopexit30

.preheader29:                                     ; preds = %349, %.preheader29
  %364 = phi i32* [ %365, %.preheader29 ], [ %353, %349 ]
  store i32 %351, i32* %364, align 4, !tbaa !29
  %365 = getelementptr inbounds i32, i32* %364, i64 1
  %366 = icmp ult i32* %365, %362
  br i1 %366, label %.preheader29, label %.loopexit30

.loopexit30:                                      ; preds = %.preheader31, %.preheader29, %349, %331, %.loopexit33
  %367 = add nuw nsw i32 %269, %261
  %368 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 2
  %369 = load i32, i32* %368, align 8, !tbaa !166
  %370 = icmp sgt i32 %367, %369
  br i1 %370, label %.loopexit35, label %371

371:                                              ; preds = %.loopexit30
  %372 = add nuw nsw i32 %273, %265
  %373 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 3
  %374 = load i32, i32* %373, align 4, !tbaa !167
  %375 = icmp sgt i32 %372, %374
  br i1 %375, label %.loopexit35, label %376

376:                                              ; preds = %371
  %377 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 12
  %378 = load i32, i32* %377, align 4, !tbaa !180
  switch i32 %378, label %.loopexit26 [
    i32 2, label %379
    i32 3, label %416
  ]

379:                                              ; preds = %376
  %380 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 20
  %381 = load i32, i32* %380, align 4, !tbaa !181
  %382 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 15
  %383 = load i32, i32* %382, align 8, !tbaa !182
  %384 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 16
  %385 = load i32, i32* %384, align 4, !tbaa !183
  %386 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 17
  %387 = load i32, i32* %386, align 8, !tbaa !184
  %388 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %389 = load i32, i32* %388, align 8, !tbaa !29
  %390 = ashr i32 %389, 2
  %391 = bitcast %struct.AVFrame.96* %21 to i32**
  %392 = load i32*, i32** %391, align 8, !tbaa !6
  %393 = mul nsw i32 %390, %383
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds i32, i32* %392, i64 %394
  %396 = mul nsw i32 %390, %387
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds i32, i32* %395, i64 %397
  %399 = icmp sgt i32 %396, 0
  br i1 %399, label %400, label %.loopexit26

400:                                              ; preds = %379
  %401 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 14
  %402 = load i32, i32* %401, align 4, !tbaa !185
  %403 = sext i32 %402 to i64
  %404 = sext i32 %385 to i64
  %405 = sext i32 %390 to i64
  %406 = icmp sgt i32 %385, 0
  br label %407

407:                                              ; preds = %.loopexit25, %400
  %408 = phi i32* [ %395, %400 ], [ %414, %.loopexit25 ]
  %409 = getelementptr inbounds i32, i32* %408, i64 %403
  %410 = getelementptr inbounds i32, i32* %409, i64 %404
  br i1 %406, label %.preheader24, label %.loopexit25

.preheader24:                                     ; preds = %407, %.preheader24
  %411 = phi i32* [ %412, %.preheader24 ], [ %409, %407 ]
  store i32 %381, i32* %411, align 4, !tbaa !29
  %412 = getelementptr inbounds i32, i32* %411, i64 1
  %413 = icmp ult i32* %412, %410
  br i1 %413, label %.preheader24, label %.loopexit25

.loopexit25:                                      ; preds = %.preheader24, %407
  %414 = getelementptr inbounds i32, i32* %408, i64 %405
  %415 = icmp ult i32* %414, %398
  br i1 %415, label %407, label %.loopexit26

416:                                              ; preds = %376
  %417 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 18
  %418 = load i32*, i32** %417, align 8, !tbaa !186
  %419 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %420 = load i32, i32* %419, align 8, !tbaa !29
  %421 = ashr i32 %420, 2
  %422 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 15
  %423 = load i32, i32* %422, align 8, !tbaa !182
  %424 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 16
  %425 = load i32, i32* %424, align 4, !tbaa !183
  %426 = mul nsw i32 %423, %421
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds i32, i32* %418, i64 %427
  %429 = getelementptr inbounds i32, i32* %428, i64 %427
  %430 = icmp sgt i32 %426, 0
  br i1 %430, label %431, label %.loopexit26

431:                                              ; preds = %416
  %432 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 14
  %433 = load i32, i32* %432, align 4, !tbaa !185
  %434 = bitcast %struct.AVFrame.96* %21 to i32**
  %435 = load i32*, i32** %434, align 8, !tbaa !6
  %436 = getelementptr inbounds i32, i32* %435, i64 %427
  %437 = sext i32 %433 to i64
  %438 = sext i32 %425 to i64
  %439 = sext i32 %421 to i64
  %440 = icmp sgt i32 %425, 0
  br label %441

441:                                              ; preds = %.loopexit27, %431
  %442 = phi i32* [ %436, %431 ], [ %456, %.loopexit27 ]
  %443 = phi i32* [ %428, %431 ], [ %455, %.loopexit27 ]
  %444 = getelementptr inbounds i32, i32* %443, i64 %437
  %445 = getelementptr inbounds i32, i32* %444, i64 %438
  br i1 %440, label %446, label %.loopexit27

446:                                              ; preds = %441
  %447 = getelementptr inbounds i32, i32* %442, i64 %437
  br label %448

448:                                              ; preds = %448, %446
  %449 = phi i32* [ %453, %448 ], [ %447, %446 ]
  %450 = phi i32* [ %452, %448 ], [ %444, %446 ]
  %451 = load i32, i32* %450, align 4, !tbaa !29
  store i32 %451, i32* %449, align 4, !tbaa !29
  %452 = getelementptr inbounds i32, i32* %450, i64 1
  %453 = getelementptr inbounds i32, i32* %449, i64 1
  %454 = icmp ult i32* %452, %445
  br i1 %454, label %448, label %.loopexit27

.loopexit27:                                      ; preds = %448, %441
  %455 = getelementptr inbounds i32, i32* %443, i64 %439
  %456 = getelementptr inbounds i32, i32* %442, i64 %439
  %457 = icmp ult i32* %455, %429
  br i1 %457, label %441, label %.loopexit26

.loopexit26:                                      ; preds = %.loopexit27, %.loopexit25, %416, %379, %376
  %458 = load i32, i32* %242, align 8, !tbaa !187
  store i32 %458, i32* %377, align 4, !tbaa !180
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %.loopexit23, label %460

460:                                              ; preds = %.loopexit26
  %461 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 14
  store i32 %261, i32* %461, align 4, !tbaa !185
  %462 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 15
  store i32 %265, i32* %462, align 8, !tbaa !182
  %463 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 16
  store i32 %269, i32* %463, align 4, !tbaa !183
  %464 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 17
  store i32 %273, i32* %464, align 8, !tbaa !184
  switch i32 %458, label %.loopexit23 [
    i32 2, label %465
    i32 3, label %476
  ]

465:                                              ; preds = %460
  %466 = load i32, i32* %241, align 8, !tbaa !165
  %467 = icmp sgt i32 %466, -1
  br i1 %467, label %468, label %472

468:                                              ; preds = %465
  %469 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 28
  %470 = load i32, i32* %469, align 8, !tbaa !179
  %471 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 20
  store i32 %470, i32* %471, align 4, !tbaa !181
  br label %.loopexit23

472:                                              ; preds = %465
  %473 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 6
  %474 = load i32, i32* %473, align 8, !tbaa !175
  %475 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 20
  store i32 %474, i32* %475, align 4, !tbaa !181
  br label %.loopexit23

476:                                              ; preds = %460
  %477 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 18
  %478 = bitcast i32** %477 to i8*
  %479 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 19
  %480 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %481 = load i32, i32* %480, align 8, !tbaa !29
  %482 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 4
  %483 = load i32, i32* %482, align 4, !tbaa !188
  %484 = mul nsw i32 %483, %481
  %485 = sext i32 %484 to i64
  tail call fastcc void @av_fast_malloc(i8* nonnull %478, i32* nonnull %479, i64 %485) #20
  %486 = load i32*, i32** %477, align 8, !tbaa !186
  %487 = icmp eq i32* %486, null
  br i1 %487, label %.loopexit35, label %488

488:                                              ; preds = %476
  %489 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 0, i64 0
  %490 = bitcast i8** %489 to i32**
  %491 = load i32*, i32** %490, align 8, !tbaa !6
  %492 = load i32, i32* %480, align 8, !tbaa !29
  %493 = ashr i32 %492, 2
  %494 = mul nsw i32 %493, %265
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i32, i32* %491, i64 %495
  %497 = getelementptr inbounds i32, i32* %496, i64 %495
  %498 = icmp sgt i32 %494, 0
  br i1 %498, label %499, label %.loopexit23

499:                                              ; preds = %488
  %500 = getelementptr inbounds i32, i32* %486, i64 %495
  %501 = zext i16 %260 to i64
  %502 = zext i16 %268 to i64
  %503 = sext i32 %493 to i64
  %504 = icmp eq i16 %268, 0
  br label %505

505:                                              ; preds = %.loopexit22, %499
  %506 = phi i32* [ %500, %499 ], [ %520, %.loopexit22 ]
  %507 = phi i32* [ %496, %499 ], [ %519, %.loopexit22 ]
  %508 = getelementptr inbounds i32, i32* %507, i64 %501
  %509 = getelementptr inbounds i32, i32* %508, i64 %502
  br i1 %504, label %.loopexit22, label %510

510:                                              ; preds = %505
  %511 = getelementptr inbounds i32, i32* %506, i64 %501
  br label %512

512:                                              ; preds = %512, %510
  %513 = phi i32* [ %517, %512 ], [ %511, %510 ]
  %514 = phi i32* [ %516, %512 ], [ %508, %510 ]
  %515 = load i32, i32* %514, align 4, !tbaa !29
  store i32 %515, i32* %513, align 4, !tbaa !29
  %516 = getelementptr inbounds i32, i32* %514, i64 1
  %517 = getelementptr inbounds i32, i32* %513, i64 1
  %518 = icmp ult i32* %516, %509
  br i1 %518, label %512, label %.loopexit22

.loopexit22:                                      ; preds = %512, %505
  %519 = getelementptr inbounds i32, i32* %507, i64 %503
  %520 = getelementptr inbounds i32, i32* %506, i64 %503
  %521 = icmp ult i32* %519, %497
  br i1 %521, label %505, label %.loopexit23

.loopexit23:                                      ; preds = %.loopexit22, %488, %472, %468, %460, %.loopexit26
  %522 = load i64, i64* %233, align 8, !tbaa !158
  %523 = load i64, i64* %234, align 8, !tbaa !156
  %524 = sub i64 %522, %523
  %525 = trunc i64 %524 to i32
  %526 = icmp ult i32 %525, 2
  %527 = inttoptr i64 %523 to i8*
  br i1 %526, label %.loopexit35, label %528

528:                                              ; preds = %.loopexit23
  %529 = getelementptr inbounds i8, i8* %527, i64 1
  store i8* %529, i8** %14, align 8, !tbaa !6
  %530 = load i8, i8* %527, align 1, !tbaa !57
  %531 = zext i8 %530 to i32
  %532 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 22
  %533 = load i8*, i8** %532, align 8, !tbaa !189
  %534 = add nsw i32 %531, -1
  %535 = icmp ugt i32 %534, 10
  br i1 %535, label %536, label %540

536:                                              ; preds = %528
  %537 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 25
  %538 = bitcast %struct.AVCodecContext.102** %537 to i8**
  %539 = load i8*, i8** %538, align 8, !tbaa !152
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %539, i32 16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9.383, i64 0, i64 0)) #20
  br label %.loopexit35

540:                                              ; preds = %528
  %541 = ptrtoint i8* %529 to i64
  %542 = sub i64 %522, %541
  %543 = bitcast i8* %533 to i8**
  store i8* %529, i8** %543, align 8, !tbaa !190
  %sext = shl i64 %542, 32
  %544 = ashr exact i64 %sext, 32
  %545 = getelementptr inbounds i8, i8* %529, i64 %544
  %546 = getelementptr inbounds i8, i8* %533, i64 8
  %547 = bitcast i8* %546 to i8**
  store i8* %545, i8** %547, align 8, !tbaa !192
  %548 = getelementptr inbounds i8, i8* %533, i64 20
  %549 = bitcast i8* %548 to i32*
  store i32 0, i32* %549, align 4, !tbaa !193
  %550 = getelementptr inbounds i8, i8* %533, i64 16
  %551 = bitcast i8* %550 to i32*
  store i32 0, i32* %551, align 8, !tbaa !194
  %552 = getelementptr inbounds i8, i8* %533, i64 16464
  %553 = bitcast i8* %552 to i32*
  store i32 0, i32* %553, align 8, !tbaa !195
  %554 = getelementptr inbounds i8, i8* %533, i64 36
  %555 = bitcast i8* %554 to i32*
  store i32 %531, i32* %555, align 4, !tbaa !196
  %556 = add nuw nsw i32 %531, 1
  %557 = getelementptr inbounds i8, i8* %533, i64 28
  %558 = bitcast i8* %557 to i32*
  store i32 %556, i32* %558, align 4, !tbaa !197
  %559 = zext i32 %556 to i64
  %560 = getelementptr inbounds [17 x i16], [17 x i16]* @mask, i64 0, i64 %559
  %561 = load i16, i16* %560, align 2, !tbaa !198
  %562 = zext i16 %561 to i32
  %563 = getelementptr inbounds i8, i8* %533, i64 32
  %564 = bitcast i8* %563 to i32*
  store i32 %562, i32* %564, align 8, !tbaa !199
  %565 = shl i32 2, %531
  %566 = getelementptr inbounds i8, i8* %533, i64 52
  %567 = bitcast i8* %566 to i32*
  store i32 %565, i32* %567, align 4, !tbaa !200
  %568 = shl i32 1, %531
  %569 = getelementptr inbounds i8, i8* %533, i64 40
  %570 = bitcast i8* %569 to i32*
  store i32 %568, i32* %570, align 8, !tbaa !201
  %571 = add nuw nsw i32 %568, 1
  %572 = getelementptr inbounds i8, i8* %533, i64 44
  %573 = bitcast i8* %572 to i32*
  store i32 %571, i32* %573, align 4, !tbaa !202
  %574 = add nuw nsw i32 %568, 2
  %575 = getelementptr inbounds i8, i8* %533, i64 48
  %576 = bitcast i8* %575 to i32*
  store i32 %574, i32* %576, align 8, !tbaa !203
  %577 = getelementptr inbounds i8, i8* %533, i64 60
  %578 = bitcast i8* %577 to i32*
  store i32 %574, i32* %578, align 4, !tbaa !204
  %579 = getelementptr inbounds i8, i8* %533, i64 64
  %580 = bitcast i8* %579 to i32*
  store i32 -1, i32* %580, align 8, !tbaa !205
  %581 = getelementptr inbounds i8, i8* %533, i64 68
  %582 = bitcast i8* %581 to i32*
  store i32 -1, i32* %582, align 4, !tbaa !206
  %583 = getelementptr inbounds i8, i8* %533, i64 80
  %584 = getelementptr inbounds i8, i8* %533, i64 72
  %585 = bitcast i8* %584 to i8**
  store i8* %583, i8** %585, align 8, !tbaa !207
  %586 = getelementptr inbounds i8, i8* %533, i64 24
  %587 = bitcast i8* %586 to i32*
  store i32 0, i32* %587, align 8, !tbaa !208
  %588 = getelementptr inbounds i8, i8* %533, i64 56
  %589 = bitcast i8* %588 to i32*
  store i32 0, i32* %589, align 8, !tbaa !209
  %590 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %591 = load i32, i32* %590, align 8, !tbaa !29
  %592 = ashr i32 %591, 2
  %593 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 0, i64 0
  %594 = bitcast i8** %593 to i32**
  %595 = load i32*, i32** %594, align 8, !tbaa !6
  %596 = mul nsw i32 %592, %265
  %597 = sext i32 %596 to i64
  %598 = getelementptr inbounds i32, i32* %595, i64 %597
  %599 = zext i16 %260 to i64
  %600 = getelementptr inbounds i32, i32* %598, i64 %599
  %601 = icmp eq i16 %272, 0
  br i1 %601, label %ff_lzw_decode.exit.thread.thread, label %.lr.ph

.lr.ph:                                           ; preds = %540
  %602 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 10
  %603 = zext i16 %268 to i64
  %604 = icmp eq i32 %277, 0
  %605 = and i32 %591, -4
  %606 = sext i32 %605 to i64
  %607 = sext i32 %592 to i64
  %608 = getelementptr inbounds i32, i32* %600, i64 %607
  %609 = shl nsw i32 %592, 1
  %610 = sext i32 %609 to i64
  %611 = shl nsw i32 %592, 3
  %612 = sext i32 %611 to i64
  %613 = icmp eq i16 %268, 0
  %614 = load i8*, i8** %602, align 8, !tbaa !168
  br label %615

615:                                              ; preds = %.lr.ph, %._crit_edge
  %.pn = phi i8* [ %533, %.lr.ph ], [ %.pre, %._crit_edge ]
  %616 = phi i32 [ 0, %.lr.ph ], [ %861, %._crit_edge ]
  %617 = phi i32* [ %600, %.lr.ph ], [ %862, %._crit_edge ]
  %618 = phi i32 [ 0, %.lr.ph ], [ %863, %._crit_edge ]
  %619 = phi i32 [ 0, %.lr.ph ], [ %864, %._crit_edge ]
  %620 = phi i8* [ %614, %.lr.ph ], [ %821, %._crit_edge ]
  %.in = getelementptr inbounds i8, i8* %.pn, i64 44
  %621 = bitcast i8* %.in to i32*
  %622 = getelementptr inbounds i8, i8* %.pn, i64 72
  %623 = bitcast i8* %622 to i8**
  %624 = load i8*, i8** %623, align 8, !tbaa !207
  %625 = getelementptr inbounds i8, i8* %.pn, i64 68
  %626 = bitcast i8* %625 to i32*
  %627 = load i32, i32* %626, align 4, !tbaa !206
  %628 = getelementptr inbounds i8, i8* %.pn, i64 64
  %629 = bitcast i8* %628 to i32*
  %630 = load i32, i32* %629, align 8, !tbaa !205
  %631 = getelementptr inbounds i8, i8* %.pn, i64 80
  %632 = getelementptr inbounds i8, i8* %.pn, i64 8
  %633 = bitcast i8* %632 to i8**
  %634 = bitcast i8* %.pn to i8**
  %635 = getelementptr inbounds i8, i8* %.pn, i64 24
  %636 = bitcast i8* %635 to i32*
  %637 = getelementptr inbounds i8, i8* %.pn, i64 16
  %638 = bitcast i8* %637 to i32*
  %639 = getelementptr inbounds i8, i8* %.pn, i64 28
  %640 = bitcast i8* %639 to i32*
  %641 = getelementptr inbounds i8, i8* %.pn, i64 20
  %642 = bitcast i8* %641 to i32*
  %643 = getelementptr inbounds i8, i8* %.pn, i64 16464
  %644 = bitcast i8* %643 to i32*
  %645 = getelementptr inbounds i8, i8* %.pn, i64 32
  %646 = bitcast i8* %645 to i32*
  %647 = getelementptr inbounds i8, i8* %.pn, i64 40
  %648 = bitcast i8* %647 to i32*
  %649 = getelementptr inbounds i8, i8* %.pn, i64 60
  %650 = bitcast i8* %649 to i32*
  %651 = getelementptr inbounds i8, i8* %.pn, i64 48
  %652 = bitcast i8* %651 to i32*
  %653 = getelementptr inbounds i8, i8* %.pn, i64 4176
  %654 = getelementptr inbounds i8, i8* %.pn, i64 8272
  %655 = bitcast i8* %654 to [4096 x i16]*
  %656 = getelementptr inbounds i8, i8* %.pn, i64 52
  %657 = bitcast i8* %656 to i32*
  %658 = getelementptr inbounds i8, i8* %.pn, i64 56
  %659 = bitcast i8* %658 to i32*
  %660 = getelementptr inbounds i8, i8* %.pn, i64 36
  %661 = bitcast i8* %660 to i32*
  br label %.backedge

.backedge:                                        ; preds = %.backedge.backedge, %615
  %662 = phi i32 [ %269, %615 ], [ %668, %.backedge.backedge ]
  %663 = phi i8* [ %620, %615 ], [ %669, %.backedge.backedge ]
  %664 = phi i32 [ %627, %615 ], [ %.be, %.backedge.backedge ]
  %665 = phi i32 [ %630, %615 ], [ %.be421, %.backedge.backedge ]
  %666 = phi i8* [ %624, %615 ], [ %.be422, %.backedge.backedge ]
  br label %667

667:                                              ; preds = %672, %.backedge
  %668 = phi i32 [ %662, %.backedge ], [ %676, %672 ]
  %669 = phi i8* [ %663, %.backedge ], [ %675, %672 ]
  %670 = phi i8* [ %666, %.backedge ], [ %673, %672 ]
  %671 = icmp ugt i8* %670, %631
  br i1 %671, label %672, label %678

672:                                              ; preds = %667
  %673 = getelementptr inbounds i8, i8* %670, i64 -1
  %674 = load i8, i8* %673, align 1, !tbaa !57
  %675 = getelementptr inbounds i8, i8* %669, i64 1
  store i8 %674, i8* %669, align 1, !tbaa !57
  %676 = add nsw i32 %668, -1
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %ff_lzw_decode.exit, label %667

678:                                              ; preds = %667
  %679 = load i8*, i8** %633, align 8, !tbaa !192
  %680 = load i8*, i8** %634, align 8, !tbaa !190
  %681 = icmp ult i8* %679, %680
  br i1 %681, label %682, label %683

682:                                              ; preds = %678
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.424, i64 0, i64 0)) #20
  br label %ff_lzw_decode.exit

683:                                              ; preds = %678
  %684 = load i32, i32* %636, align 8, !tbaa !208
  %685 = icmp eq i32 %684, 0
  %686 = load i32, i32* %638, align 8, !tbaa !194
  %687 = load i32, i32* %640, align 4, !tbaa !197
  %688 = icmp slt i32 %686, %687
  br i1 %685, label %691, label %689

689:                                              ; preds = %683
  %690 = load i32, i32* %642, align 4, !tbaa !193
  br i1 %688, label %.preheader19.i, label %.loopexit20.i

691:                                              ; preds = %683
  br i1 %688, label %694, label %692

692:                                              ; preds = %691
  %693 = load i32, i32* %642, align 4, !tbaa !193
  br label %.loopexit18.i

694:                                              ; preds = %691
  %695 = load i32, i32* %644, align 8, !tbaa !195
  br label %696

696:                                              ; preds = %705, %694
  %697 = phi i8* [ %680, %694 ], [ %708, %705 ]
  %698 = phi i32 [ %695, %694 ], [ %715, %705 ]
  %699 = phi i32 [ %686, %694 ], [ %714, %705 ]
  %700 = icmp eq i32 %698, 0
  br i1 %700, label %701, label %705

701:                                              ; preds = %696
  %702 = getelementptr inbounds i8, i8* %697, i64 1
  store i8* %702, i8** %634, align 8, !tbaa !190
  %703 = load i8, i8* %697, align 1, !tbaa !57
  %704 = zext i8 %703 to i32
  store i32 %704, i32* %644, align 8, !tbaa !195
  br label %705

705:                                              ; preds = %701, %696
  %706 = phi i32 [ %704, %701 ], [ %698, %696 ]
  %707 = phi i8* [ %702, %701 ], [ %697, %696 ]
  %708 = getelementptr inbounds i8, i8* %707, i64 1
  store i8* %708, i8** %634, align 8, !tbaa !190
  %709 = load i8, i8* %707, align 1, !tbaa !57
  %710 = zext i8 %709 to i32
  %711 = shl i32 %710, %699
  %712 = load i32, i32* %642, align 4, !tbaa !193
  %713 = or i32 %711, %712
  store i32 %713, i32* %642, align 4, !tbaa !193
  %714 = add nsw i32 %699, 8
  store i32 %714, i32* %638, align 8, !tbaa !194
  %715 = add nsw i32 %706, -1
  store i32 %715, i32* %644, align 8, !tbaa !195
  %716 = icmp slt i32 %714, %687
  br i1 %716, label %696, label %.loopexit18.i

.loopexit18.i:                                    ; preds = %705, %692
  %717 = phi i32 [ %686, %692 ], [ %714, %705 ]
  %718 = phi i32 [ %693, %692 ], [ %713, %705 ]
  %719 = lshr i32 %718, %687
  store i32 %719, i32* %642, align 4, !tbaa !193
  %720 = sub nsw i32 %717, %687
  br label %735

.preheader19.i:                                   ; preds = %689, %.preheader19.i
  %721 = phi i8* [ %725, %.preheader19.i ], [ %680, %689 ]
  %722 = phi i32 [ %728, %.preheader19.i ], [ %690, %689 ]
  %723 = phi i32 [ %729, %.preheader19.i ], [ %686, %689 ]
  %724 = shl i32 %722, 8
  %725 = getelementptr inbounds i8, i8* %721, i64 1
  store i8* %725, i8** %634, align 8, !tbaa !190
  %726 = load i8, i8* %721, align 1, !tbaa !57
  %727 = zext i8 %726 to i32
  %728 = or i32 %724, %727
  store i32 %728, i32* %642, align 4, !tbaa !193
  %729 = add nsw i32 %723, 8
  store i32 %729, i32* %638, align 8, !tbaa !194
  %730 = icmp slt i32 %729, %687
  br i1 %730, label %.preheader19.i, label %.loopexit20.i

.loopexit20.i:                                    ; preds = %.preheader19.i, %689
  %731 = phi i32 [ %686, %689 ], [ %729, %.preheader19.i ]
  %732 = phi i32 [ %690, %689 ], [ %728, %.preheader19.i ]
  %733 = sub nsw i32 %731, %687
  %734 = lshr i32 %732, %733
  br label %735

735:                                              ; preds = %.loopexit20.i, %.loopexit18.i
  %736 = phi i32 [ %733, %.loopexit20.i ], [ %720, %.loopexit18.i ]
  %737 = phi i32 [ %734, %.loopexit20.i ], [ %718, %.loopexit18.i ]
  store i32 %736, i32* %638, align 8, !tbaa !194
  %738 = load i32, i32* %646, align 8, !tbaa !199
  %739 = and i32 %738, %737
  %740 = load i32, i32* %621, align 4, !tbaa !202
  %741 = icmp eq i32 %739, %740
  br i1 %741, label %815, label %742

742:                                              ; preds = %735
  %743 = load i32, i32* %648, align 8, !tbaa !201
  %744 = icmp eq i32 %739, %743
  br i1 %744, label %745, label %754

745:                                              ; preds = %742
  %746 = load i32, i32* %661, align 4, !tbaa !196
  %747 = add nsw i32 %746, 1
  store i32 %747, i32* %640, align 4, !tbaa !197
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds [17 x i16], [17 x i16]* @mask, i64 0, i64 %748
  %750 = load i16, i16* %749, align 2, !tbaa !198
  %751 = zext i16 %750 to i32
  store i32 %751, i32* %646, align 8, !tbaa !199
  %752 = load i32, i32* %652, align 8, !tbaa !203
  store i32 %752, i32* %650, align 4, !tbaa !204
  %753 = shl i32 1, %747
  store i32 %753, i32* %657, align 4, !tbaa !200
  br label %.backedge.backedge

754:                                              ; preds = %742
  %755 = load i32, i32* %650, align 4, !tbaa !204
  %756 = icmp eq i32 %739, %755
  %757 = icmp sgt i32 %665, -1
  %758 = and i1 %757, %756
  br i1 %758, label %759, label %762

759:                                              ; preds = %754
  %760 = trunc i32 %665 to i8
  %761 = getelementptr inbounds i8, i8* %670, i64 1
  store i8 %760, i8* %670, align 1, !tbaa !57
  br label %764

762:                                              ; preds = %754
  %763 = icmp slt i32 %739, %755
  br i1 %763, label %764, label %815

764:                                              ; preds = %762, %759
  %765 = phi i32 [ %664, %759 ], [ %739, %762 ]
  %766 = phi i8* [ %761, %759 ], [ %670, %762 ]
  %767 = load i32, i32* %652, align 8, !tbaa !203
  %768 = icmp slt i32 %765, %767
  br i1 %768, label %.loopexit.i, label %.preheader.i

.preheader.i:                                     ; preds = %764, %.preheader.i
  %769 = phi i8* [ %774, %.preheader.i ], [ %766, %764 ]
  %770 = phi i32 [ %777, %.preheader.i ], [ %765, %764 ]
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i8, i8* %653, i64 %771
  %773 = load i8, i8* %772, align 1, !tbaa !57
  %774 = getelementptr inbounds i8, i8* %769, i64 1
  store i8 %773, i8* %769, align 1, !tbaa !57
  %775 = getelementptr inbounds [4096 x i16], [4096 x i16]* %655, i64 0, i64 %771
  %776 = load i16, i16* %775, align 2, !tbaa !198
  %777 = zext i16 %776 to i32
  %778 = load i32, i32* %652, align 8, !tbaa !203
  %779 = icmp sgt i32 %778, %777
  br i1 %779, label %.loopexit.i.loopexit, label %.preheader.i

.loopexit.i.loopexit:                             ; preds = %.preheader.i
  %780 = zext i16 %776 to i32
  br label %.loopexit.i

.loopexit.i:                                      ; preds = %.loopexit.i.loopexit, %764
  %781 = phi i32 [ %765, %764 ], [ %780, %.loopexit.i.loopexit ]
  %782 = phi i8* [ %766, %764 ], [ %774, %.loopexit.i.loopexit ]
  %783 = trunc i32 %781 to i8
  %784 = getelementptr inbounds i8, i8* %782, i64 1
  store i8 %783, i8* %782, align 1, !tbaa !57
  %785 = load i32, i32* %650, align 4, !tbaa !204
  %786 = load i32, i32* %657, align 4, !tbaa !200
  %787 = icmp slt i32 %785, %786
  %788 = icmp sgt i32 %664, -1
  %789 = and i1 %788, %787
  br i1 %789, label %790, label %799

790:                                              ; preds = %.loopexit.i
  %791 = sext i32 %785 to i64
  %792 = getelementptr inbounds i8, i8* %653, i64 %791
  store i8 %783, i8* %792, align 1, !tbaa !57
  %793 = trunc i32 %664 to i16
  %794 = load i32, i32* %650, align 4, !tbaa !204
  %795 = add nsw i32 %794, 1
  store i32 %795, i32* %650, align 4, !tbaa !204
  %796 = sext i32 %794 to i64
  %797 = getelementptr inbounds [4096 x i16], [4096 x i16]* %655, i64 0, i64 %796
  store i16 %793, i16* %797, align 2, !tbaa !198
  %798 = load i32, i32* %657, align 4, !tbaa !200
  br label %799

799:                                              ; preds = %790, %.loopexit.i
  %800 = phi i32 [ %798, %790 ], [ %786, %.loopexit.i ]
  %801 = phi i32 [ %795, %790 ], [ %785, %.loopexit.i ]
  %802 = load i32, i32* %659, align 8, !tbaa !209
  %803 = sub nsw i32 %800, %802
  %804 = icmp slt i32 %801, %803
  br i1 %804, label %.backedge.backedge, label %805

805:                                              ; preds = %799
  %806 = load i32, i32* %640, align 4, !tbaa !197
  %807 = icmp slt i32 %806, 12
  br i1 %807, label %808, label %.backedge.backedge

808:                                              ; preds = %805
  %809 = shl i32 %800, 1
  store i32 %809, i32* %657, align 4, !tbaa !200
  %810 = add nsw i32 %806, 1
  store i32 %810, i32* %640, align 4, !tbaa !197
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds [17 x i16], [17 x i16]* @mask, i64 0, i64 %811
  %813 = load i16, i16* %812, align 2, !tbaa !198
  %814 = zext i16 %813 to i32
  store i32 %814, i32* %646, align 8, !tbaa !199
  br label %.backedge.backedge

.backedge.backedge:                               ; preds = %808, %805, %799, %745
  %.be = phi i32 [ %739, %808 ], [ %739, %805 ], [ %739, %799 ], [ -1, %745 ]
  %.be421 = phi i32 [ %781, %808 ], [ %781, %805 ], [ %781, %799 ], [ -1, %745 ]
  %.be422 = phi i8* [ %784, %808 ], [ %784, %805 ], [ %784, %799 ], [ %670, %745 ]
  br label %.backedge

815:                                              ; preds = %762, %735
  store i32 -1, i32* %621, align 4, !tbaa !202
  br label %ff_lzw_decode.exit

ff_lzw_decode.exit:                               ; preds = %672, %682, %815
  %816 = phi i32 [ %668, %682 ], [ %668, %815 ], [ 0, %672 ]
  %817 = phi i8* [ %670, %682 ], [ %670, %815 ], [ %673, %672 ]
  store i8* %817, i8** %623, align 8, !tbaa !207
  store i32 %664, i32* %626, align 4, !tbaa !206
  store i32 %665, i32* %629, align 8, !tbaa !205
  %818 = icmp eq i32 %816, %269
  br i1 %818, label %ff_lzw_decode.exit.thread, label %819

819:                                              ; preds = %ff_lzw_decode.exit
  %820 = getelementptr inbounds i32, i32* %617, i64 %603
  %821 = load i8*, i8** %602, align 8, !tbaa !168
  br i1 %613, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %819, %832
  %822 = phi i8* [ %834, %832 ], [ %821, %819 ]
  %823 = phi i32* [ %833, %832 ], [ %617, %819 ]
  %824 = load i8, i8* %822, align 1, !tbaa !57
  %825 = zext i8 %824 to i32
  %826 = load i32, i32* %241, align 8, !tbaa !165
  %827 = icmp eq i32 %826, %825
  br i1 %827, label %832, label %828

828:                                              ; preds = %.preheader
  %829 = zext i8 %824 to i64
  %830 = getelementptr inbounds i32, i32* %321, i64 %829
  %831 = load i32, i32* %830, align 4, !tbaa !29
  store i32 %831, i32* %823, align 4, !tbaa !29
  br label %832

832:                                              ; preds = %828, %.preheader
  %833 = getelementptr inbounds i32, i32* %823, i64 1
  %834 = getelementptr inbounds i8, i8* %822, i64 1
  %835 = icmp ult i32* %833, %820
  br i1 %835, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %832, %819
  br i1 %604, label %858, label %836

836:                                              ; preds = %.loopexit
  switch i32 %618, label %837 [
    i32 3, label %855
    i32 2, label %848
  ]

837:                                              ; preds = %836
  %838 = add nsw i32 %616, 8
  %839 = getelementptr inbounds i32, i32* %617, i64 %612
  %840 = icmp slt i32 %838, %273
  br i1 %840, label %860, label %841

841:                                              ; preds = %837
  %842 = icmp eq i32 %618, 0
  %843 = select i1 %842, i32 4, i32 2
  %844 = mul nsw i32 %843, %592
  %845 = sext i32 %844 to i64
  %846 = getelementptr inbounds i32, i32* %600, i64 %845
  %847 = add nsw i32 %618, 1
  br label %860

848:                                              ; preds = %836
  %849 = add nsw i32 %616, 4
  %850 = getelementptr inbounds i32, i32* %617, i64 %606
  %851 = icmp slt i32 %849, %273
  %852 = select i1 %851, i32 %849, i32 1
  %853 = select i1 %851, i32* %850, i32* %608
  %854 = select i1 %851, i32 2, i32 3
  br label %860

855:                                              ; preds = %836
  %856 = add nsw i32 %616, 2
  %857 = getelementptr inbounds i32, i32* %617, i64 %610
  br label %860

858:                                              ; preds = %.loopexit
  %859 = getelementptr inbounds i32, i32* %617, i64 %607
  br label %860

860:                                              ; preds = %858, %855, %848, %841, %837
  %861 = phi i32 [ %843, %841 ], [ %838, %837 ], [ %856, %855 ], [ %616, %858 ], [ %852, %848 ]
  %862 = phi i32* [ %846, %841 ], [ %839, %837 ], [ %857, %855 ], [ %859, %858 ], [ %853, %848 ]
  %863 = phi i32 [ %847, %841 ], [ %618, %837 ], [ 3, %855 ], [ %618, %858 ], [ %854, %848 ]
  %864 = add nuw nsw i32 %619, 1
  %865 = icmp eq i32 %864, %273
  br i1 %865, label %ff_lzw_decode.exit.thread, label %._crit_edge

._crit_edge:                                      ; preds = %860
  %.pre = load i8*, i8** %532, align 8, !tbaa !189
  %.phi.trans.insert = getelementptr inbounds i8, i8* %.pre, i64 44
  %.phi.trans.insert107 = bitcast i8* %.phi.trans.insert to i32*
  %.pre108 = load i32, i32* %.phi.trans.insert107, align 4, !tbaa !202
  %866 = icmp slt i32 %.pre108, 0
  br i1 %866, label %ff_lzw_decode.exit.thread, label %615

867:                                              ; preds = %248
  %868 = ptrtoint i8* %249 to i64
  %869 = sub i64 %235, %868
  %870 = trunc i64 %869 to i32
  %871 = icmp ult i32 %870, 2
  br i1 %871, label %.loopexit35, label %872

872:                                              ; preds = %867
  %873 = getelementptr inbounds i8, i8* %247, i64 2
  store i8* %873, i8** %14, align 8, !tbaa !6
  %874 = load i8, i8* %249, align 1, !tbaa !57
  %875 = getelementptr inbounds i8, i8* %247, i64 3
  store i8* %875, i8** %14, align 8, !tbaa !6
  %876 = load i8, i8* %873, align 1, !tbaa !57
  %877 = icmp ne i8 %874, -7
  %878 = icmp ne i8 %876, 4
  %879 = or i1 %877, %878
  %880 = ptrtoint i8* %875 to i64
  br i1 %879, label %905, label %881

881:                                              ; preds = %872
  %882 = sub i64 %235, %880
  %883 = trunc i64 %882 to i32
  %884 = icmp ult i32 %883, 5
  br i1 %884, label %.loopexit35, label %885

885:                                              ; preds = %881
  %886 = getelementptr inbounds i8, i8* %247, i64 4
  store i8* %886, i8** %14, align 8, !tbaa !6
  %887 = load i8, i8* %875, align 1, !tbaa !57
  %888 = zext i8 %887 to i32
  %889 = getelementptr inbounds i8, i8* %247, i64 7
  store i8* %889, i8** %14, align 8, !tbaa !6
  %890 = and i32 %888, 1
  %891 = icmp eq i32 %890, 0
  br i1 %891, label %896, label %892

892:                                              ; preds = %885
  %893 = getelementptr inbounds i8, i8* %247, i64 6
  %894 = load i8, i8* %893, align 1, !tbaa !57
  %895 = zext i8 %894 to i32
  br label %896

896:                                              ; preds = %892, %885
  %897 = phi i32 [ %895, %892 ], [ -1, %885 ]
  store i32 %897, i32* %241, align 8, !tbaa !165
  %898 = lshr i32 %888, 2
  %899 = and i32 %898, 7
  %900 = icmp ugt i32 %899, 3
  %901 = select i1 %900, i32 0, i32 %899
  store i32 %901, i32* %242, align 8, !tbaa !187
  %902 = getelementptr inbounds i8, i8* %247, i64 8
  store i8* %902, i8** %14, align 8, !tbaa !6
  %903 = load i8, i8* %889, align 1, !tbaa !57
  %904 = ptrtoint i8* %902 to i64
  br label %905

905:                                              ; preds = %896, %872
  %906 = phi i64 [ %880, %872 ], [ %904, %896 ]
  %907 = phi i8* [ %875, %872 ], [ %902, %896 ]
  %908 = phi i8 [ %876, %872 ], [ %903, %896 ]
  %909 = icmp eq i8 %908, 0
  br i1 %909, label %.loopexit36, label %.preheader34

.preheader34:                                     ; preds = %905, %917
  %910 = phi i8* [ %920, %917 ], [ %907, %905 ]
  %911 = phi i64 [ %923, %917 ], [ %906, %905 ]
  %912 = phi i8 [ %921, %917 ], [ %908, %905 ]
  %913 = zext i8 %912 to i32
  %914 = sub i64 %235, %911
  %915 = trunc i64 %914 to i32
  %916 = icmp ult i32 %913, %915
  br i1 %916, label %917, label %.loopexit35

917:                                              ; preds = %.preheader34
  %918 = zext i8 %912 to i64
  %919 = getelementptr inbounds i8, i8* %910, i64 %918
  %920 = getelementptr inbounds i8, i8* %919, i64 1
  store i8* %920, i8** %14, align 8, !tbaa !6
  %921 = load i8, i8* %919, align 1, !tbaa !57
  %922 = icmp eq i8 %921, 0
  %923 = ptrtoint i8* %920 to i64
  br i1 %922, label %.loopexit36.loopexit, label %.preheader34

924:                                              ; preds = %248
  store i32 0, i32* %2, align 4, !tbaa !29
  br label %965

.loopexit36.loopexit:                             ; preds = %917
  %925 = ptrtoint i8* %920 to i64
  br label %.loopexit36

.loopexit36:                                      ; preds = %.loopexit36.loopexit, %905
  %926 = phi i64 [ %906, %905 ], [ %925, %.loopexit36.loopexit ]
  %927 = sub i64 %235, %926
  %928 = trunc i64 %927 to i32
  %929 = icmp eq i32 %928, 0
  br i1 %929, label %.loopexit35, label %243

ff_lzw_decode.exit.thread:                        ; preds = %ff_lzw_decode.exit, %860, %._crit_edge
  %.pre109 = load i8*, i8** %532, align 8, !tbaa !189
  %.phi.trans.insert110 = getelementptr inbounds i8, i8* %.pre109, i64 24
  %.phi.trans.insert111 = bitcast i8* %.phi.trans.insert110 to i32*
  %.pre112 = load i32, i32* %.phi.trans.insert111, align 8, !tbaa !208
  %phitmp = icmp eq i32 %.pre112, 0
  br i1 %phitmp, label %ff_lzw_decode.exit.thread.thread, label %956

ff_lzw_decode.exit.thread.thread:                 ; preds = %540, %ff_lzw_decode.exit.thread
  %930 = phi i8* [ %.pre109, %ff_lzw_decode.exit.thread ], [ %533, %540 ]
  %931 = getelementptr inbounds i8, i8* %930, i64 16464
  %932 = bitcast i8* %931 to i32*
  %933 = load i32, i32* %932, align 8, !tbaa !195
  %934 = icmp sgt i32 %933, 0
  br i1 %934, label %935, label %ff_lzw_decode_tail.exit

935:                                              ; preds = %ff_lzw_decode.exit.thread.thread
  %936 = getelementptr inbounds i8, i8* %930, i64 8
  %937 = bitcast i8* %936 to i8**
  %938 = bitcast i8* %930 to i8**
  %939 = load i8*, i8** %937, align 8, !tbaa !192
  %940 = load i8*, i8** %938, align 8, !tbaa !190
  %941 = ptrtoint i8* %939 to i64
  br label %942

942:                                              ; preds = %950, %935
  %943 = phi i8* [ %940, %935 ], [ %952, %950 ]
  %944 = phi i32 [ %933, %935 ], [ %954, %950 ]
  %945 = sext i32 %944 to i64
  %946 = ptrtoint i8* %943 to i64
  %947 = sub i64 %941, %946
  %948 = icmp sgt i64 %947, %945
  br i1 %948, label %950, label %949

949:                                              ; preds = %942
  store i8* %939, i8** %938, align 8, !tbaa !190
  br label %ff_lzw_decode_tail.exit

950:                                              ; preds = %942
  %951 = getelementptr inbounds i8, i8* %943, i64 %945
  %952 = getelementptr inbounds i8, i8* %951, i64 1
  store i8* %952, i8** %938, align 8, !tbaa !190
  %953 = load i8, i8* %951, align 1, !tbaa !57
  %954 = zext i8 %953 to i32
  store i32 %954, i32* %932, align 8, !tbaa !195
  %955 = icmp eq i8 %953, 0
  br i1 %955, label %ff_lzw_decode_tail.exit, label %942

956:                                              ; preds = %ff_lzw_decode.exit.thread
  %957 = getelementptr inbounds i8, i8* %.pre109, i64 8
  %958 = bitcast i8* %957 to i64*
  %959 = load i64, i64* %958, align 8, !tbaa !192
  %960 = bitcast i8* %.pre109 to i64*
  store i64 %959, i64* %960, align 8, !tbaa !190
  br label %ff_lzw_decode_tail.exit

ff_lzw_decode_tail.exit:                          ; preds = %950, %ff_lzw_decode.exit.thread.thread, %949, %956
  store i32 -1, i32* %241, align 8, !tbaa !165
  store i32 0, i32* %242, align 8, !tbaa !187
  %961 = load i32, i32* %2, align 4, !tbaa !29
  %962 = icmp eq i32 %961, 0
  br i1 %962, label %965, label %963

963:                                              ; preds = %ff_lzw_decode_tail.exit
  %964 = bitcast %struct.AVFrame.96* %21 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* nonnull align 8 %964, i64 520, i1 false), !tbaa.struct !139
  br label %965

965:                                              ; preds = %963, %ff_lzw_decode_tail.exit, %924
  %966 = load i32, i32* %12, align 8, !tbaa !25
  br label %.loopexit35

.loopexit35:                                      ; preds = %.loopexit36, %881, %867, %248, %243, %.preheader34, %965, %536, %.loopexit23, %476, %371, %.loopexit30, %315, %279, %251, %231, %225, %218, %211, %176, %bcmp.exit21
  %967 = phi i32 [ %209, %211 ], [ %966, %965 ], [ %223, %225 ], [ -1094995529, %218 ], [ %180, %176 ], [ %175, %bcmp.exit21 ], [ -541478725, %231 ], [ -1, %536 ], [ -1094995529, %315 ], [ -1094995529, %251 ], [ -1094995529, %279 ], [ -1094995529, %371 ], [ -1094995529, %.loopexit30 ], [ -12, %476 ], [ -1094995529, %.loopexit23 ], [ -1094995529, %.preheader34 ], [ -541478725, %.loopexit36 ], [ -1094995529, %248 ], [ -1094995529, %243 ], [ -1094995529, %867 ], [ -1094995529, %881 ]
  ret i32 %967
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gif_decode_close(%struct.AVCodecContext.102*) #3 {
  %2 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 9
  %3 = bitcast i8** %2 to %struct.GifState**
  %4 = load %struct.GifState*, %struct.GifState** %3, align 8, !tbaa !151
  %5 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 22
  %6 = load i8*, i8** %5, align 8, !tbaa !6
  tail call fastcc void @free(i8* %6) #20
  store i8* null, i8** %5, align 8, !tbaa !6
  %7 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 1
  %8 = getelementptr inbounds %struct.AVFrame.96, %struct.AVFrame.96* %7, i64 0, i32 0, i64 0
  %9 = load i8*, i8** %8, align 8, !tbaa !6
  %10 = icmp eq i8* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.AVCodecContext.102, %struct.AVCodecContext.102* %0, i64 0, i32 113
  %13 = load void (%struct.AVCodecContext.102*, %struct.AVFrame.96*)*, void (%struct.AVCodecContext.102*, %struct.AVFrame.96*)** %12, align 8, !tbaa !136
  tail call void %13(%struct.AVCodecContext.102* nonnull %0, %struct.AVFrame.96* nonnull %7) #20
  br label %14

14:                                               ; preds = %11, %1
  %15 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 10
  %16 = load i8*, i8** %15, align 8, !tbaa !6
  tail call fastcc void @free(i8* %16) #20
  store i8* null, i8** %15, align 8, !tbaa !6
  %17 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 18
  %18 = bitcast i32** %17 to i8**
  %19 = load i8*, i8** %18, align 8, !tbaa !6
  tail call fastcc void @free(i8* %19) #20
  store i8* null, i8** %18, align 8, !tbaa !6
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @av_fast_malloc(i8* nocapture, i32* nocapture, i64) unnamed_addr #3 {
  %4 = bitcast i8* %0 to i8**
  %5 = load i32, i32* %1, align 4, !tbaa !29
  %6 = zext i32 %5 to i64
  %7 = icmp ugt i64 %6, %2
  br i1 %7, label %19, label %8

8:                                                ; preds = %3
  %9 = mul i64 %2, 17
  %10 = lshr i64 %9, 4
  %11 = add nuw nsw i64 %10, 32
  %12 = icmp ugt i64 %11, %2
  %13 = select i1 %12, i64 %11, i64 %2
  %14 = load i8*, i8** %4, align 8, !tbaa !6
  tail call fastcc void @free(i8* %14) #20
  %15 = tail call fastcc noalias i8* @av_malloc(i64 %13) #20
  store i8* %15, i8** %4, align 8, !tbaa !6
  %16 = icmp eq i8* %15, null
  %17 = trunc i64 %13 to i32
  %18 = select i1 %16, i32 0, i32 %17
  store i32 %18, i32* %1, align 4, !tbaa !29
  br label %19

19:                                               ; preds = %8, %3
  ret void
}

; Function Attrs:  norecurse nounwind optsize uwtable
define dso_local void @__llvm__memcpy__p0i8__p0i8__i64(i8*, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds i8, i8* %0, i64 %2
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %6, %3
  %7 = phi i8* [ %11, %6 ], [ %0, %3 ]
  %8 = phi i8* [ %10, %6 ], [ %1, %3 ]
  %9 = load i8, i8* %8, align 1, !tbaa !57
  store i8 %9, i8* %7, align 1, !tbaa !57
  %10 = getelementptr inbounds i8, i8* %8, i64 1
  %11 = getelementptr inbounds i8, i8* %7, i64 1
  %12 = icmp eq i8* %11, %4
  br i1 %12, label %13, label %6

13:                                               ; preds = %6, %3
  ret void
}

; Function Attrs:  norecurse nounwind optsize uwtable
define dso_local void @__llvm__memmove__p0i8__p0i8__i64(i8*, i8* readonly, i64) local_unnamed_addr #0 {
  %4 = icmp ugt i8* %0, %1
  %5 = getelementptr inbounds i8, i8* %0, i64 %2
  %6 = icmp eq i64 %2, 0
  br i1 %4, label %15, label %7

7:                                                ; preds = %3
  br i1 %6, label %25, label %8

8:                                                ; preds = %8, %7
  %9 = phi i8* [ %13, %8 ], [ %0, %7 ]
  %10 = phi i8* [ %12, %8 ], [ %1, %7 ]
  %11 = load i8, i8* %10, align 1, !tbaa !57
  store i8 %11, i8* %9, align 1, !tbaa !57
  %12 = getelementptr inbounds i8, i8* %10, i64 1
  %13 = getelementptr inbounds i8, i8* %9, i64 1
  %14 = icmp eq i8* %13, %5
  br i1 %14, label %25, label %8

15:                                               ; preds = %3
  br i1 %6, label %25, label %16

16:                                               ; preds = %15
  %17 = getelementptr inbounds i8, i8* %1, i64 %2
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i8* [ %22, %18 ], [ %5, %16 ]
  %20 = phi i8* [ %21, %18 ], [ %17, %16 ]
  %21 = getelementptr inbounds i8, i8* %20, i64 -1
  %22 = getelementptr inbounds i8, i8* %19, i64 -1
  %23 = load i8, i8* %21, align 1, !tbaa !57
  store i8 %23, i8* %22, align 1, !tbaa !57
  %24 = icmp eq i8* %22, %0
  br i1 %24, label %25, label %18

25:                                               ; preds = %18, %15, %8, %7
  ret void
}

; Function Attrs:  norecurse nounwind optsize uwtable writeonly
define dso_local void @__llvm__memset__p0i8__i64(i8*, i8 zeroext, i64) local_unnamed_addr #17 {
  %4 = icmp ugt i64 %2, 31
  %5 = getelementptr inbounds i8, i8* %0, i64 %2
  br i1 %4, label %8, label %6

6:                                                ; preds = %3
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %50, label %46

8:                                                ; preds = %3
  %9 = ptrtoint i8* %0 to i64
  %10 = add i64 %9, 7
  %11 = and i64 %10, -8
  %12 = ptrtoint i8* %5 to i64
  %13 = and i64 %12, -8
  %14 = zext i8 %1 to i32
  br label %19

15:                                               ; preds = %19
  %16 = inttoptr i64 %11 to i8*
  %17 = inttoptr i64 %13 to i8*
  %18 = icmp eq i8* %16, %0
  br i1 %18, label %28, label %31

19:                                               ; preds = %19, %8
  %20 = phi i32 [ 0, %8 ], [ %26, %19 ]
  %21 = phi i64 [ 0, %8 ], [ %25, %19 ]
  %22 = shl nsw i32 %20, 3
  %23 = shl i32 %14, %22
  %24 = sext i32 %23 to i64
  %25 = or i64 %21, %24
  %26 = add nuw nsw i32 %20, 1
  %27 = icmp eq i32 %26, 8
  br i1 %27, label %15, label %19

28:                                               ; preds = %31, %15
  %29 = phi i8* [ %0, %15 ], [ %16, %31 ]
  %30 = icmp eq i8* %29, %17
  br i1 %30, label %35, label %37

31:                                               ; preds = %31, %15
  %32 = phi i8* [ %33, %31 ], [ %0, %15 ]
  store i8 %1, i8* %32, align 1, !tbaa !57
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  %34 = icmp eq i8* %33, %16
  br i1 %34, label %28, label %31

35:                                               ; preds = %37, %28
  %36 = icmp eq i8* %5, %17
  br i1 %36, label %50, label %42

37:                                               ; preds = %37, %28
  %38 = phi i8* [ %40, %37 ], [ %29, %28 ]
  %39 = bitcast i8* %38 to i64*
  store i64 %25, i64* %39, align 8, !tbaa !28
  %40 = getelementptr inbounds i8, i8* %38, i64 8
  %41 = icmp eq i8* %40, %17
  br i1 %41, label %35, label %37

42:                                               ; preds = %42, %35
  %43 = phi i8* [ %44, %42 ], [ %17, %35 ]
  store i8 %1, i8* %43, align 1, !tbaa !57
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  %45 = icmp eq i8* %44, %5
  br i1 %45, label %50, label %42

46:                                               ; preds = %46, %6
  %47 = phi i8* [ %48, %46 ], [ %0, %6 ]
  store i8 %1, i8* %47, align 1, !tbaa !57
  %48 = getelementptr inbounds i8, i8* %47, i64 1
  %49 = icmp eq i8* %48, %5
  br i1 %49, label %50, label %46

50:                                               ; preds = %46, %42, %35, %6
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local i32 @__llvm__bswap__i32(i32) local_unnamed_addr #6 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3)
  store volatile i32 %0, i32* %2, align 4, !tbaa !29
  %4 = load volatile i32, i32* %2, align 4, !tbaa !29
  %5 = lshr i32 %0, 24
  %6 = lshr i32 %0, 8
  %7 = and i32 %6, 65280
  %8 = or i32 %7, %5
  %9 = shl i32 %0, 8
  %10 = and i32 %9, 16711680
  %11 = or i32 %8, %10
  %12 = shl i32 %4, 24
  %13 = or i32 %11, %12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3)
  ret i32 %13
}

; Function Attrs: norecurse nounwind optsize readnone uwtable
define dso_local i32 @__llvm__ctpop__i32(i32) local_unnamed_addr #18 {
  %2 = and i32 %0, 1431655765
  %3 = lshr i32 %0, 1
  %4 = and i32 %3, 1431655765
  %5 = add nuw i32 %4, %2
  %6 = and i32 %5, 858993459
  %7 = lshr i32 %5, 2
  %8 = and i32 %7, 858993459
  %9 = add nuw nsw i32 %8, %6
  %10 = and i32 %9, 117901063
  %11 = lshr i32 %9, 4
  %12 = and i32 %11, 117901063
  %13 = add nuw nsw i32 %12, %10
  %14 = and i32 %13, 983055
  %15 = lshr i32 %13, 8
  %16 = and i32 %15, 983055
  %17 = add nuw nsw i32 %16, %14
  %18 = and i32 %17, 31
  %19 = lshr i32 %17, 16
  %20 = add nuw nsw i32 %18, %19
  ret i32 %20
}

; Function Attrs: norecurse nounwind optsize readnone uwtable
define dso_local i32 @__cc_sdiv_i32_i32(i32, i32) local_unnamed_addr #18 {
  %3 = icmp slt i32 %0, 0
  %4 = sub nsw i32 0, %0
  %5 = select i1 %3, i32 %4, i32 %0
  %6 = select i1 %3, i32 -1, i32 1
  %7 = icmp slt i32 %1, 0
  %8 = sub nsw i32 0, %1
  %9 = sub nsw i32 0, %6
  %10 = select i1 %7, i32 %8, i32 %1
  %11 = select i1 %7, i32 %9, i32 %6
  %12 = udiv i32 %5, %10
  %13 = mul nsw i32 %12, %11
  ret i32 %13
}

; Function Attrs: norecurse nounwind optsize readnone uwtable
define dso_local i32 @__cc_srem_i32_i32(i32, i32) local_unnamed_addr #18 {
  %3 = icmp slt i32 %0, 0
  %4 = sub nsw i32 0, %0
  %5 = select i1 %3, i32 %4, i32 %0
  %6 = select i1 %3, i32 -1, i32 1
  %7 = icmp slt i32 %1, 0
  %8 = sub nsw i32 0, %1
  %9 = sub nsw i32 0, %6
  %10 = select i1 %7, i32 %8, i32 %1
  %11 = select i1 %7, i32 %9, i32 %6
  %12 = urem i32 %5, %10
  %13 = mul nsw i32 %12, %11
  ret i32 %13
}

; Function Attrs: norecurse nounwind optsize readnone uwtable
define dso_local i64 @__cc_sdiv_i64_i64(i64, i64) local_unnamed_addr #18 {
  %3 = icmp slt i64 %0, 0
  %4 = sub nsw i64 0, %0
  %5 = select i1 %3, i64 %4, i64 %0
  %6 = select i1 %3, i64 -1, i64 1
  %7 = icmp slt i64 %1, 0
  %8 = sub nsw i64 0, %1
  %9 = sub nsw i64 0, %6
  %10 = select i1 %7, i64 %8, i64 %1
  %11 = select i1 %7, i64 %9, i64 %6
  %12 = udiv i64 %5, %10
  %13 = mul nsw i64 %12, %11
  ret i64 %13
}

; Function Attrs: norecurse nounwind optsize readnone uwtable
define dso_local i64 @__cc_srem_i64_i64(i64, i64) local_unnamed_addr #18 {
  %3 = icmp slt i64 %0, 0
  %4 = sub nsw i64 0, %0
  %5 = select i1 %3, i64 %4, i64 %0
  %6 = select i1 %3, i64 -1, i64 1
  %7 = icmp slt i64 %1, 0
  %8 = sub nsw i64 0, %1
  %9 = sub nsw i64 0, %6
  %10 = select i1 %7, i64 %8, i64 %1
  %11 = select i1 %7, i64 %9, i64 %6
  %12 = urem i64 %5, %10
  %13 = mul nsw i64 %12, %11
  ret i64 %13
}

attributes #0 = {  norecurse nounwind optsize uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optsize uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind optsize uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn nounwind optsize uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind optsize uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { norecurse nounwind optsize readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = {  nounwind optsize uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noinline norecurse nounwind optsize readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = {  noinline norecurse nounwind optsize uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = {  norecurse nounwind optsize uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = {  norecurse nounwind optsize uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { norecurse nounwind optsize readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = {  norecurse nounwind optsize uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { norecurse nounwind optsize readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { noreturn }
attributes #20 = { nounwind optsize }
attributes #21 = { noreturn nounwind optsize }
attributes #22 = { optsize }
attributes #23 = { nounwind readnone }

!llvm.ident = !{}
!llvm.module.flags = !{!1, !2, !3, !4, !5}

!0 = !{!"clang version 9.0.1-16 "}
!1 = !{i32 2, !"Dwarf Version", i32 4}
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"ThinLTO", i32 0}
!5 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!11, !15, i64 56}
!11 = !{!"__file_posix", !12, i64 0, !15, i64 40, !7, i64 48, !15, i64 56, !7, i64 64, !15, i64 72, !15, i64 76}
!12 = !{!"__file_close", !13, i64 0, !7, i64 32}
!13 = !{!"__file", !14, i64 0, !8, i64 2, !7, i64 8, !7, i64 16, !7, i64 24}
!14 = !{!"short", !8, i64 0}
!15 = !{!"int", !8, i64 0}
!16 = !{!17, !18, i64 0}
!17 = !{!"AVPacket", !18, i64 0, !18, i64 8, !7, i64 16, !15, i64 24, !15, i64 28, !15, i64 32, !7, i64 40, !15, i64 48, !15, i64 52, !7, i64 56, !7, i64 64, !18, i64 72, !18, i64 80}
!18 = !{!"long", !8, i64 0}
!19 = !{!17, !18, i64 8}
!20 = !{!17, !18, i64 72}
!21 = !{!17, !18, i64 80}
!22 = !{!17, !15, i64 32}
!23 = !{!17, !15, i64 28}
!24 = !{!17, !7, i64 16}
!25 = !{!17, !15, i64 24}
!26 = !{!17, !7, i64 56}
!27 = !{i64 0, i64 8, !28, i64 8, i64 8, !28, i64 16, i64 8, !6, i64 24, i64 4, !29, i64 28, i64 4, !29, i64 32, i64 4, !29, i64 40, i64 8, !6, i64 48, i64 4, !29, i64 52, i64 4, !29, i64 56, i64 8, !6, i64 64, i64 8, !6, i64 72, i64 8, !28, i64 80, i64 8, !28}
!28 = !{!18, !18, i64 0}
!29 = !{!15, !15, i64 0}
!30 = !{!31, !7, i64 16}
!31 = !{!"AVCodecContext", !7, i64 0, !15, i64 8, !8, i64 12, !7, i64 16, !8, i64 24, !8, i64 56, !15, i64 60, !15, i64 64, !15, i64 68, !7, i64 72, !7, i64 80, !7, i64 88, !15, i64 96, !15, i64 100, !15, i64 104, !15, i64 108, !15, i64 112, !15, i64 116, !7, i64 120, !15, i64 128, !32, i64 132, !15, i64 140, !15, i64 144, !15, i64 148, !15, i64 152, !15, i64 156, !15, i64 160, !15, i64 164, !8, i64 168, !15, i64 172, !7, i64 176, !7, i64 184, !15, i64 192, !33, i64 196, !15, i64 200, !15, i64 204, !15, i64 208, !15, i64 212, !33, i64 216, !15, i64 220, !15, i64 224, !33, i64 228, !33, i64 232, !33, i64 236, !33, i64 240, !33, i64 244, !33, i64 248, !33, i64 252, !15, i64 256, !15, i64 260, !7, i64 264, !32, i64 272, !15, i64 280, !15, i64 284, !15, i64 288, !15, i64 292, !15, i64 296, !15, i64 300, !15, i64 304, !15, i64 308, !15, i64 312, !15, i64 316, !15, i64 320, !15, i64 324, !15, i64 328, !15, i64 332, !15, i64 336, !15, i64 340, !15, i64 344, !15, i64 348, !7, i64 352, !7, i64 360, !15, i64 368, !15, i64 372, !15, i64 376, !15, i64 380, !15, i64 384, !15, i64 388, !15, i64 392, !15, i64 396, !15, i64 400, !33, i64 404, !15, i64 408, !15, i64 412, !15, i64 416, !15, i64 420, !15, i64 424, !15, i64 428, !15, i64 432, !15, i64 436, !15, i64 440, !15, i64 444, !15, i64 448, !8, i64 452, !8, i64 456, !8, i64 460, !8, i64 464, !8, i64 468, !15, i64 472, !8, i64 476, !15, i64 480, !15, i64 484, !8, i64 488, !15, i64 492, !15, i64 496, !15, i64 500, !15, i64 504, !15, i64 508, !18, i64 512, !18, i64 520, !8, i64 528, !8, i64 532, !7, i64 536, !7, i64 544, !7, i64 552, !33, i64 560, !33, i64 564, !15, i64 568, !15, i64 572, !15, i64 576, !33, i64 580, !33, i64 584, !15, i64 588, !15, i64 592, !15, i64 596, !7, i64 600, !7, i64 608, !15, i64 616, !15, i64 620, !33, i64 624, !33, i64 628, !33, i64 632, !33, i64 636, !15, i64 640, !15, i64 644, !15, i64 648, !15, i64 652, !15, i64 656, !15, i64 660, !15, i64 664, !15, i64 668, !15, i64 672, !15, i64 676, !15, i64 680, !15, i64 684, !18, i64 688, !7, i64 696, !15, i64 704, !15, i64 708, !15, i64 712, !15, i64 716, !15, i64 720, !15, i64 724, !15, i64 728, !15, i64 732, !15, i64 736, !15, i64 740, !7, i64 744, !7, i64 752, !15, i64 760, !15, i64 764, !15, i64 768, !15, i64 772, !15, i64 776, !15, i64 780, !18, i64 784, !7, i64 792, !7, i64 800, !8, i64 808, !15, i64 872, !15, i64 876, !15, i64 880, !15, i64 884, !15, i64 888, !15, i64 892, !7, i64 896, !15, i64 904, !15, i64 908, !15, i64 912, !15, i64 916, !7, i64 920, !7, i64 928, !7, i64 936, !15, i64 944, !15, i64 948, !15, i64 952, !8, i64 956, !8, i64 960, !8, i64 964, !7, i64 968, !15, i64 976, !15, i64 980, !7, i64 984, !18, i64 992, !32, i64 1000, !7, i64 1008, !18, i64 1016, !18, i64 1024, !18, i64 1032, !18, i64 1040, !7, i64 1048}
!32 = !{!"AVRational", !15, i64 0, !15, i64 4}
!33 = !{!"float", !8, i64 0}
!34 = !{!35, !8, i64 16}
!35 = !{!"AVCodec", !7, i64 0, !7, i64 8, !8, i64 16, !8, i64 20, !15, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !8, i64 72, !7, i64 80, !7, i64 88, !15, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184}
!36 = !{!31, !15, i64 156}
!37 = !{!31, !15, i64 160}
!38 = !{!39, !18, i64 464}
!39 = !{!"AVFrame", !8, i64 0, !8, i64 64, !7, i64 96, !15, i64 104, !15, i64 108, !15, i64 112, !15, i64 116, !15, i64 120, !8, i64 124, !8, i64 128, !32, i64 192, !18, i64 200, !18, i64 208, !18, i64 216, !15, i64 224, !15, i64 228, !15, i64 232, !15, i64 236, !7, i64 240, !15, i64 248, !15, i64 252, !7, i64 256, !8, i64 264, !7, i64 280, !7, i64 288, !8, i64 296, !7, i64 312, !8, i64 320, !15, i64 384, !15, i64 388, !15, i64 392, !15, i64 396, !15, i64 400, !15, i64 404, !7, i64 408, !18, i64 416, !7, i64 424, !7, i64 432, !7, i64 440, !8, i64 448, !15, i64 452, !18, i64 456, !18, i64 464, !18, i64 472, !18, i64 480, !7, i64 488, !15, i64 496, !18, i64 504, !15, i64 512}
!40 = !{!39, !18, i64 208}
!41 = !{!39, !18, i64 216}
!42 = !{!39, !18, i64 200}
!43 = !{!39, !18, i64 480}
!44 = !{!39, !18, i64 472}
!45 = !{!39, !15, i64 512}
!46 = !{!39, !15, i64 120}
!47 = !{!39, !15, i64 116}
!48 = !{!39, !7, i64 96}
!49 = !{!35, !15, i64 24}
!50 = !{!31, !15, i64 912}
!51 = !{!17, !15, i64 48}
!52 = !{!17, !7, i64 40}
!53 = !{!54, !8, i64 12}
!54 = !{!"", !7, i64 0, !15, i64 8, !8, i64 12}
!55 = !{!54, !15, i64 8}
!56 = !{!54, !7, i64 0}
!57 = !{!8, !8, i64 0}
!58 = !{!31, !15, i64 484}
!59 = !{!31, !18, i64 512}
!60 = !{!31, !15, i64 480}
!61 = !{!31, !15, i64 148}
!62 = !{!31, !15, i64 892}
!63 = !{!31, !15, i64 152}
!64 = !{!31, !7, i64 984}
!65 = !{!35, !7, i64 168}
!66 = !{!31, !15, i64 220}
!67 = !{!39, !15, i64 192}
!68 = !{!39, !15, i64 104}
!69 = !{!39, !15, i64 108}
!70 = !{!31, !8, i64 168}
!71 = !{!72, !15, i64 0}
!72 = !{!"AVDictionary", !15, i64 0, !7, i64 8}
!73 = !{!72, !7, i64 8}
!74 = !{!75, !7, i64 0}
!75 = !{!"AVDictionaryEntry", !7, i64 0, !7, i64 8}
!76 = !{!75, !7, i64 8}
!77 = !{i64 0, i64 8, !6, i64 8, i64 8, !6}
!78 = !{!39, !7, i64 488}
!79 = !{!31, !7, i64 1048}
!80 = !{!31, !15, i64 496}
!81 = !{!31, !18, i64 1040}
!82 = !{!31, !18, i64 1024}
!83 = !{!31, !18, i64 1016}
!84 = !{!31, !18, i64 1032}
!85 = !{!86, !7, i64 0}
!86 = !{!"_on_exit", !7, i64 0, !7, i64 8}
!87 = !{!86, !7, i64 8}
!88 = !{!89, !15, i64 24}
!89 = !{!"AVClass", !7, i64 0, !7, i64 8, !7, i64 16, !15, i64 24, !15, i64 28, !15, i64 32, !7, i64 40, !7, i64 48, !8, i64 56, !7, i64 64, !7, i64 72}
!90 = !{!89, !15, i64 28}
!91 = !{!89, !15, i64 32}
!92 = !{!89, !7, i64 8}
!93 = !{!13, !14, i64 0}
!94 = !{!13, !8, i64 2}
!95 = !{!13, !7, i64 8}
!96 = !{!97, !7, i64 32}
!97 = !{!"__file_str", !13, i64 0, !7, i64 32, !15, i64 40, !15, i64 44}
!98 = !{!97, !15, i64 40}
!99 = !{!97, !15, i64 44}
!100 = !{!101, !7, i64 0}
!101 = !{!"ImgUtils", !7, i64 0, !15, i64 8, !7, i64 16}
!102 = !{!101, !15, i64 8}
!103 = !{!101, !7, i64 16}
!104 = !{!89, !7, i64 0}
!105 = !{!89, !8, i64 56}
!106 = !{!89, !7, i64 64}
!107 = !{!108, !108, i64 0}
!108 = !{!"double", !8, i64 0}
!109 = !{!110, !8, i64 4}
!110 = !{!"dtoa", !15, i64 0, !8, i64 4, !8, i64 5}
!111 = !{!110, !15, i64 0}
!112 = !{!113, !8, i64 11}
!113 = !{!"AVPixFmtDescriptor", !7, i64 0, !8, i64 8, !8, i64 9, !8, i64 10, !8, i64 11, !8, i64 12}
!114 = !{!39, !15, i64 384}
!115 = !{!31, !8, i64 12}
!116 = !{!31, !7, i64 80}
!117 = !{!118, !15, i64 0}
!118 = !{!"AVCodecInternal", !15, i64 0, !7, i64 8, !15, i64 16, !15, i64 20, !15, i64 24, !7, i64 32, !7, i64 40, !15, i64 48, !7, i64 56, !15, i64 64}
!119 = !{!118, !7, i64 8}
!120 = !{!121, !15, i64 160}
!121 = !{!"InternalBuffer", !8, i64 0, !8, i64 64, !8, i64 128, !15, i64 160, !15, i64 164, !8, i64 168}
!122 = !{!121, !15, i64 164}
!123 = !{!121, !8, i64 168}
!124 = !{!113, !8, i64 9}
!125 = !{!113, !8, i64 10}
!126 = !{!31, !8, i64 56}
!127 = !{!31, !15, i64 112}
!128 = !{!31, !15, i64 772}
!129 = !{!39, !15, i64 112}
!130 = !{!31, !8, i64 488}
!131 = !{!132, !15, i64 12}
!132 = !{!"SampleFmtInfo", !8, i64 0, !15, i64 8, !15, i64 12, !8, i64 16}
!133 = !{!118, !7, i64 32}
!134 = !{i64 0, i64 64, !57, i64 64, i64 64, !57, i64 128, i64 32, !57, i64 160, i64 4, !29, i64 164, i64 4, !29, i64 168, i64 4, !57}
!135 = !{!113, !7, i64 0}
!136 = !{!31, !7, i64 544}
!137 = !{!39, !15, i64 404}
!138 = !{!31, !7, i64 536}
!139 = !{i64 0, i64 64, !57, i64 64, i64 32, !57, i64 96, i64 8, !6, i64 104, i64 4, !29, i64 108, i64 4, !29, i64 112, i64 4, !29, i64 116, i64 4, !29, i64 120, i64 4, !29, i64 124, i64 4, !57, i64 128, i64 64, !57, i64 192, i64 4, !29, i64 196, i64 4, !29, i64 200, i64 8, !28, i64 208, i64 8, !28, i64 216, i64 8, !28, i64 224, i64 4, !29, i64 228, i64 4, !29, i64 232, i64 4, !29, i64 236, i64 4, !29, i64 240, i64 8, !6, i64 248, i64 4, !29, i64 252, i64 4, !29, i64 256, i64 8, !6, i64 264, i64 16, !57, i64 280, i64 8, !6, i64 288, i64 8, !6, i64 296, i64 16, !57, i64 312, i64 8, !6, i64 320, i64 64, !57, i64 384, i64 4, !29, i64 388, i64 4, !29, i64 392, i64 4, !29, i64 396, i64 4, !29, i64 400, i64 4, !29, i64 404, i64 4, !29, i64 408, i64 8, !6, i64 416, i64 8, !28, i64 424, i64 8, !6, i64 432, i64 8, !6, i64 440, i64 8, !6, i64 448, i64 1, !57, i64 452, i64 4, !29, i64 456, i64 8, !28, i64 464, i64 8, !28, i64 472, i64 8, !28, i64 480, i64 8, !28, i64 488, i64 8, !6, i64 496, i64 4, !29, i64 504, i64 8, !28, i64 512, i64 4, !29}
!140 = !{!39, !7, i64 312}
!141 = !{!113, !8, i64 8}
!142 = !{!17, !15, i64 52}
!143 = !{!31, !18, i64 784}
!144 = !{!39, !18, i64 416}
!145 = !{!39, !15, i64 452}
!146 = !{!39, !18, i64 456}
!147 = !{!39, !18, i64 504}
!148 = !{!132, !15, i64 8}
!149 = !{!35, !7, i64 0}
!150 = !{!35, !7, i64 80}
!151 = !{!31, !7, i64 72}
!152 = !{!153, !7, i64 2696}
!153 = !{!"GifState", !7, i64 0, !39, i64 8, !15, i64 528, !15, i64 532, !15, i64 536, !15, i64 540, !15, i64 544, !15, i64 548, !15, i64 552, !15, i64 556, !7, i64 560, !15, i64 568, !15, i64 572, !15, i64 576, !15, i64 580, !15, i64 584, !15, i64 588, !15, i64 592, !7, i64 600, !15, i64 608, !15, i64 612, !154, i64 616, !7, i64 640, !8, i64 648, !8, i64 1672, !7, i64 2696, !15, i64 2704, !15, i64 2708, !15, i64 2712}
!154 = !{!"GetByteContext", !7, i64 0, !7, i64 8, !7, i64 16}
!155 = !{!31, !7, i64 896}
!156 = !{!154, !7, i64 0}
!157 = !{!154, !7, i64 16}
!158 = !{!154, !7, i64 8}
!159 = !{!153, !18, i64 208}
!160 = !{!153, !18, i64 216}
!161 = !{!153, !18, i64 224}
!162 = !{!153, !18, i64 488}
!163 = !{!153, !15, i64 2704}
!164 = !{!153, !15, i64 2708}
!165 = !{!153, !15, i64 552}
!166 = !{!153, !15, i64 528}
!167 = !{!153, !15, i64 532}
!168 = !{!153, !7, i64 560}
!169 = !{!153, !15, i64 556}
!170 = !{!153, !15, i64 536}
!171 = !{!153, !15, i64 540}
!172 = !{!31, !15, i64 272}
!173 = !{!31, !15, i64 276}
!174 = !{!153, !15, i64 548}
!175 = !{!153, !15, i64 544}
!176 = !{!153, !8, i64 132}
!177 = !{!153, !15, i64 128}
!178 = !{!31, !7, i64 552}
!179 = !{!153, !15, i64 2712}
!180 = !{!153, !15, i64 572}
!181 = !{!153, !15, i64 612}
!182 = !{!153, !15, i64 584}
!183 = !{!153, !15, i64 588}
!184 = !{!153, !15, i64 592}
!185 = !{!153, !15, i64 580}
!186 = !{!153, !7, i64 600}
!187 = !{!153, !15, i64 576}
!188 = !{!153, !15, i64 116}
!189 = !{!153, !7, i64 640}
!190 = !{!191, !7, i64 0}
!191 = !{!"LZWState", !7, i64 0, !7, i64 8, !15, i64 16, !15, i64 20, !15, i64 24, !15, i64 28, !15, i64 32, !15, i64 36, !15, i64 40, !15, i64 44, !15, i64 48, !15, i64 52, !15, i64 56, !15, i64 60, !15, i64 64, !15, i64 68, !7, i64 72, !8, i64 80, !8, i64 4176, !8, i64 8272, !15, i64 16464}
!192 = !{!191, !7, i64 8}
!193 = !{!191, !15, i64 20}
!194 = !{!191, !15, i64 16}
!195 = !{!191, !15, i64 16464}
!196 = !{!191, !15, i64 36}
!197 = !{!191, !15, i64 28}
!198 = !{!14, !14, i64 0}
!199 = !{!191, !15, i64 32}
!200 = !{!191, !15, i64 52}
!201 = !{!191, !15, i64 40}
!202 = !{!191, !15, i64 44}
!203 = !{!191, !15, i64 48}
!204 = !{!191, !15, i64 60}
!205 = !{!191, !15, i64 64}
!206 = !{!191, !15, i64 68}
!207 = !{!191, !7, i64 72}
!208 = !{!191, !15, i64 24}
!209 = !{!191, !15, i64 56}
