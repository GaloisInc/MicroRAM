; ModuleID = 'driver-opt.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32 }
%struct.AVCodec.134 = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i32, %struct.AVCodec.134*, i32 (%struct.AVCodecContext.129*)*, i32 (%struct.AVCodecContext.129*, %struct.AVCodecContext.129*)*, %struct.AVCodecDefault*, void (%struct.AVCodec.134*)*, i32 (%struct.AVCodecContext.129*)*, i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)*, i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.129*)*, void (%struct.AVCodecContext.129*)* }
%struct.AVRational = type { i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon, double, double, i32, i8* }
%union.anon = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecContext.129 = type { %struct.AVClass*, i32, i32, %struct.AVCodec.134*, [32 x i8], i32, i32, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext.129*, %struct.AVFrame.123*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext.129*, i32*)*, i32, float, i32, i32, i32, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, float, float, i32, i32, i32, float, float, i32, i32, i32, %struct.RcOverride*, i8*, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext.129*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel.125*, i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVFrame.123*, i32, i32, i32, i32, i32 (%struct.AVCodecContext.129*, i32 (%struct.AVCodecContext.129*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext.129*, i32 (%struct.AVCodecContext.129*, i8*, i32, i32)*, i8*, i32*, i32)*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVPacket*, i64, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, %struct.AVDictionary* }
%struct.AVCodecInternal = type { i32, %struct.InternalBuffer*, i32, i32, i32, i8*, i8*, i32, i8*, i32 }
%struct.InternalBuffer = type { [8 x i8*], [8 x i8*], [8 x i32], i32, i32, i32 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel.125 = type { i8*, i32, i32, i32, i32, %struct.AVHWAccel.125*, i32 (%struct.AVCodecContext.129*, i8*, i32)*, i32 (%struct.AVCodecContext.129*, i8*, i32)*, {}*, i32 }
%struct.AVFrame.123 = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, [8 x i8*], %struct.AVRational, i64, i64, i64, i32, i32, i32, i32, i8*, i32, i32, i8*, [2 x [2 x i16]*], i32*, i16*, [2 x i8*], i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVPanScan*, i64, i8*, %struct.AVCodecContext.129*, i8*, i8, i32, i64, i64, i64, i64, %struct.AVDictionary*, i32, i64, i32 }
%struct.AVPanScan = type { i32, i32, i32, [3 x [2 x i16]] }
%struct.AVPacket = type { i64, i64, i8*, i32, i32, i32, %struct.anon*, i32, i32, void (%struct.AVPacket*)*, i8*, i64, i64 }
%struct.anon = type { i8*, i32, i32 }
%struct.AVDictionary = type { i32, %struct.AVCodecDefault* }
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVClass.334 = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, {}*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }
%struct.URLProtocol = type { i8*, i32 (%struct.URLContext*, i8*, i32)*, i32 (%struct.URLContext*, i8*, i32, %struct.AVDictionary**)*, i32 (%struct.URLContext*, i8*, i32)*, i32 (%struct.URLContext*, i8*, i32)*, i64 (%struct.URLContext*, i64, i32)*, i32 (%struct.URLContext*)*, %struct.URLProtocol*, i32 (%struct.URLContext*, i32)*, i64 (%struct.URLContext*, i32, i64, i32)*, i32 (%struct.URLContext*)*, i32 (%struct.URLContext*, i32**, i32*)*, i32 (%struct.URLContext*, i32)*, i32, %struct.AVClass*, i32, i32 (%struct.URLContext*, i32)* }
%struct.URLContext = type { %struct.AVClass*, %struct.URLProtocol*, i8*, i8*, i32, i32, i32, i32, %struct.AVIOInterruptCB, i64 }
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.URLContext.358 = type { %struct.AVClass*, %struct.URLProtocol.356*, i8*, i8*, i32, i32, i32, i32, %struct.AVIOInterruptCB, i64 }
%struct.URLProtocol.356 = type { i8*, {}*, i32 (%struct.URLContext.358*, i8*, i32, %struct.AVDictionary**)*, i32 (%struct.URLContext.358*, i8*, i32)*, i32 (%struct.URLContext.358*, i8*, i32)*, i64 (%struct.URLContext.358*, i64, i32)*, i32 (%struct.URLContext.358*)*, %struct.URLProtocol.356*, i32 (%struct.URLContext.358*, i32)*, i64 (%struct.URLContext.358*, i32, i64, i32)*, i32 (%struct.URLContext.358*)*, i32 (%struct.URLContext.358*, i32**, i32*)*, i32 (%struct.URLContext.358*, i32)*, i32, %struct.AVClass*, i32, i32 (%struct.URLContext.358*, i32)* }
%struct.AVInputFormat.397 = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVInputFormat.397*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext.396*)*, i32 (%struct.AVFormatContext.396*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext.396*)*, i32 (%struct.AVFormatContext.396*, i32, i64, i32)*, i64 (%struct.AVFormatContext.396*, i32, i64*, i64)*, i32 (%struct.AVFormatContext.396*)*, i32 (%struct.AVFormatContext.396*)*, i32 (%struct.AVFormatContext.396*, i32, i64, i64, i64, i32)* }
%struct.AVCodecTag = type { i32, i32 }
%struct.AVProbeData = type { i8*, i8*, i32 }
%struct.AVFormatContext.396 = type { %struct.AVClass*, %struct.AVInputFormat.397*, %struct.AVOutputFormat.369*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32 }
%struct.AVOutputFormat.369 = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat.369*, i32, {}*, i32 (%struct.AVFormatContext.396*, %struct.AVPacket*)*, {}*, i32 (%struct.AVFormatContext.396*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext.396*, i32, i64*, i64*)* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, %struct.AVRational, i8*, %struct.AVFrac, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.anon.0*, i32, i64, i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, %struct.AVCodecParserContext*, %struct.AVPacketList*, %struct.AVProbeData, [17 x i64], %struct.AVIndexEntry*, i32, i32, i32, i32, i32, i32, i64, i64, i32 }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, [32 x i8], i32, i32, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, i32, i32, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, float, float, i32, i32, i32, float, float, i32, i32, i32, %struct.RcOverride*, i8*, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVPacket*, i64, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, %struct.AVDictionary* }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, void (%struct.AVCodecContext*)* }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, %struct.AVHWAccel*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32 }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, [8 x i8*], %struct.AVRational, i64, i64, i64, i32, i32, i32, i32, i8*, i32, i32, i8*, [2 x [2 x i16]*], i32*, i16*, [2 x i8*], i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVPanScan*, i64, i8*, %struct.AVCodecContext*, i8*, i8, i32, i64, i64, i64, i64, %struct.AVDictionary*, i32, i64, i32 }
%struct.AVFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, [2 x [2 x [726 x double]]], i64, i64, i32, i64, i32, i64, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.CodecMime = type { [32 x i8], i32 }
%struct.ID3v2EMFunc = type { i8*, i8*, void (%struct.AVFormatContext*, %struct.AVIOContext*, i32, i8*, %struct.ID3v2ExtraMeta**)*, void (i8*)* }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32 }
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)* }
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)* }
%struct.ID3v2ExtraMeta = type { i8*, i8*, %struct.ID3v2ExtraMeta* }
%struct.AVOutputFormat.580 = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag.545**, %struct.AVClass*, %struct.AVOutputFormat.580*, i32, i32 (%struct.AVFormatContext.579*)*, i32 (%struct.AVFormatContext.579*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext.579*)*, i32 (%struct.AVFormatContext.579*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext.579*, i32, i64*, i64*)* }
%struct.AVCodecTag.545 = type opaque
%struct.AVFormatContext.579 = type { %struct.AVClass*, %struct.AVInputFormat.552*, %struct.AVOutputFormat.580*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32 }
%struct.AVInputFormat.552 = type { i8*, i8*, i32, i8*, %struct.AVCodecTag.545**, %struct.AVClass*, %struct.AVInputFormat.552*, i32, i32, i32 (%struct.AVProbeData*)*, {}*, i32 (%struct.AVFormatContext.579*, %struct.AVPacket*)*, {}*, i32 (%struct.AVFormatContext.579*, i32, i64, i32)*, i64 (%struct.AVFormatContext.579*, i32, i64*, i64)*, {}*, {}*, i32 (%struct.AVFormatContext.579*, i32, i64, i64, i64, i32)* }
%struct.AVInputFormat.329 = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVInputFormat.329*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext.328*)*, i32 (%struct.AVFormatContext.328*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext.328*)*, i32 (%struct.AVFormatContext.328*, i32, i64, i32)*, i64 (%struct.AVFormatContext.328*, i32, i64*, i64)*, i32 (%struct.AVFormatContext.328*)*, i32 (%struct.AVFormatContext.328*)*, i32 (%struct.AVFormatContext.328*, i32, i64, i64, i64, i32)* }
%struct.AVFormatContext.328 = type { %struct.AVClass*, %struct.AVInputFormat.329*, %struct.AVOutputFormat.301*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32 }
%struct.AVOutputFormat.301 = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat.301*, i32, {}*, i32 (%struct.AVFormatContext.328*, %struct.AVPacket*)*, {}*, i32 (%struct.AVFormatContext.328*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext.328*, i32, i64*, i64*)* }
%struct.anon.817 = type { i8*, i32, i64 }
%struct.anon.829 = type { i8*, double }
%struct.AVComponentDescriptor = type { i16 }
%struct.AVPixFmtDescriptor = type { i8*, i8, i8, i8, i8, [4 x %struct.AVComponentDescriptor] }
%struct.SampleFmtInfo = type { [8 x i8], i32, i32, i32 }
%struct.buffer = type { i8*, i64, i64 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.AVPacket.21 = type { i64, i64, i8*, i32, i32, i32, %struct.anon*, i32, i32, {}*, i8*, i64, i64 }
%struct.AVCodecContext.202 = type { %struct.AVClass*, i32, i32, %struct.AVCodec.196*, [32 x i8], i32, i32, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext.202*, %struct.AVFrame.195*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext.202*, i32*)*, i32, float, i32, i32, i32, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)*, void (%struct.AVCodecContext.202*, %struct.AVFrame.195*)*, i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)*, float, float, i32, i32, i32, float, float, i32, i32, i32, %struct.RcOverride*, i8*, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext.202*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel.200*, i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVFrame.195*, i32, i32, i32, i32, i32 (%struct.AVCodecContext.202*, i32 (%struct.AVCodecContext.202*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext.202*, i32 (%struct.AVCodecContext.202*, i8*, i32, i32)*, i8*, i32*, i32)*, i8*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.AVPacket*, i64, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, %struct.AVDictionary* }
%struct.AVCodec.196 = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i32, %struct.AVCodec.196*, {}*, i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)*, %struct.AVCodecDefault*, void (%struct.AVCodec.196*)*, {}*, i32 (%struct.AVCodecContext.202*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.202*, %struct.AVPacket*, %struct.AVFrame.195*, i32*)*, i32 (%struct.AVCodecContext.202*, i8*, i32*, %struct.AVPacket*)*, {}*, void (%struct.AVCodecContext.202*)* }
%struct.AVHWAccel.200 = type { i8*, i32, i32, i32, i32, %struct.AVHWAccel.200*, i32 (%struct.AVCodecContext.202*, i8*, i32)*, i32 (%struct.AVCodecContext.202*, i8*, i32)*, {}*, i32 }
%struct.AVFrame.195 = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, [8 x i8*], %struct.AVRational, i64, i64, i64, i32, i32, i32, i32, i8*, i32, i32, i8*, [2 x [2 x i16]*], i32*, i16*, [2 x i8*], i8*, [8 x i64], i32, i32, i32, i32, i32, i32, %struct.AVPanScan*, i64, i8*, %struct.AVCodecContext.202*, i8*, i8, i32, i64, i64, i64, i64, %struct.AVDictionary*, i32, i64, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.pthread_attr_t = type { i64, [48 x i8] }
%struct.Task = type { i8*, i8*, i64, i32 }
%struct.ThreadContext = type { %struct.AVCodecContext*, %union.pthread_mutex_t, %struct.AVFifoBuffer*, %union.pthread_mutex_t, %union.pthread_cond_t, [128 x %struct.Task], %union.pthread_mutex_t, %union.pthread_cond_t, i32, i32, [64 x i64], i32 }
%struct.GifState = type { %struct.AVClass*, %struct.AVFrame.123, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32*, i32, i32, %struct.GetByteContext, i8*, [256 x i32], [256 x i32], %struct.AVCodecContext.129*, i32, i32, i32 }
%struct.GetByteContext = type { i8*, i8*, i8* }
%struct.cpu_set_t = type { [16 x i64] }
%struct.FrameThreadContext = type { %struct.PerThreadContext*, %struct.PerThreadContext*, %union.pthread_mutex_t, i32, i32, i32, i32 }
%struct.PerThreadContext = type { %struct.FrameThreadContext*, i64, i32, %union.pthread_cond_t, %union.pthread_cond_t, %union.pthread_cond_t, %union.pthread_mutex_t, %union.pthread_mutex_t, %struct.AVCodecContext.202*, %struct.AVPacket, i32, %struct.AVFrame.195, i32, i32, i32, [35 x %struct.AVFrame.195], i32, [35 x [2 x i32]], [35 x i8], %struct.AVFrame.195* }
%struct.ThreadContext.211 = type { i64*, i32 (%struct.AVCodecContext.202*, i8*)*, i32 (%struct.AVCodecContext.202*, i8*, i32, i32)*, i8*, i32*, i32, i32, i32, %union.pthread_cond_t, %union.pthread_cond_t, %union.pthread_mutex_t, i32, i32, i32 }
%struct.AVIOContext.335 = type { %struct.AVClass.334*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32 }
%struct.URLContext.339 = type { %struct.AVClass.334*, %struct.URLProtocol.337*, i8*, i8*, i32, i32, i32, i32, %struct.AVIOInterruptCB, i64 }
%struct.URLProtocol.337 = type { i8*, i32 (%struct.URLContext.339*, i8*, i32)*, i32 (%struct.URLContext.339*, i8*, i32, %struct.AVDictionary**)*, i32 (%struct.URLContext.339*, i8*, i32)*, i32 (%struct.URLContext.339*, i8*, i32)*, i64 (%struct.URLContext.339*, i64, i32)*, i32 (%struct.URLContext.339*)*, %struct.URLProtocol.337*, i32 (%struct.URLContext.339*, i32)*, i64 (%struct.URLContext.339*, i32, i64, i32)*, i32 (%struct.URLContext.339*)*, i32 (%struct.URLContext.339*, i32**, i32*)*, i32 (%struct.URLContext.339*, i32)*, i32, %struct.AVClass.334*, i32, i32 (%struct.URLContext.339*, i32)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat.359 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [3 x i64] }
%struct.FileContext = type { %struct.AVClass*, i32, i32 }
%struct.GIFDemuxContext = type { %struct.AVClass*, i32, i32, i32 }
%struct.ID3v2ExtraMetaAPIC = type { i8*, i32, i8*, i8*, i32 }
%struct.AVBPrint = type { i8*, i32, i32, i32, [1 x i8], [1000 x i8] }
%struct.AVExpr = type { i32, double, %union.anon.830, [3 x %struct.AVExpr*], double* }
%union.anon.830 = type { double (double)* }
%struct.Parser = type { %struct.AVClass*, i32, i8*, double*, i8**, double (i8*, double)**, i8**, double (i8*, double, double)**, i8**, i8*, i32, i8*, double* }
%struct.FileLogContext = type { %struct.AVClass*, i32, i8* }

@.str = private unnamed_addr constant [5 x i8] c"stat\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@stderr = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [40 x i8] c"unexpected EOF: expected %d more bytes\0A\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"read %d at %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"seek to %ld, %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"bad arguments to seek: %ld, %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"usage: %s <input file>\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"read %d bytes from %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"io = %p\0A\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"error allocating avformat context\0A\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"format = %p\0A\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"<dummy>\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"error %d opening dummy input\0A\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"error opening codec: %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [23 x i8] c"got packet of size %d\0A\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"error decoding packet: %d\0A\00", align 1
@avcodec_register_all.initialized = internal unnamed_addr global i1 false, align 4
@.str.17 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.2.19 = private unnamed_addr constant [22 x i8] c"libavcodec/avpacket.c\00", align 1
@.str.3.22 = private unnamed_addr constant [25 x i8] c"p-pkt->data == pkt->size\00", align 1
@.str.4.23 = private unnamed_addr constant [42 x i8] c"size<=2147483647 && p - pkt->data >= size\00", align 1
@codec_descriptors = internal constant [358 x %struct.AVCodecDescriptor] [%struct.AVCodecDescriptor { i32 1, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.32, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 2, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.33, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.34, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 3, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4.35, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5.36, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 4, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.37, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.38, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 5, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.39, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.9.40, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 6, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.41, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11.42, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 7, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12.43, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11.42, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 8, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.44, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14.45, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 9, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15.46, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16.47, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 10, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17.48, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 11, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 12, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i32 7 }, %struct.AVCodecDescriptor { i32 13, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24.49, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 14, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 15, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.28, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 16, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.30, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 17, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31.50, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.32, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 18, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.34, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 19, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 20, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.38, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 21, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 22, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.42, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 23, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.44, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 24, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.46, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 25, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.48, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 26, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 27, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 28, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.54, i32 0, i32 0), i32 6 }, %struct.AVCodecDescriptor { i32 29, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 30, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.58, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 31, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 32, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 33, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.64, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 34, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.66, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 35, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.68, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 36, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.70, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 37, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.72, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 38, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.74, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 39, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.76, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 40, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.78, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 41, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.80, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 42, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 43, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.84, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 44, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.86, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 45, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.88, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 46, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.90, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 47, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.92, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 48, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.94, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 49, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.96, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 50, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.98, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 51, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.100, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 52, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.102, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 53, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.104, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 54, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 55, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 56, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.110, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 57, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.112, i32 0, i32 0), i32 6 }, %struct.AVCodecDescriptor { i32 58, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.114, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 59, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.116, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 60, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.118, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 61, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.120, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 62, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.122, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 63, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.124, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 64, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.126, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 65, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.128, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 66, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.130, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 67, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.132, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 68, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.134, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 69, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.136, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 70, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.138, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 71, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.140, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 72, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 73, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.144, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 74, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.146, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 75, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.148, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 76, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.150, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 77, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.152, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 78, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.154, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 79, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.156, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 80, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.158, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 81, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.160, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 82, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.162, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 83, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.164, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 84, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.166, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 85, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.167, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.168, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.170, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 87, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.171, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.172, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 88, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.173, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.174, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 89, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.175, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.176, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 90, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.177, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.178, i32 0, i32 0), i32 7 }, %struct.AVCodecDescriptor { i32 91, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.179, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.180, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 92, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.182, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 93, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.183, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.184, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 94, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.186, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 95, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.188, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 96, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.190, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 97, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.191, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.192, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 98, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.193, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.194, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 99, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.195, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.196, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 100, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.198, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 101, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.199, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.200, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 102, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.201, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.202, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 103, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.203, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.204, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 1397180754, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.205, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.206, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 104, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.207, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.208, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 105, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.209, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.210, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 106, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.211, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.212, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 107, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.213, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.214, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 108, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.215, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.216, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 109, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.217, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.218, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 110, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.220, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 111, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.221, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.222, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 112, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.223, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.224, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 113, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.225, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.226, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 114, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.227, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.228, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 115, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.229, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.230, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 116, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.231, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.232, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 117, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.233, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.234, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 118, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.235, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.236, i32 0, i32 0), i32 6 }, %struct.AVCodecDescriptor { i32 119, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.237, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.238, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 120, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.239, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.240, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 121, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.241, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.242, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 122, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.243, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.244, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 123, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.245, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.246, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 124, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.247, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.248, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 125, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.249, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.250, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 126, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.251, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.252, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 127, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.253, i32 0, i32 0), i8* null, i32 5 }, %struct.AVCodecDescriptor { i32 128, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.254, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.255, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 129, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.256, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.257, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 130, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.258, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.259, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 131, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.260, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.261, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 132, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.262, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.263, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 133, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.264, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.265, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 134, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.266, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.267, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 135, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.268, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.269, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 136, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.270, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.271, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 137, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.272, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.273, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 138, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.274, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.275, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 139, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.276, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.277, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 140, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.278, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.279, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 141, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.280, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.281, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 142, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.282, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.283, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 170, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.284, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.285, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 143, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.286, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.287, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 144, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.288, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.289, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 145, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.290, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.291, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 146, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.292, i32 0, i32 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.293, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 147, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.294, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.295, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 1297498929, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.296, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.297, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 1297498930, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.298, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.299, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 148, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.300, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.301, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 149, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.302, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.303, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 150, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.304, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.305, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 151, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.306, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.307, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 152, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.308, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.309, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 153, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.310, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.311, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 154, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.312, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.313, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 155, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.314, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.315, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 156, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.316, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.317, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 157, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.318, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.319, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 158, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.320, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.321, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 159, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.322, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.323, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 160, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.324, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.325, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 161, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.326, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.327, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 162, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.328, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.329, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 163, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.330, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.331, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 164, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.332, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.333, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 165, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.334, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.335, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 166, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.336, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.337, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 167, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.338, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.339, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 168, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.340, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.341, i32 0, i32 0), i32 5 }, %struct.AVCodecDescriptor { i32 169, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.342, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.343, i32 0, i32 0), i32 3 }, %struct.AVCodecDescriptor { i32 1496592720, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.344, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.345, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 1160852272, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.346, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.347, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 809850962, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.348, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.349, i32 0, i32 0), i32 7 }, %struct.AVCodecDescriptor { i32 1096176208, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.350, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.351, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 808530518, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.352, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.257, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 4665933, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.353, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.354, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1096176969, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.355, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.356, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 1096373590, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.357, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.358, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 1412575542, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.359, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.360, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 1446195256, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.361, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.362, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 1446260792, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.363, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.364, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 1498764852, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.365, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.366, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 1396788813, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.367, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.368, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1346455126, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.369, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.370, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1096176238, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.371, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.372, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1129335105, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.373, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.374, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1480999235, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.375, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.376, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1112557912, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.377, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.378, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 65536, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.379, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.380, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65537, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.381, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.382, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65538, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.383, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.384, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65539, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.385, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.386, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65540, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.387, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.388, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65541, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.389, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.390, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65542, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.391, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.392, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 65543, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.393, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.394, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 65544, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.395, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.396, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65545, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.397, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.398, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65546, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.399, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.400, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65547, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.401, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.402, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65548, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.403, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.404, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65549, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.405, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.406, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65550, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.407, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.408, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65551, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.409, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.410, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65552, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.411, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.412, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65553, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.413, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.414, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1347637264, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.415, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.416, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65554, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.417, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.418, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 407917392, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.419, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.420, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 542135120, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.421, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.422, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65555, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.423, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.424, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65556, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.425, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.426, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65557, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.427, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.428, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65558, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.429, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.430, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65559, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.431, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.432, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65560, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.433, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.434, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65561, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.435, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.436, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 65562, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.437, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.438, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 65563, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.439, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.440, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 69632, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.441, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.442, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69633, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.443, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.444, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69634, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.445, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.446, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69635, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.447, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.448, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69636, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.449, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.450, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69637, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.451, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.452, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69638, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.453, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.454, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69639, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.455, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.456, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69640, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.457, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.458, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69641, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.459, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.460, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69642, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.461, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.462, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69643, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.463, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.464, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69644, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.465, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.466, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69645, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.467, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.468, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69646, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.469, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.470, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69647, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.471, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.472, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69648, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.473, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.474, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69649, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.475, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.476, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69650, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.477, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.478, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69651, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.479, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.480, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69652, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.481, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.482, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69653, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.483, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.484, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69654, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.485, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.486, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69655, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.487, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.488, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69656, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.489, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.490, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69657, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.491, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.492, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69658, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.493, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.494, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69659, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.495, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.496, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69660, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.497, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.498, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 69661, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.499, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.500, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1095123744, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.501, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.502, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1330333984, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.503, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.504, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 73728, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.505, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.506, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 73729, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.507, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.508, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 77824, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.509, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.510, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 77825, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.511, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.512, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 81920, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.513, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.514, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 81921, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.515, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.516, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 81922, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.517, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.518, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 81923, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.519, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.520, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86016, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.521, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.522, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86017, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.523, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.524, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86018, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.525, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.526, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86019, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.527, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.528, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86020, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.529, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.530, i32 0, i32 0), i32 6 }, %struct.AVCodecDescriptor { i32 86021, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.531, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.532, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86022, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.533, i32 0, i32 0), i8* null, i32 2 }, %struct.AVCodecDescriptor { i32 86023, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.534, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.535, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86024, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.536, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.537, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86025, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.538, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.539, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86026, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.540, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.541, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86027, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.542, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.543, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86028, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.544, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.545, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86029, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.546, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.547, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86030, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.548, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.549, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86031, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.550, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.551, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86032, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.552, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.553, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86033, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.554, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.555, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86034, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.556, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.557, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86035, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.558, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.559, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86036, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.560, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.561, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86037, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.562, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.563, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86038, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.564, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.565, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86039, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.566, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.567, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86040, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.568, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.569, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86041, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.570, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.571, i32 0, i32 0), i32 6 }, %struct.AVCodecDescriptor { i32 86042, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.572, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.573, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86043, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.574, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.575, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86044, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.576, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.577, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86045, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.578, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.579, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86046, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.580, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.581, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86047, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.582, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.583, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86048, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.584, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.585, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86049, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.586, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.587, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86050, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.588, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.589, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86051, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.590, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.591, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86052, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.592, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.593, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86053, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.594, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.595, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86054, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.596, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.597, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86055, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.598, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.599, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86056, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.600, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.601, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86057, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.602, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.603, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86058, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.604, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.605, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86059, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.606, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.607, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86060, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.608, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.609, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86061, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.610, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.611, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86062, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.612, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.613, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86063, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.614, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.615, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86064, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.616, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.617, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86065, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.618, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.619, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86066, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.620, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.621, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86067, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.622, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.623, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86068, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.624, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.625, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86069, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.626, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.627, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86070, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.628, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.629, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86071, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.630, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.631, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86072, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.632, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.633, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86073, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.634, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.635, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86074, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.636, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.637, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 86075, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.638, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.639, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86076, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.640, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.641, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1447644481, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.642, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.643, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1179014995, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.644, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.645, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1397706307, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.646, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.647, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1397706316, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.648, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.649, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1346455105, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.650, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.651, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1330664787, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.652, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.653, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 86078, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.654, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.655, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1950507339, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.656, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.657, i32 0, i32 0), i32 4 }, %struct.AVCodecDescriptor { i32 1936029283, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.658, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.659, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 1936944502, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.660, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.661, i32 0, i32 0), i32 2 }, %struct.AVCodecDescriptor { i32 94208, i32 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.662, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.663, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 94209, i32 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.664, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.665, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 94210, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.666, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.667, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 94211, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.668, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.669, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 94212, i32 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.670, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.671, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 94213, i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.672, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.673, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 94214, i32 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.674, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.675, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 94215, i32 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.676, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.677, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 94216, i32 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.678, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.679, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1397909872, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.680, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.681, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1833195076, i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.682, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.683, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1297108018, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.684, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.685, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1664495672, i32 3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.686, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.687, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1246975298, i32 3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.688, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.689, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1349012051, i32 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.690, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.691, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1396788553, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.692, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.693, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1381259348, i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.694, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.695, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1398953521, i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.696, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.697, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1400201814, i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.698, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.699, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1448111218, i32 3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.700, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.701, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1465275476, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.702, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.703, i32 0, i32 0), i32 0 }, %struct.AVCodecDescriptor { i32 1112823892, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.704, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.705, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 1480739150, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.706, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.707, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 4801606, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.708, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.709, i32 0, i32 0), i32 1 }, %struct.AVCodecDescriptor { i32 1263294017, i32 2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.710, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.711, i32 0, i32 0), i32 0 }], align 16
@.str.31 = private unnamed_addr constant [11 x i8] c"mpeg1video\00", align 1
@.str.1.32 = private unnamed_addr constant [13 x i8] c"MPEG-1 video\00", align 1
@.str.2.33 = private unnamed_addr constant [11 x i8] c"mpeg2video\00", align 1
@.str.3.34 = private unnamed_addr constant [13 x i8] c"MPEG-2 video\00", align 1
@.str.4.35 = private unnamed_addr constant [15 x i8] c"mpegvideo_xvmc\00", align 1
@.str.5.36 = private unnamed_addr constant [50 x i8] c"MPEG-1/2 video XvMC (X-Video Motion Compensation)\00", align 1
@.str.6.37 = private unnamed_addr constant [5 x i8] c"h261\00", align 1
@.str.7.38 = private unnamed_addr constant [6 x i8] c"H.261\00", align 1
@.str.8.39 = private unnamed_addr constant [5 x i8] c"h263\00", align 1
@.str.9.40 = private unnamed_addr constant [58 x i8] c"H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version 2\00", align 1
@.str.10.41 = private unnamed_addr constant [5 x i8] c"rv10\00", align 1
@.str.11.42 = private unnamed_addr constant [14 x i8] c"RealVideo 1.0\00", align 1
@.str.12.43 = private unnamed_addr constant [5 x i8] c"rv20\00", align 1
@.str.13.44 = private unnamed_addr constant [6 x i8] c"mjpeg\00", align 1
@.str.14.45 = private unnamed_addr constant [12 x i8] c"Motion JPEG\00", align 1
@.str.15.46 = private unnamed_addr constant [7 x i8] c"mjpegb\00", align 1
@.str.16.47 = private unnamed_addr constant [14 x i8] c"Apple MJPEG-B\00", align 1
@.str.17.48 = private unnamed_addr constant [6 x i8] c"ljpeg\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"Lossless JPEG\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"sp5x\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"Sunplus JPEG (SP5X)\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"jpegls\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"JPEG-LS\00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"mpeg4\00", align 1
@.str.24.49 = private unnamed_addr constant [14 x i8] c"MPEG-4 part 2\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"rawvideo\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"raw video\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"msmpeg4v1\00", align 1
@.str.28 = private unnamed_addr constant [42 x i8] c"MPEG-4 part 2 Microsoft variant version 1\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"msmpeg4v2\00", align 1
@.str.30 = private unnamed_addr constant [42 x i8] c"MPEG-4 part 2 Microsoft variant version 2\00", align 1
@.str.31.50 = private unnamed_addr constant [10 x i8] c"msmpeg4v3\00", align 1
@.str.32 = private unnamed_addr constant [42 x i8] c"MPEG-4 part 2 Microsoft variant version 3\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"wmv1\00", align 1
@.str.34 = private unnamed_addr constant [22 x i8] c"Windows Media Video 7\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c"wmv2\00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c"Windows Media Video 8\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"h263p\00", align 1
@.str.38 = private unnamed_addr constant [38 x i8] c"H.263+ / H.263-1998 / H.263 version 2\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"h263i\00", align 1
@.str.40 = private unnamed_addr constant [12 x i8] c"Intel H.263\00", align 1
@.str.41 = private unnamed_addr constant [5 x i8] c"flv1\00", align 1
@.str.42 = private unnamed_addr constant [52 x i8] c"FLV / Sorenson Spark / Sorenson H.263 (Flash Video)\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"svq1\00", align 1
@.str.44 = private unnamed_addr constant [54 x i8] c"Sorenson Vector Quantizer 1 / Sorenson Video 1 / SVQ1\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"svq3\00", align 1
@.str.46 = private unnamed_addr constant [54 x i8] c"Sorenson Vector Quantizer 3 / Sorenson Video 3 / SVQ3\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"dvvideo\00", align 1
@.str.48 = private unnamed_addr constant [19 x i8] c"DV (Digital Video)\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"huffyuv\00", align 1
@.str.50 = private unnamed_addr constant [8 x i8] c"HuffYUV\00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c"cyuv\00", align 1
@.str.52 = private unnamed_addr constant [20 x i8] c"Creative YUV (CYUV)\00", align 1
@.str.53 = private unnamed_addr constant [5 x i8] c"h264\00", align 1
@.str.54 = private unnamed_addr constant [42 x i8] c"H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10\00", align 1
@.str.55 = private unnamed_addr constant [7 x i8] c"indeo3\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"Intel Indeo 3\00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"vp3\00", align 1
@.str.58 = private unnamed_addr constant [8 x i8] c"On2 VP3\00", align 1
@.str.59 = private unnamed_addr constant [7 x i8] c"theora\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"Theora\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"asv1\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"ASUS V1\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"asv2\00", align 1
@.str.64 = private unnamed_addr constant [8 x i8] c"ASUS V2\00", align 1
@.str.65 = private unnamed_addr constant [5 x i8] c"ffv1\00", align 1
@.str.66 = private unnamed_addr constant [22 x i8] c"FFmpeg video codec #1\00", align 1
@.str.67 = private unnamed_addr constant [4 x i8] c"4xm\00", align 1
@.str.68 = private unnamed_addr constant [9 x i8] c"4X Movie\00", align 1
@.str.69 = private unnamed_addr constant [5 x i8] c"vcr1\00", align 1
@.str.70 = private unnamed_addr constant [9 x i8] c"ATI VCR1\00", align 1
@.str.71 = private unnamed_addr constant [5 x i8] c"cljr\00", align 1
@.str.72 = private unnamed_addr constant [21 x i8] c"Cirrus Logic AccuPak\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"mdec\00", align 1
@.str.74 = private unnamed_addr constant [39 x i8] c"Sony PlayStation MDEC (Motion DECoder)\00", align 1
@.str.75 = private unnamed_addr constant [4 x i8] c"roq\00", align 1
@.str.76 = private unnamed_addr constant [13 x i8] c"id RoQ video\00", align 1
@.str.77 = private unnamed_addr constant [15 x i8] c"interplayvideo\00", align 1
@.str.78 = private unnamed_addr constant [20 x i8] c"Interplay MVE video\00", align 1
@.str.79 = private unnamed_addr constant [8 x i8] c"xan_wc3\00", align 1
@.str.80 = private unnamed_addr constant [25 x i8] c"Wing Commander III / Xan\00", align 1
@.str.81 = private unnamed_addr constant [8 x i8] c"xan_wc4\00", align 1
@.str.82 = private unnamed_addr constant [25 x i8] c"Wing Commander IV / Xxan\00", align 1
@.str.83 = private unnamed_addr constant [5 x i8] c"rpza\00", align 1
@.str.84 = private unnamed_addr constant [23 x i8] c"QuickTime video (RPZA)\00", align 1
@.str.85 = private unnamed_addr constant [8 x i8] c"cinepak\00", align 1
@.str.86 = private unnamed_addr constant [8 x i8] c"Cinepak\00", align 1
@.str.87 = private unnamed_addr constant [7 x i8] c"ws_vqa\00", align 1
@.str.88 = private unnamed_addr constant [56 x i8] c"Westwood Studios VQA (Vector Quantized Animation) video\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"msrle\00", align 1
@.str.90 = private unnamed_addr constant [14 x i8] c"Microsoft RLE\00", align 1
@.str.91 = private unnamed_addr constant [9 x i8] c"msvideo1\00", align 1
@.str.92 = private unnamed_addr constant [18 x i8] c"Microsoft Video 1\00", align 1
@.str.93 = private unnamed_addr constant [6 x i8] c"idcin\00", align 1
@.str.94 = private unnamed_addr constant [22 x i8] c"id Quake II CIN video\00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"8bps\00", align 1
@.str.96 = private unnamed_addr constant [21 x i8] c"QuickTime 8BPS video\00", align 1
@.str.97 = private unnamed_addr constant [4 x i8] c"smc\00", align 1
@.str.98 = private unnamed_addr constant [25 x i8] c"QuickTime Graphics (SMC)\00", align 1
@.str.99 = private unnamed_addr constant [5 x i8] c"flic\00", align 1
@.str.100 = private unnamed_addr constant [29 x i8] c"Autodesk Animator Flic video\00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"truemotion1\00", align 1
@.str.102 = private unnamed_addr constant [20 x i8] c"Duck TrueMotion 1.0\00", align 1
@.str.103 = private unnamed_addr constant [9 x i8] c"vmdvideo\00", align 1
@.str.104 = private unnamed_addr constant [17 x i8] c"Sierra VMD video\00", align 1
@.str.105 = private unnamed_addr constant [5 x i8] c"mszh\00", align 1
@.str.106 = private unnamed_addr constant [34 x i8] c"LCL (LossLess Codec Library) MSZH\00", align 1
@.str.107 = private unnamed_addr constant [5 x i8] c"zlib\00", align 1
@.str.108 = private unnamed_addr constant [34 x i8] c"LCL (LossLess Codec Library) ZLIB\00", align 1
@.str.109 = private unnamed_addr constant [6 x i8] c"qtrle\00", align 1
@.str.110 = private unnamed_addr constant [32 x i8] c"QuickTime Animation (RLE) video\00", align 1
@.str.111 = private unnamed_addr constant [5 x i8] c"snow\00", align 1
@.str.112 = private unnamed_addr constant [5 x i8] c"Snow\00", align 1
@.str.113 = private unnamed_addr constant [5 x i8] c"tscc\00", align 1
@.str.114 = private unnamed_addr constant [31 x i8] c"TechSmith Screen Capture Codec\00", align 1
@.str.115 = private unnamed_addr constant [5 x i8] c"ulti\00", align 1
@.str.116 = private unnamed_addr constant [15 x i8] c"IBM UltiMotion\00", align 1
@.str.117 = private unnamed_addr constant [6 x i8] c"qdraw\00", align 1
@.str.118 = private unnamed_addr constant [16 x i8] c"Apple QuickDraw\00", align 1
@.str.119 = private unnamed_addr constant [5 x i8] c"vixl\00", align 1
@.str.120 = private unnamed_addr constant [13 x i8] c"Miro VideoXL\00", align 1
@.str.121 = private unnamed_addr constant [5 x i8] c"qpeg\00", align 1
@.str.122 = private unnamed_addr constant [12 x i8] c"Q-team QPEG\00", align 1
@.str.123 = private unnamed_addr constant [4 x i8] c"png\00", align 1
@.str.124 = private unnamed_addr constant [38 x i8] c"PNG (Portable Network Graphics) image\00", align 1
@.str.125 = private unnamed_addr constant [4 x i8] c"ppm\00", align 1
@.str.126 = private unnamed_addr constant [30 x i8] c"PPM (Portable PixelMap) image\00", align 1
@.str.127 = private unnamed_addr constant [4 x i8] c"pbm\00", align 1
@.str.128 = private unnamed_addr constant [28 x i8] c"PBM (Portable BitMap) image\00", align 1
@.str.129 = private unnamed_addr constant [4 x i8] c"pgm\00", align 1
@.str.130 = private unnamed_addr constant [29 x i8] c"PGM (Portable GrayMap) image\00", align 1
@.str.131 = private unnamed_addr constant [7 x i8] c"pgmyuv\00", align 1
@.str.132 = private unnamed_addr constant [36 x i8] c"PGMYUV (Portable GrayMap YUV) image\00", align 1
@.str.133 = private unnamed_addr constant [4 x i8] c"pam\00", align 1
@.str.134 = private unnamed_addr constant [28 x i8] c"PAM (Portable AnyMap) image\00", align 1
@.str.135 = private unnamed_addr constant [8 x i8] c"ffvhuff\00", align 1
@.str.136 = private unnamed_addr constant [23 x i8] c"Huffyuv FFmpeg variant\00", align 1
@.str.137 = private unnamed_addr constant [5 x i8] c"rv30\00", align 1
@.str.138 = private unnamed_addr constant [14 x i8] c"RealVideo 3.0\00", align 1
@.str.139 = private unnamed_addr constant [5 x i8] c"rv40\00", align 1
@.str.140 = private unnamed_addr constant [14 x i8] c"RealVideo 4.0\00", align 1
@.str.141 = private unnamed_addr constant [4 x i8] c"vc1\00", align 1
@.str.142 = private unnamed_addr constant [11 x i8] c"SMPTE VC-1\00", align 1
@.str.143 = private unnamed_addr constant [5 x i8] c"wmv3\00", align 1
@.str.144 = private unnamed_addr constant [22 x i8] c"Windows Media Video 9\00", align 1
@.str.145 = private unnamed_addr constant [5 x i8] c"loco\00", align 1
@.str.146 = private unnamed_addr constant [5 x i8] c"LOCO\00", align 1
@.str.147 = private unnamed_addr constant [5 x i8] c"wnv1\00", align 1
@.str.148 = private unnamed_addr constant [12 x i8] c"Winnov WNV1\00", align 1
@.str.149 = private unnamed_addr constant [5 x i8] c"aasc\00", align 1
@.str.150 = private unnamed_addr constant [13 x i8] c"Autodesk RLE\00", align 1
@.str.151 = private unnamed_addr constant [7 x i8] c"indeo2\00", align 1
@.str.152 = private unnamed_addr constant [14 x i8] c"Intel Indeo 2\00", align 1
@.str.153 = private unnamed_addr constant [6 x i8] c"fraps\00", align 1
@.str.154 = private unnamed_addr constant [6 x i8] c"Fraps\00", align 1
@.str.155 = private unnamed_addr constant [12 x i8] c"truemotion2\00", align 1
@.str.156 = private unnamed_addr constant [20 x i8] c"Duck TrueMotion 2.0\00", align 1
@.str.157 = private unnamed_addr constant [4 x i8] c"bmp\00", align 1
@.str.158 = private unnamed_addr constant [30 x i8] c"BMP (Windows and OS/2 bitmap)\00", align 1
@.str.159 = private unnamed_addr constant [5 x i8] c"cscd\00", align 1
@.str.160 = private unnamed_addr constant [10 x i8] c"CamStudio\00", align 1
@.str.161 = private unnamed_addr constant [8 x i8] c"mmvideo\00", align 1
@.str.162 = private unnamed_addr constant [30 x i8] c"American Laser Games MM Video\00", align 1
@.str.163 = private unnamed_addr constant [5 x i8] c"zmbv\00", align 1
@.str.164 = private unnamed_addr constant [24 x i8] c"Zip Motion Blocks Video\00", align 1
@.str.165 = private unnamed_addr constant [4 x i8] c"avs\00", align 1
@.str.166 = private unnamed_addr constant [33 x i8] c"AVS (Audio Video Standard) video\00", align 1
@.str.167 = private unnamed_addr constant [11 x i8] c"smackvideo\00", align 1
@.str.168 = private unnamed_addr constant [14 x i8] c"Smacker video\00", align 1
@.str.169 = private unnamed_addr constant [4 x i8] c"nuv\00", align 1
@.str.170 = private unnamed_addr constant [19 x i8] c"NuppelVideo/RTJPEG\00", align 1
@.str.171 = private unnamed_addr constant [5 x i8] c"kmvc\00", align 1
@.str.172 = private unnamed_addr constant [26 x i8] c"Karl Morton's video codec\00", align 1
@.str.173 = private unnamed_addr constant [8 x i8] c"flashsv\00", align 1
@.str.174 = private unnamed_addr constant [22 x i8] c"Flash Screen Video v1\00", align 1
@.str.175 = private unnamed_addr constant [5 x i8] c"cavs\00", align 1
@.str.176 = private unnamed_addr constant [61 x i8] c"Chinese AVS (Audio Video Standard) (AVS1-P2, JiZhun profile)\00", align 1
@.str.177 = private unnamed_addr constant [9 x i8] c"jpeg2000\00", align 1
@.str.178 = private unnamed_addr constant [10 x i8] c"JPEG 2000\00", align 1
@.str.179 = private unnamed_addr constant [5 x i8] c"vmnc\00", align 1
@.str.180 = private unnamed_addr constant [35 x i8] c"VMware Screen Codec / VMware Video\00", align 1
@.str.181 = private unnamed_addr constant [4 x i8] c"vp5\00", align 1
@.str.182 = private unnamed_addr constant [8 x i8] c"On2 VP5\00", align 1
@.str.183 = private unnamed_addr constant [4 x i8] c"vp6\00", align 1
@.str.184 = private unnamed_addr constant [8 x i8] c"On2 VP6\00", align 1
@.str.185 = private unnamed_addr constant [5 x i8] c"vp6f\00", align 1
@.str.186 = private unnamed_addr constant [24 x i8] c"On2 VP6 (Flash version)\00", align 1
@.str.187 = private unnamed_addr constant [6 x i8] c"targa\00", align 1
@.str.188 = private unnamed_addr constant [23 x i8] c"Truevision Targa image\00", align 1
@.str.189 = private unnamed_addr constant [12 x i8] c"dsicinvideo\00", align 1
@.str.190 = private unnamed_addr constant [42 x i8] c"Delphine Software International CIN video\00", align 1
@.str.191 = private unnamed_addr constant [16 x i8] c"tiertexseqvideo\00", align 1
@.str.192 = private unnamed_addr constant [26 x i8] c"Tiertex Limited SEQ video\00", align 1
@.str.193 = private unnamed_addr constant [5 x i8] c"tiff\00", align 1
@.str.194 = private unnamed_addr constant [11 x i8] c"TIFF image\00", align 1
@.str.195 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str.196 = private unnamed_addr constant [34 x i8] c"GIF (Graphics Interchange Format)\00", align 1
@.str.197 = private unnamed_addr constant [4 x i8] c"dxa\00", align 1
@.str.198 = private unnamed_addr constant [25 x i8] c"Feeble Files/ScummVM DXA\00", align 1
@.str.199 = private unnamed_addr constant [6 x i8] c"dnxhd\00", align 1
@.str.200 = private unnamed_addr constant [10 x i8] c"VC3/DNxHD\00", align 1
@.str.201 = private unnamed_addr constant [4 x i8] c"thp\00", align 1
@.str.202 = private unnamed_addr constant [28 x i8] c"Nintendo Gamecube THP video\00", align 1
@.str.203 = private unnamed_addr constant [4 x i8] c"sgi\00", align 1
@.str.204 = private unnamed_addr constant [10 x i8] c"SGI image\00", align 1
@.str.205 = private unnamed_addr constant [7 x i8] c"sgirle\00", align 1
@.str.206 = private unnamed_addr constant [14 x i8] c"SGI RLE 8-bit\00", align 1
@.str.207 = private unnamed_addr constant [4 x i8] c"c93\00", align 1
@.str.208 = private unnamed_addr constant [14 x i8] c"Interplay C93\00", align 1
@.str.209 = private unnamed_addr constant [12 x i8] c"bethsoftvid\00", align 1
@.str.210 = private unnamed_addr constant [19 x i8] c"Bethesda VID video\00", align 1
@.str.211 = private unnamed_addr constant [4 x i8] c"ptx\00", align 1
@.str.212 = private unnamed_addr constant [18 x i8] c"V.Flash PTX image\00", align 1
@.str.213 = private unnamed_addr constant [4 x i8] c"txd\00", align 1
@.str.214 = private unnamed_addr constant [42 x i8] c"Renderware TXD (TeXture Dictionary) image\00", align 1
@.str.215 = private unnamed_addr constant [5 x i8] c"vp6a\00", align 1
@.str.216 = private unnamed_addr constant [44 x i8] c"On2 VP6 (Flash version, with alpha channel)\00", align 1
@.str.217 = private unnamed_addr constant [4 x i8] c"amv\00", align 1
@.str.218 = private unnamed_addr constant [10 x i8] c"AMV Video\00", align 1
@.str.219 = private unnamed_addr constant [3 x i8] c"vb\00", align 1
@.str.220 = private unnamed_addr constant [17 x i8] c"Beam Software VB\00", align 1
@.str.221 = private unnamed_addr constant [4 x i8] c"pcx\00", align 1
@.str.222 = private unnamed_addr constant [24 x i8] c"PC Paintbrush PCX image\00", align 1
@.str.223 = private unnamed_addr constant [8 x i8] c"sunrast\00", align 1
@.str.224 = private unnamed_addr constant [21 x i8] c"Sun Rasterfile image\00", align 1
@.str.225 = private unnamed_addr constant [7 x i8] c"indeo4\00", align 1
@.str.226 = private unnamed_addr constant [32 x i8] c"Intel Indeo Video Interactive 4\00", align 1
@.str.227 = private unnamed_addr constant [7 x i8] c"indeo5\00", align 1
@.str.228 = private unnamed_addr constant [32 x i8] c"Intel Indeo Video Interactive 5\00", align 1
@.str.229 = private unnamed_addr constant [6 x i8] c"mimic\00", align 1
@.str.230 = private unnamed_addr constant [6 x i8] c"Mimic\00", align 1
@.str.231 = private unnamed_addr constant [4 x i8] c"rl2\00", align 1
@.str.232 = private unnamed_addr constant [10 x i8] c"RL2 video\00", align 1
@.str.233 = private unnamed_addr constant [10 x i8] c"escape124\00", align 1
@.str.234 = private unnamed_addr constant [11 x i8] c"Escape 124\00", align 1
@.str.235 = private unnamed_addr constant [6 x i8] c"dirac\00", align 1
@.str.236 = private unnamed_addr constant [6 x i8] c"Dirac\00", align 1
@.str.237 = private unnamed_addr constant [4 x i8] c"bfi\00", align 1
@.str.238 = private unnamed_addr constant [24 x i8] c"Brute Force & Ignorance\00", align 1
@.str.239 = private unnamed_addr constant [4 x i8] c"cmv\00", align 1
@.str.240 = private unnamed_addr constant [26 x i8] c"Electronic Arts CMV video\00", align 1
@.str.241 = private unnamed_addr constant [13 x i8] c"motionpixels\00", align 1
@.str.242 = private unnamed_addr constant [20 x i8] c"Motion Pixels video\00", align 1
@.str.243 = private unnamed_addr constant [4 x i8] c"tgv\00", align 1
@.str.244 = private unnamed_addr constant [26 x i8] c"Electronic Arts TGV video\00", align 1
@.str.245 = private unnamed_addr constant [4 x i8] c"tgq\00", align 1
@.str.246 = private unnamed_addr constant [26 x i8] c"Electronic Arts TGQ video\00", align 1
@.str.247 = private unnamed_addr constant [4 x i8] c"tqi\00", align 1
@.str.248 = private unnamed_addr constant [26 x i8] c"Electronic Arts TQI video\00", align 1
@.str.249 = private unnamed_addr constant [5 x i8] c"aura\00", align 1
@.str.250 = private unnamed_addr constant [16 x i8] c"Auravision AURA\00", align 1
@.str.251 = private unnamed_addr constant [6 x i8] c"aura2\00", align 1
@.str.252 = private unnamed_addr constant [18 x i8] c"Auravision Aura 2\00", align 1
@.str.253 = private unnamed_addr constant [6 x i8] c"v210x\00", align 1
@.str.254 = private unnamed_addr constant [4 x i8] c"tmv\00", align 1
@.str.255 = private unnamed_addr constant [13 x i8] c"8088flex TMV\00", align 1
@.str.256 = private unnamed_addr constant [5 x i8] c"v210\00", align 1
@.str.257 = private unnamed_addr constant [26 x i8] c"Uncompressed 4:2:2 10-bit\00", align 1
@.str.258 = private unnamed_addr constant [4 x i8] c"dpx\00", align 1
@.str.259 = private unnamed_addr constant [10 x i8] c"DPX image\00", align 1
@.str.260 = private unnamed_addr constant [4 x i8] c"mad\00", align 1
@.str.261 = private unnamed_addr constant [29 x i8] c"Electronic Arts Madcow Video\00", align 1
@.str.262 = private unnamed_addr constant [5 x i8] c"frwu\00", align 1
@.str.263 = private unnamed_addr constant [21 x i8] c"Forward Uncompressed\00", align 1
@.str.264 = private unnamed_addr constant [9 x i8] c"flashsv2\00", align 1
@.str.265 = private unnamed_addr constant [22 x i8] c"Flash Screen Video v2\00", align 1
@.str.266 = private unnamed_addr constant [11 x i8] c"cdgraphics\00", align 1
@.str.267 = private unnamed_addr constant [18 x i8] c"CD Graphics video\00", align 1
@.str.268 = private unnamed_addr constant [5 x i8] c"r210\00", align 1
@.str.269 = private unnamed_addr constant [24 x i8] c"Uncompressed RGB 10-bit\00", align 1
@.str.270 = private unnamed_addr constant [4 x i8] c"anm\00", align 1
@.str.271 = private unnamed_addr constant [23 x i8] c"Deluxe Paint Animation\00", align 1
@.str.272 = private unnamed_addr constant [10 x i8] c"binkvideo\00", align 1
@.str.273 = private unnamed_addr constant [11 x i8] c"Bink video\00", align 1
@.str.274 = private unnamed_addr constant [9 x i8] c"iff_ilbm\00", align 1
@.str.275 = private unnamed_addr constant [9 x i8] c"IFF ILBM\00", align 1
@.str.276 = private unnamed_addr constant [13 x i8] c"iff_byterun1\00", align 1
@.str.277 = private unnamed_addr constant [13 x i8] c"IFF ByteRun1\00", align 1
@.str.278 = private unnamed_addr constant [5 x i8] c"kgv1\00", align 1
@.str.279 = private unnamed_addr constant [16 x i8] c"Kega Game Video\00", align 1
@.str.280 = private unnamed_addr constant [4 x i8] c"yop\00", align 1
@.str.281 = private unnamed_addr constant [20 x i8] c"Psygnosis YOP Video\00", align 1
@.str.282 = private unnamed_addr constant [4 x i8] c"vp8\00", align 1
@.str.283 = private unnamed_addr constant [8 x i8] c"On2 VP8\00", align 1
@.str.284 = private unnamed_addr constant [4 x i8] c"vp9\00", align 1
@.str.285 = private unnamed_addr constant [11 x i8] c"Google VP9\00", align 1
@.str.286 = private unnamed_addr constant [7 x i8] c"pictor\00", align 1
@.str.287 = private unnamed_addr constant [16 x i8] c"Pictor/PC Paint\00", align 1
@.str.288 = private unnamed_addr constant [5 x i8] c"ansi\00", align 1
@.str.289 = private unnamed_addr constant [15 x i8] c"ASCII/ANSI art\00", align 1
@.str.290 = private unnamed_addr constant [10 x i8] c"a64_multi\00", align 1
@.str.291 = private unnamed_addr constant [36 x i8] c"Multicolor charset for Commodore 64\00", align 1
@.str.292 = private unnamed_addr constant [11 x i8] c"a64_multi5\00", align 1
@.str.293 = private unnamed_addr constant [70 x i8] c"Multicolor charset for Commodore 64, extended with 5th color (colram)\00", align 1
@.str.294 = private unnamed_addr constant [5 x i8] c"r10k\00", align 1
@.str.295 = private unnamed_addr constant [26 x i8] c"AJA Kona 10-bit RGB Codec\00", align 1
@.str.296 = private unnamed_addr constant [5 x i8] c"mvc1\00", align 1
@.str.297 = private unnamed_addr constant [43 x i8] c"Silicon Graphics Motion Video Compressor 1\00", align 1
@.str.298 = private unnamed_addr constant [5 x i8] c"mvc2\00", align 1
@.str.299 = private unnamed_addr constant [43 x i8] c"Silicon Graphics Motion Video Compressor 2\00", align 1
@.str.300 = private unnamed_addr constant [6 x i8] c"mxpeg\00", align 1
@.str.301 = private unnamed_addr constant [20 x i8] c"Mobotix MxPEG video\00", align 1
@.str.302 = private unnamed_addr constant [9 x i8] c"lagarith\00", align 1
@.str.303 = private unnamed_addr constant [18 x i8] c"Lagarith lossless\00", align 1
@.str.304 = private unnamed_addr constant [7 x i8] c"prores\00", align 1
@.str.305 = private unnamed_addr constant [26 x i8] c"Apple ProRes (iCodec Pro)\00", align 1
@.str.306 = private unnamed_addr constant [3 x i8] c"jv\00", align 1
@.str.307 = private unnamed_addr constant [25 x i8] c"Bitmap Brothers JV video\00", align 1
@.str.308 = private unnamed_addr constant [4 x i8] c"dfa\00", align 1
@.str.309 = private unnamed_addr constant [17 x i8] c"Chronomaster DFA\00", align 1
@.str.310 = private unnamed_addr constant [10 x i8] c"wmv3image\00", align 1
@.str.311 = private unnamed_addr constant [28 x i8] c"Windows Media Video 9 Image\00", align 1
@.str.312 = private unnamed_addr constant [9 x i8] c"vc1image\00", align 1
@.str.313 = private unnamed_addr constant [31 x i8] c"Windows Media Video 9 Image v2\00", align 1
@.str.314 = private unnamed_addr constant [8 x i8] c"utvideo\00", align 1
@.str.315 = private unnamed_addr constant [9 x i8] c"Ut Video\00", align 1
@.str.316 = private unnamed_addr constant [10 x i8] c"bmv_video\00", align 1
@.str.317 = private unnamed_addr constant [23 x i8] c"Discworld II BMV video\00", align 1
@.str.318 = private unnamed_addr constant [5 x i8] c"vble\00", align 1
@.str.319 = private unnamed_addr constant [20 x i8] c"VBLE Lossless Codec\00", align 1
@.str.320 = private unnamed_addr constant [7 x i8] c"dxtory\00", align 1
@.str.321 = private unnamed_addr constant [7 x i8] c"Dxtory\00", align 1
@.str.322 = private unnamed_addr constant [5 x i8] c"v410\00", align 1
@.str.323 = private unnamed_addr constant [26 x i8] c"Uncompressed 4:4:4 10-bit\00", align 1
@.str.324 = private unnamed_addr constant [4 x i8] c"xwd\00", align 1
@.str.325 = private unnamed_addr constant [26 x i8] c"XWD (X Window Dump) image\00", align 1
@.str.326 = private unnamed_addr constant [5 x i8] c"cdxl\00", align 1
@.str.327 = private unnamed_addr constant [21 x i8] c"Commodore CDXL video\00", align 1
@.str.328 = private unnamed_addr constant [4 x i8] c"xbm\00", align 1
@.str.329 = private unnamed_addr constant [21 x i8] c"XBM (X BitMap) image\00", align 1
@.str.330 = private unnamed_addr constant [10 x i8] c"zerocodec\00", align 1
@.str.331 = private unnamed_addr constant [25 x i8] c"ZeroCodec Lossless Video\00", align 1
@.str.332 = private unnamed_addr constant [5 x i8] c"mss1\00", align 1
@.str.333 = private unnamed_addr constant [12 x i8] c"MS Screen 1\00", align 1
@.str.334 = private unnamed_addr constant [5 x i8] c"msa1\00", align 1
@.str.335 = private unnamed_addr constant [14 x i8] c"MS ATC Screen\00", align 1
@.str.336 = private unnamed_addr constant [6 x i8] c"tscc2\00", align 1
@.str.337 = private unnamed_addr constant [25 x i8] c"TechSmith Screen Codec 2\00", align 1
@.str.338 = private unnamed_addr constant [5 x i8] c"mts2\00", align 1
@.str.339 = private unnamed_addr constant [29 x i8] c"MS Expression Encoder Screen\00", align 1
@.str.340 = private unnamed_addr constant [5 x i8] c"cllc\00", align 1
@.str.341 = private unnamed_addr constant [23 x i8] c"Canopus Lossless Codec\00", align 1
@.str.342 = private unnamed_addr constant [5 x i8] c"mss2\00", align 1
@.str.343 = private unnamed_addr constant [33 x i8] c"MS Windows Media Video V9 Screen\00", align 1
@.str.344 = private unnamed_addr constant [5 x i8] c"y41p\00", align 1
@.str.345 = private unnamed_addr constant [30 x i8] c"Uncompressed YUV 4:1:1 12-bit\00", align 1
@.str.346 = private unnamed_addr constant [10 x i8] c"escape130\00", align 1
@.str.347 = private unnamed_addr constant [11 x i8] c"Escape 130\00", align 1
@.str.348 = private unnamed_addr constant [4 x i8] c"exr\00", align 1
@.str.349 = private unnamed_addr constant [14 x i8] c"OpenEXR image\00", align 1
@.str.350 = private unnamed_addr constant [5 x i8] c"avrp\00", align 1
@.str.351 = private unnamed_addr constant [27 x i8] c"Avid 1:1 10-bit RGB Packer\00", align 1
@.str.352 = private unnamed_addr constant [5 x i8] c"012v\00", align 1
@.str.353 = private unnamed_addr constant [4 x i8] c"g2m\00", align 1
@.str.354 = private unnamed_addr constant [12 x i8] c"GoToMeeting\00", align 1
@.str.355 = private unnamed_addr constant [5 x i8] c"avui\00", align 1
@.str.356 = private unnamed_addr constant [27 x i8] c"Avid Meridien Uncompressed\00", align 1
@.str.357 = private unnamed_addr constant [5 x i8] c"ayuv\00", align 1
@.str.358 = private unnamed_addr constant [31 x i8] c"Uncompressed packed MS 4:4:4:4\00", align 1
@.str.359 = private unnamed_addr constant [11 x i8] c"targa_y216\00", align 1
@.str.360 = private unnamed_addr constant [30 x i8] c"Pinnacle TARGA CineWave YUV16\00", align 1
@.str.361 = private unnamed_addr constant [5 x i8] c"v308\00", align 1
@.str.362 = private unnamed_addr constant [26 x i8] c"Uncompressed packed 4:4:4\00", align 1
@.str.363 = private unnamed_addr constant [5 x i8] c"v408\00", align 1
@.str.364 = private unnamed_addr constant [31 x i8] c"Uncompressed packed QT 4:4:4:4\00", align 1
@.str.365 = private unnamed_addr constant [5 x i8] c"yuv4\00", align 1
@.str.366 = private unnamed_addr constant [26 x i8] c"Uncompressed packed 4:2:0\00", align 1
@.str.367 = private unnamed_addr constant [5 x i8] c"sanm\00", align 1
@.str.368 = private unnamed_addr constant [22 x i8] c"LucasArts SMUSH video\00", align 1
@.str.369 = private unnamed_addr constant [10 x i8] c"paf_video\00", align 1
@.str.370 = private unnamed_addr constant [43 x i8] c"Amazing Studio Packed Animation File Video\00", align 1
@.str.371 = private unnamed_addr constant [5 x i8] c"avrn\00", align 1
@.str.372 = private unnamed_addr constant [15 x i8] c"Avid AVI Codec\00", align 1
@.str.373 = private unnamed_addr constant [5 x i8] c"cpia\00", align 1
@.str.374 = private unnamed_addr constant [18 x i8] c"CPiA video format\00", align 1
@.str.375 = private unnamed_addr constant [6 x i8] c"xface\00", align 1
@.str.376 = private unnamed_addr constant [13 x i8] c"X-face image\00", align 1
@.str.377 = private unnamed_addr constant [12 x i8] c"brender_pix\00", align 1
@.str.378 = private unnamed_addr constant [18 x i8] c"BRender PIX image\00", align 1
@.str.379 = private unnamed_addr constant [10 x i8] c"pcm_s16le\00", align 1
@.str.380 = private unnamed_addr constant [32 x i8] c"PCM signed 16-bit little-endian\00", align 1
@.str.381 = private unnamed_addr constant [10 x i8] c"pcm_s16be\00", align 1
@.str.382 = private unnamed_addr constant [29 x i8] c"PCM signed 16-bit big-endian\00", align 1
@.str.383 = private unnamed_addr constant [10 x i8] c"pcm_u16le\00", align 1
@.str.384 = private unnamed_addr constant [34 x i8] c"PCM unsigned 16-bit little-endian\00", align 1
@.str.385 = private unnamed_addr constant [10 x i8] c"pcm_u16be\00", align 1
@.str.386 = private unnamed_addr constant [31 x i8] c"PCM unsigned 16-bit big-endian\00", align 1
@.str.387 = private unnamed_addr constant [7 x i8] c"pcm_s8\00", align 1
@.str.388 = private unnamed_addr constant [17 x i8] c"PCM signed 8-bit\00", align 1
@.str.389 = private unnamed_addr constant [7 x i8] c"pcm_u8\00", align 1
@.str.390 = private unnamed_addr constant [19 x i8] c"PCM unsigned 8-bit\00", align 1
@.str.391 = private unnamed_addr constant [10 x i8] c"pcm_mulaw\00", align 1
@.str.392 = private unnamed_addr constant [26 x i8] c"PCM mu-law / G.711 mu-law\00", align 1
@.str.393 = private unnamed_addr constant [9 x i8] c"pcm_alaw\00", align 1
@.str.394 = private unnamed_addr constant [24 x i8] c"PCM A-law / G.711 A-law\00", align 1
@.str.395 = private unnamed_addr constant [10 x i8] c"pcm_s32le\00", align 1
@.str.396 = private unnamed_addr constant [32 x i8] c"PCM signed 32-bit little-endian\00", align 1
@.str.397 = private unnamed_addr constant [10 x i8] c"pcm_s32be\00", align 1
@.str.398 = private unnamed_addr constant [29 x i8] c"PCM signed 32-bit big-endian\00", align 1
@.str.399 = private unnamed_addr constant [10 x i8] c"pcm_u32le\00", align 1
@.str.400 = private unnamed_addr constant [34 x i8] c"PCM unsigned 32-bit little-endian\00", align 1
@.str.401 = private unnamed_addr constant [10 x i8] c"pcm_u32be\00", align 1
@.str.402 = private unnamed_addr constant [31 x i8] c"PCM unsigned 32-bit big-endian\00", align 1
@.str.403 = private unnamed_addr constant [10 x i8] c"pcm_s24le\00", align 1
@.str.404 = private unnamed_addr constant [32 x i8] c"PCM signed 24-bit little-endian\00", align 1
@.str.405 = private unnamed_addr constant [10 x i8] c"pcm_s24be\00", align 1
@.str.406 = private unnamed_addr constant [29 x i8] c"PCM signed 24-bit big-endian\00", align 1
@.str.407 = private unnamed_addr constant [10 x i8] c"pcm_u24le\00", align 1
@.str.408 = private unnamed_addr constant [34 x i8] c"PCM unsigned 24-bit little-endian\00", align 1
@.str.409 = private unnamed_addr constant [10 x i8] c"pcm_u24be\00", align 1
@.str.410 = private unnamed_addr constant [31 x i8] c"PCM unsigned 24-bit big-endian\00", align 1
@.str.411 = private unnamed_addr constant [12 x i8] c"pcm_s24daud\00", align 1
@.str.412 = private unnamed_addr constant [33 x i8] c"PCM D-Cinema audio signed 24-bit\00", align 1
@.str.413 = private unnamed_addr constant [9 x i8] c"pcm_zork\00", align 1
@.str.414 = private unnamed_addr constant [9 x i8] c"PCM Zork\00", align 1
@.str.415 = private unnamed_addr constant [17 x i8] c"pcm_s16be_planar\00", align 1
@.str.416 = private unnamed_addr constant [36 x i8] c"PCM signed 16-bit big-endian planar\00", align 1
@.str.417 = private unnamed_addr constant [17 x i8] c"pcm_s16le_planar\00", align 1
@.str.418 = private unnamed_addr constant [39 x i8] c"PCM signed 16-bit little-endian planar\00", align 1
@.str.419 = private unnamed_addr constant [17 x i8] c"pcm_s24le_planar\00", align 1
@.str.420 = private unnamed_addr constant [39 x i8] c"PCM signed 24-bit little-endian planar\00", align 1
@.str.421 = private unnamed_addr constant [17 x i8] c"pcm_s32le_planar\00", align 1
@.str.422 = private unnamed_addr constant [39 x i8] c"PCM signed 32-bit little-endian planar\00", align 1
@.str.423 = private unnamed_addr constant [8 x i8] c"pcm_dvd\00", align 1
@.str.424 = private unnamed_addr constant [32 x i8] c"PCM signed 20|24-bit big-endian\00", align 1
@.str.425 = private unnamed_addr constant [10 x i8] c"pcm_f32be\00", align 1
@.str.426 = private unnamed_addr constant [37 x i8] c"PCM 32-bit floating point big-endian\00", align 1
@.str.427 = private unnamed_addr constant [10 x i8] c"pcm_f32le\00", align 1
@.str.428 = private unnamed_addr constant [40 x i8] c"PCM 32-bit floating point little-endian\00", align 1
@.str.429 = private unnamed_addr constant [10 x i8] c"pcm_f64be\00", align 1
@.str.430 = private unnamed_addr constant [37 x i8] c"PCM 64-bit floating point big-endian\00", align 1
@.str.431 = private unnamed_addr constant [10 x i8] c"pcm_f64le\00", align 1
@.str.432 = private unnamed_addr constant [40 x i8] c"PCM 64-bit floating point little-endian\00", align 1
@.str.433 = private unnamed_addr constant [11 x i8] c"pcm_bluray\00", align 1
@.str.434 = private unnamed_addr constant [53 x i8] c"PCM signed 16|20|24-bit big-endian for Blu-ray media\00", align 1
@.str.435 = private unnamed_addr constant [8 x i8] c"pcm_lxf\00", align 1
@.str.436 = private unnamed_addr constant [39 x i8] c"PCM signed 20-bit little-endian planar\00", align 1
@.str.437 = private unnamed_addr constant [6 x i8] c"s302m\00", align 1
@.str.438 = private unnamed_addr constant [11 x i8] c"SMPTE 302M\00", align 1
@.str.439 = private unnamed_addr constant [14 x i8] c"pcm_s8_planar\00", align 1
@.str.440 = private unnamed_addr constant [24 x i8] c"PCM signed 8-bit planar\00", align 1
@.str.441 = private unnamed_addr constant [13 x i8] c"adpcm_ima_qt\00", align 1
@.str.442 = private unnamed_addr constant [20 x i8] c"ADPCM IMA QuickTime\00", align 1
@.str.443 = private unnamed_addr constant [14 x i8] c"adpcm_ima_wav\00", align 1
@.str.444 = private unnamed_addr constant [14 x i8] c"ADPCM IMA WAV\00", align 1
@.str.445 = private unnamed_addr constant [14 x i8] c"adpcm_ima_dk3\00", align 1
@.str.446 = private unnamed_addr constant [19 x i8] c"ADPCM IMA Duck DK3\00", align 1
@.str.447 = private unnamed_addr constant [14 x i8] c"adpcm_ima_dk4\00", align 1
@.str.448 = private unnamed_addr constant [19 x i8] c"ADPCM IMA Duck DK4\00", align 1
@.str.449 = private unnamed_addr constant [13 x i8] c"adpcm_ima_ws\00", align 1
@.str.450 = private unnamed_addr constant [19 x i8] c"ADPCM IMA Westwood\00", align 1
@.str.451 = private unnamed_addr constant [17 x i8] c"adpcm_ima_smjpeg\00", align 1
@.str.452 = private unnamed_addr constant [25 x i8] c"ADPCM IMA Loki SDL MJPEG\00", align 1
@.str.453 = private unnamed_addr constant [9 x i8] c"adpcm_ms\00", align 1
@.str.454 = private unnamed_addr constant [16 x i8] c"ADPCM Microsoft\00", align 1
@.str.455 = private unnamed_addr constant [10 x i8] c"adpcm_4xm\00", align 1
@.str.456 = private unnamed_addr constant [15 x i8] c"ADPCM 4X Movie\00", align 1
@.str.457 = private unnamed_addr constant [9 x i8] c"adpcm_xa\00", align 1
@.str.458 = private unnamed_addr constant [15 x i8] c"ADPCM CDROM XA\00", align 1
@.str.459 = private unnamed_addr constant [10 x i8] c"adpcm_adx\00", align 1
@.str.460 = private unnamed_addr constant [19 x i8] c"SEGA CRI ADX ADPCM\00", align 1
@.str.461 = private unnamed_addr constant [9 x i8] c"adpcm_ea\00", align 1
@.str.462 = private unnamed_addr constant [22 x i8] c"ADPCM Electronic Arts\00", align 1
@.str.463 = private unnamed_addr constant [11 x i8] c"adpcm_g726\00", align 1
@.str.464 = private unnamed_addr constant [12 x i8] c"G.726 ADPCM\00", align 1
@.str.465 = private unnamed_addr constant [9 x i8] c"adpcm_ct\00", align 1
@.str.466 = private unnamed_addr constant [26 x i8] c"ADPCM Creative Technology\00", align 1
@.str.467 = private unnamed_addr constant [10 x i8] c"adpcm_swf\00", align 1
@.str.468 = private unnamed_addr constant [22 x i8] c"ADPCM Shockwave Flash\00", align 1
@.str.469 = private unnamed_addr constant [13 x i8] c"adpcm_yamaha\00", align 1
@.str.470 = private unnamed_addr constant [13 x i8] c"ADPCM Yamaha\00", align 1
@.str.471 = private unnamed_addr constant [14 x i8] c"adpcm_sbpro_4\00", align 1
@.str.472 = private unnamed_addr constant [30 x i8] c"ADPCM Sound Blaster Pro 4-bit\00", align 1
@.str.473 = private unnamed_addr constant [14 x i8] c"adpcm_sbpro_3\00", align 1
@.str.474 = private unnamed_addr constant [32 x i8] c"ADPCM Sound Blaster Pro 2.6-bit\00", align 1
@.str.475 = private unnamed_addr constant [14 x i8] c"adpcm_sbpro_2\00", align 1
@.str.476 = private unnamed_addr constant [30 x i8] c"ADPCM Sound Blaster Pro 2-bit\00", align 1
@.str.477 = private unnamed_addr constant [10 x i8] c"adpcm_thp\00", align 1
@.str.478 = private unnamed_addr constant [28 x i8] c"ADPCM Nintendo Gamecube THP\00", align 1
@.str.479 = private unnamed_addr constant [14 x i8] c"adpcm_ima_amv\00", align 1
@.str.480 = private unnamed_addr constant [14 x i8] c"ADPCM IMA AMV\00", align 1
@.str.481 = private unnamed_addr constant [12 x i8] c"adpcm_ea_r1\00", align 1
@.str.482 = private unnamed_addr constant [25 x i8] c"ADPCM Electronic Arts R1\00", align 1
@.str.483 = private unnamed_addr constant [12 x i8] c"adpcm_ea_r3\00", align 1
@.str.484 = private unnamed_addr constant [25 x i8] c"ADPCM Electronic Arts R3\00", align 1
@.str.485 = private unnamed_addr constant [12 x i8] c"adpcm_ea_r2\00", align 1
@.str.486 = private unnamed_addr constant [25 x i8] c"ADPCM Electronic Arts R2\00", align 1
@.str.487 = private unnamed_addr constant [18 x i8] c"adpcm_ima_ea_sead\00", align 1
@.str.488 = private unnamed_addr constant [31 x i8] c"ADPCM IMA Electronic Arts SEAD\00", align 1
@.str.489 = private unnamed_addr constant [18 x i8] c"adpcm_ima_ea_eacs\00", align 1
@.str.490 = private unnamed_addr constant [31 x i8] c"ADPCM IMA Electronic Arts EACS\00", align 1
@.str.491 = private unnamed_addr constant [13 x i8] c"adpcm_ea_xas\00", align 1
@.str.492 = private unnamed_addr constant [26 x i8] c"ADPCM Electronic Arts XAS\00", align 1
@.str.493 = private unnamed_addr constant [18 x i8] c"adpcm_ea_maxis_xa\00", align 1
@.str.494 = private unnamed_addr constant [37 x i8] c"ADPCM Electronic Arts Maxis CDROM XA\00", align 1
@.str.495 = private unnamed_addr constant [14 x i8] c"adpcm_ima_iss\00", align 1
@.str.496 = private unnamed_addr constant [21 x i8] c"ADPCM IMA Funcom ISS\00", align 1
@.str.497 = private unnamed_addr constant [11 x i8] c"adpcm_g722\00", align 1
@.str.498 = private unnamed_addr constant [12 x i8] c"G.722 ADPCM\00", align 1
@.str.499 = private unnamed_addr constant [14 x i8] c"adpcm_ima_apc\00", align 1
@.str.500 = private unnamed_addr constant [19 x i8] c"ADPCM IMA CRYO APC\00", align 1
@.str.501 = private unnamed_addr constant [10 x i8] c"adpcm_afc\00", align 1
@.str.502 = private unnamed_addr constant [28 x i8] c"ADPCM Nintendo Gamecube AFC\00", align 1
@.str.503 = private unnamed_addr constant [14 x i8] c"adpcm_ima_oki\00", align 1
@.str.504 = private unnamed_addr constant [23 x i8] c"ADPCM IMA Dialogic OKI\00", align 1
@.str.505 = private unnamed_addr constant [7 x i8] c"amr_nb\00", align 1
@.str.506 = private unnamed_addr constant [40 x i8] c"AMR-NB (Adaptive Multi-Rate NarrowBand)\00", align 1
@.str.507 = private unnamed_addr constant [7 x i8] c"amr_wb\00", align 1
@.str.508 = private unnamed_addr constant [38 x i8] c"AMR-WB (Adaptive Multi-Rate WideBand)\00", align 1
@.str.509 = private unnamed_addr constant [7 x i8] c"ra_144\00", align 1
@.str.510 = private unnamed_addr constant [22 x i8] c"RealAudio 1.0 (14.4K)\00", align 1
@.str.511 = private unnamed_addr constant [7 x i8] c"ra_288\00", align 1
@.str.512 = private unnamed_addr constant [22 x i8] c"RealAudio 2.0 (28.8K)\00", align 1
@.str.513 = private unnamed_addr constant [9 x i8] c"roq_dpcm\00", align 1
@.str.514 = private unnamed_addr constant [12 x i8] c"DPCM id RoQ\00", align 1
@.str.515 = private unnamed_addr constant [15 x i8] c"interplay_dpcm\00", align 1
@.str.516 = private unnamed_addr constant [15 x i8] c"DPCM Interplay\00", align 1
@.str.517 = private unnamed_addr constant [9 x i8] c"xan_dpcm\00", align 1
@.str.518 = private unnamed_addr constant [9 x i8] c"DPCM Xan\00", align 1
@.str.519 = private unnamed_addr constant [9 x i8] c"sol_dpcm\00", align 1
@.str.520 = private unnamed_addr constant [9 x i8] c"DPCM Sol\00", align 1
@.str.521 = private unnamed_addr constant [4 x i8] c"mp2\00", align 1
@.str.522 = private unnamed_addr constant [25 x i8] c"MP2 (MPEG audio layer 2)\00", align 1
@.str.523 = private unnamed_addr constant [4 x i8] c"mp3\00", align 1
@.str.524 = private unnamed_addr constant [25 x i8] c"MP3 (MPEG audio layer 3)\00", align 1
@.str.525 = private unnamed_addr constant [4 x i8] c"aac\00", align 1
@.str.526 = private unnamed_addr constant [28 x i8] c"AAC (Advanced Audio Coding)\00", align 1
@.str.527 = private unnamed_addr constant [4 x i8] c"ac3\00", align 1
@.str.528 = private unnamed_addr constant [18 x i8] c"ATSC A/52A (AC-3)\00", align 1
@.str.529 = private unnamed_addr constant [4 x i8] c"dts\00", align 1
@.str.530 = private unnamed_addr constant [29 x i8] c"DCA (DTS Coherent Acoustics)\00", align 1
@.str.531 = private unnamed_addr constant [7 x i8] c"vorbis\00", align 1
@.str.532 = private unnamed_addr constant [7 x i8] c"Vorbis\00", align 1
@.str.533 = private unnamed_addr constant [8 x i8] c"dvaudio\00", align 1
@.str.534 = private unnamed_addr constant [6 x i8] c"wmav1\00", align 1
@.str.535 = private unnamed_addr constant [22 x i8] c"Windows Media Audio 1\00", align 1
@.str.536 = private unnamed_addr constant [6 x i8] c"wmav2\00", align 1
@.str.537 = private unnamed_addr constant [22 x i8] c"Windows Media Audio 2\00", align 1
@.str.538 = private unnamed_addr constant [6 x i8] c"mace3\00", align 1
@.str.539 = private unnamed_addr constant [49 x i8] c"MACE (Macintosh Audio Compression/Expansion) 3:1\00", align 1
@.str.540 = private unnamed_addr constant [6 x i8] c"mace6\00", align 1
@.str.541 = private unnamed_addr constant [49 x i8] c"MACE (Macintosh Audio Compression/Expansion) 6:1\00", align 1
@.str.542 = private unnamed_addr constant [9 x i8] c"vmdaudio\00", align 1
@.str.543 = private unnamed_addr constant [17 x i8] c"Sierra VMD audio\00", align 1
@.str.544 = private unnamed_addr constant [5 x i8] c"flac\00", align 1
@.str.545 = private unnamed_addr constant [33 x i8] c"FLAC (Free Lossless Audio Codec)\00", align 1
@.str.546 = private unnamed_addr constant [7 x i8] c"mp3adu\00", align 1
@.str.547 = private unnamed_addr constant [53 x i8] c"ADU (Application Data Unit) MP3 (MPEG audio layer 3)\00", align 1
@.str.548 = private unnamed_addr constant [7 x i8] c"mp3on4\00", align 1
@.str.549 = private unnamed_addr constant [9 x i8] c"MP3onMP4\00", align 1
@.str.550 = private unnamed_addr constant [8 x i8] c"shorten\00", align 1
@.str.551 = private unnamed_addr constant [8 x i8] c"Shorten\00", align 1
@.str.552 = private unnamed_addr constant [5 x i8] c"alac\00", align 1
@.str.553 = private unnamed_addr constant [34 x i8] c"ALAC (Apple Lossless Audio Codec)\00", align 1
@.str.554 = private unnamed_addr constant [14 x i8] c"westwood_snd1\00", align 1
@.str.555 = private unnamed_addr constant [22 x i8] c"Westwood Audio (SND1)\00", align 1
@.str.556 = private unnamed_addr constant [4 x i8] c"gsm\00", align 1
@.str.557 = private unnamed_addr constant [4 x i8] c"GSM\00", align 1
@.str.558 = private unnamed_addr constant [5 x i8] c"qdm2\00", align 1
@.str.559 = private unnamed_addr constant [22 x i8] c"QDesign Music Codec 2\00", align 1
@.str.560 = private unnamed_addr constant [5 x i8] c"cook\00", align 1
@.str.561 = private unnamed_addr constant [37 x i8] c"Cook / Cooker / Gecko (RealAudio G2)\00", align 1
@.str.562 = private unnamed_addr constant [11 x i8] c"truespeech\00", align 1
@.str.563 = private unnamed_addr constant [21 x i8] c"DSP Group TrueSpeech\00", align 1
@.str.564 = private unnamed_addr constant [4 x i8] c"tta\00", align 1
@.str.565 = private unnamed_addr constant [17 x i8] c"TTA (True Audio)\00", align 1
@.str.566 = private unnamed_addr constant [11 x i8] c"smackaudio\00", align 1
@.str.567 = private unnamed_addr constant [14 x i8] c"Smacker audio\00", align 1
@.str.568 = private unnamed_addr constant [6 x i8] c"qcelp\00", align 1
@.str.569 = private unnamed_addr constant [18 x i8] c"QCELP / PureVoice\00", align 1
@.str.570 = private unnamed_addr constant [8 x i8] c"wavpack\00", align 1
@.str.571 = private unnamed_addr constant [8 x i8] c"WavPack\00", align 1
@.str.572 = private unnamed_addr constant [12 x i8] c"dsicinaudio\00", align 1
@.str.573 = private unnamed_addr constant [42 x i8] c"Delphine Software International CIN audio\00", align 1
@.str.574 = private unnamed_addr constant [4 x i8] c"imc\00", align 1
@.str.575 = private unnamed_addr constant [24 x i8] c"IMC (Intel Music Coder)\00", align 1
@.str.576 = private unnamed_addr constant [10 x i8] c"musepack7\00", align 1
@.str.577 = private unnamed_addr constant [13 x i8] c"Musepack SV7\00", align 1
@.str.578 = private unnamed_addr constant [4 x i8] c"mlp\00", align 1
@.str.579 = private unnamed_addr constant [32 x i8] c"MLP (Meridian Lossless Packing)\00", align 1
@.str.580 = private unnamed_addr constant [7 x i8] c"gsm_ms\00", align 1
@.str.581 = private unnamed_addr constant [22 x i8] c"GSM Microsoft variant\00", align 1
@.str.582 = private unnamed_addr constant [7 x i8] c"atrac3\00", align 1
@.str.583 = private unnamed_addr constant [47 x i8] c"Atrac 3 (Adaptive TRansform Acoustic Coding 3)\00", align 1
@.str.584 = private unnamed_addr constant [8 x i8] c"voxware\00", align 1
@.str.585 = private unnamed_addr constant [23 x i8] c"Voxware RT29 Metasound\00", align 1
@.str.586 = private unnamed_addr constant [4 x i8] c"ape\00", align 1
@.str.587 = private unnamed_addr constant [15 x i8] c"Monkey's Audio\00", align 1
@.str.588 = private unnamed_addr constant [11 x i8] c"nellymoser\00", align 1
@.str.589 = private unnamed_addr constant [16 x i8] c"Nellymoser Asao\00", align 1
@.str.590 = private unnamed_addr constant [10 x i8] c"musepack8\00", align 1
@.str.591 = private unnamed_addr constant [13 x i8] c"Musepack SV8\00", align 1
@.str.592 = private unnamed_addr constant [6 x i8] c"speex\00", align 1
@.str.593 = private unnamed_addr constant [6 x i8] c"Speex\00", align 1
@.str.594 = private unnamed_addr constant [9 x i8] c"wmavoice\00", align 1
@.str.595 = private unnamed_addr constant [26 x i8] c"Windows Media Audio Voice\00", align 1
@.str.596 = private unnamed_addr constant [7 x i8] c"wmapro\00", align 1
@.str.597 = private unnamed_addr constant [35 x i8] c"Windows Media Audio 9 Professional\00", align 1
@.str.598 = private unnamed_addr constant [12 x i8] c"wmalossless\00", align 1
@.str.599 = private unnamed_addr constant [29 x i8] c"Windows Media Audio Lossless\00", align 1
@.str.600 = private unnamed_addr constant [8 x i8] c"atrac3p\00", align 1
@.str.601 = private unnamed_addr constant [13 x i8] c"Sony ATRAC3+\00", align 1
@.str.602 = private unnamed_addr constant [5 x i8] c"eac3\00", align 1
@.str.603 = private unnamed_addr constant [26 x i8] c"ATSC A/52B (AC-3, E-AC-3)\00", align 1
@.str.604 = private unnamed_addr constant [5 x i8] c"sipr\00", align 1
@.str.605 = private unnamed_addr constant [27 x i8] c"RealAudio SIPR / ACELP.NET\00", align 1
@.str.606 = private unnamed_addr constant [4 x i8] c"mp1\00", align 1
@.str.607 = private unnamed_addr constant [25 x i8] c"MP1 (MPEG audio layer 1)\00", align 1
@.str.608 = private unnamed_addr constant [7 x i8] c"twinvq\00", align 1
@.str.609 = private unnamed_addr constant [11 x i8] c"VQF TwinVQ\00", align 1
@.str.610 = private unnamed_addr constant [7 x i8] c"truehd\00", align 1
@.str.611 = private unnamed_addr constant [7 x i8] c"TrueHD\00", align 1
@.str.612 = private unnamed_addr constant [7 x i8] c"mp4als\00", align 1
@.str.613 = private unnamed_addr constant [35 x i8] c"MPEG-4 Audio Lossless Coding (ALS)\00", align 1
@.str.614 = private unnamed_addr constant [7 x i8] c"atrac1\00", align 1
@.str.615 = private unnamed_addr constant [45 x i8] c"Atrac 1 (Adaptive TRansform Acoustic Coding)\00", align 1
@.str.616 = private unnamed_addr constant [15 x i8] c"binkaudio_rdft\00", align 1
@.str.617 = private unnamed_addr constant [18 x i8] c"Bink Audio (RDFT)\00", align 1
@.str.618 = private unnamed_addr constant [14 x i8] c"binkaudio_dct\00", align 1
@.str.619 = private unnamed_addr constant [17 x i8] c"Bink Audio (DCT)\00", align 1
@.str.620 = private unnamed_addr constant [9 x i8] c"aac_latm\00", align 1
@.str.621 = private unnamed_addr constant [45 x i8] c"AAC LATM (Advanced Audio Coding LATM syntax)\00", align 1
@.str.622 = private unnamed_addr constant [5 x i8] c"qdmc\00", align 1
@.str.623 = private unnamed_addr constant [14 x i8] c"QDesign Music\00", align 1
@.str.624 = private unnamed_addr constant [5 x i8] c"celt\00", align 1
@.str.625 = private unnamed_addr constant [43 x i8] c"Constrained Energy Lapped Transform (CELT)\00", align 1
@.str.626 = private unnamed_addr constant [7 x i8] c"g723_1\00", align 1
@.str.627 = private unnamed_addr constant [8 x i8] c"G.723.1\00", align 1
@.str.628 = private unnamed_addr constant [5 x i8] c"g729\00", align 1
@.str.629 = private unnamed_addr constant [6 x i8] c"G.729\00", align 1
@.str.630 = private unnamed_addr constant [9 x i8] c"8svx_exp\00", align 1
@.str.631 = private unnamed_addr constant [17 x i8] c"8SVX exponential\00", align 1
@.str.632 = private unnamed_addr constant [9 x i8] c"8svx_fib\00", align 1
@.str.633 = private unnamed_addr constant [15 x i8] c"8SVX fibonacci\00", align 1
@.str.634 = private unnamed_addr constant [10 x i8] c"bmv_audio\00", align 1
@.str.635 = private unnamed_addr constant [23 x i8] c"Discworld II BMV audio\00", align 1
@.str.636 = private unnamed_addr constant [5 x i8] c"ralf\00", align 1
@.str.637 = private unnamed_addr constant [19 x i8] c"RealAudio Lossless\00", align 1
@.str.638 = private unnamed_addr constant [4 x i8] c"iac\00", align 1
@.str.639 = private unnamed_addr constant [24 x i8] c"IAC (Indeo Audio Coder)\00", align 1
@.str.640 = private unnamed_addr constant [5 x i8] c"ilbc\00", align 1
@.str.641 = private unnamed_addr constant [34 x i8] c"iLBC (Internet Low Bitrate Codec)\00", align 1
@.str.642 = private unnamed_addr constant [5 x i8] c"vima\00", align 1
@.str.643 = private unnamed_addr constant [21 x i8] c"LucasArts VIMA audio\00", align 1
@.str.644 = private unnamed_addr constant [10 x i8] c"wavesynth\00", align 1
@.str.645 = private unnamed_addr constant [28 x i8] c"Wave synthesis pseudo-codec\00", align 1
@.str.646 = private unnamed_addr constant [6 x i8] c"sonic\00", align 1
@.str.647 = private unnamed_addr constant [6 x i8] c"Sonic\00", align 1
@.str.648 = private unnamed_addr constant [8 x i8] c"sonicls\00", align 1
@.str.649 = private unnamed_addr constant [15 x i8] c"Sonic lossless\00", align 1
@.str.650 = private unnamed_addr constant [10 x i8] c"paf_audio\00", align 1
@.str.651 = private unnamed_addr constant [43 x i8] c"Amazing Studio Packed Animation File Audio\00", align 1
@.str.652 = private unnamed_addr constant [5 x i8] c"opus\00", align 1
@.str.653 = private unnamed_addr constant [36 x i8] c"Opus (Opus Interactive Audio Codec)\00", align 1
@.str.654 = private unnamed_addr constant [13 x i8] c"comfortnoise\00", align 1
@.str.655 = private unnamed_addr constant [23 x i8] c"RFC 3389 Comfort Noise\00", align 1
@.str.656 = private unnamed_addr constant [4 x i8] c"tak\00", align 1
@.str.657 = private unnamed_addr constant [38 x i8] c"TAK (Tom's lossless Audio Kompressor)\00", align 1
@.str.658 = private unnamed_addr constant [5 x i8] c"evrc\00", align 1
@.str.659 = private unnamed_addr constant [36 x i8] c"EVRC (Enhanced Variable Rate Codec)\00", align 1
@.str.660 = private unnamed_addr constant [4 x i8] c"smv\00", align 1
@.str.661 = private unnamed_addr constant [30 x i8] c"SMV (Selectable Mode Vocoder)\00", align 1
@.str.662 = private unnamed_addr constant [13 x i8] c"dvd_subtitle\00", align 1
@.str.663 = private unnamed_addr constant [14 x i8] c"DVD subtitles\00", align 1
@.str.664 = private unnamed_addr constant [13 x i8] c"dvb_subtitle\00", align 1
@.str.665 = private unnamed_addr constant [14 x i8] c"DVB subtitles\00", align 1
@.str.666 = private unnamed_addr constant [5 x i8] c"text\00", align 1
@.str.667 = private unnamed_addr constant [15 x i8] c"raw UTF-8 text\00", align 1
@.str.668 = private unnamed_addr constant [5 x i8] c"xsub\00", align 1
@.str.669 = private unnamed_addr constant [5 x i8] c"XSUB\00", align 1
@.str.670 = private unnamed_addr constant [4 x i8] c"ssa\00", align 1
@.str.671 = private unnamed_addr constant [53 x i8] c"SSA (SubStation Alpha) / ASS (Advanced SSA) subtitle\00", align 1
@.str.672 = private unnamed_addr constant [9 x i8] c"mov_text\00", align 1
@.str.673 = private unnamed_addr constant [9 x i8] c"MOV text\00", align 1
@.str.674 = private unnamed_addr constant [18 x i8] c"hdmv_pgs_subtitle\00", align 1
@.str.675 = private unnamed_addr constant [43 x i8] c"HDMV Presentation Graphic Stream subtitles\00", align 1
@.str.676 = private unnamed_addr constant [13 x i8] c"dvb_teletext\00", align 1
@.str.677 = private unnamed_addr constant [13 x i8] c"DVB teletext\00", align 1
@.str.678 = private unnamed_addr constant [4 x i8] c"srt\00", align 1
@.str.679 = private unnamed_addr constant [37 x i8] c"SubRip subtitle with embedded timing\00", align 1
@.str.680 = private unnamed_addr constant [7 x i8] c"subrip\00", align 1
@.str.681 = private unnamed_addr constant [16 x i8] c"SubRip subtitle\00", align 1
@.str.682 = private unnamed_addr constant [9 x i8] c"microdvd\00", align 1
@.str.683 = private unnamed_addr constant [18 x i8] c"MicroDVD subtitle\00", align 1
@.str.684 = private unnamed_addr constant [5 x i8] c"mpl2\00", align 1
@.str.685 = private unnamed_addr constant [14 x i8] c"MPL2 subtitle\00", align 1
@.str.686 = private unnamed_addr constant [8 x i8] c"eia_608\00", align 1
@.str.687 = private unnamed_addr constant [24 x i8] c"EIA-608 closed captions\00", align 1
@.str.688 = private unnamed_addr constant [8 x i8] c"jacosub\00", align 1
@.str.689 = private unnamed_addr constant [17 x i8] c"JACOsub subtitle\00", align 1
@.str.690 = private unnamed_addr constant [4 x i8] c"pjs\00", align 1
@.str.691 = private unnamed_addr constant [44 x i8] c"PJS (Phoenix Japanimation Society) subtitle\00", align 1
@.str.692 = private unnamed_addr constant [5 x i8] c"sami\00", align 1
@.str.693 = private unnamed_addr constant [14 x i8] c"SAMI subtitle\00", align 1
@.str.694 = private unnamed_addr constant [9 x i8] c"realtext\00", align 1
@.str.695 = private unnamed_addr constant [18 x i8] c"RealText subtitle\00", align 1
@.str.696 = private unnamed_addr constant [11 x i8] c"subviewer1\00", align 1
@.str.697 = private unnamed_addr constant [22 x i8] c"SubViewer v1 subtitle\00", align 1
@.str.698 = private unnamed_addr constant [10 x i8] c"subviewer\00", align 1
@.str.699 = private unnamed_addr constant [19 x i8] c"SubViewer subtitle\00", align 1
@.str.700 = private unnamed_addr constant [8 x i8] c"vplayer\00", align 1
@.str.701 = private unnamed_addr constant [17 x i8] c"VPlayer subtitle\00", align 1
@.str.702 = private unnamed_addr constant [7 x i8] c"webvtt\00", align 1
@.str.703 = private unnamed_addr constant [16 x i8] c"WebVTT subtitle\00", align 1
@.str.704 = private unnamed_addr constant [8 x i8] c"bintext\00", align 1
@.str.705 = private unnamed_addr constant [12 x i8] c"Binary text\00", align 1
@.str.706 = private unnamed_addr constant [5 x i8] c"xbin\00", align 1
@.str.707 = private unnamed_addr constant [21 x i8] c"eXtended BINary text\00", align 1
@.str.708 = private unnamed_addr constant [4 x i8] c"idf\00", align 1
@.str.709 = private unnamed_addr constant [13 x i8] c"iCEDraw text\00", align 1
@.str.710 = private unnamed_addr constant [4 x i8] c"klv\00", align 1
@.str.711 = private unnamed_addr constant [43 x i8] c"SMPTE 336M Key-Length-Value (KLV) metadata\00", align 1
@.str.724 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1.725 = private unnamed_addr constant [39 x i8] c"!avctx->internal->frame_thread_encoder\00", align 1
@.str.2.726 = private unnamed_addr constant [34 x i8] c"libavcodec/frame_thread_encoder.c\00", align 1
@.str.3.727 = private unnamed_addr constant [8 x i8] c"threads\00", align 1
@.str.4.728 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.5.729 = private unnamed_addr constant [46 x i8] c"!thread_avctx->internal->frame_thread_encoder\00", align 1
@.str.6.730 = private unnamed_addr constant [37 x i8] c"ff_frame_thread_encoder_init failed\0A\00", align 1
@ff_gif_decoder = internal global %struct.AVCodec.134 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.733, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1.734, i32 0, i32 0), i32 0, i32 99, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* null, i64* null, i8 0, %struct.AVClass* @decoder_class, %struct.AVProfile* null, i32 2720, %struct.AVCodec.134* null, i32 (%struct.AVCodecContext.129*)* null, i32 (%struct.AVCodecContext.129*, %struct.AVCodecContext.129*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec.134*)* null, i32 (%struct.AVCodecContext.129*)* @gif_decode_init, i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)* null, i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)* @gif_decode_frame, i32 (%struct.AVCodecContext.129*)* @gif_decode_close, void (%struct.AVCodecContext.129*)* null }, align 8
@.str.733 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str.1.734 = private unnamed_addr constant [34 x i8] c"GIF (Graphics Interchange Format)\00", align 1
@decoder_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.741, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* getelementptr inbounds ([2 x %struct.AVOption], [2 x %struct.AVOption]* @options, i32 0, i32 0), i32 3411815, i32 0, i32 0, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 6, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@gif87a_sig = internal constant [6 x i8] c"GIF87a", align 1
@gif89a_sig = internal constant [6 x i8] c"GIF89a", align 1
@.str.8.735 = private unnamed_addr constant [24 x i8] c"picture size too large\0A\00", align 1
@.str.5.736 = private unnamed_addr constant [21 x i8] c"get_buffer() failed\0A\00", align 1
@.str.6.737 = private unnamed_addr constant [38 x i8] c"cannot decode frame without keyframe\0A\00", align 1
@.str.7.738 = private unnamed_addr constant [23 x i8] c"reget_buffer() failed\0A\00", align 1
@.str.9.739 = private unnamed_addr constant [54 x i8] c"picture doesn't have either global or local palette.\0A\00", align 1
@.str.10.740 = private unnamed_addr constant [17 x i8] c"LZW init failed\0A\00", align 1
@.str.2.741 = private unnamed_addr constant [12 x i8] c"gif decoder\00", align 1
@options = internal constant [2 x %struct.AVOption] [%struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3.742, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.4.743, i32 0, i32 0), i32 2712, i32 1, %union.anon { i64 16777215 }, double 0.000000e+00, double 0x41EFFFFFFFE00000, i32 18, i8* null }, %struct.AVOption zeroinitializer], align 16
@.str.3.742 = private unnamed_addr constant [12 x i8] c"trans_color\00", align 1
@.str.4.743 = private unnamed_addr constant [61 x i8] c"color value (ARGB) that is used instead of transparent color\00", align 1
@mask = internal unnamed_addr constant [17 x i16] [i16 0, i16 1, i16 3, i16 7, i16 15, i16 31, i16 63, i16 127, i16 255, i16 511, i16 1023, i16 2047, i16 4095, i16 8191, i16 16383, i16 32767, i16 -1], align 16
@.str.784 = private unnamed_addr constant [14 x i8] c"lzw overread\0A\00", align 1
@av_codec_context_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4.790, i32 0, i32 0), i8* (i8*)* @context_to_name, %struct.AVOption* getelementptr inbounds ([328 x %struct.AVOption], [328 x %struct.AVOption]* bitcast (<{ %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption }>* @options.791 to [328 x %struct.AVOption]*), i32 0, i32 0), i32 3411815, i32 8, i32 0, i8* (i8*, i8*)* @codec_child_next, %struct.AVClass* (%struct.AVClass*)* @codec_child_class_next, i32 5, i32 (i8*)* @get_category, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@switch.table.avcodec_get_context_defaults3 = private unnamed_addr constant [4 x i32] [i32 16, i32 8, i32 0, i32 32], align 4
@.str.787 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1.788 = private unnamed_addr constant [9 x i8] c"ret >= 0\00", align 1
@.str.2.789 = private unnamed_addr constant [21 x i8] c"libavcodec/options.c\00", align 1
@.str.4.790 = private unnamed_addr constant [15 x i8] c"AVCodecContext\00", align 1
@options.791 = internal constant <{ %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption }> <{ %struct.AVOption { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6.792, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.793, i32 0, i32 0), i32 96, i32 1, %union.anon { i64 200000 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8.794, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.793, i32 0, i32 0), i32 96, i32 1, %union.anon { i64 128000 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9.795, i32 0, i32 0), i8* getelementptr inbounds ([276 x i8], [276 x i8]* @.str.10.796, i32 0, i32 0), i32 100, i32 1, %union.anon { i64 4000000 }, double 1.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0), i8* null, i32 112, i32 0, %union.anon zeroinitializer, double 0.000000e+00, double 0x41EFFFFFFFE00000, i32 59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12.798, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.799, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.800, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.15.801, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16.802, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.17.803, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2048 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18.804, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19.805, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.806, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.807, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22.808, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.809, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 64 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.24.810, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25.811, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.26.812, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 512 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27.813, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.28.814, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1024 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29.815, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.30.816, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8192 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31.817, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32.818, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 16384 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33.819, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.34.820, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35.821, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36.822, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.37.823, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 131072 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38.824, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.39.825, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 262144 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40.826, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.41.827, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 524288 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.42.828, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.43.829, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4194304 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44.830, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.45.831, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8388608 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.46.832, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.47.833, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 16777216 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48.834, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.49.835, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 67108864 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50.836, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.49.835, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 134217728 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51.837, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.52.838, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 536870912 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53.839, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.54.840, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2147483648 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.797, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55.841, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.56.842, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.843, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58.844, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.49.835, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.843, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.59.845, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.60.846, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.843, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.61.847, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.62.848, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.843, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63.849, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.64.850, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.843, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65.851, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.66.852, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4194304 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.843, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67.853, i32 0, i32 0), i8* null, i32 68, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69.855, i32 0, i32 0), i32 172, i32 1, %union.anon { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.70.856, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.71.857, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.72.858, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.73.859, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74.860, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.75.861, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76.862, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.77.863, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78.864, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.79.865, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 10 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.80.866, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.81.867, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82.868, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.83.869, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84.870, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.85.871, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86.872, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.87.873, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 6 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88.874, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.89.875, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 7 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90.876, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.91.877, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.92.878, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.93.879, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 9 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.854, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.94.880, i32 0, i32 0), i8* null, i32 128, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.95.881, i32 0, i32 0), i8* null, i32 132, i32 6, { double } zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96.882, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.97.883, i32 0, i32 0), i32 164, i32 1, %union.anon { i64 12 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.98.884, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.99.885, i32 0, i32 0), i32 480, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 11, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.100.886, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.101.887, i32 0, i32 0), i32 484, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 11, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.102.888, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.103.889, i32 0, i32 0), i32 504, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.104.890, i32 0, i32 0), i8* null, i32 492, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.105.891, i32 0, i32 0), i8* null, i32 496, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106.892, i32 0, i32 0), i8* null, i32 144, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.107.893, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.108.894, i32 0, i32 0), i32 560, i32 4, { double } { double 5.000000e-01 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.109.895, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.110.896, i32 0, i32 0), i32 564, i32 4, { double } { double 5.000000e-01 }, double -1.000000e+00, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.111.897, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112.898, i32 0, i32 0), i32 568, i32 1, %union.anon { i64 2 }, double -1.000000e+00, double 6.900000e+01, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113.899, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.114.900, i32 0, i32 0), i32 572, i32 1, %union.anon { i64 31 }, double -1.000000e+00, double 1.024000e+03, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.115.901, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.116.902, i32 0, i32 0), i32 576, i32 1, %union.anon { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.117.903, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.118.904, i32 0, i32 0), i32 192, i32 1, %union.anon zeroinitializer, double -1.000000e+00, double 1.600000e+01, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.119.905, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.120.906, i32 0, i32 0), i32 196, i32 4, { double } { double 1.250000e+00 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121.907, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.122.908, i32 0, i32 0), i32 200, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.123.909, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.124.910, i32 0, i32 0), i32 204, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.125.911, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.126.912, i32 0, i32 0), i32 704, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.127.913, i32 0, i32 0), i8* null, i32 708, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.128.914, i32 0, i32 0), i8* null, i32 712, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.129.915, i32 0, i32 0), i8* null, i32 716, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.130.916, i32 0, i32 0), i8* null, i32 720, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.131.917, i32 0, i32 0), i8* null, i32 724, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.132.918, i32 0, i32 0), i8* null, i32 728, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.133.919, i32 0, i32 0), i8* null, i32 732, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.134.920, i32 0, i32 0), i8* null, i32 736, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.135.921, i32 0, i32 0), i8* null, i32 740, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.136.922, i32 0, i32 0), i8* null, i32 60, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.138.924, i32 0, i32 0), i32 760, i32 0, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.139.925, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.140.926, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.141.927, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142.928, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.143.929, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.144.930, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.145.931, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.146.932, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.147.933, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.148.934, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.149.935, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.150.936, i32 0, i32 0), i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.151.937, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 64 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.152.938, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.153.939, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 128 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.154.940, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.155.941, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.156.942, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 512 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.157.943, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.158.944, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1024 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.159.945, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 2048 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.160.946, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 4096 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.161.947, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.162.948, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8192 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.163.949, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.164.950, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 16384 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.923, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.165.951, i32 0, i32 0), i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.166.952, i32 0, i32 0), i32 208, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.167.953, i32 0, i32 0), i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str.168.954, i32 0, i32 0), i32 212, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.955, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.170.956, i32 0, i32 0), i32 764, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.955, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.171.957, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.172.958, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.955, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.955, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.173.959, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.955, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.174.960, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.955, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.175.961, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.176.962, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.955, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.177.963, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.178.964, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 -2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.169.955, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.179.965, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.180.966, i32 0, i32 0), i32 216, i32 4, { double } { double 1.250000e+00 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.967, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.182.968, i32 0, i32 0), i32 780, i32 0, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.967, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.183.969, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.184.970, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.967, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.185.971, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.186.972, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.967, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.187.973, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.188.974, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.967, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.189.975, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.190.976, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.967, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.191.977, i32 0, i32 0), i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.192.978, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.967, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.193.979, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.194.980, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 131072 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.967, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.195.981, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.196.982, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 262144 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181.967, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.197.983, i32 0, i32 0), i8* null, i32 220, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.198.984, i32 0, i32 0), i8* null, i32 500, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.199.985, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.200.986, i32 0, i32 0), i32 224, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.201.987, i32 0, i32 0), i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.202.988, i32 0, i32 0), i32 580, i32 4, { double } zeroinitializer, double 0.000000e+00, double 9.900000e+01, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.203.989, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.204.990, i32 0, i32 0), i32 584, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.205.991, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.204.990, i32 0, i32 0), i32 588, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.206.992, i32 0, i32 0), i8* null, i32 596, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.207.993, i32 0, i32 0), i8* getelementptr inbounds ([356 x i8], [356 x i8]* @.str.208.994, i32 0, i32 0), i32 608, i32 5, { i8* } zeroinitializer, double -1.280000e+02, double 1.270000e+02, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.209.995, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.210.996, i32 0, i32 0), i32 616, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.211.997, i32 0, i32 0), i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.212.998, i32 0, i32 0), i32 620, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.213.999, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.214.1000, i32 0, i32 0), i32 592, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.215.1001, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.216.1002, i32 0, i32 0), i32 624, i32 4, { double } { double 1.000000e+00 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.217.1003, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.218.1004, i32 0, i32 0), i32 228, i32 4, { double } { double -8.000000e-01 }, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.219.1005, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.220.1006, i32 0, i32 0), i32 232, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.221.1007, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.222.1008, i32 0, i32 0), i32 628, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.1009, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.224.1010, i32 0, i32 0), i32 872, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.1009, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225.1011, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.226.1012, i32 0, i32 0), i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.1009, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.227.1013, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.228.1014, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.1009, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.229.1015, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.230.1016, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.1009, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.231.1017, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.1009, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.232.1018, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.1009, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.233.1019, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.234.1020, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 6 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.1009, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.235.1021, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.236.1022, i32 0, i32 0), i32 236, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.237.1023, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.238.1024, i32 0, i32 0), i32 240, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.239.1025, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.240.1026, i32 0, i32 0), i32 244, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.241.1027, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.242.1028, i32 0, i32 0), i32 248, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.243.1029, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.244.1030, i32 0, i32 0), i32 252, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.246.1032, i32 0, i32 0), i32 876, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225.1011, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.229.1015, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.247.1033, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.248.1034, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.249.1035, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.250.1036, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.251.1037, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 7 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.232.1018, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.252.1038, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 9 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.253.1039, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 10 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.254.1040, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.255.1041, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 17 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.256.1042, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 22 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.257.1043, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 23 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.258.1044, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 11 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.259.1045, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 12 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.260.1046, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 13 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.261.1047, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 14 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.262.1048, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.263.1049, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 20 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.245.1031, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.264.1050, i32 0, i32 0), i8* null, i32 256, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.265.1051, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.266.1052, i32 0, i32 0), i32 768, i32 0, %union.anon { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.265.1051, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.267.1053, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.268.1054, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.265.1051, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.269.1055, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.270.1056, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.265.1051, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.271.1057, i32 0, i32 0), i8* null, i32 884, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.1058, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.273.1059, i32 0, i32 0), i32 260, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.1058, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.274.1060, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.1058, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.275.1061, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.1058, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.276.1062, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272.1058, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.277.1063, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.278.1064, i32 0, i32 0), i32 272, i32 6, { double } zeroinitializer, double 0.000000e+00, double 1.000000e+01, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.280.1066, i32 0, i32 0), i32 772, i32 0, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.281.1067, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.282.1068, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.283.1069, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.284.1070, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.185.971, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.285.1071, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.286.1072, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.287.1073, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.288.1074, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.289.1075, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.290.1076, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.291.1077, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 64 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.292.1078, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 128 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.293.1079, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.294.1080, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 512 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.295.1081, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.296.1082, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1024 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.297.1083, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.298.1084, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2048 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.299.1085, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 4096 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.300.1086, i32 0, i32 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.301.1087, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8192 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.302.1088, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.303.1089, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 16384 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.304.1090, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.305.1091, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.306.1092, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.307.1093, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279.1065, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.308.1094, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.309.1095, i32 0, i32 0), i32 776, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310.1096, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.311.1097, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.312.1098, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310.1096, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.117.903, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.313.1099, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310.1096, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.314.1100, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.315.1101, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310.1096, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.316.1102, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.317.1103, i32 0, i32 0), i32 280, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.319.1105, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.320.1106, i32 0, i32 0), i32 284, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.321.1107, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.322.1108, i32 0, i32 0), i32 288, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.323.1109, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.324.1110, i32 0, i32 0), i32 292, i32 1, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.325.1111, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.326.1112, i32 0, i32 0), i32 296, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.327.1113, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.328.1114, i32 0, i32 0), i32 300, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.329.1115, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.330.1116, i32 0, i32 0), i32 304, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.331.1117, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.332.1118, i32 0, i32 0), i32 308, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.333.1119, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.334.1120, i32 0, i32 0), i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.335.1121, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.336.1122, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.337.1123, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.338.1124, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223.1009, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.339.1125, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33.819, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.340.1126, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.341.1127, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.342.1128, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.343.1129, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.344.1130, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 6 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.70.856, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.345.1131, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 7 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.346.1132, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.347.1133, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.348.1134, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.349.1135, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 9 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.350.1136, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.351.1137, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 10 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.352.1138, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 13 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.353.1139, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.354.1140, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.355.1141, i32 0, i32 0), i32 312, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.356.1142, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.357.1143, i32 0, i32 0), i32 316, i32 1, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.358.1144, i32 0, i32 0), i8* null, i32 320, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.359.1145, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.360.1146, i32 0, i32 0), i32 324, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.361.1147, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.362.1148, i32 0, i32 0), i32 328, i32 1, %union.anon { i64 999999 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.363.1149, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.364.1150, i32 0, i32 0), i32 332, i32 1, %union.anon { i64 999999 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.365.1151, i32 0, i32 0), i8* null, i32 336, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.366.1152, i32 0, i32 0), i8* null, i32 104, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367.1153, i32 0, i32 0), i8* null, i32 644, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367.1153, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.368.1154, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.369.1155, i32 0, i32 0), i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367.1153, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.100.886, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.370.1156, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367.1153, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.371.1157, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.372.1158, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367.1153, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.373.1159, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.374.1160, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367.1153, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.375.1161, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.376.1162, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.367.1153, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.377.1163, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.378.1164, i32 0, i32 0), i32 648, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.379.1165, i32 0, i32 0), i8* null, i32 340, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.380.1166, i32 0, i32 0), i8* null, i32 344, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381.1167, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.382.1168, i32 0, i32 0), i32 348, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381.1167, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.247.1033, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.383.1169, i32 0, i32 0), i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381.1167, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.384.1170, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.385.1171, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381.1167, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.343.1129, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.386.1172, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381.1167, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.387.1173, i32 0, i32 0), i8* null, i32 64, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.388.1174, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.389.1175, i32 0, i32 0), i32 368, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.390.1176, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.391.1177, i32 0, i32 0), i32 652, i32 1, %union.anon { i64 236 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.392.1178, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.393.1179, i32 0, i32 0), i32 656, i32 1, %union.anon { i64 3658 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.394.1180, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.395.1181, i32 0, i32 0), i32 372, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.396.1182, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.397.1183, i32 0, i32 0), i32 640, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.398.1184, i32 0, i32 0), i8* null, i32 376, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.843, i32 0, i32 0), i8* null, i32 116, i32 0, %union.anon zeroinitializer, double 0.000000e+00, double 0x41EFFFFFFFE00000, i32 27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.843, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.399.1185, i32 0, i32 0), i8* null, i32 980, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.400.1186, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.401.1187, i32 0, i32 0), i32 380, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.402.1188, i32 0, i32 0), i8* null, i32 904, i32 1, %union.anon { i64 1 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.402.1188, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225.1011, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.403.1189, i32 0, i32 0), i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.402.1188, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.404.1190, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.405.1191, i32 0, i32 0), i32 384, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.406.1192, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.407.1193, i32 0, i32 0), i32 388, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.408.1194, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.409.1195, i32 0, i32 0), i32 392, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.410.1196, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.411.1197, i32 0, i32 0), i32 944, i32 1, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.412.1198, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.413.1199, i32 0, i32 0), i32 396, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.414.1200, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.415.1201, i32 0, i32 0), i32 400, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0), i8* null, i32 948, i32 1, %union.anon { i64 -99 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.417.1203, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 -99 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.418.1204, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.419.1205, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.420.1206, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.421.1207, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.422.1208, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.423.1209, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 28 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.424.1210, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 22 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.425.1211, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 38 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.426.1212, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 20 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.427.1213, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 30 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.428.1214, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 40 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.429.1215, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 50 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.430.1216, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 60 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.416.1202, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.431.1217, i32 0, i32 0), i8* null, i32 952, i32 1, %union.anon { i64 -99 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.431.1217, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.417.1203, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 -99 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.431.1217, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.432.1218, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.433.1219, i32 0, i32 0), i32 892, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 26, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.434.1220, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.435.1221, i32 0, i32 0), i32 660, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.436.1222, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.437.1223, i32 0, i32 0), i32 664, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.438.1224, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.439.1225, i32 0, i32 0), i32 668, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.440.1226, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.441.1227, i32 0, i32 0), i32 672, i32 1, %union.anon { i64 13 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.318.1104, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.442.1228, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.443.1229, i32 0, i32 0), i32 404, i32 4, { double } zeroinitializer, double 0xC7EFFFFFE0000000, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.444.1230, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.445.1231, i32 0, i32 0), i32 408, i32 1, %union.anon { i64 236 }, double 1.000000e+00, double 3.276700e+04, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.446.1232, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.447.1233, i32 0, i32 0), i32 412, i32 1, %union.anon { i64 3658 }, double 1.000000e+00, double 3.276700e+04, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.448.1234, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.449.1235, i32 0, i32 0), i32 416, i32 1, %union.anon { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.450.1236, i32 0, i32 0), i8* null, i32 956, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.1237, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.452.1238, i32 0, i32 0), i8* null, i32 960, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.1237, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.453.1239, i32 0, i32 0), i8* null, i32 964, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.1237, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.454.1240, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 -16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.1237, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.455.1241, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.1237, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.456.1242, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.1237, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.457.1243, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.1237, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.458.1244, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.1237, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.459.1245, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 48 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.451.1237, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.460.1246, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.461.1247, i32 0, i32 0), i32 420, i32 1, %union.anon { i64 1 }, double 0.000000e+00, double 4.000000e+00, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.462.1248, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.463.1249, i32 0, i32 0), i32 424, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 1.000000e+01, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.464.1250, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.465.1251, i32 0, i32 0), i32 428, i32 1, %union.anon { i64 25 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.466.1252, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.467.1253, i32 0, i32 0), i32 432, i32 1, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.468.1254, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.469.1255, i32 0, i32 0), i32 436, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.470.1256, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.471.1257, i32 0, i32 0), i32 676, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.472.1258, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.49.835, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 16384 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.843, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.473.1259, i32 0, i32 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.474.1260, i32 0, i32 0), i32 440, i32 1, %union.anon { i64 6 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.475.1261, i32 0, i32 0), i8* null, i32 444, i32 1, %union.anon { i64 256 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.476.1262, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.477.1263, i32 0, i32 0), i32 448, i32 1, %union.anon { i64 40 }, double 1.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.478.1264, i32 0, i32 0), i8* null, i32 108, i32 1, %union.anon { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 25, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.479.1265, i32 0, i32 0), i8* null, i32 680, i32 1, %union.anon { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.480.1266, i32 0, i32 0), i8* null, i32 684, i32 1, %union.anon { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.481.1267, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.482.1268, i32 0, i32 0), i32 688, i32 2, %union.anon zeroinitializer, double 0.000000e+00, double 0x43E0000000000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.483.1269, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.484.1270, i32 0, i32 0), i32 508, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 10, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.485.1271, i32 0, i32 0), i8* null, i32 888, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.486.1272, i32 0, i32 0), i8* null, i32 512, i32 2, %union.anon zeroinitializer, double 0.000000e+00, double 0x43E0000000000000, i32 11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.486.1272, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.487.1273, i32 0, i32 0), i8* null, i32 520, i32 2, %union.anon zeroinitializer, double 0.000000e+00, double 0x43E0000000000000, i32 10, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.487.1273, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.488.1274, i32 0, i32 0), i8* null, i32 632, i32 4, { double } zeroinitializer, double 0.000000e+00, double 0x47EFFFFFE0000000, i32 17, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.489.1275, i32 0, i32 0), i8* null, i32 636, i32 4, { double } { double 3.000000e+00 }, double 0.000000e+00, double 0x47EFFFFFE0000000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.490.1276, i32 0, i32 0), i8* null, i32 140, i32 1, %union.anon { i64 1 }, double 1.000000e+00, double 0x41DFFFFFFFC00000, i32 27, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.491.1277, i32 0, i32 0), i8* null, i32 452, i32 1, %union.anon { i64 2 }, double 1.000000e+00, double 8.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.492.1278, i32 0, i32 0), i8* null, i32 456, i32 1, %union.anon { i64 2 }, double 1.000000e+00, double 7.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.493.1279, i32 0, i32 0), i8* null, i32 460, i32 1, %union.anon { i64 2 }, double 1.000000e+00, double 8.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.494.1280, i32 0, i32 0), i8* null, i32 464, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 2.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.495.1281, i32 0, i32 0), i8* null, i32 468, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 6.000000e+00, i32 19, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.496.1282, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.497.1283, i32 0, i32 0), i32 8, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.498.1284, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.499.1285, i32 0, i32 0), i32 472, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 17, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.500.1286, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.501.1287, i32 0, i32 0), i32 908, i32 0, %union.anon { i64 3 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.500.1286, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.502.1288, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.500.1286, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.503.1289, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.500.1286, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.505.1291, i32 0, i32 0), i32 528, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 8.000000e+00, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.506.1292, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.507.1293, i32 0, i32 0), i32 0, i32 128, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.508.1294, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.509.1295, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.510.1296, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.511.1297, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.512.1298, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.513.1299, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 3 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.514.1300, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.515.1301, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.516.1302, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.517.1303, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 5 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.518.1304, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.519.1305, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 6 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.520.1306, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.521.1307, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 7 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.522.1308, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.523.1309, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.504.1290, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.524.1310, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.525.1311, i32 0, i32 0), i32 532, i32 1397116244, %union.anon { i64 -1 }, double -1.000000e+00, double 9.000000e+00, i32 10, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.524.1310, i32 0, i32 0) }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.526.1312, i32 0, i32 0), i8* null, i32 1000, i32 6, { double } zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 0, i8* null }, %struct.AVOption zeroinitializer }>, align 16
@.str.6.792 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.7.793 = private unnamed_addr constant [24 x i8] c"set bitrate (in bits/s)\00", align 1
@.str.8.794 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.9.795 = private unnamed_addr constant [3 x i8] c"bt\00", align 1
@.str.10.796 = private unnamed_addr constant [276 x i8] c"Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.\00", align 1
@.str.11.797 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@.str.12.798 = private unnamed_addr constant [4 x i8] c"mv4\00", align 1
@.str.13.799 = private unnamed_addr constant [48 x i8] c"use four motion vectors per macroblock (MPEG-4)\00", align 1
@.str.14.800 = private unnamed_addr constant [5 x i8] c"qpel\00", align 1
@.str.15.801 = private unnamed_addr constant [32 x i8] c"use 1/4-pel motion compensation\00", align 1
@.str.16.802 = private unnamed_addr constant [5 x i8] c"loop\00", align 1
@.str.17.803 = private unnamed_addr constant [16 x i8] c"use loop filter\00", align 1
@.str.18.804 = private unnamed_addr constant [7 x i8] c"qscale\00", align 1
@.str.19.805 = private unnamed_addr constant [17 x i8] c"use fixed qscale\00", align 1
@.str.20.806 = private unnamed_addr constant [4 x i8] c"gmc\00", align 1
@.str.21.807 = private unnamed_addr constant [8 x i8] c"use gmc\00", align 1
@.str.22.808 = private unnamed_addr constant [4 x i8] c"mv0\00", align 1
@.str.23.809 = private unnamed_addr constant [30 x i8] c"always try a mb with mv=<0,0>\00", align 1
@.str.24.810 = private unnamed_addr constant [16 x i8] c"input_preserved\00", align 1
@.str.25.811 = private unnamed_addr constant [6 x i8] c"pass1\00", align 1
@.str.26.812 = private unnamed_addr constant [52 x i8] c"use internal 2-pass ratecontrol in first  pass mode\00", align 1
@.str.27.813 = private unnamed_addr constant [6 x i8] c"pass2\00", align 1
@.str.28.814 = private unnamed_addr constant [52 x i8] c"use internal 2-pass ratecontrol in second pass mode\00", align 1
@.str.29.815 = private unnamed_addr constant [5 x i8] c"gray\00", align 1
@.str.30.816 = private unnamed_addr constant [29 x i8] c"only decode/encode grayscale\00", align 1
@.str.31.817 = private unnamed_addr constant [9 x i8] c"emu_edge\00", align 1
@.str.32.818 = private unnamed_addr constant [18 x i8] c"do not draw edges\00", align 1
@.str.33.819 = private unnamed_addr constant [5 x i8] c"psnr\00", align 1
@.str.34.820 = private unnamed_addr constant [47 x i8] c"error[?] variables will be set during encoding\00", align 1
@.str.35.821 = private unnamed_addr constant [10 x i8] c"truncated\00", align 1
@.str.36.822 = private unnamed_addr constant [4 x i8] c"naq\00", align 1
@.str.37.823 = private unnamed_addr constant [32 x i8] c"normalize adaptive quantization\00", align 1
@.str.38.824 = private unnamed_addr constant [6 x i8] c"ildct\00", align 1
@.str.39.825 = private unnamed_addr constant [19 x i8] c"use interlaced DCT\00", align 1
@.str.40.826 = private unnamed_addr constant [10 x i8] c"low_delay\00", align 1
@.str.41.827 = private unnamed_addr constant [16 x i8] c"force low delay\00", align 1
@.str.42.828 = private unnamed_addr constant [14 x i8] c"global_header\00", align 1
@.str.43.829 = private unnamed_addr constant [60 x i8] c"place global headers in extradata instead of every keyframe\00", align 1
@.str.44.830 = private unnamed_addr constant [9 x i8] c"bitexact\00", align 1
@.str.45.831 = private unnamed_addr constant [44 x i8] c"use only bitexact functions (except (I)DCT)\00", align 1
@.str.46.832 = private unnamed_addr constant [4 x i8] c"aic\00", align 1
@.str.47.833 = private unnamed_addr constant [51 x i8] c"H.263 advanced intra coding / MPEG-4 AC prediction\00", align 1
@.str.48.834 = private unnamed_addr constant [4 x i8] c"cbp\00", align 1
@.str.49.835 = private unnamed_addr constant [50 x i8] c"Deprecated, use mpegvideo private options instead\00", align 1
@.str.50.836 = private unnamed_addr constant [5 x i8] c"qprd\00", align 1
@.str.51.837 = private unnamed_addr constant [5 x i8] c"ilme\00", align 1
@.str.52.838 = private unnamed_addr constant [29 x i8] c"interlaced motion estimation\00", align 1
@.str.53.839 = private unnamed_addr constant [5 x i8] c"cgop\00", align 1
@.str.54.840 = private unnamed_addr constant [11 x i8] c"closed GOP\00", align 1
@.str.55.841 = private unnamed_addr constant [5 x i8] c"fast\00", align 1
@.str.56.842 = private unnamed_addr constant [40 x i8] c"allow non-spec-compliant speedup tricks\00", align 1
@.str.57.843 = private unnamed_addr constant [7 x i8] c"flags2\00", align 1
@.str.58.844 = private unnamed_addr constant [5 x i8] c"sgop\00", align 1
@.str.59.845 = private unnamed_addr constant [6 x i8] c"noout\00", align 1
@.str.60.846 = private unnamed_addr constant [24 x i8] c"skip bitstream encoding\00", align 1
@.str.61.847 = private unnamed_addr constant [13 x i8] c"local_header\00", align 1
@.str.62.848 = private unnamed_addr constant [63 x i8] c"place global headers at every keyframe instead of in extradata\00", align 1
@.str.63.849 = private unnamed_addr constant [7 x i8] c"chunks\00", align 1
@.str.64.850 = private unnamed_addr constant [47 x i8] c"Frame data might be split into multiple chunks\00", align 1
@.str.65.851 = private unnamed_addr constant [8 x i8] c"showall\00", align 1
@.str.66.852 = private unnamed_addr constant [42 x i8] c"Show all frames before the first keyframe\00", align 1
@.str.67.853 = private unnamed_addr constant [7 x i8] c"sub_id\00", align 1
@.str.68.854 = private unnamed_addr constant [10 x i8] c"me_method\00", align 1
@.str.69.855 = private unnamed_addr constant [29 x i8] c"set motion estimation method\00", align 1
@.str.70.856 = private unnamed_addr constant [5 x i8] c"zero\00", align 1
@.str.71.857 = private unnamed_addr constant [33 x i8] c"zero motion estimation (fastest)\00", align 1
@.str.72.858 = private unnamed_addr constant [5 x i8] c"full\00", align 1
@.str.73.859 = private unnamed_addr constant [33 x i8] c"full motion estimation (slowest)\00", align 1
@.str.74.860 = private unnamed_addr constant [5 x i8] c"epzs\00", align 1
@.str.75.861 = private unnamed_addr constant [33 x i8] c"EPZS motion estimation (default)\00", align 1
@.str.76.862 = private unnamed_addr constant [4 x i8] c"esa\00", align 1
@.str.77.863 = private unnamed_addr constant [39 x i8] c"esa motion estimation (alias for full)\00", align 1
@.str.78.864 = private unnamed_addr constant [5 x i8] c"tesa\00", align 1
@.str.79.865 = private unnamed_addr constant [23 x i8] c"tesa motion estimation\00", align 1
@.str.80.866 = private unnamed_addr constant [4 x i8] c"dia\00", align 1
@.str.81.867 = private unnamed_addr constant [43 x i8] c"diamond motion estimation (alias for EPZS)\00", align 1
@.str.82.868 = private unnamed_addr constant [4 x i8] c"log\00", align 1
@.str.83.869 = private unnamed_addr constant [22 x i8] c"log motion estimation\00", align 1
@.str.84.870 = private unnamed_addr constant [6 x i8] c"phods\00", align 1
@.str.85.871 = private unnamed_addr constant [24 x i8] c"phods motion estimation\00", align 1
@.str.86.872 = private unnamed_addr constant [3 x i8] c"x1\00", align 1
@.str.87.873 = private unnamed_addr constant [21 x i8] c"X1 motion estimation\00", align 1
@.str.88.874 = private unnamed_addr constant [4 x i8] c"hex\00", align 1
@.str.89.875 = private unnamed_addr constant [22 x i8] c"hex motion estimation\00", align 1
@.str.90.876 = private unnamed_addr constant [4 x i8] c"umh\00", align 1
@.str.91.877 = private unnamed_addr constant [22 x i8] c"umh motion estimation\00", align 1
@.str.92.878 = private unnamed_addr constant [5 x i8] c"iter\00", align 1
@.str.93.879 = private unnamed_addr constant [23 x i8] c"iter motion estimation\00", align 1
@.str.94.880 = private unnamed_addr constant [15 x i8] c"extradata_size\00", align 1
@.str.95.881 = private unnamed_addr constant [10 x i8] c"time_base\00", align 1
@.str.96.882 = private unnamed_addr constant [2 x i8] c"g\00", align 1
@.str.97.883 = private unnamed_addr constant [36 x i8] c"set the group of picture (GOP) size\00", align 1
@.str.98.884 = private unnamed_addr constant [3 x i8] c"ar\00", align 1
@.str.99.885 = private unnamed_addr constant [32 x i8] c"set audio sampling rate (in Hz)\00", align 1
@.str.100.886 = private unnamed_addr constant [3 x i8] c"ac\00", align 1
@.str.101.887 = private unnamed_addr constant [29 x i8] c"set number of audio channels\00", align 1
@.str.102.888 = private unnamed_addr constant [7 x i8] c"cutoff\00", align 1
@.str.103.889 = private unnamed_addr constant [21 x i8] c"set cutoff bandwidth\00", align 1
@.str.104.890 = private unnamed_addr constant [11 x i8] c"frame_size\00", align 1
@.str.105.891 = private unnamed_addr constant [13 x i8] c"frame_number\00", align 1
@.str.106.892 = private unnamed_addr constant [6 x i8] c"delay\00", align 1
@.str.107.893 = private unnamed_addr constant [6 x i8] c"qcomp\00", align 1
@.str.108.894 = private unnamed_addr constant [120 x i8] c"video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0\00", align 1
@.str.109.895 = private unnamed_addr constant [6 x i8] c"qblur\00", align 1
@.str.110.896 = private unnamed_addr constant [33 x i8] c"video quantizer scale blur (VBR)\00", align 1
@.str.111.897 = private unnamed_addr constant [5 x i8] c"qmin\00", align 1
@.str.112.898 = private unnamed_addr constant [36 x i8] c"minimum video quantizer scale (VBR)\00", align 1
@.str.113.899 = private unnamed_addr constant [5 x i8] c"qmax\00", align 1
@.str.114.900 = private unnamed_addr constant [36 x i8] c"maximum video quantizer scale (VBR)\00", align 1
@.str.115.901 = private unnamed_addr constant [6 x i8] c"qdiff\00", align 1
@.str.116.902 = private unnamed_addr constant [54 x i8] c"maximum difference between the quantizer scales (VBR)\00", align 1
@.str.117.903 = private unnamed_addr constant [3 x i8] c"bf\00", align 1
@.str.118.904 = private unnamed_addr constant [22 x i8] c"use 'frames' B frames\00", align 1
@.str.119.905 = private unnamed_addr constant [10 x i8] c"b_qfactor\00", align 1
@.str.120.906 = private unnamed_addr constant [34 x i8] c"QP factor between P- and B-frames\00", align 1
@.str.121.907 = private unnamed_addr constant [12 x i8] c"rc_strategy\00", align 1
@.str.122.908 = private unnamed_addr constant [19 x i8] c"ratecontrol method\00", align 1
@.str.123.909 = private unnamed_addr constant [11 x i8] c"b_strategy\00", align 1
@.str.124.910 = private unnamed_addr constant [40 x i8] c"strategy to choose between I/P/B-frames\00", align 1
@.str.125.911 = private unnamed_addr constant [3 x i8] c"ps\00", align 1
@.str.126.912 = private unnamed_addr constant [26 x i8] c"RTP payload size in bytes\00", align 1
@.str.127.913 = private unnamed_addr constant [8 x i8] c"mv_bits\00", align 1
@.str.128.914 = private unnamed_addr constant [12 x i8] c"header_bits\00", align 1
@.str.129.915 = private unnamed_addr constant [11 x i8] c"i_tex_bits\00", align 1
@.str.130.916 = private unnamed_addr constant [11 x i8] c"p_tex_bits\00", align 1
@.str.131.917 = private unnamed_addr constant [8 x i8] c"i_count\00", align 1
@.str.132.918 = private unnamed_addr constant [8 x i8] c"p_count\00", align 1
@.str.133.919 = private unnamed_addr constant [11 x i8] c"skip_count\00", align 1
@.str.134.920 = private unnamed_addr constant [10 x i8] c"misc_bits\00", align 1
@.str.135.921 = private unnamed_addr constant [11 x i8] c"frame_bits\00", align 1
@.str.136.922 = private unnamed_addr constant [10 x i8] c"codec_tag\00", align 1
@.str.137.923 = private unnamed_addr constant [4 x i8] c"bug\00", align 1
@.str.138.924 = private unnamed_addr constant [42 x i8] c"work around not autodetected encoder bugs\00", align 1
@.str.139.925 = private unnamed_addr constant [11 x i8] c"autodetect\00", align 1
@.str.140.926 = private unnamed_addr constant [12 x i8] c"old_msmpeg4\00", align 1
@.str.141.927 = private unnamed_addr constant [59 x i8] c"some old lavc-generated MSMPEG4v3 files (no autodetection)\00", align 1
@.str.142.928 = private unnamed_addr constant [11 x i8] c"xvid_ilace\00", align 1
@.str.143.929 = private unnamed_addr constant [54 x i8] c"Xvid interlacing bug (autodetected if FOURCC == XVIX)\00", align 1
@.str.144.930 = private unnamed_addr constant [5 x i8] c"ump4\00", align 1
@.str.145.931 = private unnamed_addr constant [33 x i8] c"(autodetected if FOURCC == UMP4)\00", align 1
@.str.146.932 = private unnamed_addr constant [11 x i8] c"no_padding\00", align 1
@.str.147.933 = private unnamed_addr constant [27 x i8] c"padding bug (autodetected)\00", align 1
@.str.148.934 = private unnamed_addr constant [4 x i8] c"amv\00", align 1
@.str.149.935 = private unnamed_addr constant [7 x i8] c"ac_vlc\00", align 1
@.str.150.936 = private unnamed_addr constant [42 x i8] c"illegal VLC bug (autodetected per FOURCC)\00", align 1
@.str.151.937 = private unnamed_addr constant [12 x i8] c"qpel_chroma\00", align 1
@.str.152.938 = private unnamed_addr constant [9 x i8] c"std_qpel\00", align 1
@.str.153.939 = private unnamed_addr constant [52 x i8] c"old standard qpel (autodetected per FOURCC/version)\00", align 1
@.str.154.940 = private unnamed_addr constant [13 x i8] c"qpel_chroma2\00", align 1
@.str.155.941 = private unnamed_addr constant [17 x i8] c"direct_blocksize\00", align 1
@.str.156.942 = private unnamed_addr constant [60 x i8] c"direct-qpel-blocksize bug (autodetected per FOURCC/version)\00", align 1
@.str.157.943 = private unnamed_addr constant [5 x i8] c"edge\00", align 1
@.str.158.944 = private unnamed_addr constant [51 x i8] c"edge padding bug (autodetected per FOURCC/version)\00", align 1
@.str.159.945 = private unnamed_addr constant [12 x i8] c"hpel_chroma\00", align 1
@.str.160.946 = private unnamed_addr constant [8 x i8] c"dc_clip\00", align 1
@.str.161.947 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.162.948 = private unnamed_addr constant [56 x i8] c"work around various bugs in Microsoft's broken decoders\00", align 1
@.str.163.949 = private unnamed_addr constant [6 x i8] c"trunc\00", align 1
@.str.164.950 = private unnamed_addr constant [17 x i8] c"truncated frames\00", align 1
@.str.165.951 = private unnamed_addr constant [6 x i8] c"lelim\00", align 1
@.str.166.952 = private unnamed_addr constant [102 x i8] c"single coefficient elimination threshold for luminance (negative values also consider DC coefficient)\00", align 1
@.str.167.953 = private unnamed_addr constant [6 x i8] c"celim\00", align 1
@.str.168.954 = private unnamed_addr constant [104 x i8] c"single coefficient elimination threshold for chrominance (negative values also consider DC coefficient)\00", align 1
@.str.169.955 = private unnamed_addr constant [7 x i8] c"strict\00", align 1
@.str.170.956 = private unnamed_addr constant [37 x i8] c"how strictly to follow the standards\00", align 1
@.str.171.957 = private unnamed_addr constant [5 x i8] c"very\00", align 1
@.str.172.958 = private unnamed_addr constant [82 x i8] c"strictly conform to a older more strict version of the spec or reference software\00", align 1
@.str.173.959 = private unnamed_addr constant [79 x i8] c"strictly conform to all the things in the spec no matter what the consequences\00", align 1
@.str.174.960 = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@.str.175.961 = private unnamed_addr constant [11 x i8] c"unofficial\00", align 1
@.str.176.962 = private unnamed_addr constant [28 x i8] c"allow unofficial extensions\00", align 1
@.str.177.963 = private unnamed_addr constant [13 x i8] c"experimental\00", align 1
@.str.178.964 = private unnamed_addr constant [43 x i8] c"allow non-standardized experimental things\00", align 1
@.str.179.965 = private unnamed_addr constant [10 x i8] c"b_qoffset\00", align 1
@.str.180.966 = private unnamed_addr constant [34 x i8] c"QP offset between P- and B-frames\00", align 1
@.str.181.967 = private unnamed_addr constant [11 x i8] c"err_detect\00", align 1
@.str.182.968 = private unnamed_addr constant [26 x i8] c"set error detection flags\00", align 1
@.str.183.969 = private unnamed_addr constant [9 x i8] c"crccheck\00", align 1
@.str.184.970 = private unnamed_addr constant [21 x i8] c"verify embedded CRCs\00", align 1
@.str.185.971 = private unnamed_addr constant [10 x i8] c"bitstream\00", align 1
@.str.186.972 = private unnamed_addr constant [42 x i8] c"detect bitstream specification deviations\00", align 1
@.str.187.973 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.188.974 = private unnamed_addr constant [33 x i8] c"detect improper bitstream length\00", align 1
@.str.189.975 = private unnamed_addr constant [8 x i8] c"explode\00", align 1
@.str.190.976 = private unnamed_addr constant [40 x i8] c"abort decoding on minor error detection\00", align 1
@.str.191.977 = private unnamed_addr constant [8 x i8] c"careful\00", align 1
@.str.192.978 = private unnamed_addr constant [83 x i8] c"consider things that violate the spec and have not been seen in the wild as errors\00", align 1
@.str.193.979 = private unnamed_addr constant [10 x i8] c"compliant\00", align 1
@.str.194.980 = private unnamed_addr constant [45 x i8] c"consider all spec non compliancies as errors\00", align 1
@.str.195.981 = private unnamed_addr constant [11 x i8] c"aggressive\00", align 1
@.str.196.982 = private unnamed_addr constant [62 x i8] c"consider things that a sane encoder should not do as an error\00", align 1
@.str.197.983 = private unnamed_addr constant [13 x i8] c"has_b_frames\00", align 1
@.str.198.984 = private unnamed_addr constant [12 x i8] c"block_align\00", align 1
@.str.199.985 = private unnamed_addr constant [11 x i8] c"mpeg_quant\00", align 1
@.str.200.986 = private unnamed_addr constant [37 x i8] c"use MPEG quantizers instead of H.263\00", align 1
@.str.201.987 = private unnamed_addr constant [8 x i8] c"qsquish\00", align 1
@.str.202.988 = private unnamed_addr constant [88 x i8] c"how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)\00", align 1
@.str.203.989 = private unnamed_addr constant [12 x i8] c"rc_qmod_amp\00", align 1
@.str.204.990 = private unnamed_addr constant [34 x i8] c"experimental quantizer modulation\00", align 1
@.str.205.991 = private unnamed_addr constant [13 x i8] c"rc_qmod_freq\00", align 1
@.str.206.992 = private unnamed_addr constant [18 x i8] c"rc_override_count\00", align 1
@.str.207.993 = private unnamed_addr constant [6 x i8] c"rc_eq\00", align 1
@.str.208.994 = private unnamed_addr constant [356 x i8] c"Set rate control equation. When computing the expression, besides the standard functions defined in the section 'Expression Evaluation', the following functions are available: bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.\00", align 1
@.str.209.995 = private unnamed_addr constant [8 x i8] c"maxrate\00", align 1
@.str.210.996 = private unnamed_addr constant [71 x i8] c"Set maximum bitrate tolerance (in bits/s). Requires bufsize to be set.\00", align 1
@.str.211.997 = private unnamed_addr constant [8 x i8] c"minrate\00", align 1
@.str.212.998 = private unnamed_addr constant [114 x i8] c"Set minimum bitrate tolerance (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.\00", align 1
@.str.213.999 = private unnamed_addr constant [8 x i8] c"bufsize\00", align 1
@.str.214.1000 = private unnamed_addr constant [38 x i8] c"set ratecontrol buffer size (in bits)\00", align 1
@.str.215.1001 = private unnamed_addr constant [20 x i8] c"rc_buf_aggressivity\00", align 1
@.str.216.1002 = private unnamed_addr constant [18 x i8] c"currently useless\00", align 1
@.str.217.1003 = private unnamed_addr constant [10 x i8] c"i_qfactor\00", align 1
@.str.218.1004 = private unnamed_addr constant [34 x i8] c"QP factor between P- and I-frames\00", align 1
@.str.219.1005 = private unnamed_addr constant [10 x i8] c"i_qoffset\00", align 1
@.str.220.1006 = private unnamed_addr constant [34 x i8] c"QP offset between P- and I-frames\00", align 1
@.str.221.1007 = private unnamed_addr constant [13 x i8] c"rc_init_cplx\00", align 1
@.str.222.1008 = private unnamed_addr constant [39 x i8] c"initial complexity for 1-pass encoding\00", align 1
@.str.223.1009 = private unnamed_addr constant [4 x i8] c"dct\00", align 1
@.str.224.1010 = private unnamed_addr constant [14 x i8] c"DCT algorithm\00", align 1
@.str.225.1011 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.226.1012 = private unnamed_addr constant [32 x i8] c"autoselect a good one (default)\00", align 1
@.str.227.1013 = private unnamed_addr constant [8 x i8] c"fastint\00", align 1
@.str.228.1014 = private unnamed_addr constant [13 x i8] c"fast integer\00", align 1
@.str.229.1015 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.230.1016 = private unnamed_addr constant [17 x i8] c"accurate integer\00", align 1
@.str.231.1017 = private unnamed_addr constant [4 x i8] c"mmx\00", align 1
@.str.232.1018 = private unnamed_addr constant [8 x i8] c"altivec\00", align 1
@.str.233.1019 = private unnamed_addr constant [5 x i8] c"faan\00", align 1
@.str.234.1020 = private unnamed_addr constant [23 x i8] c"floating point AAN DCT\00", align 1
@.str.235.1021 = private unnamed_addr constant [10 x i8] c"lumi_mask\00", align 1
@.str.236.1022 = private unnamed_addr constant [50 x i8] c"compresses bright areas stronger than medium ones\00", align 1
@.str.237.1023 = private unnamed_addr constant [11 x i8] c"tcplx_mask\00", align 1
@.str.238.1024 = private unnamed_addr constant [28 x i8] c"temporal complexity masking\00", align 1
@.str.239.1025 = private unnamed_addr constant [11 x i8] c"scplx_mask\00", align 1
@.str.240.1026 = private unnamed_addr constant [27 x i8] c"spatial complexity masking\00", align 1
@.str.241.1027 = private unnamed_addr constant [7 x i8] c"p_mask\00", align 1
@.str.242.1028 = private unnamed_addr constant [14 x i8] c"inter masking\00", align 1
@.str.243.1029 = private unnamed_addr constant [10 x i8] c"dark_mask\00", align 1
@.str.244.1030 = private unnamed_addr constant [48 x i8] c"compresses dark areas stronger than medium ones\00", align 1
@.str.245.1031 = private unnamed_addr constant [5 x i8] c"idct\00", align 1
@.str.246.1032 = private unnamed_addr constant [27 x i8] c"select IDCT implementation\00", align 1
@.str.247.1033 = private unnamed_addr constant [7 x i8] c"simple\00", align 1
@.str.248.1034 = private unnamed_addr constant [10 x i8] c"simplemmx\00", align 1
@.str.249.1035 = private unnamed_addr constant [12 x i8] c"libmpeg2mmx\00", align 1
@.str.250.1036 = private unnamed_addr constant [4 x i8] c"mmi\00", align 1
@.str.251.1037 = private unnamed_addr constant [4 x i8] c"arm\00", align 1
@.str.252.1038 = private unnamed_addr constant [4 x i8] c"sh4\00", align 1
@.str.253.1039 = private unnamed_addr constant [10 x i8] c"simplearm\00", align 1
@.str.254.1040 = private unnamed_addr constant [14 x i8] c"simplearmv5te\00", align 1
@.str.255.1041 = private unnamed_addr constant [12 x i8] c"simplearmv6\00", align 1
@.str.256.1042 = private unnamed_addr constant [11 x i8] c"simpleneon\00", align 1
@.str.257.1043 = private unnamed_addr constant [12 x i8] c"simplealpha\00", align 1
@.str.258.1044 = private unnamed_addr constant [5 x i8] c"h264\00", align 1
@.str.259.1045 = private unnamed_addr constant [4 x i8] c"vp3\00", align 1
@.str.260.1046 = private unnamed_addr constant [4 x i8] c"ipp\00", align 1
@.str.261.1047 = private unnamed_addr constant [8 x i8] c"xvidmmx\00", align 1
@.str.262.1048 = private unnamed_addr constant [6 x i8] c"faani\00", align 1
@.str.263.1049 = private unnamed_addr constant [24 x i8] c"floating point AAN IDCT\00", align 1
@.str.264.1050 = private unnamed_addr constant [12 x i8] c"slice_count\00", align 1
@.str.265.1051 = private unnamed_addr constant [3 x i8] c"ec\00", align 1
@.str.266.1052 = private unnamed_addr constant [31 x i8] c"set error concealment strategy\00", align 1
@.str.267.1053 = private unnamed_addr constant [10 x i8] c"guess_mvs\00", align 1
@.str.268.1054 = private unnamed_addr constant [43 x i8] c"iterative motion vector (MV) search (slow)\00", align 1
@.str.269.1055 = private unnamed_addr constant [8 x i8] c"deblock\00", align 1
@.str.270.1056 = private unnamed_addr constant [42 x i8] c"use strong deblock filter for damaged MBs\00", align 1
@.str.271.1057 = private unnamed_addr constant [22 x i8] c"bits_per_coded_sample\00", align 1
@.str.272.1058 = private unnamed_addr constant [5 x i8] c"pred\00", align 1
@.str.273.1059 = private unnamed_addr constant [18 x i8] c"prediction method\00", align 1
@.str.274.1060 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@.str.275.1061 = private unnamed_addr constant [6 x i8] c"plane\00", align 1
@.str.276.1062 = private unnamed_addr constant [7 x i8] c"median\00", align 1
@.str.277.1063 = private unnamed_addr constant [7 x i8] c"aspect\00", align 1
@.str.278.1064 = private unnamed_addr constant [20 x i8] c"sample aspect ratio\00", align 1
@.str.279.1065 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.280.1066 = private unnamed_addr constant [26 x i8] c"print specific debug info\00", align 1
@.str.281.1067 = private unnamed_addr constant [5 x i8] c"pict\00", align 1
@.str.282.1068 = private unnamed_addr constant [13 x i8] c"picture info\00", align 1
@.str.283.1069 = private unnamed_addr constant [3 x i8] c"rc\00", align 1
@.str.284.1070 = private unnamed_addr constant [13 x i8] c"rate control\00", align 1
@.str.285.1071 = private unnamed_addr constant [8 x i8] c"mb_type\00", align 1
@.str.286.1072 = private unnamed_addr constant [21 x i8] c"macroblock (MB) type\00", align 1
@.str.287.1073 = private unnamed_addr constant [3 x i8] c"qp\00", align 1
@.str.288.1074 = private unnamed_addr constant [38 x i8] c"per-block quantization parameter (QP)\00", align 1
@.str.289.1075 = private unnamed_addr constant [3 x i8] c"mv\00", align 1
@.str.290.1076 = private unnamed_addr constant [14 x i8] c"motion vector\00", align 1
@.str.291.1077 = private unnamed_addr constant [10 x i8] c"dct_coeff\00", align 1
@.str.292.1078 = private unnamed_addr constant [5 x i8] c"skip\00", align 1
@.str.293.1079 = private unnamed_addr constant [10 x i8] c"startcode\00", align 1
@.str.294.1080 = private unnamed_addr constant [4 x i8] c"pts\00", align 1
@.str.295.1081 = private unnamed_addr constant [3 x i8] c"er\00", align 1
@.str.296.1082 = private unnamed_addr constant [18 x i8] c"error recognition\00", align 1
@.str.297.1083 = private unnamed_addr constant [5 x i8] c"mmco\00", align 1
@.str.298.1084 = private unnamed_addr constant [45 x i8] c"memory management control operations (H.264)\00", align 1
@.str.299.1085 = private unnamed_addr constant [5 x i8] c"bugs\00", align 1
@.str.300.1086 = private unnamed_addr constant [7 x i8] c"vis_qp\00", align 1
@.str.301.1087 = private unnamed_addr constant [67 x i8] c"visualize quantization parameter (QP), lower QP are tinted greener\00", align 1
@.str.302.1088 = private unnamed_addr constant [12 x i8] c"vis_mb_type\00", align 1
@.str.303.1089 = private unnamed_addr constant [22 x i8] c"visualize block types\00", align 1
@.str.304.1090 = private unnamed_addr constant [8 x i8] c"buffers\00", align 1
@.str.305.1091 = private unnamed_addr constant [27 x i8] c"picture buffer allocations\00", align 1
@.str.306.1092 = private unnamed_addr constant [11 x i8] c"thread_ops\00", align 1
@.str.307.1093 = private unnamed_addr constant [21 x i8] c"threading operations\00", align 1
@.str.308.1094 = private unnamed_addr constant [6 x i8] c"vismv\00", align 1
@.str.309.1095 = private unnamed_addr constant [31 x i8] c"visualize motion vectors (MVs)\00", align 1
@.str.310.1096 = private unnamed_addr constant [9 x i8] c"debug_mv\00", align 1
@.str.311.1097 = private unnamed_addr constant [3 x i8] c"pf\00", align 1
@.str.312.1098 = private unnamed_addr constant [34 x i8] c"forward predicted MVs of P-frames\00", align 1
@.str.313.1099 = private unnamed_addr constant [34 x i8] c"forward predicted MVs of B-frames\00", align 1
@.str.314.1100 = private unnamed_addr constant [3 x i8] c"bb\00", align 1
@.str.315.1101 = private unnamed_addr constant [35 x i8] c"backward predicted MVs of B-frames\00", align 1
@.str.316.1102 = private unnamed_addr constant [4 x i8] c"cmp\00", align 1
@.str.317.1103 = private unnamed_addr constant [29 x i8] c"full-pel ME compare function\00", align 1
@.str.318.1104 = private unnamed_addr constant [9 x i8] c"cmp_func\00", align 1
@.str.319.1105 = private unnamed_addr constant [7 x i8] c"subcmp\00", align 1
@.str.320.1106 = private unnamed_addr constant [28 x i8] c"sub-pel ME compare function\00", align 1
@.str.321.1107 = private unnamed_addr constant [6 x i8] c"mbcmp\00", align 1
@.str.322.1108 = private unnamed_addr constant [28 x i8] c"macroblock compare function\00", align 1
@.str.323.1109 = private unnamed_addr constant [9 x i8] c"ildctcmp\00", align 1
@.str.324.1110 = private unnamed_addr constant [32 x i8] c"interlaced DCT compare function\00", align 1
@.str.325.1111 = private unnamed_addr constant [9 x i8] c"dia_size\00", align 1
@.str.326.1112 = private unnamed_addr constant [42 x i8] c"diamond type & size for motion estimation\00", align 1
@.str.327.1113 = private unnamed_addr constant [10 x i8] c"last_pred\00", align 1
@.str.328.1114 = private unnamed_addr constant [52 x i8] c"amount of motion predictors from the previous frame\00", align 1
@.str.329.1115 = private unnamed_addr constant [6 x i8] c"preme\00", align 1
@.str.330.1116 = private unnamed_addr constant [22 x i8] c"pre motion estimation\00", align 1
@.str.331.1117 = private unnamed_addr constant [7 x i8] c"precmp\00", align 1
@.str.332.1118 = private unnamed_addr constant [39 x i8] c"pre motion estimation compare function\00", align 1
@.str.333.1119 = private unnamed_addr constant [4 x i8] c"sad\00", align 1
@.str.334.1120 = private unnamed_addr constant [44 x i8] c"sum of absolute differences, fast (default)\00", align 1
@.str.335.1121 = private unnamed_addr constant [4 x i8] c"sse\00", align 1
@.str.336.1122 = private unnamed_addr constant [22 x i8] c"sum of squared errors\00", align 1
@.str.337.1123 = private unnamed_addr constant [5 x i8] c"satd\00", align 1
@.str.338.1124 = private unnamed_addr constant [49 x i8] c"sum of absolute Hadamard transformed differences\00", align 1
@.str.339.1125 = private unnamed_addr constant [44 x i8] c"sum of absolute DCT transformed differences\00", align 1
@.str.340.1126 = private unnamed_addr constant [56 x i8] c"sum of squared quantization errors (avoid, low quality)\00", align 1
@.str.341.1127 = private unnamed_addr constant [4 x i8] c"bit\00", align 1
@.str.342.1128 = private unnamed_addr constant [36 x i8] c"number of bits needed for the block\00", align 1
@.str.343.1129 = private unnamed_addr constant [3 x i8] c"rd\00", align 1
@.str.344.1130 = private unnamed_addr constant [30 x i8] c"rate distortion optimal, slow\00", align 1
@.str.345.1131 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.346.1132 = private unnamed_addr constant [5 x i8] c"vsad\00", align 1
@.str.347.1133 = private unnamed_addr constant [37 x i8] c"sum of absolute vertical differences\00", align 1
@.str.348.1134 = private unnamed_addr constant [5 x i8] c"vsse\00", align 1
@.str.349.1135 = private unnamed_addr constant [36 x i8] c"sum of squared vertical differences\00", align 1
@.str.350.1136 = private unnamed_addr constant [5 x i8] c"nsse\00", align 1
@.str.351.1137 = private unnamed_addr constant [44 x i8] c"noise preserving sum of squared differences\00", align 1
@.str.352.1138 = private unnamed_addr constant [7 x i8] c"dctmax\00", align 1
@.str.353.1139 = private unnamed_addr constant [7 x i8] c"chroma\00", align 1
@.str.354.1140 = private unnamed_addr constant [13 x i8] c"pre_dia_size\00", align 1
@.str.355.1141 = private unnamed_addr constant [51 x i8] c"diamond type & size for motion estimation pre-pass\00", align 1
@.str.356.1142 = private unnamed_addr constant [5 x i8] c"subq\00", align 1
@.str.357.1143 = private unnamed_addr constant [34 x i8] c"sub-pel motion estimation quality\00", align 1
@.str.358.1144 = private unnamed_addr constant [18 x i8] c"dtg_active_format\00", align 1
@.str.359.1145 = private unnamed_addr constant [9 x i8] c"me_range\00", align 1
@.str.360.1146 = private unnamed_addr constant [50 x i8] c"limit motion vectors range (1023 for DivX player)\00", align 1
@.str.361.1147 = private unnamed_addr constant [6 x i8] c"ibias\00", align 1
@.str.362.1148 = private unnamed_addr constant [17 x i8] c"intra quant bias\00", align 1
@.str.363.1149 = private unnamed_addr constant [6 x i8] c"pbias\00", align 1
@.str.364.1150 = private unnamed_addr constant [17 x i8] c"inter quant bias\00", align 1
@.str.365.1151 = private unnamed_addr constant [15 x i8] c"color_table_id\00", align 1
@.str.366.1152 = private unnamed_addr constant [15 x i8] c"global_quality\00", align 1
@.str.367.1153 = private unnamed_addr constant [6 x i8] c"coder\00", align 1
@.str.368.1154 = private unnamed_addr constant [4 x i8] c"vlc\00", align 1
@.str.369.1155 = private unnamed_addr constant [38 x i8] c"variable length coder / Huffman coder\00", align 1
@.str.370.1156 = private unnamed_addr constant [17 x i8] c"arithmetic coder\00", align 1
@.str.371.1157 = private unnamed_addr constant [4 x i8] c"raw\00", align 1
@.str.372.1158 = private unnamed_addr constant [18 x i8] c"raw (no encoding)\00", align 1
@.str.373.1159 = private unnamed_addr constant [4 x i8] c"rle\00", align 1
@.str.374.1160 = private unnamed_addr constant [17 x i8] c"run-length coder\00", align 1
@.str.375.1161 = private unnamed_addr constant [8 x i8] c"deflate\00", align 1
@.str.376.1162 = private unnamed_addr constant [20 x i8] c"deflate-based coder\00", align 1
@.str.377.1163 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@.str.378.1164 = private unnamed_addr constant [14 x i8] c"context model\00", align 1
@.str.379.1165 = private unnamed_addr constant [12 x i8] c"slice_flags\00", align 1
@.str.380.1166 = private unnamed_addr constant [18 x i8] c"xvmc_acceleration\00", align 1
@.str.381.1167 = private unnamed_addr constant [4 x i8] c"mbd\00", align 1
@.str.382.1168 = private unnamed_addr constant [50 x i8] c"macroblock decision algorithm (high quality mode)\00", align 1
@.str.383.1169 = private unnamed_addr constant [20 x i8] c"use mbcmp (default)\00", align 1
@.str.384.1170 = private unnamed_addr constant [5 x i8] c"bits\00", align 1
@.str.385.1171 = private unnamed_addr constant [16 x i8] c"use fewest bits\00", align 1
@.str.386.1172 = private unnamed_addr constant [25 x i8] c"use best rate distortion\00", align 1
@.str.387.1173 = private unnamed_addr constant [17 x i8] c"stream_codec_tag\00", align 1
@.str.388.1174 = private unnamed_addr constant [13 x i8] c"sc_threshold\00", align 1
@.str.389.1175 = private unnamed_addr constant [23 x i8] c"scene change threshold\00", align 1
@.str.390.1176 = private unnamed_addr constant [5 x i8] c"lmin\00", align 1
@.str.391.1177 = private unnamed_addr constant [30 x i8] c"minimum Lagrange factor (VBR)\00", align 1
@.str.392.1178 = private unnamed_addr constant [5 x i8] c"lmax\00", align 1
@.str.393.1179 = private unnamed_addr constant [30 x i8] c"maximum Lagrange factor (VBR)\00", align 1
@.str.394.1180 = private unnamed_addr constant [3 x i8] c"nr\00", align 1
@.str.395.1181 = private unnamed_addr constant [16 x i8] c"noise reduction\00", align 1
@.str.396.1182 = private unnamed_addr constant [18 x i8] c"rc_init_occupancy\00", align 1
@.str.397.1183 = private unnamed_addr constant [80 x i8] c"number of bits which should be loaded into the rc buffer before decoding starts\00", align 1
@.str.398.1184 = private unnamed_addr constant [16 x i8] c"inter_threshold\00", align 1
@.str.399.1185 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.400.1186 = private unnamed_addr constant [4 x i8] c"qns\00", align 1
@.str.401.1187 = private unnamed_addr constant [50 x i8] c"deprecated, use mpegvideo private options instead\00", align 1
@.str.402.1188 = private unnamed_addr constant [8 x i8] c"threads\00", align 1
@.str.403.1189 = private unnamed_addr constant [47 x i8] c"autodetect a suitable number of threads to use\00", align 1
@.str.404.1190 = private unnamed_addr constant [13 x i8] c"me_threshold\00", align 1
@.str.405.1191 = private unnamed_addr constant [28 x i8] c"motion estimation threshold\00", align 1
@.str.406.1192 = private unnamed_addr constant [13 x i8] c"mb_threshold\00", align 1
@.str.407.1193 = private unnamed_addr constant [21 x i8] c"macroblock threshold\00", align 1
@.str.408.1194 = private unnamed_addr constant [3 x i8] c"dc\00", align 1
@.str.409.1195 = private unnamed_addr constant [19 x i8] c"intra_dc_precision\00", align 1
@.str.410.1196 = private unnamed_addr constant [6 x i8] c"nssew\00", align 1
@.str.411.1197 = private unnamed_addr constant [12 x i8] c"nsse weight\00", align 1
@.str.412.1198 = private unnamed_addr constant [9 x i8] c"skip_top\00", align 1
@.str.413.1199 = private unnamed_addr constant [55 x i8] c"number of macroblock rows at the top which are skipped\00", align 1
@.str.414.1200 = private unnamed_addr constant [12 x i8] c"skip_bottom\00", align 1
@.str.415.1201 = private unnamed_addr constant [58 x i8] c"number of macroblock rows at the bottom which are skipped\00", align 1
@.str.416.1202 = private unnamed_addr constant [8 x i8] c"profile\00", align 1
@.str.417.1203 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@.str.418.1204 = private unnamed_addr constant [9 x i8] c"aac_main\00", align 1
@.str.419.1205 = private unnamed_addr constant [8 x i8] c"aac_low\00", align 1
@.str.420.1206 = private unnamed_addr constant [8 x i8] c"aac_ssr\00", align 1
@.str.421.1207 = private unnamed_addr constant [8 x i8] c"aac_ltp\00", align 1
@.str.422.1208 = private unnamed_addr constant [7 x i8] c"aac_he\00", align 1
@.str.423.1209 = private unnamed_addr constant [10 x i8] c"aac_he_v2\00", align 1
@.str.424.1210 = private unnamed_addr constant [7 x i8] c"aac_ld\00", align 1
@.str.425.1211 = private unnamed_addr constant [8 x i8] c"aac_eld\00", align 1
@.str.426.1212 = private unnamed_addr constant [4 x i8] c"dts\00", align 1
@.str.427.1213 = private unnamed_addr constant [7 x i8] c"dts_es\00", align 1
@.str.428.1214 = private unnamed_addr constant [10 x i8] c"dts_96_24\00", align 1
@.str.429.1215 = private unnamed_addr constant [11 x i8] c"dts_hd_hra\00", align 1
@.str.430.1216 = private unnamed_addr constant [10 x i8] c"dts_hd_ma\00", align 1
@.str.431.1217 = private unnamed_addr constant [6 x i8] c"level\00", align 1
@.str.432.1218 = private unnamed_addr constant [7 x i8] c"lowres\00", align 1
@.str.433.1219 = private unnamed_addr constant [43 x i8] c"decode at 1= 1/2, 2=1/4, 3=1/8 resolutions\00", align 1
@.str.434.1220 = private unnamed_addr constant [15 x i8] c"skip_threshold\00", align 1
@.str.435.1221 = private unnamed_addr constant [21 x i8] c"frame skip threshold\00", align 1
@.str.436.1222 = private unnamed_addr constant [12 x i8] c"skip_factor\00", align 1
@.str.437.1223 = private unnamed_addr constant [18 x i8] c"frame skip factor\00", align 1
@.str.438.1224 = private unnamed_addr constant [9 x i8] c"skip_exp\00", align 1
@.str.439.1225 = private unnamed_addr constant [20 x i8] c"frame skip exponent\00", align 1
@.str.440.1226 = private unnamed_addr constant [8 x i8] c"skipcmp\00", align 1
@.str.441.1227 = private unnamed_addr constant [28 x i8] c"frame skip compare function\00", align 1
@.str.442.1228 = private unnamed_addr constant [12 x i8] c"border_mask\00", align 1
@.str.443.1229 = private unnamed_addr constant [56 x i8] c"increase the quantizer for macroblocks close to borders\00", align 1
@.str.444.1230 = private unnamed_addr constant [7 x i8] c"mblmin\00", align 1
@.str.445.1231 = private unnamed_addr constant [41 x i8] c"minimum macroblock Lagrange factor (VBR)\00", align 1
@.str.446.1232 = private unnamed_addr constant [7 x i8] c"mblmax\00", align 1
@.str.447.1233 = private unnamed_addr constant [41 x i8] c"maximum macroblock Lagrange factor (VBR)\00", align 1
@.str.448.1234 = private unnamed_addr constant [5 x i8] c"mepc\00", align 1
@.str.449.1235 = private unnamed_addr constant [59 x i8] c"motion estimation bitrate penalty compensation (1.0 = 256)\00", align 1
@.str.450.1236 = private unnamed_addr constant [17 x i8] c"skip_loop_filter\00", align 1
@.str.451.1237 = private unnamed_addr constant [10 x i8] c"avdiscard\00", align 1
@.str.452.1238 = private unnamed_addr constant [10 x i8] c"skip_idct\00", align 1
@.str.453.1239 = private unnamed_addr constant [11 x i8] c"skip_frame\00", align 1
@.str.454.1240 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.455.1241 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.456.1242 = private unnamed_addr constant [6 x i8] c"noref\00", align 1
@.str.457.1243 = private unnamed_addr constant [6 x i8] c"bidir\00", align 1
@.str.458.1244 = private unnamed_addr constant [6 x i8] c"nokey\00", align 1
@.str.459.1245 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.460.1246 = private unnamed_addr constant [13 x i8] c"bidir_refine\00", align 1
@.str.461.1247 = private unnamed_addr constant [64 x i8] c"refine the two motion vectors used in bidirectional macroblocks\00", align 1
@.str.462.1248 = private unnamed_addr constant [10 x i8] c"brd_scale\00", align 1
@.str.463.1249 = private unnamed_addr constant [46 x i8] c"downscale frames for dynamic B-frame decision\00", align 1
@.str.464.1250 = private unnamed_addr constant [11 x i8] c"keyint_min\00", align 1
@.str.465.1251 = private unnamed_addr constant [36 x i8] c"minimum interval between IDR-frames\00", align 1
@.str.466.1252 = private unnamed_addr constant [5 x i8] c"refs\00", align 1
@.str.467.1253 = private unnamed_addr constant [53 x i8] c"reference frames to consider for motion compensation\00", align 1
@.str.468.1254 = private unnamed_addr constant [13 x i8] c"chromaoffset\00", align 1
@.str.469.1255 = private unnamed_addr constant [27 x i8] c"chroma QP offset from luma\00", align 1
@.str.470.1256 = private unnamed_addr constant [8 x i8] c"trellis\00", align 1
@.str.471.1257 = private unnamed_addr constant [37 x i8] c"rate-distortion optimal quantization\00", align 1
@.str.472.1258 = private unnamed_addr constant [7 x i8] c"skiprd\00", align 1
@.str.473.1259 = private unnamed_addr constant [10 x i8] c"sc_factor\00", align 1
@.str.474.1260 = private unnamed_addr constant [68 x i8] c"multiplied by qscale for each frame and added to scene_change_score\00", align 1
@.str.475.1261 = private unnamed_addr constant [14 x i8] c"mv0_threshold\00", align 1
@.str.476.1262 = private unnamed_addr constant [14 x i8] c"b_sensitivity\00", align 1
@.str.477.1263 = private unnamed_addr constant [41 x i8] c"adjust sensitivity of b_frame_strategy 1\00", align 1
@.str.478.1264 = private unnamed_addr constant [18 x i8] c"compression_level\00", align 1
@.str.479.1265 = private unnamed_addr constant [21 x i8] c"min_prediction_order\00", align 1
@.str.480.1266 = private unnamed_addr constant [21 x i8] c"max_prediction_order\00", align 1
@.str.481.1267 = private unnamed_addr constant [21 x i8] c"timecode_frame_start\00", align 1
@.str.482.1268 = private unnamed_addr constant [58 x i8] c"GOP timecode frame start number, in non-drop-frame format\00", align 1
@.str.483.1269 = private unnamed_addr constant [17 x i8] c"request_channels\00", align 1
@.str.484.1270 = private unnamed_addr constant [37 x i8] c"set desired number of audio channels\00", align 1
@.str.485.1271 = private unnamed_addr constant [20 x i8] c"bits_per_raw_sample\00", align 1
@.str.486.1272 = private unnamed_addr constant [15 x i8] c"channel_layout\00", align 1
@.str.487.1273 = private unnamed_addr constant [23 x i8] c"request_channel_layout\00", align 1
@.str.488.1274 = private unnamed_addr constant [15 x i8] c"rc_max_vbv_use\00", align 1
@.str.489.1275 = private unnamed_addr constant [15 x i8] c"rc_min_vbv_use\00", align 1
@.str.490.1276 = private unnamed_addr constant [16 x i8] c"ticks_per_frame\00", align 1
@.str.491.1277 = private unnamed_addr constant [16 x i8] c"color_primaries\00", align 1
@.str.492.1278 = private unnamed_addr constant [10 x i8] c"color_trc\00", align 1
@.str.493.1279 = private unnamed_addr constant [11 x i8] c"colorspace\00", align 1
@.str.494.1280 = private unnamed_addr constant [12 x i8] c"color_range\00", align 1
@.str.495.1281 = private unnamed_addr constant [23 x i8] c"chroma_sample_location\00", align 1
@.str.496.1282 = private unnamed_addr constant [17 x i8] c"log_level_offset\00", align 1
@.str.497.1283 = private unnamed_addr constant [25 x i8] c"set the log level offset\00", align 1
@.str.498.1284 = private unnamed_addr constant [7 x i8] c"slices\00", align 1
@.str.499.1285 = private unnamed_addr constant [48 x i8] c"number of slices, used in parallelized encoding\00", align 1
@.str.500.1286 = private unnamed_addr constant [12 x i8] c"thread_type\00", align 1
@.str.501.1287 = private unnamed_addr constant [27 x i8] c"select multithreading type\00", align 1
@.str.502.1288 = private unnamed_addr constant [6 x i8] c"slice\00", align 1
@.str.503.1289 = private unnamed_addr constant [6 x i8] c"frame\00", align 1
@.str.504.1290 = private unnamed_addr constant [19 x i8] c"audio_service_type\00", align 1
@.str.505.1291 = private unnamed_addr constant [19 x i8] c"audio service type\00", align 1
@.str.506.1292 = private unnamed_addr constant [3 x i8] c"ma\00", align 1
@.str.507.1293 = private unnamed_addr constant [19 x i8] c"Main Audio Service\00", align 1
@.str.508.1294 = private unnamed_addr constant [3 x i8] c"ef\00", align 1
@.str.509.1295 = private unnamed_addr constant [8 x i8] c"Effects\00", align 1
@.str.510.1296 = private unnamed_addr constant [3 x i8] c"vi\00", align 1
@.str.511.1297 = private unnamed_addr constant [18 x i8] c"Visually Impaired\00", align 1
@.str.512.1298 = private unnamed_addr constant [3 x i8] c"hi\00", align 1
@.str.513.1299 = private unnamed_addr constant [17 x i8] c"Hearing Impaired\00", align 1
@.str.514.1300 = private unnamed_addr constant [3 x i8] c"di\00", align 1
@.str.515.1301 = private unnamed_addr constant [9 x i8] c"Dialogue\00", align 1
@.str.516.1302 = private unnamed_addr constant [3 x i8] c"co\00", align 1
@.str.517.1303 = private unnamed_addr constant [11 x i8] c"Commentary\00", align 1
@.str.518.1304 = private unnamed_addr constant [3 x i8] c"em\00", align 1
@.str.519.1305 = private unnamed_addr constant [10 x i8] c"Emergency\00", align 1
@.str.520.1306 = private unnamed_addr constant [3 x i8] c"vo\00", align 1
@.str.521.1307 = private unnamed_addr constant [11 x i8] c"Voice Over\00", align 1
@.str.522.1308 = private unnamed_addr constant [3 x i8] c"ka\00", align 1
@.str.523.1309 = private unnamed_addr constant [8 x i8] c"Karaoke\00", align 1
@.str.524.1310 = private unnamed_addr constant [19 x i8] c"request_sample_fmt\00", align 1
@.str.525.1311 = private unnamed_addr constant [43 x i8] c"sample format audio decoders should prefer\00", align 1
@.str.526.1312 = private unnamed_addr constant [13 x i8] c"pkt_timebase\00", align 1
@.str.5.1313 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.1338 = private unnamed_addr constant [27 x i8] c"detected %d logical cores\0A\00", align 1
@.str.3.1341 = private unnamed_addr constant [41 x i8] c"Multiple ff_thread_finish_setup() calls\0A\00", align 1
@.str.7.1346 = private unnamed_addr constant [51 x i8] c"avcodec_thread_init is ignored after avcodec_open\0A\00", align 1
@.str.9.1347 = private unnamed_addr constant [96 x i8] c"Application has requested %d threads. Using a thread count greater than %d is not recommended.\0A\00", align 1
@.str.10.1349 = private unnamed_addr constant [28 x i8] c"Final thread update failed\0A\00", align 1
@ff_rawvideo_encoder = internal global %struct.AVCodec.134 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1364, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.1365, i32 0, i32 0), i32 0, i32 14, i32 0, %struct.AVRational* null, i32* null, i32* null, i32* null, i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i32 520, %struct.AVCodec.134* null, i32 (%struct.AVCodecContext.129*)* null, i32 (%struct.AVCodecContext.129*, %struct.AVCodecContext.129*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec.134*)* null, i32 (%struct.AVCodecContext.129*)* @raw_init_encoder, i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)* @raw_encode, i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext.129*)* null, void (%struct.AVCodecContext.129*)* null }, align 8
@.str.1364 = private unnamed_addr constant [9 x i8] c"rawvideo\00", align 1
@.str.1.1365 = private unnamed_addr constant [10 x i8] c"raw video\00", align 1
@ff_raw_pix_fmt_tags = internal unnamed_addr constant [154 x %struct.AVRational] [%struct.AVRational { i32 0, i32 808596553 }, %struct.AVRational { i32 0, i32 1448433993 }, %struct.AVRational { i32 0, i32 842094169 }, %struct.AVRational { i32 6, i32 961959257 }, %struct.AVRational { i32 6, i32 961893977 }, %struct.AVRational { i32 7, i32 1110520921 }, %struct.AVRational { i32 4, i32 1110586457 }, %struct.AVRational { i32 4, i32 842150992 }, %struct.AVRational { i32 4, i32 909203033 }, %struct.AVRational { i32 12, i32 808596553 }, %struct.AVRational { i32 12, i32 1448433993 }, %struct.AVRational { i32 12, i32 842094169 }, %struct.AVRational { i32 13, i32 1110586457 }, %struct.AVRational { i32 13, i32 842150992 }, %struct.AVRational { i32 8, i32 808466521 }, %struct.AVRational { i32 8, i32 538982489 }, %struct.AVRational { i32 1, i32 844715353 }, %struct.AVRational { i32 1, i32 842151001 }, %struct.AVRational { i32 1, i32 842150998 }, %struct.AVRational { i32 1, i32 1498765654 }, %struct.AVRational { i32 1, i32 1447974233 }, %struct.AVRational { i32 17, i32 1498831189 }, %struct.AVRational { i32 17, i32 1129923656 }, %struct.AVRational { i32 17, i32 1447975253 }, %struct.AVRational { i32 17, i32 1498306901 }, %struct.AVRational { i32 17, i32 829847925 }, %struct.AVRational { i32 17, i32 829773362 }, %struct.AVRational { i32 17, i32 1850889793 }, %struct.AVRational { i32 17, i32 2016499265 }, %struct.AVRational { i32 17, i32 1886737985 }, %struct.AVRational { i32 17, i32 1515471958 }, %struct.AVRational { i32 17, i32 846624097 }, %struct.AVRational { i32 17, i32 1987410275 }, %struct.AVRational { i32 18, i32 825308249 }, %struct.AVRational { i32 8, i32 1497715271 }, %struct.AVRational { i32 25, i32 842094158 }, %struct.AVRational { i32 26, i32 825382478 }, %struct.AVRational { i32 46, i32 256001874 }, %struct.AVRational { i32 50, i32 257050434 }, %struct.AVRational { i32 44, i32 272779090 }, %struct.AVRational { i32 48, i32 273827650 }, %struct.AVRational { i32 45, i32 1380401679 }, %struct.AVRational { i32 49, i32 1111970319 }, %struct.AVRational { i32 43, i32 1380401680 }, %struct.AVRational { i32 47, i32 1111970320 }, %struct.AVRational { i32 62, i32 205670226 }, %struct.AVRational { i32 64, i32 206718786 }, %struct.AVRational { i32 63, i32 1380401676 }, %struct.AVRational { i32 65, i32 1111970316 }, %struct.AVRational { i32 292, i32 1078018642 }, %struct.AVRational { i32 294, i32 1078022722 }, %struct.AVRational { i32 291, i32 1094865472 }, %struct.AVRational { i32 293, i32 1095909952 }, %struct.AVRational { i32 28, i32 1094862674 }, %struct.AVRational { i32 296, i32 4343634 }, %struct.AVRational { i32 30, i32 1095911234 }, %struct.AVRational { i32 298, i32 5392194 }, %struct.AVRational { i32 29, i32 1380401729 }, %struct.AVRational { i32 297, i32 1380401664 }, %struct.AVRational { i32 27, i32 1111970369 }, %struct.AVRational { i32 295, i32 1111970304 }, %struct.AVRational { i32 2, i32 406996818 }, %struct.AVRational { i32 3, i32 408045378 }, %struct.AVRational { i32 7, i32 1345401140 }, %struct.AVRational { i32 4, i32 1345466932 }, %struct.AVRational { i32 13, i32 1345466932 }, %struct.AVRational { i32 33, i32 1345336372 }, %struct.AVRational { i32 34, i32 1345336372 }, %struct.AVRational { i32 5, i32 1345598516 }, %struct.AVRational { i32 14, i32 1345598516 }, %struct.AVRational { i32 9, i32 811020610 }, %struct.AVRational { i32 10, i32 827797570 }, %struct.AVRational { i32 19, i32 139609922 }, %struct.AVRational { i32 22, i32 138561362 }, %struct.AVRational { i32 20, i32 72501058 }, %struct.AVRational { i32 23, i32 71452498 }, %struct.AVRational { i32 24, i32 1497510978 }, %struct.AVRational { i32 21, i32 1497510994 }, %struct.AVRational { i32 42, i32 809650002 }, %struct.AVRational { i32 41, i32 1111970352 }, %struct.AVRational { i32 68, i32 810698562 }, %struct.AVRational { i32 67, i32 1380401712 }, %struct.AVRational { i32 32, i32 268448089 }, %struct.AVRational { i32 31, i32 1496383504 }, %struct.AVRational { i32 72, i32 168506201 }, %struct.AVRational { i32 71, i32 1496517386 }, %struct.AVRational { i32 74, i32 168440665 }, %struct.AVRational { i32 73, i32 1496517130 }, %struct.AVRational { i32 78, i32 167785305 }, %struct.AVRational { i32 77, i32 1496514570 }, %struct.AVRational { i32 302, i32 202060633 }, %struct.AVRational { i32 301, i32 1496517388 }, %struct.AVRational { i32 306, i32 201995097 }, %struct.AVRational { i32 305, i32 1496517132 }, %struct.AVRational { i32 310, i32 201339737 }, %struct.AVRational { i32 309, i32 1496514572 }, %struct.AVRational { i32 304, i32 235615065 }, %struct.AVRational { i32 303, i32 1496517390 }, %struct.AVRational { i32 308, i32 235549529 }, %struct.AVRational { i32 307, i32 1496517134 }, %struct.AVRational { i32 312, i32 234894169 }, %struct.AVRational { i32 311, i32 1496514574 }, %struct.AVRational { i32 54, i32 269169497 }, %struct.AVRational { i32 55, i32 1496517392 }, %struct.AVRational { i32 56, i32 269103961 }, %struct.AVRational { i32 57, i32 1496517136 }, %struct.AVRational { i32 58, i32 268448601 }, %struct.AVRational { i32 59, i32 1496514576 }, %struct.AVRational { i32 35, i32 134952025 }, %struct.AVRational { i32 300, i32 134886489 }, %struct.AVRational { i32 299, i32 134231129 }, %struct.AVRational { i32 66, i32 134230617 }, %struct.AVRational { i32 92, i32 151729241 }, %struct.AVRational { i32 91, i32 1496582921 }, %struct.AVRational { i32 94, i32 151663705 }, %struct.AVRational { i32 93, i32 1496582665 }, %struct.AVRational { i32 96, i32 151008345 }, %struct.AVRational { i32 95, i32 1496580105 }, %struct.AVRational { i32 98, i32 168506457 }, %struct.AVRational { i32 97, i32 1496582922 }, %struct.AVRational { i32 100, i32 168440921 }, %struct.AVRational { i32 99, i32 1496582666 }, %struct.AVRational { i32 102, i32 167785561 }, %struct.AVRational { i32 101, i32 1496580106 }, %struct.AVRational { i32 104, i32 269169753 }, %struct.AVRational { i32 103, i32 1496582928 }, %struct.AVRational { i32 106, i32 269104217 }, %struct.AVRational { i32 105, i32 1496582672 }, %struct.AVRational { i32 108, i32 268448857 }, %struct.AVRational { i32 107, i32 1496580112 }, %struct.AVRational { i32 0, i32 808596562 }, %struct.AVRational { i32 7, i32 825308242 }, %struct.AVRational { i32 17, i32 2037741106 }, %struct.AVRational { i32 17, i32 2037732914 }, %struct.AVRational { i32 17, i32 1230329409 }, %struct.AVRational { i32 17, i32 1987672162 }, %struct.AVRational { i32 1, i32 846624121 }, %struct.AVRational { i32 1, i32 1937143161 }, %struct.AVRational { i32 1, i32 1330599492 }, %struct.AVRational { i32 46, i32 892679500 }, %struct.AVRational { i32 44, i32 892745036 }, %struct.AVRational { i32 43, i32 892745026 }, %struct.AVRational { i32 3, i32 1195521074 }, %struct.AVRational { i32 3, i32 1734506594 }, %struct.AVRational { i32 30, i32 1095911234 }, %struct.AVRational { i32 28, i32 1094862674 }, %struct.AVRational { i32 2, i32 1735555170 }, %struct.AVRational { i32 29, i32 1380401729 }, %struct.AVRational { i32 31, i32 1731604834 }, %struct.AVRational { i32 41, i32 1916286050 }, %struct.AVRational { i32 44, i32 3 }, %struct.AVRational { i32 5, i32 875714137 }, %struct.AVRational { i32 1, i32 1431918169 }, %struct.AVRational { i32 -1, i32 0 }], align 16
@ff_avcodec_locked = internal global i32 0, align 4
@first_avcodec = internal unnamed_addr global %struct.AVCodec.134* null, align 8
@avcodec_init.initialized = internal unnamed_addr global i1 false, align 4
@.str.79.1409 = private unnamed_addr constant [50 x i8] c"pic->data[0]!=NULL in avcodec_default_get_buffer\0A\00", align 1
@.str.80.1410 = private unnamed_addr constant [49 x i8] c"buffer_count overflow (missing release_buffer?)\0A\00", align 1
@.str.81.1411 = private unnamed_addr constant [44 x i8] c"video_get_buffer: image parameters invalid\0A\00", align 1
@.str.82.1412 = private unnamed_addr constant [54 x i8] c"default_get_buffer called on pic %p, %d buffers used\0A\00", align 1
@.str.83.1413 = private unnamed_addr constant [67 x i8] c"default_get_buffer called on frame %p, internal audio buffer used\0A\00", align 1
@.str.1420 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1.1421 = private unnamed_addr constant [36 x i8] c"s->codec_type == AVMEDIA_TYPE_VIDEO\00", align 1
@.str.2.1422 = private unnamed_addr constant [19 x i8] c"libavcodec/utils.c\00", align 1
@.str.3.1423 = private unnamed_addr constant [23 x i8] c"i < avci->buffer_count\00", align 1
@.str.4.1424 = private unnamed_addr constant [58 x i8] c"default_release_buffer called on pic %p, %d buffers used\0A\00", align 1
@.str.5.1427 = private unnamed_addr constant [79 x i8] c"Picture changed from size:%dx%d fmt:%s to size:%dx%d fmt:%s in reget buffer()\0A\00", align 1
@.str.6.1440 = private unnamed_addr constant [38 x i8] c"No codec provided to avcodec_open2()\0A\00", align 1
@.str.7.1441 = private unnamed_addr constant [76 x i8] c"This AVCodecContext was allocated for %s, but %s passed to avcodec_open2()\0A\00", align 1
@.str.8.1442 = private unnamed_addr constant [38 x i8] c"Ignoring invalid width/height values\0A\00", align 1
@.str.9.1443 = private unnamed_addr constant [29 x i8] c"Codec type or id mismatches\0A\00", align 1
@.str.11.1444 = private unnamed_addr constant [8 x i8] c"decoder\00", align 1
@.str.10.1445 = private unnamed_addr constant [8 x i8] c"encoder\00", align 1
@.str.12.1446 = private unnamed_addr constant [110 x i8] c"The %s '%s' is experimental but experimental codecs are not enabled, add '-strict %d' if you want to use it.\0A\00", align 1
@.str.13.1447 = private unnamed_addr constant [49 x i8] c"Alternatively use the non experimental %s '%s'.\0A\00", align 1
@.str.78.1448 = private unnamed_addr constant [18 x i8] c"ff_avcodec_locked\00", align 1
@entangled_thread_counter = internal global i32 0, align 4
@.str.14.1449 = private unnamed_addr constant [61 x i8] c"The maximum value for lowres supported by the decoder is %d\0A\00", align 1
@.str.15.1450 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.16.1451 = private unnamed_addr constant [56 x i8] c"Specified sample format %s is invalid or not supported\0A\00", align 1
@.str.17.1452 = private unnamed_addr constant [55 x i8] c"Specified pixel format %s is invalid or not supported\0A\00", align 1
@.str.18.1453 = private unnamed_addr constant [43 x i8] c"Specified sample rate %d is not supported\0A\00", align 1
@.str.19.1454 = private unnamed_addr constant [30 x i8] c"Channel layout not specified\0A\00", align 1
@.str.20.1455 = private unnamed_addr constant [48 x i8] c"Specified channel layout '%s' is not supported\0A\00", align 1
@.str.21.1456 = private unnamed_addr constant [85 x i8] c"Channel layout '%s' with %d channels does not match number of specified channels %d\0A\00", align 1
@.str.22.1457 = private unnamed_addr constant [20 x i8] c"dimensions not set\0A\00", align 1
@.str.23.1458 = private unnamed_addr constant [47 x i8] c"Bitrate %d is extreemly low, did you mean %dk\0A\00", align 1
@.str.24.1459 = private unnamed_addr constant [120 x i8] c"Channel layout '%s' with %d channels does not match specified number of channels %d: ignoring specified channel layout\0A\00", align 1
@.str.76.1460 = private unnamed_addr constant [57 x i8] c"Insufficient thread locking around avcodec_open/close()\0A\00", align 1
@.str.77.1461 = private unnamed_addr constant [19 x i8] c"!ff_avcodec_locked\00", align 1
@.str.25.1466 = private unnamed_addr constant [17 x i8] c"Size %d invalid\0A\00", align 1
@.str.26.1467 = private unnamed_addr constant [60 x i8] c"!avpkt->data || avpkt->data != avctx->internal->byte_buffer\00", align 1
@.str.27.1468 = private unnamed_addr constant [36 x i8] c"User packet is too small (%d < %d)\0A\00", align 1
@.str.28.1469 = private unnamed_addr constant [38 x i8] c"Failed to allocate packet of size %d\0A\00", align 1
@.str.33.1474 = private unnamed_addr constant [46 x i8] c"Provided packet is too small, needs to be %d\0A\00", align 1
@.str.36.1479 = private unnamed_addr constant [22 x i8] c"avctx->codec->encode2\00", align 1
@.str.37.1480 = private unnamed_addr constant [9 x i8] c"ret <= 0\00", align 1
@.str.39.1484 = private unnamed_addr constant [30 x i8] c"Invalid media type for video\0A\00", align 1
@.str.84.1499 = private unnamed_addr constant [30 x i8] c"Found %i unreleased buffers!\0A\00", align 1
@.str.51.1500 = private unnamed_addr constant [37 x i8] c"Codec 0x%x is not in the full list.\0A\00", align 1
@.str.50.1501 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.52.1502 = private unnamed_addr constant [14 x i8] c"unknown_codec\00", align 1
@av_register_all.initialized = internal unnamed_addr global i1 false, align 4
@ffio_url_class = internal constant { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass.334* (%struct.AVClass.334*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1528, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* getelementptr inbounds ([1 x %struct.AVOption], [1 x %struct.AVOption]* @ffio_url_options, i32 0, i32 0), i32 3411815, i32 0, i32 0, i8* (i8*, i8*)* @ffio_url_child_next, %struct.AVClass.334* (%struct.AVClass.334*)* @ffio_url_child_class_next, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@.str.1528 = private unnamed_addr constant [12 x i8] c"AVIOContext\00", align 1
@ffio_url_options = internal constant [1 x %struct.AVOption] zeroinitializer, align 16
@.str.1.1531 = private unnamed_addr constant [38 x i8] c"Statistics: %ld bytes read, %d seeks\0A\00", align 1
@avio_close_dyn_buf.padbuf = internal constant [16 x i8] zeroinitializer, align 16
@ffurl_context_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1534, i32 0, i32 0), i8* (i8*)* @urlcontext_to_name, %struct.AVOption* getelementptr inbounds ([1 x %struct.AVOption], [1 x %struct.AVOption]* @options.1535, i32 0, i32 0), i32 3411815, i32 0, i32 0, i8* (i8*, i8*)* @urlcontext_child_next, %struct.AVClass* (%struct.AVClass*)* @urlcontext_child_class_next, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@.str.1534 = private unnamed_addr constant [11 x i8] c"URLContext\00", align 1
@options.1535 = internal constant [1 x %struct.AVOption] zeroinitializer, align 16
@first_protocol = internal unnamed_addr global %struct.URLProtocol* null, align 8
@.str.4.1536 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.1.1539 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@.str.2.1542 = private unnamed_addr constant [66 x i8] c"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-.\00", align 1
@.str.3.1543 = private unnamed_addr constant [69 x i8] c"No URL Protocols are registered. Missing call to av_register_all()?\0A\00", align 1
@.str.5.1544 = private unnamed_addr constant [21 x i8] c"Key '%s' not found.\0A\00", align 1
@.str.6.1545 = private unnamed_addr constant [33 x i8] c"Error parsing options string %s\0A\00", align 1
@ff_file_protocol = internal global { i8*, i32 (%struct.URLContext.358*, i8*, i32)*, i32 (%struct.URLContext.358*, i8*, i32, %struct.AVDictionary**)*, i32 (%struct.URLContext.358*, i8*, i32)*, i32 (%struct.URLContext.358*, i8*, i32)*, i64 (%struct.URLContext.358*, i64, i32)*, i32 (%struct.URLContext.358*)*, %struct.URLProtocol.356*, i32 (%struct.URLContext.358*, i32)*, i64 (%struct.URLContext.358*, i32, i64, i32)*, i32 (%struct.URLContext.358*)*, i32 (%struct.URLContext.358*, i32**, i32*)*, i32 (%struct.URLContext.358*, i32)*, i32, %struct.AVClass*, i32, i32 (%struct.URLContext.358*, i32)* } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1556, i32 0, i32 0), i32 (%struct.URLContext.358*, i8*, i32)* @file_open, i32 (%struct.URLContext.358*, i8*, i32, %struct.AVDictionary**)* null, i32 (%struct.URLContext.358*, i8*, i32)* @file_read, i32 (%struct.URLContext.358*, i8*, i32)* @file_write, i64 (%struct.URLContext.358*, i64, i32)* @file_seek, i32 (%struct.URLContext.358*)* @file_close, %struct.URLProtocol.356* null, i32 (%struct.URLContext.358*, i32)* null, i64 (%struct.URLContext.358*, i32, i64, i32)* null, i32 (%struct.URLContext.358*)* @file_get_handle, i32 (%struct.URLContext.358*, i32**, i32*)* null, i32 (%struct.URLContext.358*, i32)* null, i32 16, %struct.AVClass* @file_class, i32 0, i32 (%struct.URLContext.358*, i32)* @file_check }, align 8
@.str.1556 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@file_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1556, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* getelementptr inbounds ([2 x %struct.AVOption], [2 x %struct.AVOption]* @file_options, i32 0, i32 0), i32 3411815, i32 0, i32 0, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@file_options = internal constant [2 x %struct.AVOption] [%struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.1557, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3.1558, i32 0, i32 0), i32 12, i32 1, %union.anon { i64 1 }, double 0.000000e+00, double 1.000000e+00, i32 1, i8* null }, %struct.AVOption zeroinitializer], align 16
@.str.2.1557 = private unnamed_addr constant [9 x i8] c"truncate\00", align 1
@.str.3.1558 = private unnamed_addr constant [33 x i8] c"Truncate existing files on write\00", align 1
@ff_gif_demuxer = internal global %struct.AVInputFormat.397 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1562, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1.1563, i32 0, i32 0), i32 256, i8* null, %struct.AVCodecTag** null, %struct.AVClass* @demuxer_class, %struct.AVInputFormat.397* null, i32 0, i32 24, i32 (%struct.AVProbeData*)* @gif_probe, i32 (%struct.AVFormatContext.396*)* @gif_read_header, i32 (%struct.AVFormatContext.396*, %struct.AVPacket*)* @gif_read_packet, i32 (%struct.AVFormatContext.396*)* null, i32 (%struct.AVFormatContext.396*, i32, i64, i32)* null, i64 (%struct.AVFormatContext.396*, i32, i64*, i64)* null, i32 (%struct.AVFormatContext.396*)* null, i32 (%struct.AVFormatContext.396*)* null, i32 (%struct.AVFormatContext.396*, i32, i64, i64, i64, i32)* null }, align 8
@.str.1562 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str.1.1563 = private unnamed_addr constant [45 x i8] c"CompuServe Graphics Interchange Format (GIF)\00", align 1
@demuxer_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.1569, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* getelementptr inbounds ([3 x %struct.AVOption], [3 x %struct.AVOption]* @options.1570, i32 0, i32 0), i32 3411815, i32 0, i32 0, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 4, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@gif87a_sig.1564 = internal constant [6 x i8] c"GIF87a", align 1
@gif89a_sig.1565 = internal constant [6 x i8] c"GIF89a", align 1
@.str.9.1566 = private unnamed_addr constant [53 x i8] c"Graphic Control Extension block's size less than 4.\0A\00", align 1
@.str.7.1567 = private unnamed_addr constant [36 x i8] c"lzw minimum code size must be >= 1\0A\00", align 1
@.str.8.1568 = private unnamed_addr constant [21 x i8] c"invalid block label\0A\00", align 1
@.str.2.1569 = private unnamed_addr constant [12 x i8] c"GIF demuxer\00", align 1
@options.1570 = internal constant [3 x %struct.AVOption] [%struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.1571, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.4.1572, i32 0, i32 0), i32 12, i32 1, %union.anon { i64 2 }, double 0.000000e+00, double 6.000000e+03, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.1573, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6.1574, i32 0, i32 0), i32 16, i32 1, %union.anon { i64 10 }, double 0.000000e+00, double 6.000000e+03, i32 2, i8* null }, %struct.AVOption zeroinitializer], align 16
@.str.3.1571 = private unnamed_addr constant [10 x i8] c"min_delay\00", align 1
@.str.4.1572 = private unnamed_addr constant [61 x i8] c"minimum valid delay between frames (in hundredths of second)\00", align 1
@.str.5.1573 = private unnamed_addr constant [14 x i8] c"default_delay\00", align 1
@.str.6.1574 = private unnamed_addr constant [55 x i8] c"default delay between frames (in hundredths of second)\00", align 1
@ff_id3v1_genre_str = internal unnamed_addr constant [148 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1575, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.1576, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.1577, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.1578, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.1579, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.1580, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6.1581, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.1582, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.1583, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9.1584, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10.1585, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11.1586, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.1587, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.1588, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.1589, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.1590, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16.1591, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17.1592, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18.1593, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19.1594, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.20.1595, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21.1596, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.1597, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23.1598, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24.1599, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25.1600, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26.1601, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27.1602, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28.1603, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29.1604, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30.1605, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31.1606, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32.1607, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.33.1608, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34.1609, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35.1610, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36.1611, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.37.1612, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38.1613, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39.1614, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.40.1615, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41.1616, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42.1617, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43.1618, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44.1619, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45.1620, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.46.1621, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.47.1622, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.48.1623, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49.1624, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50.1625, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.51.1626, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.52.1627, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53.1628, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.54.1629, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55.1630, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56.1631, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.1632, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58.1633, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.59.1634, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60.1635, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.61.1636, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62.1637, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63.1638, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64.1639, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65.1640, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.66.1641, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.67.1642, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68.1643, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.69.1644, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70.1645, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71.1646, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.72.1647, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.73.1648, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74.1649, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.75.1650, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76.1651, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77.1652, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78.1653, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79.1654, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80.1655, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81.1656, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.82.1657, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83.1658, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.84.1659, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85.1660, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86.1661, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.87.1662, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88.1663, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.89.1664, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.90.1665, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91.1666, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.92.1667, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.93.1668, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.94.1669, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.95.1670, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96.1671, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97.1672, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.98.1673, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.99.1674, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.100.1675, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.101.1676, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.102.1677, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.103.1678, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.104.1679, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105.1680, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106.1681, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.107.1682, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.108.1683, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.109.1684, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.110.1685, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.111.1686, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.112.1687, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.113.1688, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114.1689, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.115.1690, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.116.1691, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.117.1692, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118.1693, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.119.1694, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.120.1695, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.121.1696, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122.1697, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.123.1698, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.124.1699, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.125.1700, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.126.1701, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.127.1702, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128.1703, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.129.1704, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.130.1705, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.131.1706, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.132.1707, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.133.1708, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.134.1709, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.135.1710, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.136.1711, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137.1712, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.138.1713, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.139.1714, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.140.1715, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.141.1716, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.142.1717, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.143.1718, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.144.1719, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.145.1720, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.146.1721, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.147.1722, i32 0, i32 0)], align 16
@.str.1575 = private unnamed_addr constant [6 x i8] c"Blues\00", align 1
@.str.1.1576 = private unnamed_addr constant [13 x i8] c"Classic Rock\00", align 1
@.str.2.1577 = private unnamed_addr constant [8 x i8] c"Country\00", align 1
@.str.3.1578 = private unnamed_addr constant [6 x i8] c"Dance\00", align 1
@.str.4.1579 = private unnamed_addr constant [6 x i8] c"Disco\00", align 1
@.str.5.1580 = private unnamed_addr constant [5 x i8] c"Funk\00", align 1
@.str.6.1581 = private unnamed_addr constant [7 x i8] c"Grunge\00", align 1
@.str.7.1582 = private unnamed_addr constant [8 x i8] c"Hip-Hop\00", align 1
@.str.8.1583 = private unnamed_addr constant [5 x i8] c"Jazz\00", align 1
@.str.9.1584 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.10.1585 = private unnamed_addr constant [8 x i8] c"New Age\00", align 1
@.str.11.1586 = private unnamed_addr constant [7 x i8] c"Oldies\00", align 1
@.str.12.1587 = private unnamed_addr constant [6 x i8] c"Other\00", align 1
@.str.13.1588 = private unnamed_addr constant [4 x i8] c"Pop\00", align 1
@.str.14.1589 = private unnamed_addr constant [4 x i8] c"R&B\00", align 1
@.str.15.1590 = private unnamed_addr constant [4 x i8] c"Rap\00", align 1
@.str.16.1591 = private unnamed_addr constant [7 x i8] c"Reggae\00", align 1
@.str.17.1592 = private unnamed_addr constant [5 x i8] c"Rock\00", align 1
@.str.18.1593 = private unnamed_addr constant [7 x i8] c"Techno\00", align 1
@.str.19.1594 = private unnamed_addr constant [11 x i8] c"Industrial\00", align 1
@.str.20.1595 = private unnamed_addr constant [12 x i8] c"Alternative\00", align 1
@.str.21.1596 = private unnamed_addr constant [4 x i8] c"Ska\00", align 1
@.str.22.1597 = private unnamed_addr constant [12 x i8] c"Death Metal\00", align 1
@.str.23.1598 = private unnamed_addr constant [7 x i8] c"Pranks\00", align 1
@.str.24.1599 = private unnamed_addr constant [11 x i8] c"Soundtrack\00", align 1
@.str.25.1600 = private unnamed_addr constant [12 x i8] c"Euro-Techno\00", align 1
@.str.26.1601 = private unnamed_addr constant [8 x i8] c"Ambient\00", align 1
@.str.27.1602 = private unnamed_addr constant [9 x i8] c"Trip-Hop\00", align 1
@.str.28.1603 = private unnamed_addr constant [6 x i8] c"Vocal\00", align 1
@.str.29.1604 = private unnamed_addr constant [10 x i8] c"Jazz+Funk\00", align 1
@.str.30.1605 = private unnamed_addr constant [7 x i8] c"Fusion\00", align 1
@.str.31.1606 = private unnamed_addr constant [7 x i8] c"Trance\00", align 1
@.str.32.1607 = private unnamed_addr constant [10 x i8] c"Classical\00", align 1
@.str.33.1608 = private unnamed_addr constant [13 x i8] c"Instrumental\00", align 1
@.str.34.1609 = private unnamed_addr constant [5 x i8] c"Acid\00", align 1
@.str.35.1610 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.36.1611 = private unnamed_addr constant [5 x i8] c"Game\00", align 1
@.str.37.1612 = private unnamed_addr constant [11 x i8] c"Sound Clip\00", align 1
@.str.38.1613 = private unnamed_addr constant [7 x i8] c"Gospel\00", align 1
@.str.39.1614 = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@.str.40.1615 = private unnamed_addr constant [11 x i8] c"AlternRock\00", align 1
@.str.41.1616 = private unnamed_addr constant [5 x i8] c"Bass\00", align 1
@.str.42.1617 = private unnamed_addr constant [5 x i8] c"Soul\00", align 1
@.str.43.1618 = private unnamed_addr constant [5 x i8] c"Punk\00", align 1
@.str.44.1619 = private unnamed_addr constant [6 x i8] c"Space\00", align 1
@.str.45.1620 = private unnamed_addr constant [11 x i8] c"Meditative\00", align 1
@.str.46.1621 = private unnamed_addr constant [17 x i8] c"Instrumental Pop\00", align 1
@.str.47.1622 = private unnamed_addr constant [18 x i8] c"Instrumental Rock\00", align 1
@.str.48.1623 = private unnamed_addr constant [7 x i8] c"Ethnic\00", align 1
@.str.49.1624 = private unnamed_addr constant [7 x i8] c"Gothic\00", align 1
@.str.50.1625 = private unnamed_addr constant [9 x i8] c"Darkwave\00", align 1
@.str.51.1626 = private unnamed_addr constant [18 x i8] c"Techno-Industrial\00", align 1
@.str.52.1627 = private unnamed_addr constant [11 x i8] c"Electronic\00", align 1
@.str.53.1628 = private unnamed_addr constant [9 x i8] c"Pop-Folk\00", align 1
@.str.54.1629 = private unnamed_addr constant [10 x i8] c"Eurodance\00", align 1
@.str.55.1630 = private unnamed_addr constant [6 x i8] c"Dream\00", align 1
@.str.56.1631 = private unnamed_addr constant [14 x i8] c"Southern Rock\00", align 1
@.str.57.1632 = private unnamed_addr constant [7 x i8] c"Comedy\00", align 1
@.str.58.1633 = private unnamed_addr constant [5 x i8] c"Cult\00", align 1
@.str.59.1634 = private unnamed_addr constant [8 x i8] c"Gangsta\00", align 1
@.str.60.1635 = private unnamed_addr constant [7 x i8] c"Top 40\00", align 1
@.str.61.1636 = private unnamed_addr constant [14 x i8] c"Christian Rap\00", align 1
@.str.62.1637 = private unnamed_addr constant [9 x i8] c"Pop/Funk\00", align 1
@.str.63.1638 = private unnamed_addr constant [7 x i8] c"Jungle\00", align 1
@.str.64.1639 = private unnamed_addr constant [16 x i8] c"Native American\00", align 1
@.str.65.1640 = private unnamed_addr constant [8 x i8] c"Cabaret\00", align 1
@.str.66.1641 = private unnamed_addr constant [9 x i8] c"New Wave\00", align 1
@.str.67.1642 = private unnamed_addr constant [12 x i8] c"Psychadelic\00", align 1
@.str.68.1643 = private unnamed_addr constant [5 x i8] c"Rave\00", align 1
@.str.69.1644 = private unnamed_addr constant [10 x i8] c"Showtunes\00", align 1
@.str.70.1645 = private unnamed_addr constant [8 x i8] c"Trailer\00", align 1
@.str.71.1646 = private unnamed_addr constant [6 x i8] c"Lo-Fi\00", align 1
@.str.72.1647 = private unnamed_addr constant [7 x i8] c"Tribal\00", align 1
@.str.73.1648 = private unnamed_addr constant [10 x i8] c"Acid Punk\00", align 1
@.str.74.1649 = private unnamed_addr constant [10 x i8] c"Acid Jazz\00", align 1
@.str.75.1650 = private unnamed_addr constant [6 x i8] c"Polka\00", align 1
@.str.76.1651 = private unnamed_addr constant [6 x i8] c"Retro\00", align 1
@.str.77.1652 = private unnamed_addr constant [8 x i8] c"Musical\00", align 1
@.str.78.1653 = private unnamed_addr constant [12 x i8] c"Rock & Roll\00", align 1
@.str.79.1654 = private unnamed_addr constant [10 x i8] c"Hard Rock\00", align 1
@.str.80.1655 = private unnamed_addr constant [5 x i8] c"Folk\00", align 1
@.str.81.1656 = private unnamed_addr constant [10 x i8] c"Folk-Rock\00", align 1
@.str.82.1657 = private unnamed_addr constant [14 x i8] c"National Folk\00", align 1
@.str.83.1658 = private unnamed_addr constant [6 x i8] c"Swing\00", align 1
@.str.84.1659 = private unnamed_addr constant [12 x i8] c"Fast Fusion\00", align 1
@.str.85.1660 = private unnamed_addr constant [6 x i8] c"Bebob\00", align 1
@.str.86.1661 = private unnamed_addr constant [6 x i8] c"Latin\00", align 1
@.str.87.1662 = private unnamed_addr constant [8 x i8] c"Revival\00", align 1
@.str.88.1663 = private unnamed_addr constant [7 x i8] c"Celtic\00", align 1
@.str.89.1664 = private unnamed_addr constant [10 x i8] c"Bluegrass\00", align 1
@.str.90.1665 = private unnamed_addr constant [11 x i8] c"Avantgarde\00", align 1
@.str.91.1666 = private unnamed_addr constant [12 x i8] c"Gothic Rock\00", align 1
@.str.92.1667 = private unnamed_addr constant [17 x i8] c"Progressive Rock\00", align 1
@.str.93.1668 = private unnamed_addr constant [17 x i8] c"Psychedelic Rock\00", align 1
@.str.94.1669 = private unnamed_addr constant [15 x i8] c"Symphonic Rock\00", align 1
@.str.95.1670 = private unnamed_addr constant [10 x i8] c"Slow Rock\00", align 1
@.str.96.1671 = private unnamed_addr constant [9 x i8] c"Big Band\00", align 1
@.str.97.1672 = private unnamed_addr constant [7 x i8] c"Chorus\00", align 1
@.str.98.1673 = private unnamed_addr constant [15 x i8] c"Easy Listening\00", align 1
@.str.99.1674 = private unnamed_addr constant [9 x i8] c"Acoustic\00", align 1
@.str.100.1675 = private unnamed_addr constant [7 x i8] c"Humour\00", align 1
@.str.101.1676 = private unnamed_addr constant [7 x i8] c"Speech\00", align 1
@.str.102.1677 = private unnamed_addr constant [8 x i8] c"Chanson\00", align 1
@.str.103.1678 = private unnamed_addr constant [6 x i8] c"Opera\00", align 1
@.str.104.1679 = private unnamed_addr constant [14 x i8] c"Chamber Music\00", align 1
@.str.105.1680 = private unnamed_addr constant [7 x i8] c"Sonata\00", align 1
@.str.106.1681 = private unnamed_addr constant [9 x i8] c"Symphony\00", align 1
@.str.107.1682 = private unnamed_addr constant [11 x i8] c"Booty Bass\00", align 1
@.str.108.1683 = private unnamed_addr constant [7 x i8] c"Primus\00", align 1
@.str.109.1684 = private unnamed_addr constant [12 x i8] c"Porn Groove\00", align 1
@.str.110.1685 = private unnamed_addr constant [7 x i8] c"Satire\00", align 1
@.str.111.1686 = private unnamed_addr constant [9 x i8] c"Slow Jam\00", align 1
@.str.112.1687 = private unnamed_addr constant [5 x i8] c"Club\00", align 1
@.str.113.1688 = private unnamed_addr constant [6 x i8] c"Tango\00", align 1
@.str.114.1689 = private unnamed_addr constant [6 x i8] c"Samba\00", align 1
@.str.115.1690 = private unnamed_addr constant [9 x i8] c"Folklore\00", align 1
@.str.116.1691 = private unnamed_addr constant [7 x i8] c"Ballad\00", align 1
@.str.117.1692 = private unnamed_addr constant [13 x i8] c"Power Ballad\00", align 1
@.str.118.1693 = private unnamed_addr constant [14 x i8] c"Rhythmic Soul\00", align 1
@.str.119.1694 = private unnamed_addr constant [10 x i8] c"Freestyle\00", align 1
@.str.120.1695 = private unnamed_addr constant [5 x i8] c"Duet\00", align 1
@.str.121.1696 = private unnamed_addr constant [10 x i8] c"Punk Rock\00", align 1
@.str.122.1697 = private unnamed_addr constant [10 x i8] c"Drum Solo\00", align 1
@.str.123.1698 = private unnamed_addr constant [10 x i8] c"A capella\00", align 1
@.str.124.1699 = private unnamed_addr constant [11 x i8] c"Euro-House\00", align 1
@.str.125.1700 = private unnamed_addr constant [11 x i8] c"Dance Hall\00", align 1
@.str.126.1701 = private unnamed_addr constant [4 x i8] c"Goa\00", align 1
@.str.127.1702 = private unnamed_addr constant [12 x i8] c"Drum & Bass\00", align 1
@.str.128.1703 = private unnamed_addr constant [11 x i8] c"Club-House\00", align 1
@.str.129.1704 = private unnamed_addr constant [9 x i8] c"Hardcore\00", align 1
@.str.130.1705 = private unnamed_addr constant [7 x i8] c"Terror\00", align 1
@.str.131.1706 = private unnamed_addr constant [6 x i8] c"Indie\00", align 1
@.str.132.1707 = private unnamed_addr constant [8 x i8] c"BritPop\00", align 1
@.str.133.1708 = private unnamed_addr constant [10 x i8] c"Negerpunk\00", align 1
@.str.134.1709 = private unnamed_addr constant [11 x i8] c"Polsk Punk\00", align 1
@.str.135.1710 = private unnamed_addr constant [5 x i8] c"Beat\00", align 1
@.str.136.1711 = private unnamed_addr constant [18 x i8] c"Christian Gangsta\00", align 1
@.str.137.1712 = private unnamed_addr constant [12 x i8] c"Heavy Metal\00", align 1
@.str.138.1713 = private unnamed_addr constant [12 x i8] c"Black Metal\00", align 1
@.str.139.1714 = private unnamed_addr constant [10 x i8] c"Crossover\00", align 1
@.str.140.1715 = private unnamed_addr constant [23 x i8] c"Contemporary Christian\00", align 1
@.str.141.1716 = private unnamed_addr constant [15 x i8] c"Christian Rock\00", align 1
@.str.142.1717 = private unnamed_addr constant [9 x i8] c"Merengue\00", align 1
@.str.143.1718 = private unnamed_addr constant [6 x i8] c"Salsa\00", align 1
@.str.144.1719 = private unnamed_addr constant [13 x i8] c"Thrash Metal\00", align 1
@.str.145.1720 = private unnamed_addr constant [6 x i8] c"Anime\00", align 1
@.str.146.1721 = private unnamed_addr constant [5 x i8] c"JPop\00", align 1
@.str.147.1722 = private unnamed_addr constant [9 x i8] c"SynthPop\00", align 1
@ff_id3v2_34_metadata_conv = internal constant [15 x %struct.AVCodecDefault] [%struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1731, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.1732, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2.1733, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3.1734, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.1735, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5.1736, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.1737, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.1738, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.1739, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.1740, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.1741, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.1742, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12.1743, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13.1744, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.1745, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15.1746, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16.1747, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17.1748, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18.1749, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19.1750, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20.1751, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21.1752, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22.1753, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23.1754, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24.1755, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25.1756, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26.1757, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27.1758, i32 0, i32 0) }, %struct.AVCodecDefault zeroinitializer], align 16
@.str.1731 = private unnamed_addr constant [5 x i8] c"TALB\00", align 1
@.str.1.1732 = private unnamed_addr constant [6 x i8] c"album\00", align 1
@.str.2.1733 = private unnamed_addr constant [5 x i8] c"TCOM\00", align 1
@.str.3.1734 = private unnamed_addr constant [9 x i8] c"composer\00", align 1
@.str.4.1735 = private unnamed_addr constant [5 x i8] c"TCON\00", align 1
@.str.5.1736 = private unnamed_addr constant [6 x i8] c"genre\00", align 1
@.str.6.1737 = private unnamed_addr constant [5 x i8] c"TCOP\00", align 1
@.str.7.1738 = private unnamed_addr constant [10 x i8] c"copyright\00", align 1
@.str.8.1739 = private unnamed_addr constant [5 x i8] c"TENC\00", align 1
@.str.9.1740 = private unnamed_addr constant [11 x i8] c"encoded_by\00", align 1
@.str.10.1741 = private unnamed_addr constant [5 x i8] c"TIT2\00", align 1
@.str.11.1742 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@.str.12.1743 = private unnamed_addr constant [5 x i8] c"TLAN\00", align 1
@.str.13.1744 = private unnamed_addr constant [9 x i8] c"language\00", align 1
@.str.14.1745 = private unnamed_addr constant [5 x i8] c"TPE1\00", align 1
@.str.15.1746 = private unnamed_addr constant [7 x i8] c"artist\00", align 1
@.str.16.1747 = private unnamed_addr constant [5 x i8] c"TPE2\00", align 1
@.str.17.1748 = private unnamed_addr constant [13 x i8] c"album_artist\00", align 1
@.str.18.1749 = private unnamed_addr constant [5 x i8] c"TPE3\00", align 1
@.str.19.1750 = private unnamed_addr constant [10 x i8] c"performer\00", align 1
@.str.20.1751 = private unnamed_addr constant [5 x i8] c"TPOS\00", align 1
@.str.21.1752 = private unnamed_addr constant [5 x i8] c"disc\00", align 1
@.str.22.1753 = private unnamed_addr constant [5 x i8] c"TPUB\00", align 1
@.str.23.1754 = private unnamed_addr constant [10 x i8] c"publisher\00", align 1
@.str.24.1755 = private unnamed_addr constant [5 x i8] c"TRCK\00", align 1
@.str.25.1756 = private unnamed_addr constant [6 x i8] c"track\00", align 1
@.str.26.1757 = private unnamed_addr constant [5 x i8] c"TSSE\00", align 1
@.str.27.1758 = private unnamed_addr constant [8 x i8] c"encoder\00", align 1
@ff_id3v2_4_metadata_conv = internal constant [7 x %struct.AVCodecDefault] [%struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28.1759, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29.1760, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30.1761, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29.1760, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31.1762, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32.1763, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33.1764, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.1765, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35.1766, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36.1767, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37.1768, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.38.1769, i32 0, i32 0) }, %struct.AVCodecDefault zeroinitializer], align 16
@.str.28.1759 = private unnamed_addr constant [5 x i8] c"TDRL\00", align 1
@.str.29.1760 = private unnamed_addr constant [5 x i8] c"date\00", align 1
@.str.30.1761 = private unnamed_addr constant [5 x i8] c"TDRC\00", align 1
@.str.31.1762 = private unnamed_addr constant [5 x i8] c"TDEN\00", align 1
@.str.32.1763 = private unnamed_addr constant [14 x i8] c"creation_time\00", align 1
@.str.33.1764 = private unnamed_addr constant [5 x i8] c"TSOA\00", align 1
@.str.34.1765 = private unnamed_addr constant [11 x i8] c"album-sort\00", align 1
@.str.35.1766 = private unnamed_addr constant [5 x i8] c"TSOP\00", align 1
@.str.36.1767 = private unnamed_addr constant [12 x i8] c"artist-sort\00", align 1
@.str.37.1768 = private unnamed_addr constant [5 x i8] c"TSOT\00", align 1
@.str.38.1769 = private unnamed_addr constant [11 x i8] c"title-sort\00", align 1
@ff_id3v2_picture_types = internal unnamed_addr constant [21 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39.1770, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40.1771, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.41.1772, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.42.1773, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.43.1774, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.44.1775, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.45.1776, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.46.1777, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.47.1778, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48.1779, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.49.1780, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50.1781, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.51.1782, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.52.1783, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.53.1784, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.54.1785, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.55.1786, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56.1787, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.57.1788, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.58.1789, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.59.1790, i32 0, i32 0)], align 16
@.str.39.1770 = private unnamed_addr constant [6 x i8] c"Other\00", align 1
@.str.40.1771 = private unnamed_addr constant [25 x i8] c"32x32 pixels 'file icon'\00", align 1
@.str.41.1772 = private unnamed_addr constant [16 x i8] c"Other file icon\00", align 1
@.str.42.1773 = private unnamed_addr constant [14 x i8] c"Cover (front)\00", align 1
@.str.43.1774 = private unnamed_addr constant [13 x i8] c"Cover (back)\00", align 1
@.str.44.1775 = private unnamed_addr constant [13 x i8] c"Leaflet page\00", align 1
@.str.45.1776 = private unnamed_addr constant [30 x i8] c"Media (e.g. label side of CD)\00", align 1
@.str.46.1777 = private unnamed_addr constant [35 x i8] c"Lead artist/lead performer/soloist\00", align 1
@.str.47.1778 = private unnamed_addr constant [17 x i8] c"Artist/performer\00", align 1
@.str.48.1779 = private unnamed_addr constant [10 x i8] c"Conductor\00", align 1
@.str.49.1780 = private unnamed_addr constant [15 x i8] c"Band/Orchestra\00", align 1
@.str.50.1781 = private unnamed_addr constant [9 x i8] c"Composer\00", align 1
@.str.51.1782 = private unnamed_addr constant [21 x i8] c"Lyricist/text writer\00", align 1
@.str.52.1783 = private unnamed_addr constant [19 x i8] c"Recording Location\00", align 1
@.str.53.1784 = private unnamed_addr constant [17 x i8] c"During recording\00", align 1
@.str.54.1785 = private unnamed_addr constant [19 x i8] c"During performance\00", align 1
@.str.55.1786 = private unnamed_addr constant [27 x i8] c"Movie/video screen capture\00", align 1
@.str.56.1787 = private unnamed_addr constant [23 x i8] c"A bright coloured fish\00", align 1
@.str.57.1788 = private unnamed_addr constant [13 x i8] c"Illustration\00", align 1
@.str.58.1789 = private unnamed_addr constant [21 x i8] c"Band/artist logotype\00", align 1
@.str.59.1790 = private unnamed_addr constant [26 x i8] c"Publisher/Studio logotype\00", align 1
@ff_id3v2_mime_tags = internal constant [9 x %struct.CodecMime] [%struct.CodecMime { [32 x i8] c"image/gif\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 99 }, %struct.CodecMime { [32 x i8] c"image/jpeg\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 8 }, %struct.CodecMime { [32 x i8] c"image/jpg\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 8 }, %struct.CodecMime { [32 x i8] c"image/png\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 63 }, %struct.CodecMime { [32 x i8] c"image/tiff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 98 }, %struct.CodecMime { [32 x i8] c"image/bmp\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 80 }, %struct.CodecMime { [32 x i8] c"JPG\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 8 }, %struct.CodecMime { [32 x i8] c"PNG\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 63 }, %struct.CodecMime zeroinitializer], align 16
@.str.62.1791 = private unnamed_addr constant [32 x i8] c"id3v2 ver:%d flags:%02X len:%d\0A\00", align 1
@.str.67.1792 = private unnamed_addr constant [35 x i8] c"Invalid empty frame %s, skipping.\0A\00", align 1
@.str.69.1793 = private unnamed_addr constant [11 x i8] c"compressed\00", align 1
@.str.70.1794 = private unnamed_addr constant [25 x i8] c"encrypted and compressed\00", align 1
@.str.68.1795 = private unnamed_addr constant [10 x i8] c"encrypted\00", align 1
@.str.71.1796 = private unnamed_addr constant [29 x i8] c"Skipping %s ID3v2 frame %s.\0A\00", align 1
@.str.72.1797 = private unnamed_addr constant [26 x i8] c"Failed to alloc %d bytes\0A\00", align 1
@.str.75.1798 = private unnamed_addr constant [33 x i8] c"Error reading frame %s, skipped\0A\00", align 1
@.str.76.1799 = private unnamed_addr constant [4 x i8] c"TCO\00", align 1
@.str.77.1800 = private unnamed_addr constant [5 x i8] c"(%d)\00", align 1
@.str.78.1801 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.79.1802 = private unnamed_addr constant [5 x i8] c"TXXX\00", align 1
@.str.80.1803 = private unnamed_addr constant [4 x i8] c"TXX\00", align 1
@.str.73.1804 = private unnamed_addr constant [36 x i8] c"invalid frame id, assuming padding\0A\00", align 1
@.str.63.1805 = private unnamed_addr constant [12 x i8] c"compression\00", align 1
@.str.64.1806 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.65.1807 = private unnamed_addr constant [31 x i8] c"invalid extended header length\00", align 1
@.str.66.1808 = private unnamed_addr constant [26 x i8] c"extended header too long.\00", align 1
@.str.74.1809 = private unnamed_addr constant [40 x i8] c"ID3v2.%d tag skipped, cannot handle %s\0A\00", align 1
@id3v2_2_metadata_conv = internal constant [9 x %struct.AVCodecDefault] [%struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.85.1818, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.1732, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76.1799, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5.1736, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.86.1819, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.1742, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.87.1820, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.1740, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88.1821, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15.1746, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.89.1822, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17.1748, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90.1823, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19.1750, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91.1824, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25.1756, i32 0, i32 0) }, %struct.AVCodecDefault zeroinitializer], align 16
@.str.92.1810 = private unnamed_addr constant [5 x i8] c"TYER\00", align 1
@.str.93.1811 = private unnamed_addr constant [4 x i8] c"TYE\00", align 1
@.str.94.1812 = private unnamed_addr constant [5 x i8] c"TDAT\00", align 1
@.str.95.1813 = private unnamed_addr constant [4 x i8] c"TDA\00", align 1
@.str.96.1814 = private unnamed_addr constant [11 x i8] c"-%.2s-%.2s\00", align 1
@.str.97.1815 = private unnamed_addr constant [5 x i8] c"TIME\00", align 1
@.str.98.1816 = private unnamed_addr constant [4 x i8] c"TIM\00", align 1
@.str.99.1817 = private unnamed_addr constant [11 x i8] c" %.2s:%.2s\00", align 1
@.str.85.1818 = private unnamed_addr constant [4 x i8] c"TAL\00", align 1
@.str.86.1819 = private unnamed_addr constant [4 x i8] c"TT2\00", align 1
@.str.87.1820 = private unnamed_addr constant [4 x i8] c"TEN\00", align 1
@.str.88.1821 = private unnamed_addr constant [4 x i8] c"TP1\00", align 1
@.str.89.1822 = private unnamed_addr constant [4 x i8] c"TP2\00", align 1
@.str.90.1823 = private unnamed_addr constant [4 x i8] c"TP3\00", align 1
@.str.91.1824 = private unnamed_addr constant [4 x i8] c"TRK\00", align 1
@.str.81.1825 = private unnamed_addr constant [29 x i8] c"Error opening memory stream\0A\00", align 1
@.str.82.1826 = private unnamed_addr constant [40 x i8] c"Cannot read BOM value, input too short\0A\00", align 1
@.str.83.1827 = private unnamed_addr constant [21 x i8] c"Incorrect BOM value\0A\00", align 1
@.str.84.1828 = private unnamed_addr constant [18 x i8] c"Unknown encoding\0A\00", align 1
@.str.100.1829 = private unnamed_addr constant [4 x i8] c"GEO\00", align 1
@.str.101.1830 = private unnamed_addr constant [5 x i8] c"GEOB\00", align 1
@.str.60.1831 = private unnamed_addr constant [5 x i8] c"APIC\00", align 1
@.str.102.1832 = private unnamed_addr constant [4 x i8] c"PIC\00", align 1
@id3v2_extra_meta_funcs = internal constant [4 x %struct.ID3v2EMFunc] [%struct.ID3v2EMFunc { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.100.1829, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.101.1830, i32 0, i32 0), void (%struct.AVFormatContext*, %struct.AVIOContext*, i32, i8*, %struct.ID3v2ExtraMeta**)* @read_geobtag, void (i8*)* @free_geobtag }, %struct.ID3v2EMFunc { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.102.1832, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60.1831, i32 0, i32 0), void (%struct.AVFormatContext*, %struct.AVIOContext*, i32, i8*, %struct.ID3v2ExtraMeta**)* @read_apic, void (i8*)* @free_apic }, %struct.ID3v2EMFunc { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.103.1833, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.103.1833, i32 0, i32 0), void (%struct.AVFormatContext*, %struct.AVIOContext*, i32, i8*, %struct.ID3v2ExtraMeta**)* @read_chapter, void (i8*)* null }, %struct.ID3v2EMFunc zeroinitializer], align 16
@.str.103.1833 = private unnamed_addr constant [5 x i8] c"CHAP\00", align 1
@.str.106.1834 = private unnamed_addr constant [50 x i8] c"Unknown attached picture mimetype: %s, skipping.\0A\00", align 1
@.str.107.1835 = private unnamed_addr constant [35 x i8] c"Unknown attached picture type %d.\0A\00", align 1
@.str.108.1836 = private unnamed_addr constant [46 x i8] c"Error decoding attached picture description.\0A\00", align 1
@.str.104.1837 = private unnamed_addr constant [27 x i8] c"Failed to alloc %zu bytes\0A\00", align 1
@.str.105.1838 = private unnamed_addr constant [43 x i8] c"Error reading GEOB frame, data truncated.\0A\00", align 1
@.str.61.1839 = private unnamed_addr constant [8 x i8] c"comment\00", align 1
@.str.1842 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@ff_null_muxer = internal global %struct.AVOutputFormat.580 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1863, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.1864, i32 0, i32 0), i8* null, i8* null, i32 65536, i32 14, i32 0, i32 161, %struct.AVCodecTag.545** null, %struct.AVClass* null, %struct.AVOutputFormat.580* null, i32 0, i32 (%struct.AVFormatContext.579*)* null, i32 (%struct.AVFormatContext.579*, %struct.AVPacket*)* @null_write_packet, i32 (%struct.AVFormatContext.579*)* null, i32 (%struct.AVFormatContext.579*, %struct.AVPacket*, %struct.AVPacket*, i32)* null, i32 (i32, i32)* null, void (%struct.AVFormatContext.579*, i32, i64*, i64*)* null }, align 8
@.str.1863 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.1.1864 = private unnamed_addr constant [15 x i8] c"raw null video\00", align 1
@av_format_context_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1867, i32 0, i32 0), i8* (i8*)* @format_to_name, %struct.AVOption* getelementptr inbounds ([40 x %struct.AVOption], [40 x %struct.AVOption]* bitcast (<{ %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption }>* @options.1868 to [40 x %struct.AVOption]*), i32 0, i32 0), i32 3411815, i32 0, i32 0, i8* (i8*, i8*)* @format_child_next, %struct.AVClass* (%struct.AVClass*)* @format_child_class_next, i32 3, i32 (i8*)* @get_category.1869, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@.str.1867 = private unnamed_addr constant [16 x i8] c"AVFormatContext\00", align 1
@options.1868 = internal constant <{ %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption }> <{ %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2.1870, i32 0, i32 0), i8* null, i32 1244, i32 0, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2.1870, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.1871, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.1872, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2.1870, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.1873, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6.1874, i32 0, i32 0), i32 1112, i32 1, %union.anon { i64 5000000 }, double 3.200000e+01, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7.1875, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8.1876, i32 0, i32 0), i32 1100, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0), i8* null, i32 1108, i32 0, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10.1878, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11.1879, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.1880, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13.1881, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14.1882, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.15.1883, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.1884, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.17.1885, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18.1886, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19.1887, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20.1888, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.21.1889, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22.1890, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.23.1891, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24.1892, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.25.1893, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 262144 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26.1894, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27.1895, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.1896, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.29.1897, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 64 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.1877, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30.1898, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.31.1899, i32 0, i32 0), i32 1116, i32 1, %union.anon { i64 5000000 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32.1900, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33.1901, i32 0, i32 0), i32 1120, i32 7, { double } zeroinitializer, double 0.000000e+00, double 0.000000e+00, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.34.1902, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.35.1903, i32 0, i32 0), i32 1156, i32 1, %union.anon { i64 1048576 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36.1904, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37.1905, i32 0, i32 0), i32 1160, i32 1, %union.anon { i64 3041280 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38.1906, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.39.1907, i32 0, i32 0), i32 1216, i32 0, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38.1906, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40.1908, i32 0, i32 0), i8* null, i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38.1906, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.1909, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.42.1910, i32 0, i32 0), i32 1104, i32 1, %union.anon { i64 -1 }, double -1.000000e+00, double 0x41DFFFFFFFC00000, i32 3, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.43.1911, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.44.1912, i32 0, i32 0), i32 1192, i32 1, %union.anon { i64 -1 }, double -1.000000e+00, double 0x41DFFFFFFF800000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.45.1913, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.46.1914, i32 0, i32 0), i32 1224, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFF800000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.47.1915, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.48.1916, i32 0, i32 0), i32 1228, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFF800000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.49.1917, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.50.1918, i32 0, i32 0), i32 1232, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFF800000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.51.1919, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.52.1920, i32 0, i32 0), i32 1196, i32 0, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.54.1922, i32 0, i32 0), i32 1196, i32 0, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55.1923, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56.1924, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57.1925, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.58.1926, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59.1927, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.60.1928, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61.1929, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.62.1930, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63.1931, i32 0, i32 0), i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.64.1932, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.65.1933, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.66.1934, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 131072 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.67.1935, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.68.1936, i32 0, i32 0), i32 0, i32 128, %union.anon { i64 262144 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.1921, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.69.1937, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.70.1938, i32 0, i32 0), i32 1236, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFF800000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.71.1939, i32 0, i32 0), i8* getelementptr inbounds ([117 x i8], [117 x i8]* @.str.72.1940, i32 0, i32 0), i32 1240, i32 1, %union.anon { i64 -1 }, double -1.000000e+00, double 1.000000e+00, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.73.1941, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.74.1942, i32 0, i32 0), i32 1252, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFF800000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.75.1943, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.76.1944, i32 0, i32 0), i32 1256, i32 1, %union.anon { i64 1 }, double 0.000000e+00, double 1.000000e+00, i32 2, i8* null }, %struct.AVOption zeroinitializer }>, align 16
@.str.2.1870 = private unnamed_addr constant [10 x i8] c"avioflags\00", align 1
@.str.3.1871 = private unnamed_addr constant [7 x i8] c"direct\00", align 1
@.str.4.1872 = private unnamed_addr constant [17 x i8] c"reduce buffering\00", align 1
@.str.5.1873 = private unnamed_addr constant [10 x i8] c"probesize\00", align 1
@.str.6.1874 = private unnamed_addr constant [17 x i8] c"set probing size\00", align 1
@.str.7.1875 = private unnamed_addr constant [11 x i8] c"packetsize\00", align 1
@.str.8.1876 = private unnamed_addr constant [16 x i8] c"set packet size\00", align 1
@.str.9.1877 = private unnamed_addr constant [7 x i8] c"fflags\00", align 1
@.str.10.1878 = private unnamed_addr constant [7 x i8] c"ignidx\00", align 1
@.str.11.1879 = private unnamed_addr constant [13 x i8] c"ignore index\00", align 1
@.str.12.1880 = private unnamed_addr constant [7 x i8] c"genpts\00", align 1
@.str.13.1881 = private unnamed_addr constant [13 x i8] c"generate pts\00", align 1
@.str.14.1882 = private unnamed_addr constant [9 x i8] c"nofillin\00", align 1
@.str.15.1883 = private unnamed_addr constant [61 x i8] c"do not fill in missing values that can be exactly calculated\00", align 1
@.str.16.1884 = private unnamed_addr constant [8 x i8] c"noparse\00", align 1
@.str.17.1885 = private unnamed_addr constant [43 x i8] c"disable AVParsers, this needs nofillin too\00", align 1
@.str.18.1886 = private unnamed_addr constant [7 x i8] c"igndts\00", align 1
@.str.19.1887 = private unnamed_addr constant [11 x i8] c"ignore dts\00", align 1
@.str.20.1888 = private unnamed_addr constant [15 x i8] c"discardcorrupt\00", align 1
@.str.21.1889 = private unnamed_addr constant [25 x i8] c"discard corrupted frames\00", align 1
@.str.22.1890 = private unnamed_addr constant [8 x i8] c"sortdts\00", align 1
@.str.23.1891 = private unnamed_addr constant [43 x i8] c"try to interleave outputted packets by dts\00", align 1
@.str.24.1892 = private unnamed_addr constant [9 x i8] c"keepside\00", align 1
@.str.25.1893 = private unnamed_addr constant [21 x i8] c"dont merge side data\00", align 1
@.str.26.1894 = private unnamed_addr constant [5 x i8] c"latm\00", align 1
@.str.27.1895 = private unnamed_addr constant [29 x i8] c"enable RTP MP4A-LATM payload\00", align 1
@.str.28.1896 = private unnamed_addr constant [9 x i8] c"nobuffer\00", align 1
@.str.29.1897 = private unnamed_addr constant [52 x i8] c"reduce the latency introduced by optional buffering\00", align 1
@.str.30.1898 = private unnamed_addr constant [16 x i8] c"analyzeduration\00", align 1
@.str.31.1899 = private unnamed_addr constant [62 x i8] c"specify how many microseconds are analyzed to probe the input\00", align 1
@.str.32.1900 = private unnamed_addr constant [10 x i8] c"cryptokey\00", align 1
@.str.33.1901 = private unnamed_addr constant [15 x i8] c"decryption key\00", align 1
@.str.34.1902 = private unnamed_addr constant [9 x i8] c"indexmem\00", align 1
@.str.35.1903 = private unnamed_addr constant [49 x i8] c"max memory used for timestamp index (per stream)\00", align 1
@.str.36.1904 = private unnamed_addr constant [10 x i8] c"rtbufsize\00", align 1
@.str.37.1905 = private unnamed_addr constant [47 x i8] c"max memory used for buffering real-time frames\00", align 1
@.str.38.1906 = private unnamed_addr constant [7 x i8] c"fdebug\00", align 1
@.str.39.1907 = private unnamed_addr constant [26 x i8] c"print specific debug info\00", align 1
@.str.40.1908 = private unnamed_addr constant [3 x i8] c"ts\00", align 1
@.str.41.1909 = private unnamed_addr constant [10 x i8] c"max_delay\00", align 1
@.str.42.1910 = private unnamed_addr constant [49 x i8] c"maximum muxing or demuxing delay in microseconds\00", align 1
@.str.43.1911 = private unnamed_addr constant [13 x i8] c"fpsprobesize\00", align 1
@.str.44.1912 = private unnamed_addr constant [35 x i8] c"number of frames used to probe fps\00", align 1
@.str.45.1913 = private unnamed_addr constant [14 x i8] c"audio_preload\00", align 1
@.str.46.1914 = private unnamed_addr constant [66 x i8] c"microseconds by which audio packets should be interleaved earlier\00", align 1
@.str.47.1915 = private unnamed_addr constant [15 x i8] c"chunk_duration\00", align 1
@.str.48.1916 = private unnamed_addr constant [28 x i8] c"microseconds for each chunk\00", align 1
@.str.49.1917 = private unnamed_addr constant [11 x i8] c"chunk_size\00", align 1
@.str.50.1918 = private unnamed_addr constant [29 x i8] c"size in bytes for each chunk\00", align 1
@.str.51.1919 = private unnamed_addr constant [13 x i8] c"f_err_detect\00", align 1
@.str.52.1920 = private unnamed_addr constant [72 x i8] c"set error detection flags (deprecated; use err_detect, save via avconv)\00", align 1
@.str.53.1921 = private unnamed_addr constant [11 x i8] c"err_detect\00", align 1
@.str.54.1922 = private unnamed_addr constant [26 x i8] c"set error detection flags\00", align 1
@.str.55.1923 = private unnamed_addr constant [9 x i8] c"crccheck\00", align 1
@.str.56.1924 = private unnamed_addr constant [21 x i8] c"verify embedded CRCs\00", align 1
@.str.57.1925 = private unnamed_addr constant [10 x i8] c"bitstream\00", align 1
@.str.58.1926 = private unnamed_addr constant [42 x i8] c"detect bitstream specification deviations\00", align 1
@.str.59.1927 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.60.1928 = private unnamed_addr constant [33 x i8] c"detect improper bitstream length\00", align 1
@.str.61.1929 = private unnamed_addr constant [8 x i8] c"explode\00", align 1
@.str.62.1930 = private unnamed_addr constant [40 x i8] c"abort decoding on minor error detection\00", align 1
@.str.63.1931 = private unnamed_addr constant [8 x i8] c"careful\00", align 1
@.str.64.1932 = private unnamed_addr constant [83 x i8] c"consider things that violate the spec and have not been seen in the wild as errors\00", align 1
@.str.65.1933 = private unnamed_addr constant [10 x i8] c"compliant\00", align 1
@.str.66.1934 = private unnamed_addr constant [45 x i8] c"consider all spec non compliancies as errors\00", align 1
@.str.67.1935 = private unnamed_addr constant [11 x i8] c"aggressive\00", align 1
@.str.68.1936 = private unnamed_addr constant [60 x i8] c"consider things that a sane encoder shouldnt do as an error\00", align 1
@.str.69.1937 = private unnamed_addr constant [28 x i8] c"use_wallclock_as_timestamps\00", align 1
@.str.70.1938 = private unnamed_addr constant [28 x i8] c"use wallclock as timestamps\00", align 1
@.str.71.1939 = private unnamed_addr constant [18 x i8] c"avoid_negative_ts\00", align 1
@.str.72.1940 = private unnamed_addr constant [117 x i8] c"shift timestamps to make them positive. 1 enables, 0 disables, default of -1 enables when required by target format.\00", align 1
@.str.73.1941 = private unnamed_addr constant [19 x i8] c"skip_initial_bytes\00", align 1
@.str.74.1942 = private unnamed_addr constant [19 x i8] c"skip initial bytes\00", align 1
@.str.75.1943 = private unnamed_addr constant [20 x i8] c"correct_ts_overflow\00", align 1
@.str.76.1944 = private unnamed_addr constant [35 x i8] c"correct single timestamp overflows\00", align 1
@.str.1.1945 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@first_iformat = internal unnamed_addr global %struct.AVInputFormat.329* null, align 8
@first_oformat = internal unnamed_addr global %struct.AVOutputFormat.301* null, align 8
@.str.2.1988 = private unnamed_addr constant [37 x i8] c"Truncating packet of size %d to %ld\0A\00", align 1
@.str.67.1991 = private unnamed_addr constant [5 x i8] c"%0*d\00", align 1
@av_probe_input_format3.zerobuffer = internal constant [32 x i8] zeroinitializer, align 16
@.str.3.1992 = private unnamed_addr constant [4 x i8] c"ID3\00", align 1
@.str.4.1993 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5.1994 = private unnamed_addr constant [46 x i8] c"Specified probe size value %u cannot be < %u\0A\00", align 1
@.str.6.1995 = private unnamed_addr constant [10 x i8] c"mime_type\00", align 1
@.str.7.1996 = private unnamed_addr constant [11 x i8] c"audio/aacp\00", align 1
@.str.8.1997 = private unnamed_addr constant [4 x i8] c"aac\00", align 1
@.str.9.1998 = private unnamed_addr constant [70 x i8] c"Format %s detected only with low score of %d, misdetection possible!\0A\00", align 1
@.str.10.1999 = private unnamed_addr constant [44 x i8] c"Format %s probed with size=%d and score=%d\0A\00", align 1
@.str.11.2002 = private unnamed_addr constant [98 x i8] c"Input context has not been properly allocated by avformat_alloc_context() and is not NULL either\0A\00", align 1
@.str.83.2003 = private unnamed_addr constant [81 x i8] c"Custom AVIOContext makes no sense and will be ignored with AVFMT_NOFILE format.\0A\00", align 1
@.str.12.2004 = private unnamed_addr constant [4 x i8] c"mp3\00", align 1
@.str.13.2005 = private unnamed_addr constant [56 x i8] c"demuxer does not support additional id3 data, skipping\0A\00", align 1
@.str.14.2008 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.42.2009 = private unnamed_addr constant [16 x i8] c"s->nb_streams>0\00", align 1
@.str.16.2010 = private unnamed_addr constant [20 x i8] c"libavformat/utils.c\00", align 1
@.str.43.2011 = private unnamed_addr constant [36 x i8] c"s->streams[ s->nb_streams-1 ] == st\00", align 1
@.str.15.2012 = private unnamed_addr constant [23 x i8] c"st->request_probe <= 0\00", align 1
@.str.17.2013 = private unnamed_addr constant [40 x i8] c"Dropped corrupted packet (stream = %d)\0A\00", align 1
@.str.18.2014 = private unnamed_addr constant [25 x i8] c"Invalid stream index %d\0A\00", align 1
@.str.84.2015 = private unnamed_addr constant [25 x i8] c"probing stream %d pp:%d\0A\00", align 1
@.str.85.2016 = private unnamed_addr constant [32 x i8] c"nothing to probe for stream %d\0A\00", align 1
@.str.95.2017 = private unnamed_addr constant [58 x i8] c"Probe with size=%d, packets=%d detected %s with score=%d\0A\00", align 1
@.str.88.2018 = private unnamed_addr constant [4 x i8] c"ac3\00", align 1
@set_codec_from_probe_data.fmt_id_type = internal unnamed_addr constant [10 x %struct.anon] [%struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8.1997, i32 0, i32 0), i32 86018, i32 1 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88.2018, i32 0, i32 0), i32 86019, i32 1 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.89.2019, i32 0, i32 0), i32 86020, i32 1 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.90.2020, i32 0, i32 0), i32 86057, i32 1 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.91.2021, i32 0, i32 0), i32 28, i32 0 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.92.2022, i32 0, i32 0), i32 86066, i32 1 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93.2023, i32 0, i32 0), i32 13, i32 0 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12.2004, i32 0, i32 0), i32 86017, i32 1 }, %struct.anon { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.2024, i32 0, i32 0), i32 2, i32 0 }, %struct.anon zeroinitializer], align 16
@.str.89.2019 = private unnamed_addr constant [4 x i8] c"dts\00", align 1
@.str.90.2020 = private unnamed_addr constant [5 x i8] c"eac3\00", align 1
@.str.91.2021 = private unnamed_addr constant [5 x i8] c"h264\00", align 1
@.str.92.2022 = private unnamed_addr constant [5 x i8] c"loas\00", align 1
@.str.93.2023 = private unnamed_addr constant [4 x i8] c"m4v\00", align 1
@.str.94.2024 = private unnamed_addr constant [10 x i8] c"mpegvideo\00", align 1
@.str.86.2025 = private unnamed_addr constant [18 x i8] c"probed stream %d\0A\00", align 1
@.str.87.2026 = private unnamed_addr constant [25 x i8] c"probed stream %d failed\0A\00", align 1
@.str.19.2034 = private unnamed_addr constant [27 x i8] c"demuxer injecting skip %d\0A\00", align 1
@.str.20.2035 = private unnamed_addr constant [41 x i8] c"index==0 || ie[-1].timestamp < timestamp\00", align 1
@__PRETTY_FUNCTION__.ff_add_index_entry = private unnamed_addr constant [96 x i8] c"int ff_add_index_entry(AVIndexEntry **, int *, unsigned int *, int64_t, int64_t, int, int, int)\00", align 1
@.str.101.2036 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.100.2037 = private unnamed_addr constant [6 x i8] c"NOPTS\00", align 1
@.str.97.2038 = private unnamed_addr constant [55 x i8] c"Invalid timestamps stream=%d, pts=%s, dts=%s, size=%d\0A\00", align 1
@.str.98.2039 = private unnamed_addr constant [74 x i8] c"ff_read_packet stream=%d, pts=%s, dts=%s, size=%d, duration=%d, flags=%d\0A\00", align 1
@.str.28.2040 = private unnamed_addr constant [65 x i8] c"parser not found for codec %s, packets or times may be invalid.\0A\00", align 1
@.str.99.2041 = private unnamed_addr constant [79 x i8] c"read_frame_internal stream=%d, pts=%s, dts=%s, size=%d, duration=%d, flags=%d\0A\00", align 1
@.str.102.2042 = private unnamed_addr constant [33 x i8] c"invalid dts/pts combination %li\0A\00", align 1
@.str.103.2043 = private unnamed_addr constant [24 x i8] c"mov,mp4,m4a,3gp,3g2,mj2\00", align 1
@.str.104.2044 = private unnamed_addr constant [53 x i8] c"first_dts %s not matching first dts %s in the queue\0A\00", align 1
@.str.105.2045 = private unnamed_addr constant [50 x i8] c"first_dts %s but no packet with dts in the queue\0A\00", align 1
@.str.69.2092 = private unnamed_addr constant [47 x i8] c"st:%d removing common factor %d from timebase\0A\00", align 1
@.str.70.2093 = private unnamed_addr constant [40 x i8] c"st:%d has too large timebase, reducing\0A\00", align 1
@.str.71.2094 = private unnamed_addr constant [58 x i8] c"Ignoring attempt to set invalid timebase %d/%d for st:%d\0A\00", align 1
@.str.44.2097 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@channel_layout_map = internal unnamed_addr constant [26 x %struct.anon.817] [%struct.anon.817 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.2247, i32 0, i32 0), i32 1, i64 4 }, %struct.anon.817 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6.2248, i32 0, i32 0), i32 2, i64 3 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7.2249, i32 0, i32 0), i32 3, i64 11 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8.2250, i32 0, i32 0), i32 3, i64 7 }, %struct.anon.817 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9.2251, i32 0, i32 0), i32 3, i64 259 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10.2252, i32 0, i32 0), i32 4, i64 263 }, %struct.anon.817 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11.2253, i32 0, i32 0), i32 4, i64 51 }, %struct.anon.817 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12.2254, i32 0, i32 0), i32 4, i64 1539 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.2255, i32 0, i32 0), i32 4, i64 15 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.2256, i32 0, i32 0), i32 5, i64 55 }, %struct.anon.817 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15.2257, i32 0, i32 0), i32 5, i64 1543 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16.2258, i32 0, i32 0), i32 5, i64 271 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.2259, i32 0, i32 0), i32 6, i64 63 }, %struct.anon.817 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18.2260, i32 0, i32 0), i32 6, i64 1551 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19.2261, i32 0, i32 0), i32 6, i64 1799 }, %struct.anon.817 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20.2262, i32 0, i32 0), i32 6, i64 1731 }, %struct.anon.817 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21.2263, i32 0, i32 0), i32 6, i64 311 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22.2264, i32 0, i32 0), i32 7, i64 1807 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22.2264, i32 0, i32 0), i32 7, i64 319 }, %struct.anon.817 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23.2265, i32 0, i32 0), i32 7, i64 1739 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24.2266, i32 0, i32 0), i32 7, i64 1591 }, %struct.anon.817 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25.2267, i32 0, i32 0), i32 7, i64 1735 }, %struct.anon.817 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26.2268, i32 0, i32 0), i32 8, i64 1599 }, %struct.anon.817 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27.2269, i32 0, i32 0), i32 8, i64 1743 }, %struct.anon.817 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28.2270, i32 0, i32 0), i32 8, i64 1847 }, %struct.anon.817 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29.2271, i32 0, i32 0), i32 2, i64 1610612736 }], align 16
@channel_names = internal unnamed_addr constant [36 x %struct.AVCodecDefault] [%struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30.2197, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31.2198, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.2199, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.33.2200, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34.2201, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.35.2202, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36.2203, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.37.2204, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38.2205, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.39.2206, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40.2207, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41.2208, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42.2209, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43.2210, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44.2211, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.45.2212, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46.2213, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.47.2214, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48.2215, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.49.2216, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50.2217, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.51.2218, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52.2219, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.2220, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54.2221, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.55.2222, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.56.2223, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.57.2224, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.58.2225, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.59.2226, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.60.2227, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.61.2228, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.62.2229, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.63.2230, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.64.2231, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.65.2232, i32 0, i32 0) }, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault zeroinitializer, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66.2233, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.67.2234, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.68.2235, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.69.2236, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70.2237, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71.2238, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.72.2239, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.73.2240, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74.2241, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.75.2242, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76.2243, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.77.2244, i32 0, i32 0) }, %struct.AVCodecDefault { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78.2245, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.79.2246, i32 0, i32 0) }], align 16
@.str.30.2197 = private unnamed_addr constant [3 x i8] c"FL\00", align 1
@.str.31.2198 = private unnamed_addr constant [11 x i8] c"front left\00", align 1
@.str.32.2199 = private unnamed_addr constant [3 x i8] c"FR\00", align 1
@.str.33.2200 = private unnamed_addr constant [12 x i8] c"front right\00", align 1
@.str.34.2201 = private unnamed_addr constant [3 x i8] c"FC\00", align 1
@.str.35.2202 = private unnamed_addr constant [13 x i8] c"front center\00", align 1
@.str.36.2203 = private unnamed_addr constant [4 x i8] c"LFE\00", align 1
@.str.37.2204 = private unnamed_addr constant [14 x i8] c"low frequency\00", align 1
@.str.38.2205 = private unnamed_addr constant [3 x i8] c"BL\00", align 1
@.str.39.2206 = private unnamed_addr constant [10 x i8] c"back left\00", align 1
@.str.40.2207 = private unnamed_addr constant [3 x i8] c"BR\00", align 1
@.str.41.2208 = private unnamed_addr constant [11 x i8] c"back right\00", align 1
@.str.42.2209 = private unnamed_addr constant [4 x i8] c"FLC\00", align 1
@.str.43.2210 = private unnamed_addr constant [21 x i8] c"front left-of-center\00", align 1
@.str.44.2211 = private unnamed_addr constant [4 x i8] c"FRC\00", align 1
@.str.45.2212 = private unnamed_addr constant [22 x i8] c"front right-of-center\00", align 1
@.str.46.2213 = private unnamed_addr constant [3 x i8] c"BC\00", align 1
@.str.47.2214 = private unnamed_addr constant [12 x i8] c"back center\00", align 1
@.str.48.2215 = private unnamed_addr constant [3 x i8] c"SL\00", align 1
@.str.49.2216 = private unnamed_addr constant [10 x i8] c"side left\00", align 1
@.str.50.2217 = private unnamed_addr constant [3 x i8] c"SR\00", align 1
@.str.51.2218 = private unnamed_addr constant [11 x i8] c"side right\00", align 1
@.str.52.2219 = private unnamed_addr constant [3 x i8] c"TC\00", align 1
@.str.53.2220 = private unnamed_addr constant [11 x i8] c"top center\00", align 1
@.str.54.2221 = private unnamed_addr constant [4 x i8] c"TFL\00", align 1
@.str.55.2222 = private unnamed_addr constant [15 x i8] c"top front left\00", align 1
@.str.56.2223 = private unnamed_addr constant [4 x i8] c"TFC\00", align 1
@.str.57.2224 = private unnamed_addr constant [17 x i8] c"top front center\00", align 1
@.str.58.2225 = private unnamed_addr constant [4 x i8] c"TFR\00", align 1
@.str.59.2226 = private unnamed_addr constant [16 x i8] c"top front right\00", align 1
@.str.60.2227 = private unnamed_addr constant [4 x i8] c"TBL\00", align 1
@.str.61.2228 = private unnamed_addr constant [14 x i8] c"top back left\00", align 1
@.str.62.2229 = private unnamed_addr constant [4 x i8] c"TBC\00", align 1
@.str.63.2230 = private unnamed_addr constant [16 x i8] c"top back center\00", align 1
@.str.64.2231 = private unnamed_addr constant [4 x i8] c"TBR\00", align 1
@.str.65.2232 = private unnamed_addr constant [15 x i8] c"top back right\00", align 1
@.str.66.2233 = private unnamed_addr constant [3 x i8] c"DL\00", align 1
@.str.67.2234 = private unnamed_addr constant [13 x i8] c"downmix left\00", align 1
@.str.68.2235 = private unnamed_addr constant [3 x i8] c"DR\00", align 1
@.str.69.2236 = private unnamed_addr constant [14 x i8] c"downmix right\00", align 1
@.str.70.2237 = private unnamed_addr constant [3 x i8] c"WL\00", align 1
@.str.71.2238 = private unnamed_addr constant [10 x i8] c"wide left\00", align 1
@.str.72.2239 = private unnamed_addr constant [3 x i8] c"WR\00", align 1
@.str.73.2240 = private unnamed_addr constant [11 x i8] c"wide right\00", align 1
@.str.74.2241 = private unnamed_addr constant [4 x i8] c"SDL\00", align 1
@.str.75.2242 = private unnamed_addr constant [21 x i8] c"surround direct left\00", align 1
@.str.76.2243 = private unnamed_addr constant [4 x i8] c"SDR\00", align 1
@.str.77.2244 = private unnamed_addr constant [22 x i8] c"surround direct right\00", align 1
@.str.78.2245 = private unnamed_addr constant [5 x i8] c"LFE2\00", align 1
@.str.79.2246 = private unnamed_addr constant [16 x i8] c"low frequency 2\00", align 1
@.str.5.2247 = private unnamed_addr constant [5 x i8] c"mono\00", align 1
@.str.6.2248 = private unnamed_addr constant [7 x i8] c"stereo\00", align 1
@.str.7.2249 = private unnamed_addr constant [4 x i8] c"2.1\00", align 1
@.str.8.2250 = private unnamed_addr constant [4 x i8] c"3.0\00", align 1
@.str.9.2251 = private unnamed_addr constant [10 x i8] c"3.0(back)\00", align 1
@.str.10.2252 = private unnamed_addr constant [4 x i8] c"4.0\00", align 1
@.str.11.2253 = private unnamed_addr constant [5 x i8] c"quad\00", align 1
@.str.12.2254 = private unnamed_addr constant [11 x i8] c"quad(side)\00", align 1
@.str.13.2255 = private unnamed_addr constant [4 x i8] c"3.1\00", align 1
@.str.14.2256 = private unnamed_addr constant [4 x i8] c"5.0\00", align 1
@.str.15.2257 = private unnamed_addr constant [10 x i8] c"5.0(side)\00", align 1
@.str.16.2258 = private unnamed_addr constant [4 x i8] c"4.1\00", align 1
@.str.17.2259 = private unnamed_addr constant [4 x i8] c"5.1\00", align 1
@.str.18.2260 = private unnamed_addr constant [10 x i8] c"5.1(side)\00", align 1
@.str.19.2261 = private unnamed_addr constant [4 x i8] c"6.0\00", align 1
@.str.20.2262 = private unnamed_addr constant [11 x i8] c"6.0(front)\00", align 1
@.str.21.2263 = private unnamed_addr constant [10 x i8] c"hexagonal\00", align 1
@.str.22.2264 = private unnamed_addr constant [4 x i8] c"6.1\00", align 1
@.str.23.2265 = private unnamed_addr constant [11 x i8] c"6.1(front)\00", align 1
@.str.24.2266 = private unnamed_addr constant [4 x i8] c"7.0\00", align 1
@.str.25.2267 = private unnamed_addr constant [11 x i8] c"7.0(front)\00", align 1
@.str.26.2268 = private unnamed_addr constant [4 x i8] c"7.1\00", align 1
@.str.27.2269 = private unnamed_addr constant [10 x i8] c"7.1(wide)\00", align 1
@.str.28.2270 = private unnamed_addr constant [10 x i8] c"octagonal\00", align 1
@.str.29.2271 = private unnamed_addr constant [8 x i8] c"downmix\00", align 1
@.str.2272 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2.2273 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.3.2274 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.4.2275 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.1.2276 = private unnamed_addr constant [12 x i8] c"%d channels\00", align 1
@si_prefixes = internal unnamed_addr constant [54 x i8] c"\12\00\09\00\00\00\03\00\06\00\00\0F\00\00\00\0C\00\00\00\00\18\15\00\00\00\00\00\00\EE\00\FE\FF\00\F1\00\02\00\00\03\00\FD\F7\00\F4\00\00\00\00\FA\00\00\00\E8\EB", align 16
@class.2335 = internal constant %struct.AVClass { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.2344, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* null, i32 3411815, i32 80, i32 88, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@.str.2336 = private unnamed_addr constant [50 x i8] c"Invalid chars '%s' at the end of expression '%s'\0A\00", align 1
@.str.47.2337 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str.48.2338 = private unnamed_addr constant [3 x i8] c"PI\00", align 1
@.str.49.2339 = private unnamed_addr constant [4 x i8] c"PHI\00", align 1
@constants = internal unnamed_addr constant [3 x %struct.anon.829] [%struct.anon.829 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.47.2337, i32 0, i32 0), double 0x4005BF0A8B145769 }, %struct.anon.829 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48.2338, i32 0, i32 0), double 0x400921FB54442D18 }, %struct.anon.829 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49.2339, i32 0, i32 0), double 0x3FF9E3779B97F4A8 }], align 16
@.str.2.2340 = private unnamed_addr constant [43 x i8] c"Undefined constant or missing '(' in '%s'\0A\00", align 1
@.str.3.2341 = private unnamed_addr constant [21 x i8] c"Missing ')' in '%s'\0A\00", align 1
@.str.4.2342 = private unnamed_addr constant [38 x i8] c"Missing ')' or too many args in '%s'\0A\00", align 1
@.str.46.2343 = private unnamed_addr constant [26 x i8] c"Unknown function in '%s'\0A\00", align 1
@.str.1.2344 = private unnamed_addr constant [5 x i8] c"Eval\00", align 1
@imgutils_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6.2377, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* null, i32 3411815, i32 8, i32 16, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@.str.2376 = private unnamed_addr constant [31 x i8] c"Picture size %ux%u is invalid\0A\00", align 1
@.str.6.2377 = private unnamed_addr constant [9 x i8] c"IMGUTILS\00", align 1
@.str.1.2382 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.2.2383 = private unnamed_addr constant [31 x i8] c"abs(src_linesize) >= bytewidth\00", align 1
@.str.3.2384 = private unnamed_addr constant [21 x i8] c"libavutil/imgutils.c\00", align 1
@.str.4.2385 = private unnamed_addr constant [31 x i8] c"abs(dst_linesize) >= bytewidth\00", align 1
@.str.5.2388 = private unnamed_addr constant [30 x i8] c"av_image_get_linesize failed\0A\00", align 1
@ff_log2_tab = internal unnamed_addr constant [256 x i8] calign 16
@.str.2399 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@.str.3.2400 = private unnamed_addr constant [11 x i8] c"[%s @ %p] \00", align 1
@av_log_default_callback.print_prefix = internal unnamed_addr global i32 1, align 4
@av_log_default_callback.is_atty = internal unnamed_addr global i32 0, align 4
@av_log_default_callback.prev = internal global [1024 x i8] zeroinitializer, align 16
@use_color = internal unnamed_addr global i32 -1, align 4
@.str.4.2404 = private unnamed_addr constant [9 x i8] c"NO_COLOR\00", align 1
@.str.5.2405 = private unnamed_addr constant [21 x i8] c"AV_LOG_FORCE_NOCOLOR\00", align 1
@.str.6.2406 = private unnamed_addr constant [5 x i8] c"TERM\00", align 1
@.str.7.2407 = private unnamed_addr constant [19 x i8] c"AV_LOG_FORCE_COLOR\00", align 1
@.str.8.2408 = private unnamed_addr constant [22 x i8] c"AV_LOG_FORCE_256COLOR\00", align 1
@color = internal unnamed_addr constant [27 x i32] [i32 3458113, i32 53313, i32 50193, i32 57859, i32 64777, i32 10242, i32 8706, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64009, i32 56085, i32 51461, i32 54549, i32 52997, i32 13078, i32 9990, i32 39698, i32 49172, i32 39188, i32 37652], align 16
@.str.9.2409 = private unnamed_addr constant [10 x i8] c"\1B[%d;3%dm\00", align 1
@.str.10.2410 = private unnamed_addr constant [21 x i8] c"\1B[48;5;%dm\1B[38;5;%dm\00", align 1
@.str.11.2411 = private unnamed_addr constant [5 x i8] c"\1B[0m\00", align 1
@av_reverse = internal unnamed_addr constant [256 x i8] c"\00\80@\C0 \A0`\E0\10\90P\D00\B0p\F0\08\88H\C8(\A8h\E8\18\98X\D88\B8x\F8\04\84D\C4$\A4d\E4\14\94T\D44\B4t\F4\0C\8CL\CC,\ACl\EC\1C\9C\5C\DC<\BC|\FC\02\82B\C2\22\A2b\E2\12\92R\D22\B2r\F2\0A\8AJ\CA*\AAj\EA\1A\9AZ\DA:\BAz\FA\06\86F\C6&\A6f\E6\16\96V\D66\B6v\F6\0E\8EN\CE.\AEn\EE\1E\9E^\DE>\BE~\FE\01\81A\C1!\A1a\E1\11\91Q\D11\B1q\F1\09\89I\C9)\A9i\E9\19\99Y\D99\B9y\F9\05\85E\C5%\A5e\E5\15\95U\D55\B5u\F5\0D\8DM\CD-\ADm\ED\1D\9D]\DD=\BD}\FD\03\83C\C3#\A3c\E3\13\93S\D33\B3s\F3\0B\8BK\CB+\ABk\EB\1B\9B[\DB;\BB{\FB\07\87G\C7'\A7g\E7\17\97W\D77\B7w\F7\0F\8FO\CF/\AFo\EF\1F\9F_\DF?\BF\7F\FF", align 16
@.str.2468 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.1.2469 = private unnamed_addr constant [49 x i8] c"Unable to parse option value \22%s\22 as image size\0A\00", align 1
@.str.2.2470 = private unnamed_addr constant [51 x i8] c"Unable to parse option value \22%s\22 as pixel format\0A\00", align 1
@.str.3.2471 = private unnamed_addr constant [52 x i8] c"Unable to parse option value \22%s\22 as sample format\0A\00", align 1
@.str.4.2472 = private unnamed_addr constant [22 x i8] c"Invalid option type.\0A\00", align 1
@const_names = internal constant [4 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31.2475, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32.2476, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33.2477, i32 0, i32 0), i8* null], align 16
@const_values = internal constant [4 x double] [double 0x400921FB54442D18, double 0x4005BF0A8B145769, double 1.180000e+02, double 0.000000e+00], align 16
@.str.30.2473 = private unnamed_addr constant [35 x i8] c"Unable to parse option value \22%s\22\0A\00", align 1
@.str.34.2474 = private unnamed_addr constant [52 x i8] c"Value %f for parameter '%s' out of range [%g - %g]\0A\00", align 1
@.str.31.2475 = private unnamed_addr constant [3 x i8] c"PI\00", align 1
@.str.32.2476 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str.33.2477 = private unnamed_addr constant [10 x i8] c"QP2LAMBDA\00", align 1
@.str.7.2482 = private unnamed_addr constant [6 x i8] c"pixel\00", align 1
@.str.35.2483 = private unnamed_addr constant [48 x i8] c"The value set by option '%s' is not a %s format\00", align 1
@.str.36.2484 = private unnamed_addr constant [62 x i8] c"Value %d for parameter '%s' out of %s format range [%d - %d]\0A\00", align 1
@.str.8.2485 = private unnamed_addr constant [7 x i8] c"sample\00", align 1
@.str.9.2486 = private unnamed_addr constant [7 x i8] c"0x%08X\00", align 1
@.str.10.2487 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.11.2488 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.12.2489 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str.13.2490 = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.14.2491 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.15.2494 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.16.2495 = private unnamed_addr constant [6 x i8] c"%dx%d\00", align 1
@.str.17.2496 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.20.2531 = private unnamed_addr constant [51 x i8] c"AVOption type %d of option %s not implemented yet\0A\00", align 1
@.str.25.2544 = private unnamed_addr constant [38 x i8] c"Error setting option %s to value %s.\0A\00", align 1
@.str.14.2548 = private unnamed_addr constant [5 x i8] c"ntsc\00", align 1
@video_size_abbrs = internal unnamed_addr constant [37 x %struct.anon] [%struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.2548, i32 0, i32 0), i32 720, i32 480 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.2549, i32 0, i32 0), i32 720, i32 576 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.2550, i32 0, i32 0), i32 352, i32 240 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17.2551, i32 0, i32 0), i32 352, i32 288 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18.2552, i32 0, i32 0), i32 640, i32 480 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.2553, i32 0, i32 0), i32 768, i32 576 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20.2554, i32 0, i32 0), i32 352, i32 240 }, %struct.anon { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21.2555, i32 0, i32 0), i32 352, i32 240 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22.2556, i32 0, i32 0), i32 128, i32 96 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23.2557, i32 0, i32 0), i32 176, i32 144 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24.2558, i32 0, i32 0), i32 352, i32 288 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25.2559, i32 0, i32 0), i32 704, i32 576 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26.2560, i32 0, i32 0), i32 1408, i32 1152 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27.2561, i32 0, i32 0), i32 160, i32 120 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28.2562, i32 0, i32 0), i32 320, i32 240 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29.2563, i32 0, i32 0), i32 640, i32 480 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30.2564, i32 0, i32 0), i32 800, i32 600 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31.2565, i32 0, i32 0), i32 1024, i32 768 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32.2566, i32 0, i32 0), i32 1600, i32 1200 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33.2567, i32 0, i32 0), i32 2048, i32 1536 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34.2568, i32 0, i32 0), i32 1280, i32 1024 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35.2569, i32 0, i32 0), i32 2560, i32 2048 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36.2570, i32 0, i32 0), i32 5120, i32 4096 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37.2571, i32 0, i32 0), i32 852, i32 480 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38.2572, i32 0, i32 0), i32 1366, i32 768 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39.2573, i32 0, i32 0), i32 1600, i32 1024 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40.2574, i32 0, i32 0), i32 1920, i32 1200 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41.2575, i32 0, i32 0), i32 2560, i32 1600 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.42.2576, i32 0, i32 0), i32 3200, i32 2048 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43.2577, i32 0, i32 0), i32 3840, i32 2400 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44.2578, i32 0, i32 0), i32 6400, i32 4096 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45.2579, i32 0, i32 0), i32 7680, i32 4800 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.46.2580, i32 0, i32 0), i32 320, i32 200 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47.2581, i32 0, i32 0), i32 640, i32 350 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48.2582, i32 0, i32 0), i32 852, i32 480 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49.2583, i32 0, i32 0), i32 1280, i32 720 }, %struct.anon { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.50.2584, i32 0, i32 0), i32 1920, i32 1080 }], align 16
@.str.15.2549 = private unnamed_addr constant [4 x i8] c"pal\00", align 1
@.str.16.2550 = private unnamed_addr constant [6 x i8] c"qntsc\00", align 1
@.str.17.2551 = private unnamed_addr constant [5 x i8] c"qpal\00", align 1
@.str.18.2552 = private unnamed_addr constant [6 x i8] c"sntsc\00", align 1
@.str.19.2553 = private unnamed_addr constant [5 x i8] c"spal\00", align 1
@.str.20.2554 = private unnamed_addr constant [5 x i8] c"film\00", align 1
@.str.21.2555 = private unnamed_addr constant [10 x i8] c"ntsc-film\00", align 1
@.str.22.2556 = private unnamed_addr constant [6 x i8] c"sqcif\00", align 1
@.str.23.2557 = private unnamed_addr constant [5 x i8] c"qcif\00", align 1
@.str.24.2558 = private unnamed_addr constant [4 x i8] c"cif\00", align 1
@.str.25.2559 = private unnamed_addr constant [5 x i8] c"4cif\00", align 1
@.str.26.2560 = private unnamed_addr constant [6 x i8] c"16cif\00", align 1
@.str.27.2561 = private unnamed_addr constant [6 x i8] c"qqvga\00", align 1
@.str.28.2562 = private unnamed_addr constant [5 x i8] c"qvga\00", align 1
@.str.29.2563 = private unnamed_addr constant [4 x i8] c"vga\00", align 1
@.str.30.2564 = private unnamed_addr constant [5 x i8] c"svga\00", align 1
@.str.31.2565 = private unnamed_addr constant [4 x i8] c"xga\00", align 1
@.str.32.2566 = private unnamed_addr constant [5 x i8] c"uxga\00", align 1
@.str.33.2567 = private unnamed_addr constant [5 x i8] c"qxga\00", align 1
@.str.34.2568 = private unnamed_addr constant [5 x i8] c"sxga\00", align 1
@.str.35.2569 = private unnamed_addr constant [6 x i8] c"qsxga\00", align 1
@.str.36.2570 = private unnamed_addr constant [6 x i8] c"hsxga\00", align 1
@.str.37.2571 = private unnamed_addr constant [5 x i8] c"wvga\00", align 1
@.str.38.2572 = private unnamed_addr constant [5 x i8] c"wxga\00", align 1
@.str.39.2573 = private unnamed_addr constant [6 x i8] c"wsxga\00", align 1
@.str.40.2574 = private unnamed_addr constant [6 x i8] c"wuxga\00", align 1
@.str.41.2575 = private unnamed_addr constant [6 x i8] c"woxga\00", align 1
@.str.42.2576 = private unnamed_addr constant [7 x i8] c"wqsxga\00", align 1
@.str.43.2577 = private unnamed_addr constant [7 x i8] c"wquxga\00", align 1
@.str.44.2578 = private unnamed_addr constant [7 x i8] c"whsxga\00", align 1
@.str.45.2579 = private unnamed_addr constant [7 x i8] c"whuxga\00", align 1
@.str.46.2580 = private unnamed_addr constant [4 x i8] c"cga\00", align 1
@.str.47.2581 = private unnamed_addr constant [4 x i8] c"ega\00", align 1
@.str.48.2582 = private unnamed_addr constant [6 x i8] c"hd480\00", align 1
@.str.49.2583 = private unnamed_addr constant [6 x i8] c"hd720\00", align 1
@.str.50.2584 = private unnamed_addr constant [7 x i8] c"hd1080\00", align 1
@av_pix_fmt_descriptors = internal constant <{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }> <{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2742, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.2743, i32 0, i32 0), i8 3, i8 1, i8 0, i8 0, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 -116, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.2744, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 40, i8 56 }, { i8, i8 } { i8 72, i8 56 }, { i8, i8 } { i8 104, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.2745, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 104, i8 56 }, { i8, i8 } { i8 72, i8 56 }, { i8, i8 } { i8 40, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4.2746, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.2747, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.2748, i32 0, i32 0), i8 3, i8 2, i8 2, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.2749, i32 0, i32 0), i8 3, i8 2, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.2750, i32 0, i32 0), i8 1, i8 0, i8 0, i8 64, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9.2751, i32 0, i32 0), i8 1, i8 0, i8 0, i8 4, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 0 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10.2752, i32 0, i32 0), i8 1, i8 0, i8 0, i8 4, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 7 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11.2753, i32 0, i32 0), i8 1, i8 0, i8 0, i8 2, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12.2754, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13.2755, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14.2756, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15.2757, i32 0, i32 0), i8 0, i8 0, i8 0, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16.2758, i32 0, i32 0), i8 0, i8 0, i8 0, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.2759, i32 0, i32 0), i8 3, i8 1, i8 0, i8 0, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 68, i8 56 }, { i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 108, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18.2760, i32 0, i32 0), i8 3, i8 2, i8 0, i8 0, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 52, i8 56 }, { i8, i8 } { i8 -108, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.2761, i32 0, i32 0), i8 3, i8 0, i8 0, i8 96, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 16 }, { i8, i8 } { i8 32, i8 19 }, { i8, i8 } { i8 32, i8 14 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20.2762, i32 0, i32 0), i8 3, i8 0, i8 0, i8 36, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 -116, i8 0 }, { i8, i8 } { i8 76, i8 8 }, { i8, i8 } { i8 44, i8 0 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21.2763, i32 0, i32 0), i8 3, i8 0, i8 0, i8 96, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 0 }, { i8, i8 } { i8 32, i8 9 }, { i8, i8 } { i8 32, i8 3 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22.2764, i32 0, i32 0), i8 3, i8 0, i8 0, i8 96, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 14 }, { i8, i8 } { i8 32, i8 19 }, { i8, i8 } { i8 32, i8 16 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23.2765, i32 0, i32 0), i8 3, i8 0, i8 0, i8 36, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 44, i8 0 }, { i8, i8 } { i8 76, i8 8 }, { i8, i8 } { i8 -116, i8 0 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.2766, i32 0, i32 0), i8 3, i8 0, i8 0, i8 96, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 3 }, { i8, i8 } { i8 32, i8 9 }, { i8, i8 } { i8 32, i8 0 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25.2767, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 37, i8 56 }, { i8, i8 } { i8 69, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26.2768, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 69, i8 56 }, { i8, i8 } { i8 37, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27.2769, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 -116, i8 56 }, { i8, i8 } { i8 44, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28.2770, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 -116, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29.2771, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 -116, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 44, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30.2772, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 -116, i8 56 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31.2773, i32 0, i32 0), i8 1, i8 0, i8 0, i8 1, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32.2774, i32 0, i32 0), i8 1, i8 0, i8 0, i8 0, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33.2775, i32 0, i32 0), i8 3, i8 0, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.34.2776, i32 0, i32 0), i8 3, i8 0, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35.2777, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, { i8, i8 } { i8 35, i8 56 }] }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.36.2778, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.37.2779, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38.2780, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39.2781, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40.2782, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41.2783, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 52, i8 120 }, { i8, i8 } { i8 116, i8 120 }, { i8, i8 } { i8 -76, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42.2784, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 52, i8 120 }, { i8, i8 } { i8 116, i8 120 }, { i8, i8 } { i8 -76, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.43.2785, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 4, i8 35 }, { i8, i8 } { i8 36, i8 45 }, { i8, i8 } { i8 36, i8 32 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44.2786, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 68, i8 35 }, { i8, i8 } { i8 36, i8 45 }, { i8, i8 } { i8 36, i8 32 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.45.2787, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 4, i8 34 }, { i8, i8 } { i8 36, i8 37 }, { i8, i8 } { i8 36, i8 32 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.46.2788, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 68, i8 34 }, { i8, i8 } { i8 36, i8 37 }, { i8, i8 } { i8 36, i8 32 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.47.2789, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 32 }, { i8, i8 } { i8 36, i8 45 }, { i8, i8 } { i8 4, i8 35 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.48.2790, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 32 }, { i8, i8 } { i8 36, i8 45 }, { i8, i8 } { i8 68, i8 35 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49.2791, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 32 }, { i8, i8 } { i8 36, i8 37 }, { i8, i8 } { i8 4, i8 34 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50.2792, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 32 }, { i8, i8 } { i8 36, i8 37 }, { i8, i8 } { i8 68, i8 34 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.51.2793, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.52.2794, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.53.2795, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54.2796, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55.2797, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.56.2798, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57.2799, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.58.2800, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.59.2801, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60.2802, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.61.2803, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62.2804, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 68, i8 24 }, { i8, i8 } { i8 36, i8 28 }, { i8, i8 } { i8 36, i8 24 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63.2805, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 4, i8 24 }, { i8, i8 } { i8 36, i8 28 }, { i8, i8 } { i8 36, i8 24 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.64.2806, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 24 }, { i8, i8 } { i8 36, i8 28 }, { i8, i8 } { i8 68, i8 24 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65.2807, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 24 }, { i8, i8 } { i8 36, i8 28 }, { i8, i8 } { i8 4, i8 24 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66.2808, i32 0, i32 0), i8 2, i8 0, i8 0, i8 -128, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 56 }, { i8, i8 } { i8 68, i8 56 }, %struct.AVComponentDescriptor zeroinitializer, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67.2809, i32 0, i32 0), i8 3, i8 0, i8 0, i8 33, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 -76, i8 120 }, { i8, i8 } { i8 116, i8 120 }, { i8, i8 } { i8 52, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68.2810, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 -76, i8 120 }, { i8, i8 } { i8 116, i8 120 }, { i8, i8 } { i8 52, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.69.2811, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.70.2812, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71.2813, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.72.2814, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.73.2815, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.74.2816, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.75.2817, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.76.2818, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.77.2819, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78.2820, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.79.2821, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.80.2822, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.81.2823, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82.2824, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 34, i8 56 }, { i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83.2825, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.84.2826, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85.2827, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86.2828, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.87.2829, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88.2830, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, %struct.AVComponentDescriptor zeroinitializer }> }, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.89.2831, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.90.2832, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91.2833, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.92.2834, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.93.2835, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.94.2836, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 64 }, { i8, i8 } { i8 37, i8 64 }, { i8, i8 } { i8 38, i8 64 }, { i8, i8 } { i8 39, i8 64 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.95.2837, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.96.2838, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.97.2839, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.98.2840, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.99.2841, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100.2842, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 72 }, { i8, i8 } { i8 37, i8 72 }, { i8, i8 } { i8 38, i8 72 }, { i8, i8 } { i8 39, i8 72 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101.2843, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.102.2844, i32 0, i32 0), i8 4, i8 1, i8 1, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.103.2845, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.104.2846, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.105.2847, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -111, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.106.2848, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 36, i8 120 }, { i8, i8 } { i8 37, i8 120 }, { i8, i8 } { i8 38, i8 120 }, { i8, i8 } { i8 39, i8 120 }] }, %struct.AVPixFmtDescriptor { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.107.2849, i32 0, i32 0), i8 0, i8 1, i8 1, i8 8, [4 x %struct.AVComponentDescriptor] zeroinitializer }, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, %struct.AVPixFmtDescriptor zeroinitializer, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108.2850, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -95, [4 x { i8, i8 }] [{ i8, i8 } { i8 60, i8 120 }, { i8, i8 } { i8 124, i8 120 }, { i8, i8 } { i8 -68, i8 120 }, { i8, i8 } { i8 -4, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109.2851, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 60, i8 120 }, { i8, i8 } { i8 124, i8 120 }, { i8, i8 } { i8 -68, i8 120 }, { i8, i8 } { i8 -4, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110.2852, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -95, [4 x { i8, i8 }] [{ i8, i8 } { i8 -68, i8 120 }, { i8, i8 } { i8 124, i8 120 }, { i8, i8 } { i8 60, i8 120 }, { i8, i8 } { i8 -4, i8 120 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.111.2853, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -96, [4 x { i8, i8 }] [{ i8, i8 } { i8 -68, i8 120 }, { i8, i8 } { i8 124, i8 120 }, { i8, i8 } { i8 60, i8 120 }, { i8, i8 } { i8 -4, i8 120 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.112.2854, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 -116, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113.2855, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, [4 x { i8, i8 }] [{ i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 -116, i8 56 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114.2856, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 -116, i8 56 }, { i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 76, i8 56 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115.2857, i32 0, i32 0), i8 3, i8 0, i8 0, i8 32, [4 x { i8, i8 }] [{ i8, i8 } { i8 108, i8 56 }, { i8, i8 } { i8 76, i8 56 }, { i8, i8 } { i8 44, i8 56 }, { i8, i8 } { i8 -116, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.116.2858, i32 0, i32 0), i8 4, i8 0, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, { i8, i8 } { i8 35, i8 56 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.117.2859, i32 0, i32 0), i8 4, i8 1, i8 0, i8 -112, [4 x { i8, i8 }] [{ i8, i8 } { i8 32, i8 56 }, { i8, i8 } { i8 33, i8 56 }, { i8, i8 } { i8 34, i8 56 }, { i8, i8 } { i8 35, i8 56 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.118.2860, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.119.2861, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120.2862, i32 0, i32 0), i8 3, i8 1, i8 1, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121.2863, i32 0, i32 0), i8 3, i8 1, i8 1, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.122.2864, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.123.2865, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.124.2866, i32 0, i32 0), i8 3, i8 1, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.125.2867, i32 0, i32 0), i8 3, i8 1, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.126.2868, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.127.2869, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, { i8, i8 } { i8 38, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.128.2870, i32 0, i32 0), i8 3, i8 0, i8 0, i8 17, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.129.2871, i32 0, i32 0), i8 3, i8 0, i8 0, i8 16, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, { i8, i8 } { i8 38, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.130.2872, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 88 }, { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.131.2873, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 88 }, { i8, i8 } { i8 36, i8 88 }, { i8, i8 } { i8 37, i8 88 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.132.2874, i32 0, i32 0), i8 3, i8 0, i8 0, i8 49, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 104 }, { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.133.2875, i32 0, i32 0), i8 3, i8 0, i8 0, i8 48, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> <{ { i8, i8 } { i8 38, i8 104 }, { i8, i8 } { i8 36, i8 104 }, { i8, i8 } { i8 37, i8 104 }, %struct.AVComponentDescriptor zeroinitializer }> } }>, align 16
@.str.2742 = private unnamed_addr constant [8 x i8] c"yuv420p\00", align 1
@.str.1.2743 = private unnamed_addr constant [8 x i8] c"yuyv422\00", align 1
@.str.2.2744 = private unnamed_addr constant [6 x i8] c"rgb24\00", align 1
@.str.3.2745 = private unnamed_addr constant [6 x i8] c"bgr24\00", align 1
@.str.4.2746 = private unnamed_addr constant [8 x i8] c"yuv422p\00", align 1
@.str.5.2747 = private unnamed_addr constant [8 x i8] c"yuv444p\00", align 1
@.str.6.2748 = private unnamed_addr constant [8 x i8] c"yuv410p\00", align 1
@.str.7.2749 = private unnamed_addr constant [8 x i8] c"yuv411p\00", align 1
@.str.8.2750 = private unnamed_addr constant [5 x i8] c"gray\00", align 1
@.str.9.2751 = private unnamed_addr constant [6 x i8] c"monow\00", align 1
@.str.10.2752 = private unnamed_addr constant [6 x i8] c"monob\00", align 1
@.str.11.2753 = private unnamed_addr constant [5 x i8] c"pal8\00", align 1
@.str.12.2754 = private unnamed_addr constant [9 x i8] c"yuvj420p\00", align 1
@.str.13.2755 = private unnamed_addr constant [9 x i8] c"yuvj422p\00", align 1
@.str.14.2756 = private unnamed_addr constant [9 x i8] c"yuvj444p\00", align 1
@.str.15.2757 = private unnamed_addr constant [7 x i8] c"xvmcmc\00", align 1
@.str.16.2758 = private unnamed_addr constant [9 x i8] c"xvmcidct\00", align 1
@.str.17.2759 = private unnamed_addr constant [8 x i8] c"uyvy422\00", align 1
@.str.18.2760 = private unnamed_addr constant [10 x i8] c"uyyvyy411\00", align 1
@.str.19.2761 = private unnamed_addr constant [5 x i8] c"bgr8\00", align 1
@.str.20.2762 = private unnamed_addr constant [5 x i8] c"bgr4\00", align 1
@.str.21.2763 = private unnamed_addr constant [10 x i8] c"bgr4_byte\00", align 1
@.str.22.2764 = private unnamed_addr constant [5 x i8] c"rgb8\00", align 1
@.str.23.2765 = private unnamed_addr constant [5 x i8] c"rgb4\00", align 1
@.str.24.2766 = private unnamed_addr constant [10 x i8] c"rgb4_byte\00", align 1
@.str.25.2767 = private unnamed_addr constant [5 x i8] c"nv12\00", align 1
@.str.26.2768 = private unnamed_addr constant [5 x i8] c"nv21\00", align 1
@.str.27.2769 = private unnamed_addr constant [5 x i8] c"argb\00", align 1
@.str.28.2770 = private unnamed_addr constant [5 x i8] c"rgba\00", align 1
@.str.29.2771 = private unnamed_addr constant [5 x i8] c"abgr\00", align 1
@.str.30.2772 = private unnamed_addr constant [5 x i8] c"bgra\00", align 1
@.str.31.2773 = private unnamed_addr constant [9 x i8] c"gray16be\00", align 1
@.str.32.2774 = private unnamed_addr constant [9 x i8] c"gray16le\00", align 1
@.str.33.2775 = private unnamed_addr constant [8 x i8] c"yuv440p\00", align 1
@.str.34.2776 = private unnamed_addr constant [9 x i8] c"yuvj440p\00", align 1
@.str.35.2777 = private unnamed_addr constant [9 x i8] c"yuva420p\00", align 1
@.str.36.2778 = private unnamed_addr constant [11 x i8] c"vdpau_h264\00", align 1
@.str.37.2779 = private unnamed_addr constant [12 x i8] c"vdpau_mpeg1\00", align 1
@.str.38.2780 = private unnamed_addr constant [12 x i8] c"vdpau_mpeg2\00", align 1
@.str.39.2781 = private unnamed_addr constant [11 x i8] c"vdpau_wmv3\00", align 1
@.str.40.2782 = private unnamed_addr constant [10 x i8] c"vdpau_vc1\00", align 1
@.str.41.2783 = private unnamed_addr constant [8 x i8] c"rgb48be\00", align 1
@.str.42.2784 = private unnamed_addr constant [8 x i8] c"rgb48le\00", align 1
@.str.43.2785 = private unnamed_addr constant [9 x i8] c"rgb565be\00", align 1
@.str.44.2786 = private unnamed_addr constant [9 x i8] c"rgb565le\00", align 1
@.str.45.2787 = private unnamed_addr constant [9 x i8] c"rgb555be\00", align 1
@.str.46.2788 = private unnamed_addr constant [9 x i8] c"rgb555le\00", align 1
@.str.47.2789 = private unnamed_addr constant [9 x i8] c"bgr565be\00", align 1
@.str.48.2790 = private unnamed_addr constant [9 x i8] c"bgr565le\00", align 1
@.str.49.2791 = private unnamed_addr constant [9 x i8] c"bgr555be\00", align 1
@.str.50.2792 = private unnamed_addr constant [9 x i8] c"bgr555le\00", align 1
@.str.51.2793 = private unnamed_addr constant [11 x i8] c"vaapi_moco\00", align 1
@.str.52.2794 = private unnamed_addr constant [11 x i8] c"vaapi_idct\00", align 1
@.str.53.2795 = private unnamed_addr constant [10 x i8] c"vaapi_vld\00", align 1
@.str.54.2796 = private unnamed_addr constant [12 x i8] c"yuv420p16le\00", align 1
@.str.55.2797 = private unnamed_addr constant [12 x i8] c"yuv420p16be\00", align 1
@.str.56.2798 = private unnamed_addr constant [12 x i8] c"yuv422p16le\00", align 1
@.str.57.2799 = private unnamed_addr constant [12 x i8] c"yuv422p16be\00", align 1
@.str.58.2800 = private unnamed_addr constant [12 x i8] c"yuv444p16le\00", align 1
@.str.59.2801 = private unnamed_addr constant [12 x i8] c"yuv444p16be\00", align 1
@.str.60.2802 = private unnamed_addr constant [12 x i8] c"vdpau_mpeg4\00", align 1
@.str.61.2803 = private unnamed_addr constant [10 x i8] c"dxva2_vld\00", align 1
@.str.62.2804 = private unnamed_addr constant [9 x i8] c"rgb444le\00", align 1
@.str.63.2805 = private unnamed_addr constant [9 x i8] c"rgb444be\00", align 1
@.str.64.2806 = private unnamed_addr constant [9 x i8] c"bgr444le\00", align 1
@.str.65.2807 = private unnamed_addr constant [9 x i8] c"bgr444be\00", align 1
@.str.66.2808 = private unnamed_addr constant [7 x i8] c"gray8a\00", align 1
@.str.67.2809 = private unnamed_addr constant [8 x i8] c"bgr48be\00", align 1
@.str.68.2810 = private unnamed_addr constant [8 x i8] c"bgr48le\00", align 1
@.str.69.2811 = private unnamed_addr constant [11 x i8] c"yuv420p9be\00", align 1
@.str.70.2812 = private unnamed_addr constant [11 x i8] c"yuv420p9le\00", align 1
@.str.71.2813 = private unnamed_addr constant [12 x i8] c"yuv420p10be\00", align 1
@.str.72.2814 = private unnamed_addr constant [12 x i8] c"yuv420p10le\00", align 1
@.str.73.2815 = private unnamed_addr constant [12 x i8] c"yuv422p10be\00", align 1
@.str.74.2816 = private unnamed_addr constant [12 x i8] c"yuv422p10le\00", align 1
@.str.75.2817 = private unnamed_addr constant [11 x i8] c"yuv444p9be\00", align 1
@.str.76.2818 = private unnamed_addr constant [11 x i8] c"yuv444p9le\00", align 1
@.str.77.2819 = private unnamed_addr constant [12 x i8] c"yuv444p10be\00", align 1
@.str.78.2820 = private unnamed_addr constant [12 x i8] c"yuv444p10le\00", align 1
@.str.79.2821 = private unnamed_addr constant [11 x i8] c"yuv422p9be\00", align 1
@.str.80.2822 = private unnamed_addr constant [11 x i8] c"yuv422p9le\00", align 1
@.str.81.2823 = private unnamed_addr constant [8 x i8] c"vda_vld\00", align 1
@.str.82.2824 = private unnamed_addr constant [5 x i8] c"gbrp\00", align 1
@.str.83.2825 = private unnamed_addr constant [8 x i8] c"gbrp9be\00", align 1
@.str.84.2826 = private unnamed_addr constant [8 x i8] c"gbrp9le\00", align 1
@.str.85.2827 = private unnamed_addr constant [9 x i8] c"gbrp10be\00", align 1
@.str.86.2828 = private unnamed_addr constant [9 x i8] c"gbrp10le\00", align 1
@.str.87.2829 = private unnamed_addr constant [9 x i8] c"gbrp16be\00", align 1
@.str.88.2830 = private unnamed_addr constant [9 x i8] c"gbrp16le\00", align 1
@.str.89.2831 = private unnamed_addr constant [12 x i8] c"yuva420p9be\00", align 1
@.str.90.2832 = private unnamed_addr constant [12 x i8] c"yuva420p9le\00", align 1
@.str.91.2833 = private unnamed_addr constant [12 x i8] c"yuva422p9be\00", align 1
@.str.92.2834 = private unnamed_addr constant [12 x i8] c"yuva422p9le\00", align 1
@.str.93.2835 = private unnamed_addr constant [12 x i8] c"yuva444p9be\00", align 1
@.str.94.2836 = private unnamed_addr constant [12 x i8] c"yuva444p9le\00", align 1
@.str.95.2837 = private unnamed_addr constant [13 x i8] c"yuva420p10be\00", align 1
@.str.96.2838 = private unnamed_addr constant [13 x i8] c"yuva420p10le\00", align 1
@.str.97.2839 = private unnamed_addr constant [13 x i8] c"yuva422p10be\00", align 1
@.str.98.2840 = private unnamed_addr constant [13 x i8] c"yuva422p10le\00", align 1
@.str.99.2841 = private unnamed_addr constant [13 x i8] c"yuva444p10be\00", align 1
@.str.100.2842 = private unnamed_addr constant [13 x i8] c"yuva444p10le\00", align 1
@.str.101.2843 = private unnamed_addr constant [13 x i8] c"yuva420p16be\00", align 1
@.str.102.2844 = private unnamed_addr constant [13 x i8] c"yuva420p16le\00", align 1
@.str.103.2845 = private unnamed_addr constant [13 x i8] c"yuva422p16be\00", align 1
@.str.104.2846 = private unnamed_addr constant [13 x i8] c"yuva422p16le\00", align 1
@.str.105.2847 = private unnamed_addr constant [13 x i8] c"yuva444p16be\00", align 1
@.str.106.2848 = private unnamed_addr constant [13 x i8] c"yuva444p16le\00", align 1
@.str.107.2849 = private unnamed_addr constant [6 x i8] c"vdpau\00", align 1
@.str.108.2850 = private unnamed_addr constant [9 x i8] c"rgba64be\00", align 1
@.str.109.2851 = private unnamed_addr constant [9 x i8] c"rgba64le\00", align 1
@.str.110.2852 = private unnamed_addr constant [9 x i8] c"bgra64be\00", align 1
@.str.111.2853 = private unnamed_addr constant [9 x i8] c"bgra64le\00", align 1
@.str.112.2854 = private unnamed_addr constant [5 x i8] c"0rgb\00", align 1
@.str.113.2855 = private unnamed_addr constant [5 x i8] c"rgb0\00", align 1
@.str.114.2856 = private unnamed_addr constant [5 x i8] c"0bgr\00", align 1
@.str.115.2857 = private unnamed_addr constant [5 x i8] c"bgr0\00", align 1
@.str.116.2858 = private unnamed_addr constant [9 x i8] c"yuva444p\00", align 1
@.str.117.2859 = private unnamed_addr constant [9 x i8] c"yuva422p\00", align 1
@.str.118.2860 = private unnamed_addr constant [12 x i8] c"yuv420p12be\00", align 1
@.str.119.2861 = private unnamed_addr constant [12 x i8] c"yuv420p12le\00", align 1
@.str.120.2862 = private unnamed_addr constant [12 x i8] c"yuv420p14be\00", align 1
@.str.121.2863 = private unnamed_addr constant [12 x i8] c"yuv420p14le\00", align 1
@.str.122.2864 = private unnamed_addr constant [12 x i8] c"yuv422p12be\00", align 1
@.str.123.2865 = private unnamed_addr constant [12 x i8] c"yuv422p12le\00", align 1
@.str.124.2866 = private unnamed_addr constant [12 x i8] c"yuv422p14be\00", align 1
@.str.125.2867 = private unnamed_addr constant [12 x i8] c"yuv422p14le\00", align 1
@.str.126.2868 = private unnamed_addr constant [12 x i8] c"yuv444p12be\00", align 1
@.str.127.2869 = private unnamed_addr constant [12 x i8] c"yuv444p12le\00", align 1
@.str.128.2870 = private unnamed_addr constant [12 x i8] c"yuv444p14be\00", align 1
@.str.129.2871 = private unnamed_addr constant [12 x i8] c"yuv444p14le\00", align 1
@.str.130.2872 = private unnamed_addr constant [9 x i8] c"gbrp12be\00", align 1
@.str.131.2873 = private unnamed_addr constant [9 x i8] c"gbrp12le\00", align 1
@.str.132.2874 = private unnamed_addr constant [9 x i8] c"gbrp14be\00", align 1
@.str.133.2875 = private unnamed_addr constant [9 x i8] c"gbrp14le\00", align 1
@.str.134.2880 = private unnamed_addr constant [6 x i8] c"rgb32\00", align 1
@.str.135.2881 = private unnamed_addr constant [6 x i8] c"bgr32\00", align 1
@.str.136.2882 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.137.2883 = private unnamed_addr constant [3 x i8] c"le\00", align 1
@sample_fmt_info = internal constant [10 x %struct.SampleFmtInfo] [%struct.SampleFmtInfo { [8 x i8] c"u8\00\00\00\00\00\00", i32 8, i32 0, i32 5 }, %struct.SampleFmtInfo { [8 x i8] c"s16\00\00\00\00\00", i32 16, i32 0, i32 6 }, %struct.SampleFmtInfo { [8 x i8] c"s32\00\00\00\00\00", i32 32, i32 0, i32 7 }, %struct.SampleFmtInfo { [8 x i8] c"flt\00\00\00\00\00", i32 32, i32 0, i32 8 }, %struct.SampleFmtInfo { [8 x i8] c"dbl\00\00\00\00\00", i32 64, i32 0, i32 9 }, %struct.SampleFmtInfo { [8 x i8] c"u8p\00\00\00\00\00", i32 8, i32 1, i32 0 }, %struct.SampleFmtInfo { [8 x i8] c"s16p\00\00\00\00", i32 16, i32 1, i32 1 }, %struct.SampleFmtInfo { [8 x i8] c"s32p\00\00\00\00", i32 32, i32 1, i32 2 }, %struct.SampleFmtInfo { [8 x i8] c"fltp\00\00\00\00", i32 32, i32 1, i32 3 }, %struct.SampleFmtInfo { [8 x i8] c"dblp\00\00\00\00", i32 64, i32 1, i32 4 }], align 16

; Function Attrs: noinline nounwind optnone uwtable
define internal fastcc %struct.buffer* @load_file(i8*) unnamed_addr #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.stat, align 8
  %5 = alloca %struct.buffer*, align 8
  %6 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %7 = bitcast %struct.stat* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 144, i1 false)
  %8 = load i8*, i8** %2, align 8
  %9 = call i32 @stat(i8* %8, %struct.stat* %4) #18
  store i32 %9, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  call void @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  br label %13

13:                                               ; preds = %12, %1
  %14 = call noalias i8* @malloc(i64 24) #18
  %15 = bitcast i8* %14 to %struct.buffer*
  store %struct.buffer* %15, %struct.buffer** %5, align 8
  %16 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 8
  %17 = load i64, i64* %16, align 8
  %18 = call noalias i8* @malloc(i64 %17) #18
  %19 = load %struct.buffer*, %struct.buffer** %5, align 8
  %20 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 0
  store i8* %18, i8** %20, align 8
  %21 = load %struct.buffer*, %struct.buffer** %5, align 8
  %22 = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 1
  store i64 0, i64* %22, align 8
  %23 = load %struct.buffer*, %struct.buffer** %5, align 8
  %24 = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 2
  store i64 0, i64* %24, align 8
  %25 = load i8*, i8** %2, align 8
  %26 = call i32 (i8*, i32, ...) @open(i8* %25, i32 0)
  store i32 %26, i32* %6, align 4
  %27 = load i32, i32* %6, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %13
  call void @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %30

30:                                               ; preds = %29, %13
  br label %31

31:                                               ; preds = %71, %30
  %32 = load %struct.buffer*, %struct.buffer** %5, align 8
  %33 = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 8
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %34, %36
  br i1 %37, label %38, label %78

38:                                               ; preds = %31
  %39 = load i32, i32* %6, align 4
  %40 = load %struct.buffer*, %struct.buffer** %5, align 8
  %41 = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = load %struct.buffer*, %struct.buffer** %5, align 8
  %44 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds i8, i8* %42, i64 %45
  %47 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 8
  %48 = load i64, i64* %47, align 8
  %49 = load %struct.buffer*, %struct.buffer** %5, align 8
  %50 = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = sub i64 %48, %51
  %53 = call i64 @read(i32 %39, i8* %46, i64 %52)
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %3, align 4
  %55 = load i32, i32* %3, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %38
  call void @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %58

58:                                               ; preds = %57, %38
  %59 = load i32, i32* %3, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %71

61:                                               ; preds = %58
  br label %62

62:                                               ; preds = %61
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %64 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 8
  %65 = load i64, i64* %64, align 8
  %66 = load %struct.buffer*, %struct.buffer** %5, align 8
  %67 = getelementptr inbounds %struct.buffer, %struct.buffer* %66, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = sub i64 %65, %68
  %70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0), i64 %69)
  call void @exit(i32 1) #27
  unreachable

71:                                               ; preds = %58
  %72 = load i32, i32* %3, align 4
  %73 = sext i32 %72 to i64
  %74 = load %struct.buffer*, %struct.buffer** %5, align 8
  %75 = getelementptr inbounds %struct.buffer, %struct.buffer* %74, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, %73
  store i64 %77, i64* %75, align 8
  br label %31

78:                                               ; preds = %31
  %79 = load %struct.buffer*, %struct.buffer** %5, align 8
  ret %struct.buffer* %79
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare dso_local i32 @stat(i8* nocapture readonly, %struct.stat* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare dso_local void @perror(i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nofree
declare dso_local i32 @open(i8* nocapture readonly, i32, ...) local_unnamed_addr #3

; Function Attrs: nofree
declare dso_local i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare dso_local i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) local_unnamed_addr #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @read_buffer(i8*, i8*, i32) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.buffer*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  %11 = load i8*, i8** %5, align 8
  %12 = bitcast i8* %11 to %struct.buffer*
  store %struct.buffer* %12, %struct.buffer** %8, align 8
  %13 = load i32, i32* %7, align 4
  %14 = icmp sle i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %3
  store i32 0, i32* %4, align 4
  br label %56

16:                                               ; preds = %3
  %17 = load %struct.buffer*, %struct.buffer** %8, align 8
  %18 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = load %struct.buffer*, %struct.buffer** %8, align 8
  %21 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %19, %22
  store i64 %23, i64* %9, align 8
  %24 = load i32, i32* %7, align 4
  %25 = sext i32 %24 to i64
  %26 = load i64, i64* %9, align 8
  %27 = icmp ult i64 %25, %26
  br i1 %27, label %28, label %31

28:                                               ; preds = %16
  %29 = load i32, i32* %7, align 4
  %30 = sext i32 %29 to i64
  br label %33

31:                                               ; preds = %16
  %32 = load i64, i64* %9, align 8
  br label %33

33:                                               ; preds = %31, %28
  %34 = phi i64 [ %30, %28 ], [ %32, %31 ]
  store i64 %34, i64* %10, align 8
  %35 = load i8*, i8** %6, align 8
  %36 = load %struct.buffer*, %struct.buffer** %8, align 8
  %37 = getelementptr inbounds %struct.buffer, %struct.buffer* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = load %struct.buffer*, %struct.buffer** %8, align 8
  %40 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds i8, i8* %38, i64 %41
  %43 = load i64, i64* %10, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %42, i64 %43, i1 false)
  %44 = load i64, i64* %10, align 8
  %45 = load %struct.buffer*, %struct.buffer** %8, align 8
  %46 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i64 %44, i64 %47)
  %49 = load i64, i64* %10, align 8
  %50 = load %struct.buffer*, %struct.buffer** %8, align 8
  %51 = getelementptr inbounds %struct.buffer, %struct.buffer* %50, i32 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %52, %49
  store i64 %53, i64* %51, align 8
  %54 = load i64, i64* %10, align 8
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %4, align 4
  br label %56

56:                                               ; preds = %33, %15
  %57 = load i32, i32* %4, align 4
  ret i32 %57
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @seek_buffer(i8*, i64, i32) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.buffer*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i32 %2, i32* %7, align 4
  %11 = load i8*, i8** %5, align 8
  %12 = bitcast i8* %11 to %struct.buffer*
  store %struct.buffer* %12, %struct.buffer** %8, align 8
  %13 = load i64, i64* %6, align 8
  %14 = load i32, i32* %7, align 4
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i64 %13, i32 %14)
  %16 = load i32, i32* %7, align 4
  %17 = icmp eq i32 %16, 65536
  br i1 %17, label %18, label %22

18:                                               ; preds = %3
  %19 = load %struct.buffer*, %struct.buffer** %8, align 8
  %20 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %4, align 8
  br label %55

22:                                               ; preds = %3
  %23 = load i32, i32* %7, align 4
  switch i32 %23, label %33 [
    i32 0, label %24
    i32 1, label %25
    i32 2, label %29
  ]

24:                                               ; preds = %22
  store i64 0, i64* %9, align 8
  br label %38

25:                                               ; preds = %22
  %26 = load %struct.buffer*, %struct.buffer** %8, align 8
  %27 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 2
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %9, align 8
  br label %38

29:                                               ; preds = %22
  %30 = load %struct.buffer*, %struct.buffer** %8, align 8
  %31 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %9, align 8
  br label %38

33:                                               ; preds = %22
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %35 = load i64, i64* %6, align 8
  %36 = load i32, i32* %7, align 4
  %37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i64 %35, i32 %36)
  store i64 -1, i64* %4, align 8
  br label %55

38:                                               ; preds = %29, %25, %24
  %39 = load i64, i64* %9, align 8
  %40 = load i64, i64* %6, align 8
  %41 = add i64 %39, %40
  store i64 %41, i64* %10, align 8
  %42 = load i64, i64* %10, align 8
  %43 = load %struct.buffer*, %struct.buffer** %8, align 8
  %44 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = icmp ugt i64 %42, %45
  br i1 %46, label %47, label %48

47:                                               ; preds = %38
  store i64 -1, i64* %4, align 8
  br label %55

48:                                               ; preds = %38
  %49 = load i64, i64* %10, align 8
  %50 = load %struct.buffer*, %struct.buffer** %8, align 8
  %51 = getelementptr inbounds %struct.buffer, %struct.buffer* %50, i32 0, i32 2
  store i64 %49, i64* %51, align 8
  %52 = load %struct.buffer*, %struct.buffer** %8, align 8
  %53 = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 2
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %4, align 8
  br label %55

55:                                               ; preds = %48, %47, %33, %18
  %56 = load i64, i64* %4, align 8
  ret i64 %56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.buffer*, align 8
  %8 = alloca %struct.AVIOContext*, align 8
  %9 = alloca %struct.AVFormatContext*, align 8
  %10 = alloca %struct.AVInputFormat*, align 8
  %11 = alloca %struct.AVCodec*, align 8
  %12 = alloca %struct.AVCodecContext*, align 8
  %13 = alloca %struct.AVPacket, align 8
  %14 = alloca %struct.AVFrame*, align 8
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* %4, align 4
  %17 = icmp sle i32 %16, 1
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i8* %22)
  store i32 1, i32* %3, align 4
  br label %99

24:                                               ; preds = %2
  call fastcc void @av_register_all()
  call fastcc void @avcodec_register_all()
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call fastcc %struct.buffer* @load_file(i8* %27)
  store %struct.buffer* %28, %struct.buffer** %7, align 8
  %29 = load %struct.buffer*, %struct.buffer** %7, align 8
  %30 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i64 %31, i8* %34)
  %36 = call fastcc noalias i8* @av_malloc(i64 4096)
  %37 = load %struct.buffer*, %struct.buffer** %7, align 8
  %38 = bitcast %struct.buffer* %37 to i8*
  %39 = call %struct.AVIOContext* bitcast (%struct.AVIOContext.335* (i8*, i32, i32, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*)* @avio_alloc_context to %struct.AVIOContext* (i8*, i32, i32, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*)*)(i8* %36, i32 4096, i32 0, i8* %38, i32 (i8*, i8*, i32)* @read_buffer, i32 (i8*, i8*, i32)* null, i64 (i8*, i64, i32)* @seek_buffer)
  store %struct.AVIOContext* %39, %struct.AVIOContext** %8, align 8
  %40 = load %struct.AVIOContext*, %struct.AVIOContext** %8, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0), %struct.AVIOContext* %40)
  %42 = call fastcc %struct.AVFormatContext* @avformat_alloc_context()
  store %struct.AVFormatContext* %42, %struct.AVFormatContext** %9, align 8
  %43 = load %struct.AVFormatContext*, %struct.AVFormatContext** %9, align 8
  %44 = icmp eq %struct.AVFormatContext* %43, null
  br i1 %44, label %45, label %49

45:                                               ; preds = %24
  br label %46

46:                                               ; preds = %45
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0))
  call void @exit(i32 1) #27
  unreachable

49:                                               ; preds = %24
  %50 = load %struct.AVIOContext*, %struct.AVIOContext** %8, align 8
  %51 = load %struct.AVFormatContext*, %struct.AVFormatContext** %9, align 8
  %52 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %51, i32 0, i32 4
  store %struct.AVIOContext* %50, %struct.AVIOContext** %52, align 8
  store %struct.AVInputFormat* bitcast (%struct.AVInputFormat.397* @ff_gif_demuxer to %struct.AVInputFormat*), %struct.AVInputFormat** %10, align 8
  %53 = load %struct.AVInputFormat*, %struct.AVInputFormat** %10, align 8
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), %struct.AVInputFormat* %53)
  %55 = load %struct.AVInputFormat*, %struct.AVInputFormat** %10, align 8
  %56 = call i32 bitcast (i32 (%struct.AVFormatContext.328**, i8*, %struct.AVInputFormat.329*, %struct.AVDictionary**)* @avformat_open_input to i32 (%struct.AVFormatContext**, i8*, %struct.AVInputFormat*, %struct.AVDictionary**)*)(%struct.AVFormatContext** %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0), %struct.AVInputFormat* %55, %struct.AVDictionary** null)
  store i32 %56, i32* %6, align 4
  %57 = load i32, i32* %6, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %49
  br label %60

60:                                               ; preds = %59
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %62 = load i32, i32* %6, align 4
  %63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0), i32 %62)
  call void @exit(i32 1) #27
  unreachable

64:                                               ; preds = %49
  store %struct.AVCodec* bitcast (%struct.AVCodec.134* @ff_gif_decoder to %struct.AVCodec*), %struct.AVCodec** %11, align 8
  %65 = load %struct.AVCodec*, %struct.AVCodec** %11, align 8
  %66 = call fastcc %struct.AVCodecContext* @avcodec_alloc_context3(%struct.AVCodec* %65)
  store %struct.AVCodecContext* %66, %struct.AVCodecContext** %12, align 8
  %67 = load %struct.AVCodecContext*, %struct.AVCodecContext** %12, align 8
  %68 = load %struct.AVCodec*, %struct.AVCodec** %11, align 8
  %69 = call i32 bitcast (i32 (%struct.AVCodecContext.129*, %struct.AVCodec.134*, %struct.AVDictionary**)* @avcodec_open2 to i32 (%struct.AVCodecContext*, %struct.AVCodec*, %struct.AVDictionary**)*)(%struct.AVCodecContext* %67, %struct.AVCodec* %68, %struct.AVDictionary** null)
  store i32 %69, i32* %6, align 4
  %70 = load i32, i32* %6, align 4
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %77

72:                                               ; preds = %64
  br label %73

73:                                               ; preds = %72
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %75 = load i32, i32* %6, align 4
  %76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0), i32 %75)
  call void @exit(i32 1) #27
  unreachable

77:                                               ; preds = %64
  %78 = call %struct.AVFrame* bitcast (%struct.AVFrame.123* ()* @avcodec_alloc_frame to %struct.AVFrame* ()*)()
  store %struct.AVFrame* %78, %struct.AVFrame** %14, align 8
  store i32 0, i32* %15, align 4
  call void bitcast (void (%struct.AVPacket.21*)* @av_init_packet to void (%struct.AVPacket*)*)(%struct.AVPacket* %13)
  br label %79

79:                                               ; preds = %97, %77
  %80 = load %struct.AVFormatContext*, %struct.AVFormatContext** %9, align 8
  %81 = call i32 bitcast (i32 (%struct.AVFormatContext.328*, %struct.AVPacket*)* @av_read_frame to i32 (%struct.AVFormatContext*, %struct.AVPacket*)*)(%struct.AVFormatContext* %80, %struct.AVPacket* %13)
  %82 = icmp sge i32 %81, 0
  br i1 %82, label %83, label %98

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %13, i32 0, i32 3
  %85 = load i32, i32* %84, align 8
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i32 %85)
  %87 = load %struct.AVCodecContext*, %struct.AVCodecContext** %12, align 8
  %88 = load %struct.AVFrame*, %struct.AVFrame** %14, align 8
  %89 = call i32 bitcast (i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*, i32*, %struct.AVPacket*)* @avcodec_decode_video2 to i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32*, %struct.AVPacket*)*)(%struct.AVCodecContext* %87, %struct.AVFrame* %88, i32* %15, %struct.AVPacket* %13)
  store i32 %89, i32* %6, align 4
  %90 = load i32, i32* %6, align 4
  %91 = icmp slt i32 %90, 0
  br i1 %91, label %92, label %97

92:                                               ; preds = %83
  br label %93

93:                                               ; preds = %92
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %95 = load i32, i32* %6, align 4
  %96 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %94, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0), i32 %95)
  call void @exit(i32 1) #27
  unreachable

97:                                               ; preds = %83
  call void bitcast (void (%struct.AVPacket.21*)* @av_free_packet to void (%struct.AVPacket*)*)(%struct.AVPacket* %13)
  br label %79

98:                                               ; preds = %79
  store i32 0, i32* %3, align 4
  br label %99

99:                                               ; preds = %98, %18
  %100 = load i32, i32* %3, align 4
  ret i32 %100
}

; Function Attrs: nounwind uwtable
define internal fastcc void @avcodec_register_all() unnamed_addr #5 {
  %1 = load i1, i1* @avcodec_register_all.initialized, align 4
  br i1 %1, label %3, label %2

2:                                                ; preds = %0
  store i1 true, i1* @avcodec_register_all.initialized, align 4
  tail call fastcc void @avcodec_register(%struct.AVCodec.134* nonnull @ff_gif_decoder) #18
  tail call fastcc void @avcodec_register(%struct.AVCodec.134* nonnull @ff_rawvideo_encoder) #18
  br label %3

3:                                                ; preds = %2, %0
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.llrint.i64.f64(double) #6

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_packet_free_side_data(%struct.AVPacket.21* nocapture) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8, !tbaa !6
  %4 = icmp sgt i32 %3, 0
  %5 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  br i1 %4, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %1, %.preheader
  %6 = phi i64 [ %10, %.preheader ], [ 0, %1 ]
  %7 = load %struct.anon*, %struct.anon** %5, align 8, !tbaa !13
  %8 = getelementptr inbounds %struct.anon, %struct.anon* %7, i64 %6, i32 0
  %9 = load i8*, i8** %8, align 8, !tbaa !14
  tail call fastcc void @av_free(i8* %9) #18
  %10 = add nuw nsw i64 %6, 1
  %11 = load i32, i32* %2, align 8, !tbaa !6
  %12 = sext i32 %11 to i64
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %1
  %14 = bitcast %struct.anon** %5 to i8*
  tail call fastcc void @av_freep(i8* nonnull %14) #18
  store i32 0, i32* %2, align 8, !tbaa !6
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @av_destruct_packet(%struct.AVPacket.21* nocapture) #5 {
  %2 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8, !tbaa !16
  tail call fastcc void @av_free(i8* %3) #18
  store i8* null, i8** %2, align 8, !tbaa !16
  %4 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  store i32 0, i32* %4, align 8, !tbaa !17
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define internal void @av_init_packet(%struct.AVPacket.21* nocapture) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 0
  store i64 -9223372036854775808, i64* %2, align 8, !tbaa !18
  %3 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 1
  store i64 -9223372036854775808, i64* %3, align 8, !tbaa !19
  %4 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 11
  store i64 -1, i64* %4, align 8, !tbaa !20
  %5 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 12
  store i64 0, i64* %5, align 8, !tbaa !21
  %6 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 5
  store i32 0, i32* %6, align 8, !tbaa !22
  %7 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 4
  store i32 0, i32* %7, align 4, !tbaa !23
  %8 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  %9 = bitcast %struct.anon** %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_new_packet(%struct.AVPacket.21* nocapture, i32) unnamed_addr #5 {
  %3 = icmp ult i32 %1, -16
  br i1 %3, label %4, label %12

4:                                                ; preds = %2
  %5 = add nuw i32 %1, 16
  %6 = sext i32 %5 to i64
  %7 = tail call fastcc noalias i8* @av_malloc(i64 %6) #18
  %8 = icmp eq i8* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %11, i8 0, i64 16, i1 false)
  br label %12

12:                                               ; preds = %9, %4, %2
  %13 = phi i32 [ 0, %9 ], [ -12, %4 ], [ -12, %2 ]
  %14 = phi i8* [ %7, %9 ], [ null, %4 ], [ null, %2 ]
  %15 = phi i32 [ %1, %9 ], [ 0, %4 ], [ 0, %2 ]
  %16 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 0
  store i64 -9223372036854775808, i64* %16, align 8, !tbaa !18
  %17 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 1
  store i64 -9223372036854775808, i64* %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 11
  store i64 -1, i64* %18, align 8, !tbaa !20
  %19 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 12
  store i64 0, i64* %19, align 8, !tbaa !21
  %20 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 5
  store i32 0, i32* %20, align 8, !tbaa !22
  %21 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 4
  store i32 0, i32* %21, align 4, !tbaa !23
  %22 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  %23 = bitcast %struct.anon** %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 16, i1 false) #18
  %24 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  store i8* %14, i8** %24, align 8, !tbaa !16
  %25 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  store i32 %15, i32* %25, align 8, !tbaa !17
  %26 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 9
  %27 = bitcast {}** %26 to void (%struct.AVPacket.21*)**
  store void (%struct.AVPacket.21*)* @av_destruct_packet, void (%struct.AVPacket.21*)** %27, align 8, !tbaa !24
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_shrink_packet(%struct.AVPacket.21* nocapture, i32) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8, !tbaa !17
  %5 = icmp sgt i32 %4, %1
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  store i32 %1, i32* %3, align 8, !tbaa !17
  %7 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8, !tbaa !16
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds i8, i8* %8, i64 %9
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 0, i64 16, i1 false)
  br label %11

11:                                               ; preds = %6, %2
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @abort() local_unnamed_addr #8

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_dup_packet(%struct.AVPacket.21* nocapture) unnamed_addr #5 {
  %2 = alloca %struct.AVPacket.21, align 8
  %3 = bitcast %struct.AVPacket.21* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %3) #18
  %4 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 9
  %5 = bitcast {}** %4 to void (%struct.AVPacket.21*)**
  %6 = load void (%struct.AVPacket.21*)*, void (%struct.AVPacket.21*)** %5, align 8, !tbaa !24
  %7 = icmp eq void (%struct.AVPacket.21*)* %6, null
  br i1 %7, label %8, label %15

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8, !tbaa !16
  %11 = icmp eq i8* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = bitcast %struct.AVPacket.21* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* align 8 %13, i64 88, i1 false), !tbaa.struct !25
  %14 = call fastcc i32 @copy_packet_data(%struct.AVPacket.21* nonnull %0, %struct.AVPacket.21* nonnull %2)
  br label %15

15:                                               ; preds = %12, %8, %1
  %16 = phi i32 [ %14, %12 ], [ 0, %8 ], [ 0, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %3) #18
  ret i32 %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @copy_packet_data(%struct.AVPacket.21* nocapture, %struct.AVPacket.21* nocapture readonly) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  store i8* null, i8** %3, align 8, !tbaa !16
  %4 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  store %struct.anon* null, %struct.anon** %4, align 8, !tbaa !13
  %5 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8, !tbaa !17
  %7 = icmp ugt i32 %6, -17
  br i1 %7, label %.loopexit, label %8

8:                                                ; preds = %2
  %9 = add nuw i32 %6, 16
  %10 = sext i32 %9 to i64
  %11 = tail call fastcc noalias i8* @av_malloc(i64 %10) #18
  %12 = icmp eq i8* %11, null
  br i1 %12, label %.loopexit, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8, !tbaa !16
  %16 = load i32, i32* %5, align 8, !tbaa !17
  %17 = sext i32 %16 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %11, i8* align 1 %15, i64 %17, i1 false)
  %18 = getelementptr inbounds i8, i8* %11, i64 %17
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %18, i8 0, i64 16, i1 false)
  store i8* %11, i8** %3, align 8, !tbaa !16
  %19 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 9
  %20 = bitcast {}** %19 to void (%struct.AVPacket.21*)**
  store void (%struct.AVPacket.21*)* @av_destruct_packet, void (%struct.AVPacket.21*)** %20, align 8, !tbaa !24
  %21 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %22 = load i32, i32* %21, align 8, !tbaa !6
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %.loopexit7, label %24

24:                                               ; preds = %13
  %25 = sext i32 %22 to i64
  %26 = shl nsw i64 %25, 4
  %27 = tail call fastcc noalias i8* @av_malloc(i64 %26) #18
  %28 = icmp eq i8* %27, null
  br i1 %28, label %.loopexit, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %1, i64 0, i32 6
  %31 = bitcast %struct.anon** %30 to i8**
  %32 = load i8*, i8** %31, align 8, !tbaa !13
  %33 = load i32, i32* %21, align 8, !tbaa !6
  %34 = sext i32 %33 to i64
  %35 = shl nsw i64 %34, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %27, i8* align 8 %32, i64 %35, i1 false)
  %36 = bitcast %struct.anon** %4 to i8**
  store i8* %27, i8** %36, align 8, !tbaa !13
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 %35, i1 false)
  %37 = icmp sgt i32 %33, 0
  br i1 %37, label %38, label %.loopexit7

38:                                               ; preds = %29
  %39 = load %struct.anon*, %struct.anon** %30, align 8, !tbaa !13
  br label %40

40:                                               ; preds = %51, %38
  %41 = phi %struct.anon* [ %39, %38 ], [ %52, %51 ]
  %42 = phi i64 [ 0, %38 ], [ %68, %51 ]
  %43 = getelementptr inbounds %struct.anon, %struct.anon* %41, i64 %42, i32 1
  %44 = load i32, i32* %43, align 8, !tbaa !29
  %45 = icmp ugt i32 %44, -17
  br i1 %45, label %.loopexit, label %46

46:                                               ; preds = %40
  %47 = add nuw i32 %44, 16
  %48 = sext i32 %47 to i64
  %49 = tail call fastcc noalias i8* @av_malloc(i64 %48) #18
  %50 = icmp eq i8* %49, null
  br i1 %50, label %.loopexit, label %51

51:                                               ; preds = %46
  %52 = load %struct.anon*, %struct.anon** %30, align 8, !tbaa !13
  %53 = getelementptr inbounds %struct.anon, %struct.anon* %52, i64 %42, i32 0
  %54 = load i8*, i8** %53, align 8, !tbaa !14
  %55 = getelementptr inbounds %struct.anon, %struct.anon* %52, i64 %42, i32 1
  %56 = load i32, i32* %55, align 8, !tbaa !29
  %57 = sext i32 %56 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %49, i8* align 1 %54, i64 %57, i1 false)
  %58 = load i32, i32* %55, align 8, !tbaa !29
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %49, i64 %59
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %60, i8 0, i64 16, i1 false)
  %61 = load %struct.anon*, %struct.anon** %4, align 8, !tbaa !13
  %62 = getelementptr inbounds %struct.anon, %struct.anon* %61, i64 %42, i32 0
  store i8* %49, i8** %62, align 8, !tbaa !14
  %63 = load i32, i32* %55, align 8, !tbaa !29
  %64 = getelementptr inbounds %struct.anon, %struct.anon* %61, i64 %42, i32 1
  store i32 %63, i32* %64, align 8, !tbaa !29
  %65 = getelementptr inbounds %struct.anon, %struct.anon* %52, i64 %42, i32 2
  %66 = load i32, i32* %65, align 4, !tbaa !30
  %67 = getelementptr inbounds %struct.anon, %struct.anon* %61, i64 %42, i32 2
  store i32 %66, i32* %67, align 4, !tbaa !30
  %68 = add nuw nsw i64 %42, 1
  %69 = load i32, i32* %21, align 8, !tbaa !6
  %70 = sext i32 %69 to i64
  %71 = icmp slt i64 %68, %70
  br i1 %71, label %40, label %.loopexit7

.loopexit:                                        ; preds = %46, %40, %24, %8, %2
  %72 = load i8*, i8** %3, align 8, !tbaa !16
  tail call fastcc void @av_free(i8* %72) #18
  store i8* null, i8** %3, align 8, !tbaa !16
  store i32 0, i32* %5, align 8, !tbaa !17
  br label %.loopexit7

.loopexit7:                                       ; preds = %51, %.loopexit, %29, %13
  %73 = phi i32 [ -12, %.loopexit ], [ 0, %13 ], [ 0, %29 ], [ 0, %51 ]
  ret i32 %73
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal void @av_free_packet(%struct.AVPacket.21*) unnamed_addr #5 {
  %2 = icmp eq %struct.AVPacket.21* %0, null
  br i1 %2, label %25, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 9
  %5 = bitcast {}** %4 to void (%struct.AVPacket.21*)**
  %6 = load void (%struct.AVPacket.21*)*, void (%struct.AVPacket.21*)** %5, align 8, !tbaa !24
  %7 = icmp eq void (%struct.AVPacket.21*)* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void %6(%struct.AVPacket.21* nonnull %0) #18
  br label %9

9:                                                ; preds = %8, %3
  %10 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  store i8* null, i8** %10, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  store i32 0, i32* %11, align 8, !tbaa !17
  %12 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %13 = load i32, i32* %12, align 8, !tbaa !6
  %14 = icmp sgt i32 %13, 0
  %15 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  br i1 %14, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %9, %.preheader
  %16 = phi i64 [ %20, %.preheader ], [ 0, %9 ]
  %17 = load %struct.anon*, %struct.anon** %15, align 8, !tbaa !13
  %18 = getelementptr inbounds %struct.anon, %struct.anon* %17, i64 %16, i32 0
  %19 = load i8*, i8** %18, align 8, !tbaa !14
  tail call fastcc void @av_free(i8* %19) #18
  %20 = add nuw nsw i64 %16, 1
  %21 = load i32, i32* %12, align 8, !tbaa !6
  %22 = sext i32 %21 to i64
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %9
  %24 = bitcast %struct.anon** %15 to i8*
  tail call fastcc void @av_freep(i8* nonnull %24) #18
  store i32 0, i32* %12, align 8, !tbaa !6
  br label %25

25:                                               ; preds = %.loopexit, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i8* @av_packet_new_side_data(%struct.AVPacket.21* nocapture, i32, i32) unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 8, !tbaa !6
  %6 = add i32 %5, 1
  %7 = icmp ugt i32 %6, 134217727
  %8 = icmp ugt i32 %2, 2147483631
  %9 = or i1 %8, %7
  br i1 %9, label %31, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  %12 = bitcast %struct.anon** %11 to i8**
  %13 = load i8*, i8** %12, align 8, !tbaa !13
  %14 = sext i32 %6 to i64
  %15 = shl nsw i64 %14, 4
  %16 = tail call fastcc i8* @av_realloc(i8* %13, i64 %15) #18
  store i8* %16, i8** %12, align 8, !tbaa !13
  %17 = icmp eq i8* %16, null
  br i1 %17, label %31, label %18

18:                                               ; preds = %10
  %19 = add nuw nsw i32 %2, 16
  %20 = sext i32 %19 to i64
  %21 = tail call fastcc noalias i8* @av_malloc(i64 %20) #18
  %22 = load %struct.anon*, %struct.anon** %11, align 8, !tbaa !13
  %23 = sext i32 %5 to i64
  %24 = getelementptr inbounds %struct.anon, %struct.anon* %22, i64 %23, i32 0
  store i8* %21, i8** %24, align 8, !tbaa !14
  %25 = icmp eq i8* %21, null
  br i1 %25, label %31, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds %struct.anon, %struct.anon* %22, i64 %23, i32 1
  store i32 %2, i32* %27, align 8, !tbaa !29
  %28 = getelementptr inbounds %struct.anon, %struct.anon* %22, i64 %23, i32 2
  store i32 %1, i32* %28, align 4, !tbaa !30
  %29 = load i32, i32* %4, align 8, !tbaa !6
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 8, !tbaa !6
  br label %31

31:                                               ; preds = %26, %18, %10, %3
  %32 = phi i8* [ %21, %26 ], [ null, %3 ], [ null, %10 ], [ null, %18 ]
  ret i8* %32
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc i8* @av_packet_get_side_data(%struct.AVPacket.21* nocapture readonly, i32, i32*) unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 8, !tbaa !6
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %.loopexit

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  %9 = load %struct.anon*, %struct.anon** %8, align 8, !tbaa !13
  %10 = sext i32 %5 to i64
  br label %12

11:                                               ; preds = %12
  %exitcond = icmp eq i64 %17, %10
  br i1 %exitcond, label %.loopexit, label %12

12:                                               ; preds = %11, %7
  %13 = phi i64 [ 0, %7 ], [ %17, %11 ]
  %14 = getelementptr inbounds %struct.anon, %struct.anon* %9, i64 %13, i32 2
  %15 = load i32, i32* %14, align 4, !tbaa !30
  %16 = icmp eq i32 %15, %1
  %17 = add nuw nsw i64 %13, 1
  br i1 %16, label %18, label %11

18:                                               ; preds = %12
  %19 = and i64 %13, 4294967295
  %20 = icmp eq i32* %2, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.anon, %struct.anon* %9, i64 %19, i32 1
  %23 = load i32, i32* %22, align 8, !tbaa !29
  store i32 %23, i32* %2, align 4, !tbaa !28
  br label %24

24:                                               ; preds = %21, %18
  %25 = getelementptr inbounds %struct.anon, %struct.anon* %9, i64 %19, i32 0
  %26 = load i8*, i8** %25, align 8, !tbaa !14
  br label %.loopexit

.loopexit:                                        ; preds = %11, %24, %3
  %27 = phi i8* [ %26, %24 ], [ null, %3 ], [ null, %11 ]
  ret i8* %27
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_packet_merge_side_data(%struct.AVPacket.21* nocapture) unnamed_addr #5 {
  %2 = alloca %struct.AVPacket.21, align 8
  %3 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %4 = load i32, i32* %3, align 8, !tbaa !6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %148, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8, !tbaa !17
  %9 = sext i32 %8 to i64
  %10 = add nsw i64 %9, 24
  %11 = bitcast %struct.AVPacket.21* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %11) #18
  %12 = bitcast %struct.AVPacket.21* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 %12, i64 88, i1 false), !tbaa.struct !25
  %13 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %2, i64 0, i32 7
  %14 = load i32, i32* %13, align 8, !tbaa !6
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %.loopexit7

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %2, i64 0, i32 6
  %18 = load %struct.anon*, %struct.anon** %17, align 8, !tbaa !13
  %19 = sext i32 %14 to i64
  %20 = add nsw i64 %19, -1
  %21 = and i64 %19, 3
  %22 = icmp ult i64 %20, 3
  br i1 %22, label %.loopexit8, label %23

23:                                               ; preds = %16
  %24 = sub nuw nsw i64 %19, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %49, %25 ]
  %27 = phi i64 [ %10, %23 ], [ %48, %25 ]
  %28 = phi i64 [ %24, %23 ], [ %50, %25 ]
  %29 = getelementptr inbounds %struct.anon, %struct.anon* %18, i64 %26, i32 1
  %30 = load i32, i32* %29, align 8, !tbaa !29
  %31 = sext i32 %30 to i64
  %32 = or i64 %26, 1
  %33 = getelementptr inbounds %struct.anon, %struct.anon* %18, i64 %32, i32 1
  %34 = load i32, i32* %33, align 8, !tbaa !29
  %35 = sext i32 %34 to i64
  %36 = or i64 %26, 2
  %37 = getelementptr inbounds %struct.anon, %struct.anon* %18, i64 %36, i32 1
  %38 = load i32, i32* %37, align 8, !tbaa !29
  %39 = sext i32 %38 to i64
  %40 = or i64 %26, 3
  %41 = getelementptr inbounds %struct.anon, %struct.anon* %18, i64 %40, i32 1
  %42 = load i32, i32* %41, align 8, !tbaa !29
  %43 = sext i32 %42 to i64
  %44 = add i64 %27, 20
  %45 = add i64 %44, %31
  %46 = add i64 %45, %35
  %47 = add i64 %46, %39
  %48 = add i64 %47, %43
  %49 = add nuw nsw i64 %26, 4
  %50 = add i64 %28, -4
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %.loopexit8, label %25

.loopexit8:                                       ; preds = %25, %16
  %52 = phi i64 [ undef, %16 ], [ %48, %25 ]
  %53 = phi i64 [ 0, %16 ], [ %49, %25 ]
  %54 = phi i64 [ %10, %16 ], [ %48, %25 ]
  %55 = icmp eq i64 %21, 0
  br i1 %55, label %.loopexit7, label %.preheader6

.preheader6:                                      ; preds = %.loopexit8, %.preheader6
  %56 = phi i64 [ %64, %.preheader6 ], [ %53, %.loopexit8 ]
  %57 = phi i64 [ %63, %.preheader6 ], [ %54, %.loopexit8 ]
  %58 = phi i64 [ %65, %.preheader6 ], [ %21, %.loopexit8 ]
  %59 = getelementptr inbounds %struct.anon, %struct.anon* %18, i64 %56, i32 1
  %60 = load i32, i32* %59, align 8, !tbaa !29
  %61 = sext i32 %60 to i64
  %62 = add i64 %57, 5
  %63 = add i64 %62, %61
  %64 = add nuw nsw i64 %56, 1
  %65 = add nsw i64 %58, -1
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %.loopexit7, label %.preheader6, !llvm.loop !31

.loopexit7:                                       ; preds = %.preheader6, %.loopexit8, %6
  %67 = phi i64 [ %10, %6 ], [ %52, %.loopexit8 ], [ %63, %.preheader6 ]
  %68 = icmp ugt i64 %67, 2147483647
  br i1 %68, label %146, label %69

69:                                               ; preds = %.loopexit7
  %70 = tail call fastcc noalias i8* @av_malloc(i64 %67) #18
  %71 = icmp eq i8* %70, null
  br i1 %71, label %146, label %72

72:                                               ; preds = %69
  %73 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  store i8* %70, i8** %73, align 8, !tbaa !16
  %74 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 9
  %75 = bitcast {}** %74 to void (%struct.AVPacket.21*)**
  store void (%struct.AVPacket.21*)* @av_destruct_packet, void (%struct.AVPacket.21*)** %75, align 8, !tbaa !24
  %76 = trunc i64 %67 to i32
  %77 = add nsw i32 %76, -16
  store i32 %77, i32* %7, align 8, !tbaa !17
  %78 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %2, i64 0, i32 2
  %79 = load i8*, i8** %78, align 8, !tbaa !16
  %80 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %2, i64 0, i32 3
  %81 = load i32, i32* %80, align 8, !tbaa !17
  %82 = zext i32 %81 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %70, i8* align 1 %79, i64 %82, i1 false) #18
  %83 = getelementptr inbounds i8, i8* %70, i64 %82
  br i1 %15, label %84, label %.loopexit5

84:                                               ; preds = %72
  %85 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %2, i64 0, i32 6
  %86 = sext i32 %14 to i64
  br label %87

87:                                               ; preds = %87, %84
  %88 = phi i64 [ %86, %84 ], [ %91, %87 ]
  %89 = phi i32 [ %14, %84 ], [ %92, %87 ]
  %90 = phi i8* [ %83, %84 ], [ %113, %87 ]
  %91 = add nsw i64 %88, -1
  %92 = add nsw i32 %89, -1
  %93 = load %struct.anon*, %struct.anon** %85, align 8, !tbaa !13
  %94 = getelementptr inbounds %struct.anon, %struct.anon* %93, i64 %91, i32 0
  %95 = load i8*, i8** %94, align 8, !tbaa !14
  %96 = getelementptr inbounds %struct.anon, %struct.anon* %93, i64 %91, i32 1
  %97 = load i32, i32* %96, align 8, !tbaa !29
  %98 = zext i32 %97 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %90, i8* align 1 %95, i64 %98, i1 false) #18
  %99 = getelementptr inbounds i8, i8* %90, i64 %98
  %100 = load i32, i32* %96, align 8, !tbaa !29
  %101 = tail call i32 @llvm.bswap.i32(i32 %100) #18
  %102 = bitcast i8* %99 to i32*
  store i32 %101, i32* %102, align 1, !tbaa !33
  %103 = getelementptr inbounds i8, i8* %99, i64 4
  %104 = load %struct.anon*, %struct.anon** %85, align 8, !tbaa !13
  %105 = getelementptr inbounds %struct.anon, %struct.anon* %104, i64 %91, i32 2
  %106 = load i32, i32* %105, align 4, !tbaa !30
  %107 = load i32, i32* %13, align 8, !tbaa !6
  %108 = icmp eq i32 %89, %107
  %109 = zext i1 %108 to i32
  %110 = shl nuw nsw i32 %109, 7
  %111 = or i32 %110, %106
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %103, i64 1
  store i8 %112, i8* %103, align 1, !tbaa !33
  %114 = icmp sgt i64 %91, 0
  br i1 %114, label %87, label %.loopexit5

.loopexit5:                                       ; preds = %87, %72
  %115 = phi i8* [ %83, %72 ], [ %113, %87 ]
  %116 = bitcast i8* %115 to i64*
  store i64 -78490226407944820, i64* %116, align 1, !tbaa !33
  %117 = getelementptr inbounds i8, i8* %115, i64 8
  %118 = bitcast i8** %73 to i64*
  %119 = load i64, i64* %118, align 8, !tbaa !16
  %120 = ptrtoint i8* %117 to i64
  %121 = sub i64 %120, %119
  %122 = load i32, i32* %7, align 8, !tbaa !17
  %123 = sext i32 %122 to i64
  %124 = icmp eq i64 %121, %123
  br i1 %124, label %126, label %125

125:                                              ; preds = %.loopexit5
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3.22, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2.19, i64 0, i64 0), i32 255) #18
  tail call void @abort() #27
  unreachable

126:                                              ; preds = %.loopexit5
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %117, i8 0, i64 16, i1 false)
  %127 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %2, i64 0, i32 9
  %128 = bitcast {}** %127 to void (%struct.AVPacket.21*)**
  %129 = load void (%struct.AVPacket.21*)*, void (%struct.AVPacket.21*)** %128, align 8, !tbaa !24
  %130 = icmp eq void (%struct.AVPacket.21*)* %129, null
  br i1 %130, label %132, label %131

131:                                              ; preds = %126
  call void %129(%struct.AVPacket.21* nonnull %2) #18
  br label %132

132:                                              ; preds = %131, %126
  store i8* null, i8** %78, align 8, !tbaa !16
  store i32 0, i32* %80, align 8, !tbaa !17
  %133 = load i32, i32* %13, align 8, !tbaa !6
  %134 = icmp sgt i32 %133, 0
  %135 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %2, i64 0, i32 6
  br i1 %134, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %132, %.preheader
  %136 = phi i64 [ %140, %.preheader ], [ 0, %132 ]
  %137 = load %struct.anon*, %struct.anon** %135, align 8, !tbaa !13
  %138 = getelementptr inbounds %struct.anon, %struct.anon* %137, i64 %136, i32 0
  %139 = load i8*, i8** %138, align 8, !tbaa !14
  call fastcc void @av_free(i8* %139) #18
  %140 = add nuw nsw i64 %136, 1
  %141 = load i32, i32* %13, align 8, !tbaa !6
  %142 = sext i32 %141 to i64
  %143 = icmp slt i64 %140, %142
  br i1 %143, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %132
  %144 = bitcast %struct.anon** %135 to i8*
  call fastcc void @av_freep(i8* nonnull %144) #18
  store i32 0, i32* %13, align 8, !tbaa !6
  store i32 0, i32* %3, align 8, !tbaa !6
  %145 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  store %struct.anon* null, %struct.anon** %145, align 8, !tbaa !13
  br label %146

146:                                              ; preds = %.loopexit, %69, %.loopexit7
  %147 = phi i32 [ 1, %.loopexit ], [ -22, %.loopexit7 ], [ -12, %69 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %11) #18
  br label %148

148:                                              ; preds = %146, %1
  %149 = phi i32 [ %147, %146 ], [ 0, %1 ]
  ret i32 %149
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #6

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_packet_split_side_data(%struct.AVPacket.21* nocapture) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8, !tbaa !6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %.loopexit

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8, !tbaa !17
  %8 = icmp sgt i32 %7, 12
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8, !tbaa !16
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds i8, i8* %11, i64 %12
  %14 = getelementptr inbounds i8, i8* %13, i64 -8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1, !tbaa !33
  %17 = trunc i64 %16 to i32
  %18 = tail call i32 @llvm.bswap.i32(i32 %17) #18
  %19 = zext i32 %18 to i64
  %20 = shl nuw i64 %19, 32
  %21 = lshr i64 %16, 32
  %22 = trunc i64 %21 to i32
  %23 = tail call i32 @llvm.bswap.i32(i32 %22) #18
  %24 = zext i32 %23 to i64
  %25 = or i64 %20, %24
  %26 = icmp eq i64 %25, -8336834640763033090
  %27 = ptrtoint i8* %11 to i64
  br i1 %26, label %28, label %.loopexit

28:                                               ; preds = %9
  %29 = getelementptr inbounds i8, i8* %14, i64 -5
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1, !tbaa !33
  %32 = tail call i32 @llvm.bswap.i32(i32 %31) #18
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %.loopexit, label %34

34:                                               ; preds = %28
  %35 = bitcast i8** %10 to i64*
  br label %36

36:                                               ; preds = %48, %34
  %37 = phi i32 [ %32, %34 ], [ %56, %48 ]
  %38 = phi i8* [ %29, %34 ], [ %52, %48 ]
  %39 = phi i32 [ 1, %34 ], [ %53, %48 ]
  %40 = ptrtoint i8* %38 to i64
  %41 = sub i64 %40, %27
  %42 = zext i32 %37 to i64
  %43 = icmp slt i64 %41, %42
  br i1 %43, label %.loopexit, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds i8, i8* %38, i64 4
  %46 = load i8, i8* %45, align 1, !tbaa !33
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %58, label %48

48:                                               ; preds = %44
  %49 = add nuw i32 %37, 5
  %50 = zext i32 %49 to i64
  %51 = sub nsw i64 0, %50
  %52 = getelementptr inbounds i8, i8* %38, i64 %51
  %53 = add nuw nsw i32 %39, 1
  %54 = bitcast i8* %52 to i32*
  %55 = load i32, i32* %54, align 1, !tbaa !33
  %56 = tail call i32 @llvm.bswap.i32(i32 %55) #18
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %.loopexit, label %36

58:                                               ; preds = %44
  %59 = zext i32 %39 to i64
  %60 = shl nuw nsw i64 %59, 4
  %61 = tail call fastcc noalias i8* @av_malloc(i64 %60) #18
  %62 = getelementptr inbounds %struct.AVPacket.21, %struct.AVPacket.21* %0, i64 0, i32 6
  %63 = bitcast %struct.anon** %62 to i8**
  store i8* %61, i8** %63, align 8, !tbaa !13
  %64 = icmp eq i8* %61, null
  br i1 %64, label %.loopexit, label %65

65:                                               ; preds = %58
  %66 = load i8*, i8** %10, align 8, !tbaa !16
  %67 = load i32, i32* %6, align 8, !tbaa !17
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = getelementptr inbounds i8, i8* %69, i64 -8
  %71 = getelementptr inbounds i8, i8* %70, i64 -5
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 1, !tbaa !33
  %74 = tail call i32 @llvm.bswap.i32(i32 %73) #18
  %75 = icmp sgt i32 %74, -1
  br i1 %75, label %76, label %.loopexit8

76:                                               ; preds = %65
  %77 = ptrtoint i8* %66 to i64
  %78 = ptrtoint i8* %71 to i64
  %79 = sub i64 %78, %77
  %80 = zext i32 %74 to i64
  %81 = icmp slt i64 %79, %80
  br i1 %81, label %.loopexit8, label %.preheader

.loopexit8:                                       ; preds = %114, %106, %76, %65
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4.23, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2.19, i64 0, i64 0), i32 288) #18
  tail call void @abort() #27
  unreachable

.preheader:                                       ; preds = %76, %114
  %82 = phi i64 [ %119, %114 ], [ %80, %76 ]
  %83 = phi i8* [ %109, %114 ], [ %71, %76 ]
  %84 = phi i32 [ %112, %114 ], [ %74, %76 ]
  %85 = phi i64 [ %115, %114 ], [ 0, %76 ]
  %86 = add nuw i32 %84, 16
  %87 = zext i32 %86 to i64
  %88 = tail call fastcc noalias i8* @av_malloc(i64 %87) #18
  %89 = load %struct.anon*, %struct.anon** %62, align 8, !tbaa !13
  %90 = getelementptr inbounds %struct.anon, %struct.anon* %89, i64 %85, i32 0
  store i8* %88, i8** %90, align 8, !tbaa !14
  %91 = getelementptr inbounds %struct.anon, %struct.anon* %89, i64 %85, i32 1
  store i32 %84, i32* %91, align 8, !tbaa !29
  %92 = getelementptr inbounds i8, i8* %83, i64 4
  %93 = load i8, i8* %92, align 1, !tbaa !33
  %94 = and i8 %93, 127
  %95 = zext i8 %94 to i32
  %96 = getelementptr inbounds %struct.anon, %struct.anon* %89, i64 %85, i32 2
  store i32 %95, i32* %96, align 4, !tbaa !30
  %97 = icmp eq i8* %88, null
  br i1 %97, label %.loopexit, label %98

98:                                               ; preds = %.preheader
  %99 = sub nsw i64 0, %82
  %100 = getelementptr inbounds i8, i8* %83, i64 %99
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %88, i8* align 1 %100, i64 %82, i1 false)
  %101 = add nuw i32 %84, 5
  %102 = load i32, i32* %6, align 8, !tbaa !17
  %103 = sub i32 %102, %101
  store i32 %103, i32* %6, align 8, !tbaa !17
  %104 = load i8, i8* %92, align 1, !tbaa !33
  %105 = icmp slt i8 %104, 0
  br i1 %105, label %121, label %106

106:                                              ; preds = %98
  %107 = zext i32 %101 to i64
  %108 = sub nsw i64 0, %107
  %109 = getelementptr inbounds i8, i8* %83, i64 %108
  %110 = bitcast i8* %109 to i32*
  %111 = load i32, i32* %110, align 1, !tbaa !33
  %112 = tail call i32 @llvm.bswap.i32(i32 %111) #18
  %113 = icmp sgt i32 %112, -1
  br i1 %113, label %114, label %.loopexit8

114:                                              ; preds = %106
  %115 = add nuw i64 %85, 1
  %116 = load i64, i64* %35, align 8, !tbaa !16
  %117 = ptrtoint i8* %109 to i64
  %118 = sub i64 %117, %116
  %119 = zext i32 %112 to i64
  %120 = icmp slt i64 %118, %119
  br i1 %120, label %.loopexit8, label %.preheader

121:                                              ; preds = %98
  %122 = trunc i64 %85 to i32
  %123 = add nsw i32 %103, -8
  store i32 %123, i32* %6, align 8, !tbaa !17
  %124 = add nuw nsw i32 %122, 1
  store i32 %124, i32* %2, align 8, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %48, %36, %.preheader, %121, %58, %28, %9, %5, %1
  %125 = phi i32 [ 1, %121 ], [ -12, %58 ], [ 0, %1 ], [ 0, %9 ], [ 0, %5 ], [ 0, %28 ], [ -12, %.preheader ], [ 0, %36 ], [ 0, %48 ]
  ret i32 %125
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avpicture_layout(%struct.AVPicture* nocapture readonly, i32, i32, i32, i8*, i32) unnamed_addr #5 {
  %7 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 0
  %8 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 0
  %9 = tail call fastcc i32 @av_image_copy_to_buffer(i8* %4, i32 %5, i8** %7, i32* nonnull %8, i32 %1, i32 %2, i32 %3) #18
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avpicture_get_size(i32, i32, i32) unnamed_addr #5 {
  %4 = tail call fastcc i32 @av_image_get_buffer_size(i32 %0, i32 %1, i32 %2) #18
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_picture_copy(%struct.AVPicture* nocapture readonly, %struct.AVPicture* nocapture readonly, i32, i32, i32) unnamed_addr #5 {
  %6 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 0, i64 0
  %7 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %0, i64 0, i32 1, i64 0
  %8 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %1, i64 0, i32 1, i64 0
  tail call fastcc void @av_image_copy(i8** %6, i32* nonnull %7, i8** %8, i32* nonnull %9, i32 %2, i32 %3, i32 %4) #18
  ret void
}

; Function Attrs: nofree nounwind readonly
declare dso_local i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #10

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc %struct.AVCodecDescriptor* @avcodec_descriptor_get(i32) unnamed_addr #11 {
  br label %9

2:                                                ; preds = %9
  %3 = or i64 %10, 1
  %4 = getelementptr inbounds [358 x %struct.AVCodecDescriptor], [358 x %struct.AVCodecDescriptor]* @codec_descriptors, i64 0, i64 %3
  %5 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 16, !tbaa !34
  %7 = icmp eq i32 %6, %0
  %8 = or i64 %10, 2
  br i1 %7, label %15, label %17

9:                                                ; preds = %30, %1
  %10 = phi i64 [ 0, %1 ], [ %31, %30 ]
  %11 = getelementptr inbounds [358 x %struct.AVCodecDescriptor], [358 x %struct.AVCodecDescriptor]* @codec_descriptors, i64 0, i64 %10
  %12 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 16, !tbaa !34
  %14 = icmp eq i32 %13, %0
  br i1 %14, label %15, label %2

15:                                               ; preds = %24, %19, %17, %9, %2
  %16 = phi %struct.AVCodecDescriptor* [ %11, %9 ], [ %4, %2 ], [ null, %17 ], [ %20, %19 ], [ %26, %24 ]
  ret %struct.AVCodecDescriptor* %16

17:                                               ; preds = %2
  %18 = icmp eq i64 %8, 358
  br i1 %18, label %15, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds [358 x %struct.AVCodecDescriptor], [358 x %struct.AVCodecDescriptor]* @codec_descriptors, i64 0, i64 %8
  %21 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 16, !tbaa !34
  %23 = icmp eq i32 %22, %0
  br i1 %23, label %15, label %24

24:                                               ; preds = %19
  %25 = or i64 %10, 3
  %26 = getelementptr inbounds [358 x %struct.AVCodecDescriptor], [358 x %struct.AVCodecDescriptor]* @codec_descriptors, i64 0, i64 %25
  %27 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 16, !tbaa !34
  %29 = icmp eq i32 %28, %0
  br i1 %29, label %15, label %30

30:                                               ; preds = %24
  %31 = add nuw nsw i64 %10, 4
  br label %9
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_frame_thread_encoder_init(%struct.AVCodecContext*, %struct.AVDictionary* readonly) unnamed_addr #5 {
  %3 = alloca %struct.AVDictionary*, align 8
  %4 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 177
  %5 = load i32, i32* %4, align 4, !tbaa !36
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %121, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 3
  %10 = load %struct.AVCodec*, %struct.AVCodec** %9, align 8, !tbaa !40
  %11 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %10, i64 0, i32 4
  %12 = load i32, i32* %11, align 8, !tbaa !41
  %13 = and i32 %12, 1073741824
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %121, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 176
  %17 = load i32, i32* %16, align 8, !tbaa !43
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = bitcast %struct.AVCodecContext* %0 to %struct.AVCodecContext.202*
  %21 = tail call fastcc i32 @ff_get_logical_cpus(%struct.AVCodecContext.202* nonnull %20) #18
  %22 = icmp slt i32 %21, 64
  %23 = select i1 %22, i32 %21, i32 64
  store i32 %23, i32* %16, align 8, !tbaa !43
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i32 [ %17, %15 ], [ %23, %19 ]
  %26 = icmp slt i32 %25, 2
  br i1 %26, label %121, label %27

27:                                               ; preds = %24
  %28 = icmp sgt i32 %25, 64
  br i1 %28, label %121, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 10
  %31 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %30, align 8, !tbaa !44
  %32 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %31, i64 0, i32 8
  %33 = load i8*, i8** %32, align 8, !tbaa !45
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %29
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.724, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1.725, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2.726, i64 0, i64 0), i32 139) #18
  tail call void @abort() #27
  unreachable

36:                                               ; preds = %29
  %37 = tail call fastcc noalias i8* @av_mallocz(i64 4856) #18
  %38 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %30, align 8, !tbaa !44
  %39 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %38, i64 0, i32 8
  store i8* %37, i8** %39, align 8, !tbaa !45
  %40 = icmp eq i8* %37, null
  br i1 %40, label %121, label %41

41:                                               ; preds = %36
  %42 = bitcast i8* %37 to %struct.AVCodecContext**
  store %struct.AVCodecContext* %0, %struct.AVCodecContext** %42, align 8, !tbaa !47
  %43 = tail call fastcc %struct.AVFifoBuffer* @av_fifo_alloc() #18
  %44 = getelementptr inbounds i8, i8* %37, i64 48
  %45 = bitcast i8* %44 to %struct.AVFifoBuffer**
  store %struct.AVFifoBuffer* %43, %struct.AVFifoBuffer** %45, align 8, !tbaa !49
  %46 = icmp eq %struct.AVFifoBuffer* %43, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %41
  %48 = bitcast %struct.AVCodecContext* %0 to i8*
  br label %118

49:                                               ; preds = %41
  %50 = getelementptr inbounds i8, i8* %37, i64 56
  %51 = bitcast i8* %50 to %union.pthread_mutex_t*
  %52 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %51, %union.pthread_mutexattr_t* null) #18
  %53 = getelementptr inbounds i8, i8* %37, i64 4240
  %54 = bitcast i8* %53 to %union.pthread_mutex_t*
  %55 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %54, %union.pthread_mutexattr_t* null) #18
  %56 = getelementptr inbounds i8, i8* %37, i64 8
  %57 = bitcast i8* %56 to %union.pthread_mutex_t*
  %58 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %57, %union.pthread_mutexattr_t* null) #18
  %59 = getelementptr inbounds i8, i8* %37, i64 96
  %60 = bitcast i8* %59 to %union.pthread_cond_t*
  %61 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %60, %union.pthread_mutexattr_t* null) #18
  %62 = getelementptr inbounds i8, i8* %37, i64 4280
  %63 = bitcast i8* %62 to %union.pthread_cond_t*
  %64 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %63, %union.pthread_mutexattr_t* null) #18
  %65 = load i32, i32* %16, align 8, !tbaa !43
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %.loopexit

67:                                               ; preds = %49
  %68 = bitcast %struct.AVDictionary** %3 to i8*
  %69 = bitcast %struct.AVCodecContext* %0 to i8*
  %70 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 9
  %71 = getelementptr inbounds i8, i8* %37, i64 4336
  %72 = bitcast i8* %71 to [64 x i64]*
  %73 = bitcast %struct.AVCodec** %9 to %struct.AVCodec.134**
  br label %74

74:                                               ; preds = %112, %67
  %75 = phi i64 [ 0, %67 ], [ %113, %112 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #18
  store %struct.AVDictionary* null, %struct.AVDictionary** %3, align 8, !tbaa !27
  %76 = load %struct.AVCodec*, %struct.AVCodec** %9, align 8, !tbaa !40
  %77 = call fastcc %struct.AVCodecContext* @avcodec_alloc_context3(%struct.AVCodec* %76) #18
  %78 = icmp eq %struct.AVCodecContext* %77, null
  br i1 %78, label %110, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %77, i64 0, i32 9
  %81 = bitcast i8** %80 to i64*
  %82 = load i64, i64* %81, align 8, !tbaa !50
  %83 = bitcast %struct.AVCodecContext* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %83, i8* nonnull align 8 %69, i64 1056, i1 false), !tbaa.struct !51
  store i64 %82, i64* %81, align 8, !tbaa !50
  %84 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %77, i64 0, i32 10
  store %struct.AVCodecInternal* null, %struct.AVCodecInternal** %84, align 8, !tbaa !44
  %85 = inttoptr i64 %82 to i8*
  %86 = load i8*, i8** %70, align 8, !tbaa !50
  %87 = load %struct.AVCodec*, %struct.AVCodec** %9, align 8, !tbaa !40
  %88 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %87, i64 0, i32 13
  %89 = load i32, i32* %88, align 8, !tbaa !53
  %90 = sext i32 %89 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %86, i64 %90, i1 false)
  %91 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %77, i64 0, i32 176
  store i32 1, i32* %91, align 8, !tbaa !43
  %92 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %77, i64 0, i32 178
  %93 = load i32, i32* %92, align 8, !tbaa !54
  %94 = and i32 %93, -2
  store i32 %94, i32* %92, align 8, !tbaa !54
  call fastcc void @av_dict_copy(%struct.AVDictionary** nonnull %3, %struct.AVDictionary* %1) #18
  %95 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.727, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.728, i64 0, i64 0), i32 0) #18
  %96 = load %struct.AVCodec.134*, %struct.AVCodec.134** %73, align 8, !tbaa !40
  %97 = bitcast %struct.AVCodecContext* %77 to %struct.AVCodecContext.129*
  %98 = call i32 @avcodec_open2(%struct.AVCodecContext.129* nonnull %97, %struct.AVCodec.134* %96, %struct.AVDictionary** nonnull %3) #18
  %99 = icmp slt i32 %98, 0
  call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %3) #18
  br i1 %99, label %110, label %100

100:                                              ; preds = %79
  %101 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %84, align 8, !tbaa !44
  %102 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %101, i64 0, i32 8
  %103 = load i8*, i8** %102, align 8, !tbaa !45
  %104 = icmp eq i8* %103, null
  br i1 %104, label %106, label %105

105:                                              ; preds = %100
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.724, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5.729, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2.726, i64 0, i64 0), i32 177) #18
  call void @abort() #27
  unreachable

106:                                              ; preds = %100
  store i8* %37, i8** %102, align 8, !tbaa !45
  %107 = getelementptr inbounds [64 x i64], [64 x i64]* %72, i64 0, i64 %75
  %108 = call i32 @pthread_create(i64* nonnull %107, %union.pthread_attr_t* null, i8* (i8*)* nonnull @worker, i8* nonnull %83) #18
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %106, %79, %74
  %111 = trunc i64 %75 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #18
  br label %118

112:                                              ; preds = %106
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #18
  %113 = add nuw nsw i64 %75, 1
  %114 = load i32, i32* %16, align 8, !tbaa !43
  %115 = sext i32 %114 to i64
  %116 = icmp slt i64 %113, %115
  br i1 %116, label %74, label %.loopexit

.loopexit:                                        ; preds = %112, %49
  %117 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 178
  store i32 1, i32* %117, align 8, !tbaa !54
  br label %121

118:                                              ; preds = %110, %47
  %119 = phi i8* [ %48, %47 ], [ %69, %110 ]
  %120 = phi i32 [ 0, %47 ], [ %111, %110 ]
  store i32 %120, i32* %16, align 8, !tbaa !43
  call void (i8*, i32, i8*, ...) @av_log(i8* %119, i32 16, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6.730, i64 0, i64 0)) #18
  call fastcc void @ff_frame_thread_encoder_free(%struct.AVCodecContext* nonnull %0)
  br label %121

121:                                              ; preds = %118, %.loopexit, %36, %27, %24, %8, %2
  %122 = phi i32 [ -1, %118 ], [ 0, %.loopexit ], [ 0, %8 ], [ 0, %2 ], [ 0, %24 ], [ -22, %27 ], [ -12, %36 ]
  ret i32 %122
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #12

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #12

; Function Attrs: nounwind uwtable
define internal noalias i8* @worker(i8*) #5 {
  %2 = alloca %struct.AVCodecContext*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.AVFrame*, align 8
  %5 = alloca %struct.Task, align 8
  %6 = bitcast %struct.AVCodecContext** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #18
  %7 = bitcast %struct.AVCodecContext** %2 to i8**
  store i8* %0, i8** %7, align 8, !tbaa !27
  %8 = getelementptr inbounds i8, i8* %0, i64 80
  %9 = bitcast i8* %8 to %struct.AVCodecInternal**
  %10 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %9, align 8, !tbaa !44
  %11 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %10, i64 0, i32 8
  %12 = bitcast i8** %11 to %struct.ThreadContext**
  %13 = load %struct.ThreadContext*, %struct.ThreadContext** %12, align 8, !tbaa !45
  %14 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 11
  %15 = load i32, i32* %14, align 8, !tbaa !55
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %.loopexit3

17:                                               ; preds = %1
  %18 = bitcast i32* %3 to i8*
  %19 = bitcast %struct.AVFrame** %4 to i8*
  %20 = bitcast %struct.Task* %5 to i8*
  %21 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 3
  %22 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 2
  %23 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 4
  %24 = bitcast %struct.Task* %5 to %struct.AVFrame**
  %25 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 1
  %26 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 0
  %27 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 6
  %28 = getelementptr inbounds %struct.Task, %struct.Task* %5, i64 0, i32 3
  %29 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 7
  %30 = bitcast %struct.AVCodecContext** %2 to %struct.AVCodecContext.129**
  %31 = load %struct.AVCodecContext.129*, %struct.AVCodecContext.129** %30, align 8
  br label %32

32:                                               ; preds = %83, %17
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #18
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #18
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #18
  %33 = call fastcc noalias i8* @av_mallocz(i64 88) #18
  %34 = bitcast i8* %33 to %struct.AVPacket*
  %35 = icmp eq i8* %33, null
  br i1 %35, label %83, label %36

36:                                               ; preds = %32
  %37 = bitcast i8* %33 to %struct.AVPacket.21*
  call void @av_init_packet(%struct.AVPacket.21* nonnull %37) #18
  %38 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %21) #18
  %39 = load %struct.AVFifoBuffer*, %struct.AVFifoBuffer** %22, align 8, !tbaa !49
  %40 = call fastcc i32 @av_fifo_size(%struct.AVFifoBuffer* %39) #18
  %41 = icmp slt i32 %40, 1
  %42 = load i32, i32* %14, align 8, !tbaa !55
  %43 = icmp eq i32 %42, 0
  br i1 %41, label %.preheader, label %.loopexit1

.loopexit1:                                       ; preds = %47, %36
  %44 = phi i1 [ %43, %36 ], [ %53, %47 ]
  br i1 %44, label %54, label %.loopexit

.preheader:                                       ; preds = %36, %47
  %45 = phi i1 [ %53, %47 ], [ %43, %36 ]
  br i1 %45, label %47, label %.loopexit

.loopexit:                                        ; preds = %.loopexit1, %.preheader
  %46 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %21) #18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #18
  br label %.loopexit3

47:                                               ; preds = %.preheader
  %48 = call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %23, %union.pthread_mutex_t* nonnull %21) #18
  %49 = load %struct.AVFifoBuffer*, %struct.AVFifoBuffer** %22, align 8, !tbaa !49
  %50 = call fastcc i32 @av_fifo_size(%struct.AVFifoBuffer* %49) #18
  %51 = icmp slt i32 %50, 1
  %52 = load i32, i32* %14, align 8, !tbaa !55
  %53 = icmp eq i32 %52, 0
  br i1 %51, label %.preheader, label %.loopexit1

54:                                               ; preds = %.loopexit1
  %55 = load %struct.AVFifoBuffer*, %struct.AVFifoBuffer** %22, align 8, !tbaa !49
  call fastcc void @av_fifo_generic_read(%struct.AVFifoBuffer* %55, i8* nonnull %20) #18
  %56 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %21) #18
  %57 = load %struct.AVFrame*, %struct.AVFrame** %24, align 8, !tbaa !56
  store %struct.AVFrame* %57, %struct.AVFrame** %4, align 8, !tbaa !27
  %58 = bitcast %struct.AVFrame* %57 to %struct.AVFrame.123*
  %59 = call fastcc i32 @avcodec_encode_video2(%struct.AVCodecContext.129* %31, %struct.AVPacket* nonnull %34, %struct.AVFrame.123* %58, i32* nonnull %3) #18
  %60 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %25) #18
  %61 = load %struct.AVCodecContext*, %struct.AVCodecContext** %26, align 8, !tbaa !47
  %62 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %61, i64 0, i32 113
  %63 = load void (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*, %struct.AVFrame*)** %62, align 8, !tbaa !58
  call void %63(%struct.AVCodecContext* %61, %struct.AVFrame* %57) #18
  %64 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %25) #18
  call fastcc void @av_freep(i8* nonnull %19) #18
  %65 = load i32, i32* %3, align 4, !tbaa !28
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %54
  %68 = call fastcc i32 @av_dup_packet(%struct.AVPacket.21* nonnull %37) #18
  br label %74

69:                                               ; preds = %54
  %70 = getelementptr inbounds i8, i8* %33, i64 16
  %71 = bitcast i8* %70 to i8**
  store i8* null, i8** %71, align 8, !tbaa !16
  %72 = getelementptr inbounds i8, i8* %33, i64 24
  %73 = bitcast i8* %72 to i32*
  store i32 0, i32* %73, align 8, !tbaa !17
  br label %74

74:                                               ; preds = %69, %67
  %75 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %27) #18
  %76 = load i32, i32* %28, align 8, !tbaa !59
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 5, i64 %77, i32 1
  store i8* %33, i8** %78, align 8, !tbaa !60
  %79 = sext i32 %59 to i64
  %80 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 5, i64 %77, i32 2
  store i64 %79, i64* %80, align 8, !tbaa !61
  %81 = call i32 @pthread_cond_signal(%union.pthread_cond_t* nonnull %29) #18
  %82 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %27) #18
  br label %83

83:                                               ; preds = %74, %32
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #18
  %84 = load i32, i32* %14, align 8, !tbaa !55
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %32, label %.loopexit3

.loopexit3:                                       ; preds = %83, %.loopexit, %1
  %86 = phi i8* [ %33, %.loopexit ], [ null, %1 ], [ null, %83 ]
  call fastcc void @av_free(i8* %86) #18
  %87 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %13, i64 0, i32 1
  %88 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %87) #18
  %89 = bitcast %struct.AVCodecContext** %2 to %struct.AVCodecContext.129**
  %90 = load %struct.AVCodecContext.129*, %struct.AVCodecContext.129** %89, align 8, !tbaa !27
  %91 = call fastcc i32 @avcodec_close(%struct.AVCodecContext.129* %90) #18
  %92 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %87) #18
  call fastcc void @av_freep(i8* nonnull %6) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #18
  ret i8* null
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #12

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_frame_thread_encoder_free(%struct.AVCodecContext* nocapture readonly) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 10
  %3 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %2, align 8, !tbaa !44
  %4 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %3, i64 0, i32 8
  %5 = bitcast i8** %4 to %struct.ThreadContext**
  %6 = load %struct.ThreadContext*, %struct.ThreadContext** %5, align 8, !tbaa !45
  %7 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %6, i64 0, i32 3
  %8 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %7) #18
  %9 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %6, i64 0, i32 11
  store i32 1, i32* %9, align 8, !tbaa !55
  %10 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %6, i64 0, i32 4
  %11 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* nonnull %10) #18
  %12 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %7) #18
  %13 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 176
  %14 = load i32, i32* %13, align 8, !tbaa !43
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %1, %.preheader
  %16 = phi i64 [ %20, %.preheader ], [ 0, %1 ]
  %17 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %6, i64 0, i32 10, i64 %16
  %18 = load i64, i64* %17, align 8, !tbaa !26
  %19 = tail call i32 @pthread_join(i64 %18, i8** null) #18
  %20 = add nuw nsw i64 %16, 1
  %21 = load i32, i32* %13, align 8, !tbaa !43
  %22 = sext i32 %21 to i64
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %1
  %24 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %7) #18
  %25 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %6, i64 0, i32 6
  %26 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %25) #18
  %27 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %6, i64 0, i32 1
  %28 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %27) #18
  %29 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* nonnull %10) #18
  %30 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %6, i64 0, i32 7
  %31 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* nonnull %30) #18
  %32 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %6, i64 0, i32 2
  %33 = load %struct.AVFifoBuffer*, %struct.AVFifoBuffer** %32, align 8, !tbaa !49
  tail call fastcc void @av_fifo_free(%struct.AVFifoBuffer* %33) #18
  store %struct.AVFifoBuffer* null, %struct.AVFifoBuffer** %32, align 8, !tbaa !49
  %34 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %2, align 8, !tbaa !44
  %35 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %34, i64 0, i32 8
  %36 = bitcast i8** %35 to i8*
  tail call fastcc void @av_freep(i8* nonnull %36) #18
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #12

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_broadcast(%union.pthread_cond_t*) local_unnamed_addr #12

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #12

declare dso_local i32 @pthread_join(i64, i8**) local_unnamed_addr #13

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #12

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_destroy(%union.pthread_cond_t*) local_unnamed_addr #12

declare dso_local i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #13

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_signal(%union.pthread_cond_t*) local_unnamed_addr #12

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_thread_video_encode_frame(%struct.AVCodecContext* nocapture readonly, %struct.AVPacket* nocapture, %struct.AVFrame*, i32* nocapture) unnamed_addr #5 {
  %5 = alloca %struct.Task, align 8
  %6 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 10
  %7 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %6, align 8, !tbaa !44
  %8 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %7, i64 0, i32 8
  %9 = bitcast i8** %8 to %struct.ThreadContext**
  %10 = load %struct.ThreadContext*, %struct.ThreadContext** %9, align 8, !tbaa !45
  %11 = bitcast %struct.Task* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #18
  %12 = icmp eq %struct.AVFrame* %2, null
  br i1 %12, label %13, label %18

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 8
  %15 = load i32, i32* %14, align 8, !tbaa !62
  %16 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 9
  %17 = load i32, i32* %16, align 4, !tbaa !63
  br label %83

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 16
  %20 = load i32, i32* %19, align 8, !tbaa !64
  %21 = and i32 %20, 256
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %55

23:                                               ; preds = %18
  %24 = tail call %struct.AVFrame.123* @avcodec_alloc_frame() #18
  %25 = bitcast %struct.AVFrame.123* %24 to %struct.AVFrame*
  %26 = icmp eq %struct.AVFrame.123* %24, null
  br i1 %26, label %129, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 1
  %29 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %28) #18
  %30 = bitcast %struct.ThreadContext* %10 to %struct.AVCodecContext.129**
  %31 = load %struct.AVCodecContext.129*, %struct.AVCodecContext.129** %30, align 8, !tbaa !47
  %32 = tail call fastcc i32 @ff_get_buffer(%struct.AVCodecContext.129* %31, %struct.AVFrame.123* nonnull %24) #18
  %33 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %28) #18
  %34 = icmp slt i32 %32, 0
  br i1 %34, label %129, label %35

35:                                               ; preds = %27
  %36 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2, i64 0, i32 11
  %37 = load i64, i64* %36, align 8, !tbaa !65
  %38 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %24, i64 0, i32 11
  store i64 %37, i64* %38, align 8, !tbaa !65
  %39 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2, i64 0, i32 16
  %40 = load i32, i32* %39, align 8, !tbaa !67
  %41 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %24, i64 0, i32 16
  store i32 %40, i32* %41, align 8, !tbaa !67
  %42 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2, i64 0, i32 8
  %43 = load i32, i32* %42, align 4, !tbaa !68
  %44 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %24, i64 0, i32 8
  store i32 %43, i32* %44, align 4, !tbaa !68
  %45 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %24, i64 0, i32 0, i64 0
  %46 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %24, i64 0, i32 1, i64 0
  %47 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2, i64 0, i32 0, i64 0
  %48 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %2, i64 0, i32 1, i64 0
  %49 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 28
  %50 = load i32, i32* %49, align 8, !tbaa !69
  %51 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 23
  %52 = load i32, i32* %51, align 4, !tbaa !70
  %53 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 24
  %54 = load i32, i32* %53, align 8, !tbaa !71
  tail call fastcc void @av_image_copy(i8** nonnull %45, i32* nonnull %46, i8** nonnull %47, i32* nonnull %48, i32 %50, i32 %52, i32 %54) #18
  br label %55

55:                                               ; preds = %35, %18
  %56 = phi %struct.AVFrame* [ %2, %18 ], [ %25, %35 ]
  %57 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 8
  %58 = load i32, i32* %57, align 8, !tbaa !62
  %59 = getelementptr inbounds %struct.Task, %struct.Task* %5, i64 0, i32 3
  store i32 %58, i32* %59, align 8, !tbaa !59
  %60 = bitcast %struct.Task* %5 to %struct.AVFrame**
  store %struct.AVFrame* %56, %struct.AVFrame** %60, align 8, !tbaa !56
  %61 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 3
  %62 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %61) #18
  %63 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 2
  %64 = load %struct.AVFifoBuffer*, %struct.AVFifoBuffer** %63, align 8, !tbaa !49
  call fastcc void @av_fifo_generic_write(%struct.AVFifoBuffer* %64, i8* nonnull %11) #18
  %65 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 4
  %66 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* nonnull %65) #18
  %67 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %61) #18
  %68 = load i32, i32* %57, align 8, !tbaa !62
  %69 = add i32 %68, 1
  %70 = and i32 %69, 127
  store i32 %70, i32* %57, align 8, !tbaa !62
  %71 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 9
  %72 = load i32, i32* %71, align 4, !tbaa !63
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 5, i64 %73, i32 1
  %75 = load i8*, i8** %74, align 8, !tbaa !60
  %76 = icmp eq i8* %75, null
  br i1 %76, label %77, label %83

77:                                               ; preds = %55
  %78 = sub i32 %69, %72
  %79 = and i32 %78, 127
  %80 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 176
  %81 = load i32, i32* %80, align 8, !tbaa !43
  %82 = icmp ugt i32 %79, %81
  br i1 %82, label %83, label %129

83:                                               ; preds = %77, %55, %13
  %84 = phi i32 [ %17, %13 ], [ %72, %77 ], [ %72, %55 ]
  %85 = phi i32 [ %15, %13 ], [ %70, %77 ], [ %70, %55 ]
  %86 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 9
  %87 = icmp eq i32 %85, %84
  br i1 %87, label %129, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 6
  %90 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %89) #18
  %91 = load i32, i32* %86, align 4, !tbaa !63
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 5, i64 %92, i32 1
  %94 = load i8*, i8** %93, align 8, !tbaa !60
  %95 = icmp eq i8* %94, null
  br i1 %95, label %96, label %106

96:                                               ; preds = %88
  %97 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 7
  br label %98

98:                                               ; preds = %98, %96
  %99 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %97, %union.pthread_mutex_t* nonnull %89) #18
  %100 = load i32, i32* %86, align 4, !tbaa !63
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 5, i64 %101, i32 1
  %103 = load i8*, i8** %102, align 8, !tbaa !60
  %104 = icmp eq i8* %103, null
  br i1 %104, label %98, label %.loopexit

.loopexit:                                        ; preds = %98
  %105 = zext i32 %100 to i64
  br label %106

106:                                              ; preds = %.loopexit, %88
  %107 = phi i64 [ %92, %88 ], [ %105, %.loopexit ]
  %108 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 5, i64 %107
  %109 = bitcast %struct.Task* %108 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* nonnull align 8 %109, i64 32, i1 false), !tbaa.struct !72
  %110 = getelementptr inbounds %struct.Task, %struct.Task* %5, i64 0, i32 1
  %111 = load i8*, i8** %110, align 8, !tbaa !60
  %112 = bitcast %struct.AVPacket* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %111, i64 88, i1 false), !tbaa.struct !25
  %113 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 2
  %114 = load i8*, i8** %113, align 8, !tbaa !16
  %115 = icmp eq i8* %114, null
  br i1 %115, label %117, label %116

116:                                              ; preds = %106
  store i32 1, i32* %3, align 4, !tbaa !28
  br label %117

117:                                              ; preds = %116, %106
  %118 = load i32, i32* %86, align 4, !tbaa !63
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds %struct.ThreadContext, %struct.ThreadContext* %10, i64 0, i32 5, i64 %119, i32 1
  %121 = bitcast i8** %120 to i8*
  tail call fastcc void @av_freep(i8* nonnull %121) #18
  %122 = load i32, i32* %86, align 4, !tbaa !63
  %123 = add i32 %122, 1
  %124 = and i32 %123, 127
  store i32 %124, i32* %86, align 4, !tbaa !63
  %125 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %89) #18
  %126 = getelementptr inbounds %struct.Task, %struct.Task* %5, i64 0, i32 2
  %127 = load i64, i64* %126, align 8, !tbaa !61
  %128 = trunc i64 %127 to i32
  br label %129

129:                                              ; preds = %117, %83, %77, %27, %23
  %130 = phi i32 [ %128, %117 ], [ 0, %77 ], [ 0, %83 ], [ %32, %27 ], [ -12, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #18
  ret i32 %130
}

; Function Attrs: nounwind uwtable
define internal i32 @gif_decode_init(%struct.AVCodecContext.129*) #5 {
  %2 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 9
  %3 = bitcast i8** %2 to %struct.GifState**
  %4 = load %struct.GifState*, %struct.GifState** %3, align 8, !tbaa !50
  %5 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 25
  store %struct.AVCodecContext.129* %0, %struct.AVCodecContext.129** %5, align 8, !tbaa !73
  %6 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  store i32 30, i32* %6, align 8, !tbaa !69
  %7 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 1
  tail call fastcc void @avcodec_get_frame_defaults(%struct.AVFrame.123* nonnull %7) #18
  %8 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 175
  store %struct.AVFrame.123* %7, %struct.AVFrame.123** %8, align 8, !tbaa !76
  %9 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %7, i64 0, i32 0, i64 0
  store i8* null, i8** %9, align 8, !tbaa !27
  %10 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 22
  tail call fastcc void @ff_lzw_decode_open(i8** nonnull %10) #18
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @gif_decode_frame(%struct.AVCodecContext.129*, i8* nocapture, i32* nocapture, %struct.AVPacket* nocapture readonly) #5 {
  %5 = alloca [6 x i8], align 1
  %6 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 9
  %7 = bitcast i8** %6 to %struct.GifState**
  %8 = load %struct.GifState*, %struct.GifState** %7, align 8, !tbaa !50
  %9 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21
  %10 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8, !tbaa !16
  %12 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %13 = load i32, i32* %12, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.GetByteContext, %struct.GetByteContext* %9, i64 0, i32 0
  store i8* %11, i8** %14, align 8, !tbaa !77
  %15 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21, i32 2
  store i8* %11, i8** %15, align 8, !tbaa !78
  %16 = sext i32 %13 to i64
  %17 = getelementptr inbounds i8, i8* %11, i64 %16
  %18 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21, i32 1
  store i8* %17, i8** %18, align 8, !tbaa !79
  %19 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 0
  %20 = load i64, i64* %19, align 8, !tbaa !18
  %21 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1
  %22 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 11
  store i64 %20, i64* %22, align 8, !tbaa !80
  %23 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 12
  store i64 %20, i64* %23, align 8, !tbaa !81
  %24 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %25 = load i64, i64* %24, align 8, !tbaa !19
  %26 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 13
  store i64 %25, i64* %26, align 8, !tbaa !82
  %27 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 8
  %28 = load i32, i32* %27, align 4, !tbaa !83
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 44
  store i64 %29, i64* %30, align 8, !tbaa !84
  %31 = icmp sgt i32 %13, 5
  br i1 %31, label %32, label %38

32:                                               ; preds = %4
  %33 = tail call i32 @bcmp(i8* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gif87a_sig, i64 0, i64 0), i64 6)
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %41

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 26
  store i32 1, i32* %36, align 8, !tbaa !85
  %37 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 27
  br label %47

38:                                               ; preds = %4
  %39 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 26
  store i32 0, i32* %39, align 8, !tbaa !85
  %40 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 27
  br label %193

41:                                               ; preds = %32
  %42 = tail call i32 @bcmp(i8* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gif89a_sig, i64 0, i64 0), i64 6)
  %43 = icmp eq i32 %42, 0
  %44 = zext i1 %43 to i32
  %45 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 26
  store i32 %44, i32* %45, align 8, !tbaa !85
  %46 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 27
  br i1 %43, label %47, label %193

47:                                               ; preds = %41, %35
  %48 = phi i32* [ %37, %35 ], [ %46, %41 ]
  %49 = phi i32* [ %36, %35 ], [ %45, %41 ]
  store i32 0, i32* %48, align 4, !tbaa !86
  %50 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %50) #18
  %51 = bitcast i8** %18 to i64*
  %52 = icmp ult i32 %13, 13
  br i1 %52, label %169, label %53

53:                                               ; preds = %47
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %50, i8* align 1 %11, i64 6, i1 false) #18
  %54 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %54, i8** %14, align 8, !tbaa !77
  %55 = call i32 @bcmp(i8* nonnull %50, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gif87a_sig, i64 0, i64 0), i64 6) #18
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %53
  %58 = call i32 @bcmp(i8* nonnull %50, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gif89a_sig, i64 0, i64 0), i64 6) #18
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %169

60:                                               ; preds = %57, %53
  %61 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 8
  store i32 -1, i32* %61, align 8, !tbaa !87
  %62 = getelementptr inbounds i8, i8* %11, i64 8
  store i8* %62, i8** %14, align 8, !tbaa !27
  %63 = bitcast i8* %54 to i16*
  %64 = load i16, i16* %63, align 1, !tbaa !33
  %65 = zext i16 %64 to i32
  %66 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 2
  store i32 %65, i32* %66, align 8, !tbaa !88
  %67 = getelementptr inbounds i8, i8* %11, i64 10
  store i8* %67, i8** %14, align 8, !tbaa !27
  %68 = bitcast i8* %62 to i16*
  %69 = load i16, i16* %68, align 1, !tbaa !33
  %70 = zext i16 %69 to i32
  %71 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 3
  store i32 %70, i32* %71, align 4, !tbaa !89
  %72 = or i16 %69, %64
  %73 = icmp slt i16 %72, 0
  br i1 %73, label %74, label %78

74:                                               ; preds = %60
  %75 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 25
  %76 = bitcast %struct.AVCodecContext.129** %75 to i8**
  %77 = load i8*, i8** %76, align 8, !tbaa !73
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %77, i32 16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8.735, i64 0, i64 0)) #18
  br label %169

78:                                               ; preds = %60
  %79 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 10
  %80 = bitcast i8** %79 to i8*
  %81 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 11
  %82 = zext i16 %64 to i64
  tail call fastcc void @av_fast_malloc(i8* nonnull %80, i32* nonnull %81, i64 %82) #18
  %83 = load i8*, i8** %79, align 8, !tbaa !90
  %84 = icmp eq i8* %83, null
  br i1 %84, label %169, label %85

85:                                               ; preds = %78
  %86 = load i8*, i8** %14, align 8, !tbaa !27
  %87 = getelementptr inbounds i8, i8* %86, i64 1
  store i8* %87, i8** %14, align 8, !tbaa !27
  %88 = load i8, i8* %86, align 1, !tbaa !33
  %89 = zext i8 %88 to i32
  %90 = lshr i32 %89, 4
  %91 = and i32 %90, 7
  %92 = add nuw nsw i32 %91, 1
  %93 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 9
  store i32 %92, i32* %93, align 4, !tbaa !91
  %94 = and i32 %89, 128
  %95 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 4
  store i32 %94, i32* %95, align 8, !tbaa !92
  %96 = and i32 %89, 7
  %97 = add nuw nsw i32 %96, 1
  %98 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 5
  store i32 %97, i32* %98, align 4, !tbaa !93
  %99 = getelementptr inbounds i8, i8* %86, i64 2
  store i8* %99, i8** %14, align 8, !tbaa !27
  %100 = load i8, i8* %87, align 1, !tbaa !33
  %101 = zext i8 %100 to i32
  %102 = getelementptr inbounds i8, i8* %86, i64 3
  store i8* %102, i8** %14, align 8, !tbaa !27
  %103 = load i8, i8* %99, align 1, !tbaa !33
  %104 = icmp eq i8 %103, 0
  %105 = ptrtoint i8* %102 to i64
  br i1 %104, label %113, label %106

106:                                              ; preds = %85
  %107 = zext i8 %103 to i32
  %108 = add nuw nsw i32 %107, 15
  %109 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 25
  %110 = load %struct.AVCodecContext.129*, %struct.AVCodecContext.129** %109, align 8, !tbaa !73
  %111 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %110, i64 0, i32 51, i32 0
  store i32 %108, i32* %111, align 8, !tbaa !94
  %112 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %110, i64 0, i32 51, i32 1
  store i32 64, i32* %112, align 4, !tbaa !95
  br label %113

113:                                              ; preds = %106, %85
  %114 = icmp eq i32 %94, 0
  %115 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 7
  br i1 %114, label %168, label %116

116:                                              ; preds = %113
  store i32 %101, i32* %115, align 4, !tbaa !96
  %117 = load i64, i64* %51, align 8, !tbaa !79
  %118 = sub i64 %117, %105
  %119 = trunc i64 %118 to i32
  %120 = shl i32 6, %96
  %121 = icmp ugt i32 %120, %119
  br i1 %121, label %169, label %122

122:                                              ; preds = %116
  %123 = shl i32 2, %96
  %124 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 23, i64 0
  %125 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21, i32 0
  br label %126

126:                                              ; preds = %126, %122
  %127 = phi i8* [ %102, %122 ], [ %145, %126 ]
  %128 = phi i32 [ 0, %122 ], [ %159, %126 ]
  %129 = phi i32* [ %124, %122 ], [ %160, %126 ]
  %130 = getelementptr inbounds i8, i8* %127, i64 3
  store i8* %130, i8** %125, align 8, !tbaa !27
  %131 = load i8, i8* %127, align 1, !tbaa !33
  %132 = zext i8 %131 to i32
  %133 = shl nuw nsw i32 %132, 16
  %134 = getelementptr inbounds i8, i8* %127, i64 1
  %135 = load i8, i8* %134, align 1, !tbaa !33
  %136 = zext i8 %135 to i32
  %137 = shl nuw nsw i32 %136, 8
  %138 = getelementptr inbounds i8, i8* %127, i64 2
  %139 = load i8, i8* %138, align 1, !tbaa !33
  %140 = zext i8 %139 to i32
  %141 = or i32 %133, %137
  %142 = or i32 %141, %140
  %143 = or i32 %142, -16777216
  store i32 %143, i32* %129, align 4, !tbaa !28
  %144 = getelementptr inbounds i32, i32* %129, i64 1
  %145 = getelementptr inbounds i8, i8* %127, i64 6
  store i8* %145, i8** %125, align 8, !tbaa !27
  %146 = load i8, i8* %130, align 1, !tbaa !33
  %147 = zext i8 %146 to i32
  %148 = shl nuw nsw i32 %147, 16
  %149 = getelementptr inbounds i8, i8* %127, i64 4
  %150 = load i8, i8* %149, align 1, !tbaa !33
  %151 = zext i8 %150 to i32
  %152 = shl nuw nsw i32 %151, 8
  %153 = getelementptr inbounds i8, i8* %127, i64 5
  %154 = load i8, i8* %153, align 1, !tbaa !33
  %155 = zext i8 %154 to i32
  %156 = or i32 %148, %152
  %157 = or i32 %156, %155
  %158 = or i32 %157, -16777216
  store i32 %158, i32* %144, align 4, !tbaa !28
  %159 = add nuw nsw i32 %128, 2
  %160 = getelementptr inbounds i32, i32* %129, i64 2
  %161 = icmp eq i32 %159, %123
  br i1 %161, label %162, label %126

162:                                              ; preds = %126
  %163 = load i32, i32* %115, align 4, !tbaa !96
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 23, i64 %164
  %166 = load i32, i32* %165, align 4, !tbaa !28
  %167 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 6
  store i32 %166, i32* %167, align 8, !tbaa !97
  br label %171

168:                                              ; preds = %113
  store i32 -1, i32* %115, align 4, !tbaa !96
  br label %171

169:                                              ; preds = %116, %78, %74, %57, %47
  %170 = phi i32 [ -1094995529, %116 ], [ -12, %78 ], [ -1094995529, %57 ], [ -1094995529, %47 ], [ -1094995529, %74 ]
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %50) #18
  br label %.loopexit42

171:                                              ; preds = %168, %162
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %50) #18
  %172 = load i32, i32* %66, align 8, !tbaa !88
  %173 = load i32, i32* %71, align 4, !tbaa !89
  %174 = bitcast %struct.AVCodecContext.129* %0 to i8*
  %175 = tail call fastcc i32 @av_image_check_size(i32 %172, i32 %173, i8* %174) #18
  %176 = icmp slt i32 %175, 0
  br i1 %176, label %.loopexit42, label %177

177:                                              ; preds = %171
  %178 = load i32, i32* %66, align 8, !tbaa !88
  %179 = load i32, i32* %71, align 4, !tbaa !89
  tail call fastcc void @avcodec_set_dimensions(%struct.AVCodecContext.129* %0, i32 %178, i32 %179) #18
  %180 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %21, i64 0, i32 0, i64 0
  %181 = load i8*, i8** %180, align 8, !tbaa !27
  %182 = icmp eq i8* %181, null
  br i1 %182, label %186, label %183

183:                                              ; preds = %177
  %184 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 113
  %185 = load void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)** %184, align 8, !tbaa !58
  tail call void %185(%struct.AVCodecContext.129* %0, %struct.AVFrame.123* nonnull %21) #18
  br label %186

186:                                              ; preds = %183, %177
  %187 = tail call fastcc i32 @ff_get_buffer(%struct.AVCodecContext.129* %0, %struct.AVFrame.123* nonnull %21) #18
  %188 = icmp slt i32 %187, 0
  br i1 %188, label %189, label %190

189:                                              ; preds = %186
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %174, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5.736, i64 0, i64 0)) #18
  br label %.loopexit42

190:                                              ; preds = %186
  %191 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 8
  store i32 1, i32* %191, align 4, !tbaa !98
  %192 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 7
  store i32 1, i32* %192, align 8, !tbaa !99
  store i32 1, i32* %48, align 4, !tbaa !86
  br label %211

193:                                              ; preds = %41, %38
  %194 = phi i32* [ %40, %38 ], [ %46, %41 ]
  %195 = phi i32* [ %39, %38 ], [ %45, %41 ]
  %196 = load i32, i32* %194, align 4, !tbaa !86
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %193
  %199 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %199, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6.737, i64 0, i64 0)) #18
  br label %.loopexit42

200:                                              ; preds = %193
  %201 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 114
  %202 = load i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)** %201, align 8, !tbaa !100
  %203 = tail call i32 %202(%struct.AVCodecContext.129* nonnull %0, %struct.AVFrame.123* nonnull %21) #18
  %204 = icmp slt i32 %203, 0
  br i1 %204, label %205, label %207

205:                                              ; preds = %200
  %206 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %206, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.738, i64 0, i64 0)) #18
  br label %.loopexit42

207:                                              ; preds = %200
  %208 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 8
  store i32 2, i32* %208, align 4, !tbaa !98
  %209 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 7
  store i32 0, i32* %209, align 8, !tbaa !99
  %210 = bitcast i8** %18 to i64*
  br label %211

211:                                              ; preds = %207, %190
  %212 = phi i32* [ %195, %207 ], [ %49, %190 ]
  %213 = phi i64* [ %210, %207 ], [ %51, %190 ]
  %214 = bitcast %struct.GetByteContext* %9 to i64*
  store i32 1, i32* %2, align 4, !tbaa !28
  %215 = load i64, i64* %213, align 8, !tbaa !79
  %216 = load i64, i64* %214, align 8, !tbaa !77
  %217 = sub i64 %215, %216
  %218 = trunc i64 %217 to i32
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %.loopexit42, label %220

220:                                              ; preds = %211
  %221 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 8
  %222 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 13
  br label %223

223:                                              ; preds = %738, %220
  %224 = phi i64 [ %217, %220 ], [ %740, %738 ]
  %225 = phi i64 [ %216, %220 ], [ %739, %738 ]
  %226 = icmp slt i64 %224, 1
  %227 = inttoptr i64 %225 to i8*
  br i1 %226, label %.loopexit42, label %228

228:                                              ; preds = %223
  %229 = getelementptr inbounds i8, i8* %227, i64 1
  store i8* %229, i8** %14, align 8, !tbaa !27
  %230 = load i8, i8* %227, align 1, !tbaa !33
  switch i8 %230, label %.loopexit42 [
    i8 44, label %231
    i8 33, label %679
    i8 59, label %736
  ]

231:                                              ; preds = %228
  %232 = inttoptr i64 %225 to i8*
  %233 = ptrtoint i8* %229 to i64
  %234 = sub i64 %215, %233
  %235 = trunc i64 %234 to i32
  %236 = icmp ult i32 %235, 9
  br i1 %236, label %.loopexit42, label %237

237:                                              ; preds = %231
  %238 = getelementptr inbounds i8, i8* %232, i64 3
  store i8* %238, i8** %14, align 8, !tbaa !27
  %239 = bitcast i8* %229 to i16*
  %240 = load i16, i16* %239, align 1, !tbaa !33
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i8, i8* %232, i64 5
  store i8* %242, i8** %14, align 8, !tbaa !27
  %243 = bitcast i8* %238 to i16*
  %244 = load i16, i16* %243, align 1, !tbaa !33
  %245 = zext i16 %244 to i32
  %246 = getelementptr inbounds i8, i8* %232, i64 7
  store i8* %246, i8** %14, align 8, !tbaa !27
  %247 = bitcast i8* %242 to i16*
  %248 = load i16, i16* %247, align 1, !tbaa !33
  %249 = zext i16 %248 to i32
  %250 = getelementptr inbounds i8, i8* %232, i64 9
  store i8* %250, i8** %14, align 8, !tbaa !27
  %251 = bitcast i8* %246 to i16*
  %252 = load i16, i16* %251, align 1, !tbaa !33
  %253 = zext i16 %252 to i32
  %254 = getelementptr inbounds i8, i8* %232, i64 10
  store i8* %254, i8** %14, align 8, !tbaa !27
  %255 = load i8, i8* %250, align 1, !tbaa !33
  %256 = zext i8 %255 to i32
  %257 = and i32 %256, 64
  %258 = icmp slt i8 %255, 0
  br i1 %258, label %259, label %306

259:                                              ; preds = %237
  %260 = ptrtoint i8* %254 to i64
  %261 = and i32 %256, 7
  %262 = shl i32 2, %261
  %263 = sub i64 %215, %260
  %264 = trunc i64 %263 to i32
  %265 = mul nuw nsw i32 %262, 3
  %266 = icmp ugt i32 %265, %264
  br i1 %266, label %.loopexit42, label %267

267:                                              ; preds = %259
  %268 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 24, i64 0
  %269 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 21, i32 0
  br label %270

270:                                              ; preds = %270, %267
  %271 = phi i8* [ %254, %267 ], [ %289, %270 ]
  %272 = phi i32 [ 0, %267 ], [ %303, %270 ]
  %273 = phi i32* [ %268, %267 ], [ %304, %270 ]
  %274 = getelementptr inbounds i8, i8* %271, i64 3
  store i8* %274, i8** %269, align 8, !tbaa !27
  %275 = load i8, i8* %271, align 1, !tbaa !33
  %276 = zext i8 %275 to i32
  %277 = shl nuw nsw i32 %276, 16
  %278 = getelementptr inbounds i8, i8* %271, i64 1
  %279 = load i8, i8* %278, align 1, !tbaa !33
  %280 = zext i8 %279 to i32
  %281 = shl nuw nsw i32 %280, 8
  %282 = getelementptr inbounds i8, i8* %271, i64 2
  %283 = load i8, i8* %282, align 1, !tbaa !33
  %284 = zext i8 %283 to i32
  %285 = or i32 %277, %281
  %286 = or i32 %285, %284
  %287 = or i32 %286, -16777216
  store i32 %287, i32* %273, align 4, !tbaa !28
  %288 = getelementptr inbounds i32, i32* %273, i64 1
  %289 = getelementptr inbounds i8, i8* %271, i64 6
  store i8* %289, i8** %269, align 8, !tbaa !27
  %290 = load i8, i8* %274, align 1, !tbaa !33
  %291 = zext i8 %290 to i32
  %292 = shl nuw nsw i32 %291, 16
  %293 = getelementptr inbounds i8, i8* %271, i64 4
  %294 = load i8, i8* %293, align 1, !tbaa !33
  %295 = zext i8 %294 to i32
  %296 = shl nuw nsw i32 %295, 8
  %297 = getelementptr inbounds i8, i8* %271, i64 5
  %298 = load i8, i8* %297, align 1, !tbaa !33
  %299 = zext i8 %298 to i32
  %300 = or i32 %292, %296
  %301 = or i32 %300, %299
  %302 = or i32 %301, -16777216
  store i32 %302, i32* %288, align 4, !tbaa !28
  %303 = add nuw nsw i32 %272, 2
  %304 = getelementptr inbounds i32, i32* %273, i64 2
  %305 = icmp eq i32 %303, %262
  br i1 %305, label %.loopexit40, label %270

306:                                              ; preds = %237
  %307 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 4
  %308 = load i32, i32* %307, align 8, !tbaa !92
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %310, label %314

310:                                              ; preds = %306
  %311 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 25
  %312 = bitcast %struct.AVCodecContext.129** %311 to i8**
  %313 = load i8*, i8** %312, align 8, !tbaa !73
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %313, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9.739, i64 0, i64 0)) #18
  br label %.loopexit42

314:                                              ; preds = %306
  %315 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 23, i64 0
  br label %.loopexit40

.loopexit40:                                      ; preds = %270, %314
  %316 = phi i32* [ %315, %314 ], [ %268, %270 ]
  %317 = load i32, i32* %212, align 8, !tbaa !85
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %.loopexit37, label %319

319:                                              ; preds = %.loopexit40
  %320 = load i32, i32* %221, align 8, !tbaa !87
  %321 = icmp eq i32 %320, -1
  br i1 %321, label %322, label %344

322:                                              ; preds = %319
  %323 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 4
  %324 = load i32, i32* %323, align 8, !tbaa !92
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %344, label %326

326:                                              ; preds = %322
  %327 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 6
  %328 = load i32, i32* %327, align 8, !tbaa !97
  %329 = bitcast %struct.AVFrame.123* %21 to i32**
  %330 = load i32*, i32** %329, align 8, !tbaa !27
  %331 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %332 = load i32, i32* %331, align 8, !tbaa !28
  %333 = sext i32 %332 to i64
  %334 = lshr i64 %333, 2
  %335 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 4
  %336 = load i32, i32* %335, align 4, !tbaa !101
  %337 = sext i32 %336 to i64
  %338 = mul i64 %334, %337
  %339 = getelementptr inbounds i32, i32* %330, i64 %338
  %340 = icmp sgt i64 %338, 0
  br i1 %340, label %.preheader38, label %.loopexit37

.preheader38:                                     ; preds = %326, %.preheader38
  %341 = phi i32* [ %342, %.preheader38 ], [ %330, %326 ]
  store i32 %328, i32* %341, align 4, !tbaa !28
  %342 = getelementptr inbounds i32, i32* %341, i64 1
  %343 = icmp ult i32* %342, %339
  br i1 %343, label %.preheader38, label %.loopexit37

344:                                              ; preds = %322, %319
  %345 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 28
  %346 = load i32, i32* %345, align 8, !tbaa !102
  %347 = bitcast %struct.AVFrame.123* %21 to i32**
  %348 = load i32*, i32** %347, align 8, !tbaa !27
  %349 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %350 = load i32, i32* %349, align 8, !tbaa !28
  %351 = sext i32 %350 to i64
  %352 = lshr i64 %351, 2
  %353 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 4
  %354 = load i32, i32* %353, align 4, !tbaa !101
  %355 = sext i32 %354 to i64
  %356 = mul i64 %352, %355
  %357 = getelementptr inbounds i32, i32* %348, i64 %356
  %358 = icmp sgt i64 %356, 0
  br i1 %358, label %.preheader36, label %.loopexit37

.preheader36:                                     ; preds = %344, %.preheader36
  %359 = phi i32* [ %360, %.preheader36 ], [ %348, %344 ]
  store i32 %346, i32* %359, align 4, !tbaa !28
  %360 = getelementptr inbounds i32, i32* %359, i64 1
  %361 = icmp ult i32* %360, %357
  br i1 %361, label %.preheader36, label %.loopexit37

.loopexit37:                                      ; preds = %.preheader38, %.preheader36, %344, %326, %.loopexit40
  %362 = add nuw nsw i32 %249, %241
  %363 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 2
  %364 = load i32, i32* %363, align 8, !tbaa !88
  %365 = icmp sgt i32 %362, %364
  br i1 %365, label %.loopexit42, label %366

366:                                              ; preds = %.loopexit37
  %367 = add nuw nsw i32 %253, %245
  %368 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 3
  %369 = load i32, i32* %368, align 4, !tbaa !89
  %370 = icmp sgt i32 %367, %369
  br i1 %370, label %.loopexit42, label %371

371:                                              ; preds = %366
  %372 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 12
  %373 = load i32, i32* %372, align 4, !tbaa !103
  switch i32 %373, label %.loopexit30 [
    i32 2, label %374
    i32 3, label %415
  ]

374:                                              ; preds = %371
  %375 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 20
  %376 = load i32, i32* %375, align 4, !tbaa !104
  %377 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 15
  %378 = load i32, i32* %377, align 8, !tbaa !105
  %379 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 16
  %380 = load i32, i32* %379, align 4, !tbaa !106
  %381 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 17
  %382 = load i32, i32* %381, align 8, !tbaa !107
  %383 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %384 = load i32, i32* %383, align 8, !tbaa !28
  %385 = ashr i32 %384, 2
  %386 = bitcast %struct.AVFrame.123* %21 to i32**
  %387 = load i32*, i32** %386, align 8, !tbaa !27
  %388 = mul nsw i32 %385, %378
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i32, i32* %387, i64 %389
  %391 = mul nsw i32 %385, %382
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds i32, i32* %390, i64 %392
  %394 = icmp sgt i32 %391, 0
  br i1 %394, label %395, label %.loopexit30

395:                                              ; preds = %374
  %396 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 14
  %397 = load i32, i32* %396, align 4, !tbaa !108
  %398 = sext i32 %397 to i64
  %399 = sext i32 %380 to i64
  %400 = sext i32 %385 to i64
  %401 = icmp sgt i32 %380, 0
  br i1 %401, label %.preheader29, label %.preheader31

.preheader29:                                     ; preds = %395, %409
  %402 = phi i32* [ %410, %409 ], [ %390, %395 ]
  %403 = getelementptr inbounds i32, i32* %402, i64 %398
  %404 = getelementptr inbounds i32, i32* %403, i64 %399
  br label %405

405:                                              ; preds = %405, %.preheader29
  %406 = phi i32* [ %407, %405 ], [ %403, %.preheader29 ]
  store i32 %376, i32* %406, align 4, !tbaa !28
  %407 = getelementptr inbounds i32, i32* %406, i64 1
  %408 = icmp ult i32* %407, %404
  br i1 %408, label %405, label %409

409:                                              ; preds = %405
  %410 = getelementptr inbounds i32, i32* %402, i64 %400
  %411 = icmp ult i32* %410, %393
  br i1 %411, label %.preheader29, label %.loopexit30

.preheader31:                                     ; preds = %395, %.preheader31
  %412 = phi i32* [ %413, %.preheader31 ], [ %390, %395 ]
  %413 = getelementptr inbounds i32, i32* %412, i64 %400
  %414 = icmp ult i32* %413, %393
  br i1 %414, label %.preheader31, label %.loopexit30

415:                                              ; preds = %371
  %416 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 18
  %417 = load i32*, i32** %416, align 8, !tbaa !109
  %418 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %419 = load i32, i32* %418, align 8, !tbaa !28
  %420 = ashr i32 %419, 2
  %421 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 15
  %422 = load i32, i32* %421, align 8, !tbaa !105
  %423 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 16
  %424 = load i32, i32* %423, align 4, !tbaa !106
  %425 = mul nsw i32 %422, %420
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i32, i32* %417, i64 %426
  %428 = getelementptr inbounds i32, i32* %427, i64 %426
  %429 = icmp sgt i32 %425, 0
  br i1 %429, label %430, label %.loopexit30

430:                                              ; preds = %415
  %431 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 14
  %432 = load i32, i32* %431, align 4, !tbaa !108
  %433 = sext i32 %432 to i64
  %434 = sext i32 %424 to i64
  %435 = sext i32 %420 to i64
  %436 = icmp sgt i32 %424, 0
  br i1 %436, label %437, label %.preheader34

437:                                              ; preds = %430
  %438 = bitcast %struct.AVFrame.123* %21 to i32**
  %439 = load i32*, i32** %438, align 8, !tbaa !27
  %440 = getelementptr inbounds i32, i32* %439, i64 %426
  br label %441

441:                                              ; preds = %454, %437
  %442 = phi i32* [ %456, %454 ], [ %440, %437 ]
  %443 = phi i32* [ %455, %454 ], [ %427, %437 ]
  %444 = getelementptr inbounds i32, i32* %443, i64 %433
  %445 = getelementptr inbounds i32, i32* %444, i64 %434
  %446 = getelementptr inbounds i32, i32* %442, i64 %433
  br label %447

447:                                              ; preds = %447, %441
  %448 = phi i32* [ %452, %447 ], [ %446, %441 ]
  %449 = phi i32* [ %451, %447 ], [ %444, %441 ]
  %450 = load i32, i32* %449, align 4, !tbaa !28
  store i32 %450, i32* %448, align 4, !tbaa !28
  %451 = getelementptr inbounds i32, i32* %449, i64 1
  %452 = getelementptr inbounds i32, i32* %448, i64 1
  %453 = icmp ult i32* %451, %445
  br i1 %453, label %447, label %454

454:                                              ; preds = %447
  %455 = getelementptr inbounds i32, i32* %443, i64 %435
  %456 = getelementptr inbounds i32, i32* %442, i64 %435
  %457 = icmp ult i32* %455, %428
  br i1 %457, label %441, label %.loopexit30

.preheader34:                                     ; preds = %430, %.preheader34
  %458 = phi i32* [ %459, %.preheader34 ], [ %427, %430 ]
  %459 = getelementptr inbounds i32, i32* %458, i64 %435
  %460 = icmp ult i32* %459, %428
  br i1 %460, label %.preheader34, label %.loopexit30

.loopexit30:                                      ; preds = %.preheader34, %454, %.preheader31, %409, %415, %374, %371
  %461 = load i32, i32* %222, align 8, !tbaa !110
  store i32 %461, i32* %372, align 4, !tbaa !103
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %.loopexit27, label %463

463:                                              ; preds = %.loopexit30
  %464 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 14
  store i32 %241, i32* %464, align 4, !tbaa !108
  %465 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 15
  store i32 %245, i32* %465, align 8, !tbaa !105
  %466 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 16
  store i32 %249, i32* %466, align 4, !tbaa !106
  %467 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 17
  store i32 %253, i32* %467, align 8, !tbaa !107
  switch i32 %461, label %.loopexit27 [
    i32 2, label %468
    i32 3, label %479
  ]

468:                                              ; preds = %463
  %469 = load i32, i32* %221, align 8, !tbaa !87
  %470 = icmp sgt i32 %469, -1
  br i1 %470, label %471, label %475

471:                                              ; preds = %468
  %472 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 28
  %473 = load i32, i32* %472, align 8, !tbaa !102
  %474 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 20
  store i32 %473, i32* %474, align 4, !tbaa !104
  br label %.loopexit27

475:                                              ; preds = %468
  %476 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 6
  %477 = load i32, i32* %476, align 8, !tbaa !97
  %478 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 20
  store i32 %477, i32* %478, align 4, !tbaa !104
  br label %.loopexit27

479:                                              ; preds = %463
  %480 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 18
  %481 = bitcast i32** %480 to i8*
  %482 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 19
  %483 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %484 = load i32, i32* %483, align 8, !tbaa !28
  %485 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 4
  %486 = load i32, i32* %485, align 4, !tbaa !111
  %487 = mul nsw i32 %486, %484
  %488 = sext i32 %487 to i64
  tail call fastcc void @av_fast_malloc(i8* nonnull %481, i32* nonnull %482, i64 %488) #18
  %489 = load i32*, i32** %480, align 8, !tbaa !109
  %490 = icmp eq i32* %489, null
  br i1 %490, label %.loopexit42, label %491

491:                                              ; preds = %479
  %492 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 0, i64 0
  %493 = bitcast i8** %492 to i32**
  %494 = load i32*, i32** %493, align 8, !tbaa !27
  %495 = load i32, i32* %483, align 8, !tbaa !28
  %496 = ashr i32 %495, 2
  %497 = mul nsw i32 %496, %245
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds i32, i32* %494, i64 %498
  %500 = getelementptr inbounds i32, i32* %499, i64 %498
  %501 = icmp sgt i32 %497, 0
  br i1 %501, label %502, label %.loopexit27

502:                                              ; preds = %491
  %503 = zext i16 %240 to i64
  %504 = zext i16 %248 to i64
  %505 = sext i32 %496 to i64
  %506 = icmp eq i16 %248, 0
  br i1 %506, label %.preheader26, label %507

507:                                              ; preds = %502
  %508 = getelementptr inbounds i32, i32* %489, i64 %498
  br label %512

.preheader26:                                     ; preds = %502, %.preheader26
  %509 = phi i32* [ %510, %.preheader26 ], [ %499, %502 ]
  %510 = getelementptr inbounds i32, i32* %509, i64 %505
  %511 = icmp ult i32* %510, %500
  br i1 %511, label %.preheader26, label %.loopexit27

512:                                              ; preds = %525, %507
  %513 = phi i32* [ %527, %525 ], [ %508, %507 ]
  %514 = phi i32* [ %526, %525 ], [ %499, %507 ]
  %515 = getelementptr inbounds i32, i32* %514, i64 %503
  %516 = getelementptr inbounds i32, i32* %515, i64 %504
  %517 = getelementptr inbounds i32, i32* %513, i64 %503
  br label %518

518:                                              ; preds = %518, %512
  %519 = phi i32* [ %523, %518 ], [ %517, %512 ]
  %520 = phi i32* [ %522, %518 ], [ %515, %512 ]
  %521 = load i32, i32* %520, align 4, !tbaa !28
  store i32 %521, i32* %519, align 4, !tbaa !28
  %522 = getelementptr inbounds i32, i32* %520, i64 1
  %523 = getelementptr inbounds i32, i32* %519, i64 1
  %524 = icmp ult i32* %522, %516
  br i1 %524, label %518, label %525

525:                                              ; preds = %518
  %526 = getelementptr inbounds i32, i32* %514, i64 %505
  %527 = getelementptr inbounds i32, i32* %513, i64 %505
  %528 = icmp ult i32* %526, %500
  br i1 %528, label %512, label %.loopexit27

.loopexit27:                                      ; preds = %525, %.preheader26, %491, %475, %471, %463, %.loopexit30
  %529 = load i64, i64* %213, align 8, !tbaa !79
  %530 = load i64, i64* %214, align 8, !tbaa !77
  %531 = sub i64 %529, %530
  %532 = trunc i64 %531 to i32
  %533 = icmp ult i32 %532, 2
  %534 = inttoptr i64 %530 to i8*
  br i1 %533, label %.loopexit42, label %535

535:                                              ; preds = %.loopexit27
  %536 = getelementptr inbounds i8, i8* %534, i64 1
  store i8* %536, i8** %14, align 8, !tbaa !27
  %537 = load i8, i8* %534, align 1, !tbaa !33
  %538 = zext i8 %537 to i32
  %539 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 22
  %540 = load i8*, i8** %539, align 8, !tbaa !112
  %541 = ptrtoint i8* %536 to i64
  %542 = sub i64 %529, %541
  %543 = trunc i64 %542 to i32
  %544 = tail call fastcc i32 @ff_lzw_decode_init(i8* %540, i32 %538, i8* nonnull %536, i32 %543) #18
  %545 = icmp slt i32 %544, 0
  br i1 %545, label %546, label %550

546:                                              ; preds = %535
  %547 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 25
  %548 = bitcast %struct.AVCodecContext.129** %547 to i8**
  %549 = load i8*, i8** %548, align 8, !tbaa !73
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %549, i32 16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10.740, i64 0, i64 0)) #18
  br label %.loopexit42

550:                                              ; preds = %535
  %551 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 1, i64 0
  %552 = load i32, i32* %551, align 8, !tbaa !28
  %553 = ashr i32 %552, 2
  %554 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 1, i32 0, i64 0
  %555 = bitcast i8** %554 to i32**
  %556 = load i32*, i32** %555, align 8, !tbaa !27
  %557 = mul nsw i32 %553, %245
  %558 = sext i32 %557 to i64
  %559 = getelementptr inbounds i32, i32* %556, i64 %558
  %560 = zext i16 %240 to i64
  %561 = getelementptr inbounds i32, i32* %559, i64 %560
  %562 = icmp eq i16 %252, 0
  br i1 %562, label %.loopexit, label %563

563:                                              ; preds = %550
  %564 = getelementptr inbounds %struct.GifState, %struct.GifState* %8, i64 0, i32 10
  %565 = zext i16 %248 to i64
  %566 = icmp eq i32 %257, 0
  %567 = and i32 %552, -4
  %568 = sext i32 %567 to i64
  %569 = sext i32 %553 to i64
  %570 = getelementptr inbounds i32, i32* %561, i64 %569
  %571 = shl nsw i32 %553, 1
  %572 = sext i32 %571 to i64
  %573 = shl nsw i32 %553, 3
  %574 = sext i32 %573 to i64
  %575 = load i8*, i8** %564, align 8, !tbaa !90
  %576 = icmp eq i16 %248, 0
  br i1 %566, label %587, label %577

577:                                              ; preds = %563
  br i1 %576, label %.preheader22, label %.preheader24

.preheader22:                                     ; preds = %577, %583
  %578 = phi i8* [ %584, %583 ], [ %575, %577 ]
  %579 = phi i32 [ %585, %583 ], [ 0, %577 ]
  %580 = load i8*, i8** %539, align 8, !tbaa !112
  %581 = tail call fastcc i32 @ff_lzw_decode(i8* %580, i8* %578, i32 %249) #18
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %.loopexit, label %583

583:                                              ; preds = %.preheader22
  %584 = load i8*, i8** %564, align 8, !tbaa !90
  %585 = add nuw nsw i32 %579, 1
  %586 = icmp eq i32 %585, %253
  br i1 %586, label %.loopexit, label %.preheader22

587:                                              ; preds = %563
  br i1 %576, label %.preheader, label %.preheader20

.preheader:                                       ; preds = %587, %593
  %588 = phi i8* [ %594, %593 ], [ %575, %587 ]
  %589 = phi i32 [ %595, %593 ], [ 0, %587 ]
  %590 = load i8*, i8** %539, align 8, !tbaa !112
  %591 = tail call fastcc i32 @ff_lzw_decode(i8* %590, i8* %588, i32 %249) #18
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %.loopexit, label %593

593:                                              ; preds = %.preheader
  %594 = load i8*, i8** %564, align 8, !tbaa !90
  %595 = add nuw nsw i32 %589, 1
  %596 = icmp eq i32 %595, %253
  br i1 %596, label %.loopexit, label %.preheader

.preheader20:                                     ; preds = %587, %606
  %597 = phi i8* [ %605, %606 ], [ %575, %587 ]
  %598 = phi i32 [ %608, %606 ], [ 0, %587 ]
  %599 = phi i32* [ %607, %606 ], [ %561, %587 ]
  %600 = load i8*, i8** %539, align 8, !tbaa !112
  %601 = tail call fastcc i32 @ff_lzw_decode(i8* %600, i8* %597, i32 %249) #18
  %602 = icmp eq i32 %601, 0
  br i1 %602, label %.loopexit, label %603

603:                                              ; preds = %.preheader20
  %604 = getelementptr inbounds i32, i32* %599, i64 %565
  %605 = load i8*, i8** %564, align 8, !tbaa !90
  br label %610

606:                                              ; preds = %621
  %607 = getelementptr inbounds i32, i32* %599, i64 %569
  %608 = add nuw nsw i32 %598, 1
  %609 = icmp eq i32 %608, %253
  br i1 %609, label %.loopexit, label %.preheader20

610:                                              ; preds = %621, %603
  %611 = phi i8* [ %623, %621 ], [ %605, %603 ]
  %612 = phi i32* [ %622, %621 ], [ %599, %603 ]
  %613 = load i8, i8* %611, align 1, !tbaa !33
  %614 = zext i8 %613 to i32
  %615 = load i32, i32* %221, align 8, !tbaa !87
  %616 = icmp eq i32 %615, %614
  br i1 %616, label %621, label %617

617:                                              ; preds = %610
  %618 = zext i8 %613 to i64
  %619 = getelementptr inbounds i32, i32* %316, i64 %618
  %620 = load i32, i32* %619, align 4, !tbaa !28
  store i32 %620, i32* %612, align 4, !tbaa !28
  br label %621

621:                                              ; preds = %617, %610
  %622 = getelementptr inbounds i32, i32* %612, i64 1
  %623 = getelementptr inbounds i8, i8* %611, i64 1
  %624 = icmp ult i32* %622, %604
  br i1 %624, label %610, label %606

.preheader24:                                     ; preds = %577, %673
  %625 = phi i8* [ %635, %673 ], [ %575, %577 ]
  %626 = phi i32 [ %677, %673 ], [ 0, %577 ]
  %627 = phi i32 [ %676, %673 ], [ 0, %577 ]
  %628 = phi i32* [ %675, %673 ], [ %561, %577 ]
  %629 = phi i32 [ %674, %673 ], [ 0, %577 ]
  %630 = load i8*, i8** %539, align 8, !tbaa !112
  %631 = tail call fastcc i32 @ff_lzw_decode(i8* %630, i8* %625, i32 %249) #18
  %632 = icmp eq i32 %631, 0
  br i1 %632, label %.loopexit, label %633

633:                                              ; preds = %.preheader24
  %634 = getelementptr inbounds i32, i32* %628, i64 %565
  %635 = load i8*, i8** %564, align 8, !tbaa !90
  br label %636

636:                                              ; preds = %647, %633
  %637 = phi i8* [ %649, %647 ], [ %635, %633 ]
  %638 = phi i32* [ %648, %647 ], [ %628, %633 ]
  %639 = load i8, i8* %637, align 1, !tbaa !33
  %640 = zext i8 %639 to i32
  %641 = load i32, i32* %221, align 8, !tbaa !87
  %642 = icmp eq i32 %641, %640
  br i1 %642, label %647, label %643

643:                                              ; preds = %636
  %644 = zext i8 %639 to i64
  %645 = getelementptr inbounds i32, i32* %316, i64 %644
  %646 = load i32, i32* %645, align 4, !tbaa !28
  store i32 %646, i32* %638, align 4, !tbaa !28
  br label %647

647:                                              ; preds = %643, %636
  %648 = getelementptr inbounds i32, i32* %638, i64 1
  %649 = getelementptr inbounds i8, i8* %637, i64 1
  %650 = icmp ult i32* %648, %634
  br i1 %650, label %636, label %651

651:                                              ; preds = %647
  switch i32 %627, label %652 [
    i32 3, label %670
    i32 2, label %663
  ]

652:                                              ; preds = %651
  %653 = add nsw i32 %629, 8
  %654 = getelementptr inbounds i32, i32* %628, i64 %574
  %655 = icmp slt i32 %653, %253
  br i1 %655, label %673, label %656

656:                                              ; preds = %652
  %657 = icmp eq i32 %627, 0
  %658 = select i1 %657, i32 4, i32 2
  %659 = mul nsw i32 %658, %553
  %660 = sext i32 %659 to i64
  %661 = getelementptr inbounds i32, i32* %561, i64 %660
  %662 = add nsw i32 %627, 1
  br label %673

663:                                              ; preds = %651
  %664 = add nsw i32 %629, 4
  %665 = getelementptr inbounds i32, i32* %628, i64 %568
  %666 = icmp slt i32 %664, %253
  %667 = select i1 %666, i32 %664, i32 1
  %668 = select i1 %666, i32* %665, i32* %570
  %669 = select i1 %666, i32 2, i32 3
  br label %673

670:                                              ; preds = %651
  %671 = add nsw i32 %629, 2
  %672 = getelementptr inbounds i32, i32* %628, i64 %572
  br label %673

673:                                              ; preds = %670, %663, %656, %652
  %674 = phi i32 [ %658, %656 ], [ %653, %652 ], [ %671, %670 ], [ %667, %663 ]
  %675 = phi i32* [ %661, %656 ], [ %654, %652 ], [ %672, %670 ], [ %668, %663 ]
  %676 = phi i32 [ %662, %656 ], [ %627, %652 ], [ 3, %670 ], [ %669, %663 ]
  %677 = add nuw nsw i32 %626, 1
  %678 = icmp eq i32 %677, %253
  br i1 %678, label %.loopexit, label %.preheader24

679:                                              ; preds = %228
  %680 = ptrtoint i8* %229 to i64
  %681 = sub i64 %215, %680
  %682 = trunc i64 %681 to i32
  %683 = icmp ult i32 %682, 2
  br i1 %683, label %.loopexit42, label %684

684:                                              ; preds = %679
  %685 = getelementptr inbounds i8, i8* %227, i64 2
  store i8* %685, i8** %14, align 8, !tbaa !27
  %686 = load i8, i8* %229, align 1, !tbaa !33
  %687 = getelementptr inbounds i8, i8* %227, i64 3
  store i8* %687, i8** %14, align 8, !tbaa !27
  %688 = load i8, i8* %685, align 1, !tbaa !33
  %689 = icmp ne i8 %686, -7
  %690 = icmp ne i8 %688, 4
  %691 = or i1 %689, %690
  %692 = ptrtoint i8* %687 to i64
  br i1 %691, label %717, label %693

693:                                              ; preds = %684
  %694 = sub i64 %215, %692
  %695 = trunc i64 %694 to i32
  %696 = icmp ult i32 %695, 5
  br i1 %696, label %.loopexit42, label %697

697:                                              ; preds = %693
  %698 = getelementptr inbounds i8, i8* %227, i64 4
  store i8* %698, i8** %14, align 8, !tbaa !27
  %699 = load i8, i8* %687, align 1, !tbaa !33
  %700 = zext i8 %699 to i32
  %701 = getelementptr inbounds i8, i8* %227, i64 7
  store i8* %701, i8** %14, align 8, !tbaa !27
  %702 = and i32 %700, 1
  %703 = icmp eq i32 %702, 0
  br i1 %703, label %708, label %704

704:                                              ; preds = %697
  %705 = getelementptr inbounds i8, i8* %227, i64 6
  %706 = load i8, i8* %705, align 1, !tbaa !33
  %707 = zext i8 %706 to i32
  br label %708

708:                                              ; preds = %704, %697
  %709 = phi i32 [ %707, %704 ], [ -1, %697 ]
  store i32 %709, i32* %221, align 8, !tbaa !87
  %710 = lshr i32 %700, 2
  %711 = and i32 %710, 7
  %712 = icmp ugt i32 %711, 3
  %713 = select i1 %712, i32 0, i32 %711
  store i32 %713, i32* %222, align 8, !tbaa !110
  %714 = getelementptr inbounds i8, i8* %227, i64 8
  store i8* %714, i8** %14, align 8, !tbaa !27
  %715 = load i8, i8* %701, align 1, !tbaa !33
  %716 = ptrtoint i8* %714 to i64
  br label %717

717:                                              ; preds = %708, %684
  %718 = phi i64 [ %692, %684 ], [ %716, %708 ]
  %719 = phi i8* [ %687, %684 ], [ %714, %708 ]
  %720 = phi i8 [ %688, %684 ], [ %715, %708 ]
  %721 = icmp eq i8 %720, 0
  br i1 %721, label %738, label %.preheader41

.preheader41:                                     ; preds = %717, %729
  %722 = phi i8* [ %732, %729 ], [ %719, %717 ]
  %723 = phi i64 [ %735, %729 ], [ %718, %717 ]
  %724 = phi i8 [ %733, %729 ], [ %720, %717 ]
  %725 = zext i8 %724 to i32
  %726 = sub i64 %215, %723
  %727 = trunc i64 %726 to i32
  %728 = icmp ult i32 %725, %727
  br i1 %728, label %729, label %.loopexit42

729:                                              ; preds = %.preheader41
  %730 = zext i8 %724 to i64
  %731 = getelementptr inbounds i8, i8* %722, i64 %730
  %732 = getelementptr inbounds i8, i8* %731, i64 1
  store i8* %732, i8** %14, align 8, !tbaa !27
  %733 = load i8, i8* %731, align 1, !tbaa !33
  %734 = icmp eq i8 %733, 0
  %735 = ptrtoint i8* %732 to i64
  br i1 %734, label %.loopexit43, label %.preheader41

736:                                              ; preds = %228
  store i32 0, i32* %2, align 4, !tbaa !28
  br label %748

.loopexit43:                                      ; preds = %729
  %737 = ptrtoint i8* %732 to i64
  br label %738

738:                                              ; preds = %.loopexit43, %717
  %739 = phi i64 [ %718, %717 ], [ %737, %.loopexit43 ]
  %740 = sub i64 %215, %739
  %741 = trunc i64 %740 to i32
  %742 = icmp eq i32 %741, 0
  br i1 %742, label %.loopexit42, label %223

.loopexit:                                        ; preds = %673, %.preheader24, %583, %.preheader22, %606, %.preheader20, %593, %.preheader, %550
  %743 = load i8*, i8** %539, align 8, !tbaa !112
  tail call fastcc void @ff_lzw_decode_tail(i8* %743) #18
  store i32 -1, i32* %221, align 8, !tbaa !87
  store i32 0, i32* %222, align 8, !tbaa !110
  %744 = load i32, i32* %2, align 4, !tbaa !28
  %745 = icmp eq i32 %744, 0
  br i1 %745, label %748, label %746

746:                                              ; preds = %.loopexit
  %747 = bitcast %struct.AVFrame.123* %21 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* nonnull align 8 %747, i64 520, i1 false), !tbaa.struct !113
  br label %748

748:                                              ; preds = %746, %.loopexit, %736
  %749 = load i32, i32* %12, align 8, !tbaa !17
  br label %.loopexit42

.loopexit42:                                      ; preds = %738, %693, %679, %228, %223, %.preheader41, %748, %546, %.loopexit27, %479, %366, %.loopexit37, %310, %259, %231, %211, %205, %198, %189, %171, %169
  %750 = phi i32 [ %187, %189 ], [ %749, %748 ], [ %203, %205 ], [ -1094995529, %198 ], [ %175, %171 ], [ %170, %169 ], [ -541478725, %211 ], [ %544, %546 ], [ -1094995529, %310 ], [ -1094995529, %231 ], [ -1094995529, %259 ], [ -1094995529, %366 ], [ -1094995529, %.loopexit37 ], [ -12, %479 ], [ -1094995529, %.loopexit27 ], [ -1094995529, %.preheader41 ], [ -1094995529, %693 ], [ -1094995529, %679 ], [ -1094995529, %223 ], [ -1094995529, %228 ], [ -541478725, %738 ]
  ret i32 %750
}

; Function Attrs: nounwind uwtable
define internal i32 @gif_decode_close(%struct.AVCodecContext.129*) #5 {
  %2 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 9
  %3 = bitcast i8** %2 to %struct.GifState**
  %4 = load %struct.GifState*, %struct.GifState** %3, align 8, !tbaa !50
  %5 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 22
  tail call fastcc void @ff_lzw_decode_close(i8** nonnull %5) #18
  %6 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 1
  %7 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %6, i64 0, i32 0, i64 0
  %8 = load i8*, i8** %7, align 8, !tbaa !27
  %9 = icmp eq i8* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 113
  %12 = load void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)** %11, align 8, !tbaa !58
  tail call void %12(%struct.AVCodecContext.129* nonnull %0, %struct.AVFrame.123* nonnull %6) #18
  br label %13

13:                                               ; preds = %10, %1
  %14 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 10
  %15 = bitcast i8** %14 to i8*
  tail call fastcc void @av_freep(i8* nonnull %15) #18
  %16 = getelementptr inbounds %struct.GifState, %struct.GifState* %4, i64 0, i32 18
  %17 = bitcast i32** %16 to i8*
  tail call fastcc void @av_freep(i8* nonnull %17) #18
  ret i32 0
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #14

; Function Attrs: nofree nounwind readonly
declare dso_local i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @ff_lzw_decode_tail(i8* nocapture) unnamed_addr #9 {
  %2 = getelementptr inbounds i8, i8* %0, i64 24
  %3 = bitcast i8* %2 to i32*
  %4 = load i32, i32* %3, align 8, !tbaa !114
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %32

6:                                                ; preds = %1
  %7 = getelementptr inbounds i8, i8* %0, i64 16464
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8, !tbaa !116
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %.loopexit

11:                                               ; preds = %6
  %12 = getelementptr inbounds i8, i8* %0, i64 8
  %13 = bitcast i8* %12 to i8**
  %14 = bitcast i8* %0 to i8**
  %15 = load i8*, i8** %13, align 8, !tbaa !117
  %16 = load i8*, i8** %14, align 8, !tbaa !118
  %17 = ptrtoint i8* %15 to i64
  br label %18

18:                                               ; preds = %26, %11
  %19 = phi i8* [ %16, %11 ], [ %28, %26 ]
  %20 = phi i32 [ %9, %11 ], [ %30, %26 ]
  %21 = sext i32 %20 to i64
  %22 = ptrtoint i8* %19 to i64
  %23 = sub i64 %17, %22
  %24 = icmp sgt i64 %23, %21
  br i1 %24, label %26, label %25

25:                                               ; preds = %18
  store i8* %15, i8** %14, align 8, !tbaa !118
  br label %.loopexit

26:                                               ; preds = %18
  %27 = getelementptr inbounds i8, i8* %19, i64 %21
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %28, i8** %14, align 8, !tbaa !118
  %29 = load i8, i8* %27, align 1, !tbaa !33
  %30 = zext i8 %29 to i32
  store i32 %30, i32* %8, align 8, !tbaa !116
  %31 = icmp eq i8 %29, 0
  br i1 %31, label %.loopexit, label %18

32:                                               ; preds = %1
  %33 = getelementptr inbounds i8, i8* %0, i64 8
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 8, !tbaa !117
  %36 = bitcast i8* %0 to i64*
  store i64 %35, i64* %36, align 8, !tbaa !118
  br label %.loopexit

.loopexit:                                        ; preds = %26, %32, %25, %6
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_lzw_decode_open(i8** nocapture) unnamed_addr #5 {
  %2 = tail call fastcc noalias i8* @av_mallocz(i64 16472) #18
  store i8* %2, i8** %0, align 8, !tbaa !27
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_lzw_decode_close(i8** nocapture) unnamed_addr #5 {
  %2 = bitcast i8** %0 to i8*
  tail call fastcc void @av_freep(i8* %2) #18
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define internal fastcc i32 @ff_lzw_decode_init(i8*, i32, i8*, i32) unnamed_addr #7 {
  %5 = add i32 %1, -1
  %6 = icmp ugt i32 %5, 10
  br i1 %6, label %55, label %7

7:                                                ; preds = %4
  %8 = bitcast i8* %0 to i8**
  store i8* %2, i8** %8, align 8, !tbaa !118
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds i8, i8* %2, i64 %9
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to i8**
  store i8* %10, i8** %12, align 8, !tbaa !117
  %13 = getelementptr inbounds i8, i8* %0, i64 20
  %14 = bitcast i8* %13 to i32*
  store i32 0, i32* %14, align 4, !tbaa !119
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = bitcast i8* %15 to i32*
  store i32 0, i32* %16, align 8, !tbaa !120
  %17 = getelementptr inbounds i8, i8* %0, i64 16464
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 8, !tbaa !116
  %19 = getelementptr inbounds i8, i8* %0, i64 36
  %20 = bitcast i8* %19 to i32*
  store i32 %1, i32* %20, align 4, !tbaa !121
  %21 = add nuw nsw i32 %1, 1
  %22 = getelementptr inbounds i8, i8* %0, i64 28
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 4, !tbaa !122
  %24 = sext i32 %21 to i64
  %25 = getelementptr inbounds [17 x i16], [17 x i16]* @mask, i64 0, i64 %24
  %26 = load i16, i16* %25, align 2, !tbaa !123
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds i8, i8* %0, i64 32
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 8, !tbaa !125
  %30 = shl i32 1, %21
  %31 = getelementptr inbounds i8, i8* %0, i64 52
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 4, !tbaa !126
  %33 = shl i32 1, %1
  %34 = getelementptr inbounds i8, i8* %0, i64 40
  %35 = bitcast i8* %34 to i32*
  store i32 %33, i32* %35, align 8, !tbaa !127
  %36 = add nuw nsw i32 %33, 1
  %37 = getelementptr inbounds i8, i8* %0, i64 44
  %38 = bitcast i8* %37 to i32*
  store i32 %36, i32* %38, align 4, !tbaa !128
  %39 = add nuw nsw i32 %33, 2
  %40 = getelementptr inbounds i8, i8* %0, i64 48
  %41 = bitcast i8* %40 to i32*
  store i32 %39, i32* %41, align 8, !tbaa !129
  %42 = getelementptr inbounds i8, i8* %0, i64 60
  %43 = bitcast i8* %42 to i32*
  store i32 %39, i32* %43, align 4, !tbaa !130
  %44 = getelementptr inbounds i8, i8* %0, i64 64
  %45 = bitcast i8* %44 to i32*
  store i32 -1, i32* %45, align 8, !tbaa !131
  %46 = getelementptr inbounds i8, i8* %0, i64 68
  %47 = bitcast i8* %46 to i32*
  store i32 -1, i32* %47, align 4, !tbaa !132
  %48 = getelementptr inbounds i8, i8* %0, i64 80
  %49 = getelementptr inbounds i8, i8* %0, i64 72
  %50 = bitcast i8* %49 to i8**
  store i8* %48, i8** %50, align 8, !tbaa !133
  %51 = getelementptr inbounds i8, i8* %0, i64 24
  %52 = bitcast i8* %51 to i32*
  store i32 0, i32* %52, align 8, !tbaa !114
  %53 = getelementptr inbounds i8, i8* %0, i64 56
  %54 = bitcast i8* %53 to i32*
  store i32 0, i32* %54, align 8, !tbaa !134
  br label %55

55:                                               ; preds = %7, %4
  %56 = phi i32 [ 0, %7 ], [ -1, %4 ]
  ret i32 %56
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_lzw_decode(i8*, i8* nocapture, i32) unnamed_addr #5 {
  %4 = getelementptr inbounds i8, i8* %0, i64 44
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 4, !tbaa !128
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %233, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds i8, i8* %0, i64 72
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8, !tbaa !133
  %12 = getelementptr inbounds i8, i8* %0, i64 68
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 4, !tbaa !132
  %15 = getelementptr inbounds i8, i8* %0, i64 64
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 8, !tbaa !131
  %18 = getelementptr inbounds i8, i8* %0, i64 80
  %19 = getelementptr inbounds i8, i8* %0, i64 8
  %20 = bitcast i8* %19 to i8**
  %21 = bitcast i8* %0 to i8**
  %22 = getelementptr inbounds i8, i8* %0, i64 24
  %23 = bitcast i8* %22 to i32*
  %24 = getelementptr inbounds i8, i8* %0, i64 16
  %25 = bitcast i8* %24 to i32*
  %26 = getelementptr inbounds i8, i8* %0, i64 28
  %27 = bitcast i8* %26 to i32*
  %28 = getelementptr inbounds i8, i8* %0, i64 20
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds i8, i8* %0, i64 16464
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8, i8* %0, i64 32
  %33 = bitcast i8* %32 to i32*
  %34 = getelementptr inbounds i8, i8* %0, i64 40
  %35 = bitcast i8* %34 to i32*
  %36 = getelementptr inbounds i8, i8* %0, i64 60
  %37 = bitcast i8* %36 to i32*
  %38 = getelementptr inbounds i8, i8* %0, i64 48
  %39 = bitcast i8* %38 to i32*
  %40 = getelementptr inbounds i8, i8* %0, i64 4176
  %41 = getelementptr inbounds i8, i8* %0, i64 8272
  %42 = bitcast i8* %41 to [4096 x i16]*
  %43 = getelementptr inbounds i8, i8* %0, i64 52
  %44 = bitcast i8* %43 to i32*
  %45 = getelementptr inbounds i8, i8* %0, i64 56
  %46 = bitcast i8* %45 to i32*
  %47 = getelementptr inbounds i8, i8* %0, i64 36
  %48 = bitcast i8* %47 to i32*
  br label %49

49:                                               ; preds = %.backedge, %8
  %50 = phi i32 [ %2, %8 ], [ %56, %.backedge ]
  %51 = phi i8* [ %1, %8 ], [ %57, %.backedge ]
  %52 = phi i32 [ %14, %8 ], [ %.be, %.backedge ]
  %53 = phi i32 [ %17, %8 ], [ %.be107, %.backedge ]
  %54 = phi i8* [ %11, %8 ], [ %.be108, %.backedge ]
  br label %55

55:                                               ; preds = %60, %49
  %56 = phi i32 [ %50, %49 ], [ %64, %60 ]
  %57 = phi i8* [ %51, %49 ], [ %63, %60 ]
  %58 = phi i8* [ %54, %49 ], [ %61, %60 ]
  %59 = icmp ugt i8* %58, %18
  br i1 %59, label %60, label %66

60:                                               ; preds = %55
  %61 = getelementptr inbounds i8, i8* %58, i64 -1
  %62 = load i8, i8* %61, align 1, !tbaa !33
  %63 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 %62, i8* %57, align 1, !tbaa !33
  %64 = add nsw i32 %56, -1
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %.loopexit22, label %55

66:                                               ; preds = %55
  %67 = load i8*, i8** %20, align 8, !tbaa !117
  %68 = load i8*, i8** %21, align 8, !tbaa !118
  %69 = icmp ult i8* %67, %68
  br i1 %69, label %70, label %71

70:                                               ; preds = %66
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.784, i64 0, i64 0)) #18
  br label %.loopexit22

71:                                               ; preds = %66
  %72 = load i32, i32* %23, align 8, !tbaa !114
  %73 = icmp eq i32 %72, 0
  %74 = load i32, i32* %25, align 8, !tbaa !120
  %75 = load i32, i32* %27, align 4, !tbaa !122
  %76 = icmp slt i32 %74, %75
  br i1 %73, label %98, label %77

77:                                               ; preds = %71
  %78 = load i32, i32* %29, align 4, !tbaa !119
  br i1 %76, label %79, label %.loopexit21

79:                                               ; preds = %77
  %80 = xor i32 %74, -1
  %81 = add i32 %75, %80
  %82 = and i32 %81, 8
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %91

84:                                               ; preds = %79
  %85 = shl i32 %78, 8
  %86 = getelementptr inbounds i8, i8* %68, i64 1
  store i8* %86, i8** %21, align 8, !tbaa !118
  %87 = load i8, i8* %68, align 1, !tbaa !33
  %88 = zext i8 %87 to i32
  %89 = or i32 %85, %88
  store i32 %89, i32* %29, align 4, !tbaa !119
  %90 = add nsw i32 %74, 8
  store i32 %90, i32* %25, align 8, !tbaa !120
  br label %91

91:                                               ; preds = %84, %79
  %92 = phi i8* [ %86, %84 ], [ %68, %79 ]
  %93 = phi i32 [ %89, %84 ], [ %78, %79 ]
  %94 = phi i32 [ %90, %84 ], [ %74, %79 ]
  %95 = phi i32 [ %89, %84 ], [ undef, %79 ]
  %96 = phi i32 [ %90, %84 ], [ undef, %79 ]
  %97 = icmp ult i32 %81, 8
  br i1 %97, label %.loopexit21, label %.preheader20

98:                                               ; preds = %71
  br i1 %76, label %101, label %99

99:                                               ; preds = %98
  %100 = load i32, i32* %29, align 4, !tbaa !119
  br label %.loopexit19

101:                                              ; preds = %98
  %102 = load i32, i32* %31, align 8, !tbaa !116
  br label %103

103:                                              ; preds = %112, %101
  %104 = phi i8* [ %68, %101 ], [ %115, %112 ]
  %105 = phi i32 [ %102, %101 ], [ %122, %112 ]
  %106 = phi i32 [ %74, %101 ], [ %121, %112 ]
  %107 = icmp eq i32 %105, 0
  br i1 %107, label %108, label %112

108:                                              ; preds = %103
  %109 = getelementptr inbounds i8, i8* %104, i64 1
  store i8* %109, i8** %21, align 8, !tbaa !118
  %110 = load i8, i8* %104, align 1, !tbaa !33
  %111 = zext i8 %110 to i32
  store i32 %111, i32* %31, align 8, !tbaa !116
  br label %112

112:                                              ; preds = %108, %103
  %113 = phi i32 [ %111, %108 ], [ %105, %103 ]
  %114 = phi i8* [ %109, %108 ], [ %104, %103 ]
  %115 = getelementptr inbounds i8, i8* %114, i64 1
  store i8* %115, i8** %21, align 8, !tbaa !118
  %116 = load i8, i8* %114, align 1, !tbaa !33
  %117 = zext i8 %116 to i32
  %118 = shl i32 %117, %106
  %119 = load i32, i32* %29, align 4, !tbaa !119
  %120 = or i32 %118, %119
  store i32 %120, i32* %29, align 4, !tbaa !119
  %121 = add nsw i32 %106, 8
  store i32 %121, i32* %25, align 8, !tbaa !120
  %122 = add nsw i32 %113, -1
  store i32 %122, i32* %31, align 8, !tbaa !116
  %123 = icmp slt i32 %121, %75
  br i1 %123, label %103, label %.loopexit19

.loopexit19:                                      ; preds = %112, %99
  %124 = phi i32 [ %74, %99 ], [ %121, %112 ]
  %125 = phi i32 [ %100, %99 ], [ %120, %112 ]
  %126 = lshr i32 %125, %75
  store i32 %126, i32* %29, align 4, !tbaa !119
  %127 = sub nsw i32 %124, %75
  br label %148

.preheader20:                                     ; preds = %91, %.preheader20
  %128 = phi i8* [ %138, %.preheader20 ], [ %92, %91 ]
  %129 = phi i32 [ %141, %.preheader20 ], [ %93, %91 ]
  %130 = phi i32 [ %142, %.preheader20 ], [ %94, %91 ]
  %131 = shl i32 %129, 8
  %132 = getelementptr inbounds i8, i8* %128, i64 1
  store i8* %132, i8** %21, align 8, !tbaa !118
  %133 = load i8, i8* %128, align 1, !tbaa !33
  %134 = zext i8 %133 to i32
  %135 = or i32 %131, %134
  store i32 %135, i32* %29, align 4, !tbaa !119
  %136 = add nsw i32 %130, 8
  store i32 %136, i32* %25, align 8, !tbaa !120
  %137 = shl i32 %135, 8
  %138 = getelementptr inbounds i8, i8* %128, i64 2
  store i8* %138, i8** %21, align 8, !tbaa !118
  %139 = load i8, i8* %132, align 1, !tbaa !33
  %140 = zext i8 %139 to i32
  %141 = or i32 %137, %140
  store i32 %141, i32* %29, align 4, !tbaa !119
  %142 = add nsw i32 %130, 16
  store i32 %142, i32* %25, align 8, !tbaa !120
  %143 = icmp slt i32 %142, %75
  br i1 %143, label %.preheader20, label %.loopexit21

.loopexit21:                                      ; preds = %.preheader20, %91, %77
  %144 = phi i32 [ %74, %77 ], [ %96, %91 ], [ %142, %.preheader20 ]
  %145 = phi i32 [ %78, %77 ], [ %95, %91 ], [ %141, %.preheader20 ]
  %146 = sub nsw i32 %144, %75
  %147 = lshr i32 %145, %146
  br label %148

148:                                              ; preds = %.loopexit21, %.loopexit19
  %149 = phi i32 [ %146, %.loopexit21 ], [ %127, %.loopexit19 ]
  %150 = phi i32 [ %147, %.loopexit21 ], [ %125, %.loopexit19 ]
  store i32 %149, i32* %25, align 8, !tbaa !120
  %151 = load i32, i32* %33, align 8, !tbaa !125
  %152 = and i32 %151, %150
  %153 = load i32, i32* %5, align 4, !tbaa !128
  %154 = icmp eq i32 %152, %153
  br i1 %154, label %229, label %155

155:                                              ; preds = %148
  %156 = load i32, i32* %35, align 8, !tbaa !127
  %157 = icmp eq i32 %152, %156
  br i1 %157, label %158, label %167

158:                                              ; preds = %155
  %159 = load i32, i32* %48, align 4, !tbaa !121
  %160 = add nsw i32 %159, 1
  store i32 %160, i32* %27, align 4, !tbaa !122
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [17 x i16], [17 x i16]* @mask, i64 0, i64 %161
  %163 = load i16, i16* %162, align 2, !tbaa !123
  %164 = zext i16 %163 to i32
  store i32 %164, i32* %33, align 8, !tbaa !125
  %165 = load i32, i32* %39, align 8, !tbaa !129
  store i32 %165, i32* %37, align 4, !tbaa !130
  %166 = shl i32 1, %160
  store i32 %166, i32* %44, align 4, !tbaa !126
  br label %.backedge

167:                                              ; preds = %155
  %168 = load i32, i32* %37, align 4, !tbaa !130
  %169 = icmp eq i32 %152, %168
  %170 = icmp sgt i32 %53, -1
  %171 = and i1 %170, %169
  br i1 %171, label %172, label %175

172:                                              ; preds = %167
  %173 = trunc i32 %53 to i8
  %174 = getelementptr inbounds i8, i8* %58, i64 1
  store i8 %173, i8* %58, align 1, !tbaa !33
  br label %177

175:                                              ; preds = %167
  %176 = icmp slt i32 %152, %168
  br i1 %176, label %177, label %229

177:                                              ; preds = %175, %172
  %178 = phi i32 [ %52, %172 ], [ %152, %175 ]
  %179 = phi i8* [ %174, %172 ], [ %58, %175 ]
  %180 = load i32, i32* %39, align 8, !tbaa !129
  %181 = icmp slt i32 %178, %180
  br i1 %181, label %194, label %.preheader

.preheader:                                       ; preds = %177, %.preheader
  %182 = phi i8* [ %187, %.preheader ], [ %179, %177 ]
  %183 = phi i32 [ %190, %.preheader ], [ %178, %177 ]
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %40, i64 %184
  %186 = load i8, i8* %185, align 1, !tbaa !33
  %187 = getelementptr inbounds i8, i8* %182, i64 1
  store i8 %186, i8* %182, align 1, !tbaa !33
  %188 = getelementptr inbounds [4096 x i16], [4096 x i16]* %42, i64 0, i64 %184
  %189 = load i16, i16* %188, align 2, !tbaa !123
  %190 = zext i16 %189 to i32
  %191 = load i32, i32* %39, align 8, !tbaa !129
  %192 = icmp sgt i32 %191, %190
  br i1 %192, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.preheader
  %193 = zext i16 %189 to i32
  br label %194

194:                                              ; preds = %.loopexit, %177
  %195 = phi i32 [ %178, %177 ], [ %193, %.loopexit ]
  %196 = phi i8* [ %179, %177 ], [ %187, %.loopexit ]
  %197 = trunc i32 %195 to i8
  %198 = getelementptr inbounds i8, i8* %196, i64 1
  store i8 %197, i8* %196, align 1, !tbaa !33
  %199 = load i32, i32* %37, align 4, !tbaa !130
  %200 = load i32, i32* %44, align 4, !tbaa !126
  %201 = icmp slt i32 %199, %200
  %202 = icmp sgt i32 %52, -1
  %203 = and i1 %202, %201
  br i1 %203, label %204, label %213

204:                                              ; preds = %194
  %205 = sext i32 %199 to i64
  %206 = getelementptr inbounds i8, i8* %40, i64 %205
  store i8 %197, i8* %206, align 1, !tbaa !33
  %207 = trunc i32 %52 to i16
  %208 = load i32, i32* %37, align 4, !tbaa !130
  %209 = add nsw i32 %208, 1
  store i32 %209, i32* %37, align 4, !tbaa !130
  %210 = sext i32 %208 to i64
  %211 = getelementptr inbounds [4096 x i16], [4096 x i16]* %42, i64 0, i64 %210
  store i16 %207, i16* %211, align 2, !tbaa !123
  %212 = load i32, i32* %44, align 4, !tbaa !126
  br label %213

213:                                              ; preds = %204, %194
  %214 = phi i32 [ %212, %204 ], [ %200, %194 ]
  %215 = phi i32 [ %209, %204 ], [ %199, %194 ]
  %216 = load i32, i32* %46, align 8, !tbaa !134
  %217 = sub nsw i32 %214, %216
  %218 = icmp slt i32 %215, %217
  br i1 %218, label %.backedge, label %219

219:                                              ; preds = %213
  %220 = load i32, i32* %27, align 4, !tbaa !122
  %221 = icmp slt i32 %220, 12
  br i1 %221, label %222, label %.backedge

222:                                              ; preds = %219
  %223 = shl i32 %214, 1
  store i32 %223, i32* %44, align 4, !tbaa !126
  %224 = add nsw i32 %220, 1
  store i32 %224, i32* %27, align 4, !tbaa !122
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds [17 x i16], [17 x i16]* @mask, i64 0, i64 %225
  %227 = load i16, i16* %226, align 2, !tbaa !123
  %228 = zext i16 %227 to i32
  store i32 %228, i32* %33, align 8, !tbaa !125
  br label %.backedge

.backedge:                                        ; preds = %222, %219, %213, %158
  %.be = phi i32 [ %152, %222 ], [ %152, %219 ], [ %152, %213 ], [ -1, %158 ]
  %.be107 = phi i32 [ %195, %222 ], [ %195, %219 ], [ %195, %213 ], [ -1, %158 ]
  %.be108 = phi i8* [ %198, %222 ], [ %198, %219 ], [ %198, %213 ], [ %58, %158 ]
  br label %49

229:                                              ; preds = %175, %148
  store i32 -1, i32* %5, align 4, !tbaa !128
  br label %.loopexit22

.loopexit22:                                      ; preds = %60, %229, %70
  %230 = phi i32 [ %56, %70 ], [ %56, %229 ], [ 0, %60 ]
  %231 = phi i8* [ %58, %70 ], [ %58, %229 ], [ %61, %60 ]
  store i8* %231, i8** %10, align 8, !tbaa !133
  store i32 %52, i32* %13, align 4, !tbaa !132
  store i32 %53, i32* %16, align 8, !tbaa !131
  %232 = sub nsw i32 %2, %230
  br label %233

233:                                              ; preds = %.loopexit22, %3
  %234 = phi i32 [ %232, %.loopexit22 ], [ 0, %3 ]
  ret i32 %234
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avcodec_get_context_defaults3(%struct.AVCodecContext*, %struct.AVCodec* readonly) unnamed_addr #5 {
  %3 = bitcast %struct.AVCodecContext* %0 to i8*
  %4 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 1
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 1048, i1 false)
  %6 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 0
  store %struct.AVClass* @av_codec_context_class, %struct.AVClass** %6, align 8, !tbaa !135
  %7 = icmp ne %struct.AVCodec* %1, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 2
  store i32 -1, i32* %9, align 4, !tbaa !136
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 8, !tbaa !137
  %13 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 2
  store i32 %12, i32* %13, align 4, !tbaa !136
  %14 = icmp ult i32 %12, 4
  br i1 %14, label %15, label %19

15:                                               ; preds = %10
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.avcodec_get_context_defaults3, i64 0, i64 %16
  %18 = load i32, i32* %17, align 4
  br label %19

19:                                               ; preds = %15, %10, %8
  %20 = phi i32 [ %18, %15 ], [ 0, %10 ], [ 0, %8 ]
  tail call fastcc void @av_opt_set_defaults2(i8* nonnull %3, i32 %20, i32 %20) #18
  %21 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 20, i32 0
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 20, i32 1
  store i32 1, i32* %22, align 4
  %23 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 112
  store i32 (%struct.AVCodecContext*, %struct.AVFrame*)* bitcast (i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)* @avcodec_default_get_buffer to i32 (%struct.AVCodecContext*, %struct.AVFrame*)*), i32 (%struct.AVCodecContext*, %struct.AVFrame*)** %23, align 8, !tbaa !138
  %24 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 113
  store void (%struct.AVCodecContext*, %struct.AVFrame*)* bitcast (void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)* @avcodec_default_release_buffer to void (%struct.AVCodecContext*, %struct.AVFrame*)*), void (%struct.AVCodecContext*, %struct.AVFrame*)** %24, align 8, !tbaa !58
  %25 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 31
  store i32 (%struct.AVCodecContext*, i32*)* bitcast (i32 (%struct.AVCodecContext.129*, i32*)* @avcodec_default_get_format to i32 (%struct.AVCodecContext*, i32*)*), i32 (%struct.AVCodecContext*, i32*)** %25, align 8, !tbaa !139
  %26 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 180
  store i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)* bitcast (i32 (%struct.AVCodecContext.129*, i32 (%struct.AVCodecContext.129*, i8*)*, i8*, i32*, i32, i32)* @avcodec_default_execute to i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*), i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)** %26, align 8, !tbaa !140
  %27 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 181
  store i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)* bitcast (i32 (%struct.AVCodecContext.129*, i32 (%struct.AVCodecContext.129*, i8*, i32, i32)*, i8*, i32*, i32)* @avcodec_default_execute2 to i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*), i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)** %27, align 8, !tbaa !141
  %28 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 51, i32 0
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 51, i32 1
  store i32 1, i32* %29, align 4
  %30 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 28
  store i32 -1, i32* %30, align 8, !tbaa !69
  %31 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 102
  store i32 -1, i32* %31, align 8, !tbaa !142
  %32 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 145
  store i64 -1, i64* %32, align 8, !tbaa !143
  %33 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 114
  store i32 (%struct.AVCodecContext*, %struct.AVFrame*)* bitcast (i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)* @avcodec_default_reget_buffer to i32 (%struct.AVCodecContext*, %struct.AVFrame*)*), i32 (%struct.AVCodecContext*, %struct.AVFrame*)** %33, align 8, !tbaa !100
  %34 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 165
  store i64 -9223372036854775808, i64* %34, align 8, !tbaa !144
  br i1 %7, label %35, label %.loopexit

35:                                               ; preds = %19
  %36 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %1, i64 0, i32 13
  %37 = load i32, i32* %36, align 8, !tbaa !53
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %55, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 9
  %41 = load i8*, i8** %40, align 8, !tbaa !50
  %42 = icmp eq i8* %41, null
  br i1 %42, label %43, label %47

43:                                               ; preds = %39
  %44 = sext i32 %37 to i64
  %45 = tail call fastcc noalias i8* @av_mallocz(i64 %44) #18
  store i8* %45, i8** %40, align 8, !tbaa !50
  %46 = icmp eq i8* %45, null
  br i1 %46, label %.loopexit, label %47

47:                                               ; preds = %43, %39
  %48 = phi i8* [ %45, %43 ], [ %41, %39 ]
  %49 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %1, i64 0, i32 11
  %50 = load %struct.AVClass*, %struct.AVClass** %49, align 8, !tbaa !145
  %51 = icmp eq %struct.AVClass* %50, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %47
  %53 = bitcast i8* %48 to %struct.AVClass**
  store %struct.AVClass* %50, %struct.AVClass** %53, align 8, !tbaa !27
  %54 = load i8*, i8** %40, align 8, !tbaa !50
  tail call fastcc void @av_opt_set_defaults(i8* %54) #18
  br label %55

55:                                               ; preds = %52, %47, %35
  %56 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %1, i64 0, i32 17
  %57 = load %struct.AVCodecDefault*, %struct.AVCodecDefault** %56, align 8, !tbaa !146
  %58 = icmp eq %struct.AVCodecDefault* %57, null
  br i1 %58, label %.loopexit, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %57, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8, !tbaa !147
  %62 = icmp eq i8* %61, null
  br i1 %62, label %.loopexit, label %.preheader

63:                                               ; preds = %.preheader
  %64 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %73, i64 0, i32 0
  %65 = load i8*, i8** %64, align 8, !tbaa !147
  %66 = icmp eq i8* %65, null
  br i1 %66, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %59, %63
  %67 = phi i8* [ %65, %63 ], [ %61, %59 ]
  %68 = phi %struct.AVCodecDefault* [ %73, %63 ], [ %57, %59 ]
  %69 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %68, i64 0, i32 1
  %70 = load i8*, i8** %69, align 8, !tbaa !149
  %71 = tail call fastcc i32 @av_opt_set(i8* %3, i8* nonnull %67, i8* %70) #18
  %72 = icmp sgt i32 %71, -1
  %73 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %68, i64 1
  br i1 %72, label %63, label %74

74:                                               ; preds = %.preheader
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.787, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.788, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.789, i64 0, i64 0), i32 143) #18
  tail call void @abort() #27
  unreachable

.loopexit:                                        ; preds = %63, %59, %55, %43, %19
  %75 = phi i32 [ -12, %43 ], [ 0, %19 ], [ 0, %55 ], [ 0, %59 ], [ 0, %63 ]
  ret i32 %75
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i8* @context_to_name(i8* readonly) #15 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to %struct.AVCodec**
  %6 = load %struct.AVCodec*, %struct.AVCodec** %5, align 8, !tbaa !40
  %7 = icmp eq %struct.AVCodec* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %6, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8, !tbaa !150
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %8, %3, %1
  br label %13

13:                                               ; preds = %12, %8
  %14 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.1313, i64 0, i64 0), %12 ], [ %10, %8 ]
  ret i8* %14
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i8* @codec_child_next(i8* nocapture readonly, i8* readnone) #15 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %18

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = bitcast i8* %5 to %struct.AVCodec**
  %7 = load %struct.AVCodec*, %struct.AVCodec** %6, align 8, !tbaa !40
  %8 = icmp eq %struct.AVCodec* %7, null
  br i1 %8, label %18, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %7, i64 0, i32 11
  %11 = load %struct.AVClass*, %struct.AVClass** %10, align 8, !tbaa !145
  %12 = icmp eq %struct.AVClass* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %0, i64 72
  %15 = bitcast i8* %14 to i8**
  %16 = load i8*, i8** %15, align 8, !tbaa !50
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %13, %9, %4, %2
  br label %19

19:                                               ; preds = %18, %13
  %20 = phi i8* [ null, %18 ], [ %16, %13 ]
  ret i8* %20
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal %struct.AVClass* @codec_child_class_next(%struct.AVClass* readnone) #15 {
  %2 = icmp eq %struct.AVClass* %0, null
  br i1 %2, label %.loopexit.preheader, label %.preheader

.preheader:                                       ; preds = %1, %6
  %3 = phi %struct.AVCodec.134* [ %4, %6 ], [ null, %1 ]
  %4 = tail call fastcc %struct.AVCodec.134* @av_codec_next(%struct.AVCodec.134* %3) #18
  %5 = icmp eq %struct.AVCodec.134* %4, null
  br i1 %5, label %.loopexit.preheader, label %6

6:                                                ; preds = %.preheader
  %7 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %4, i64 0, i32 11
  %8 = load %struct.AVClass*, %struct.AVClass** %7, align 8, !tbaa !145
  %9 = icmp eq %struct.AVClass* %8, %0
  br i1 %9, label %.loopexit.preheader, label %.preheader

.loopexit.preheader:                              ; preds = %6, %.preheader, %1
  %.ph = phi %struct.AVCodec.134* [ null, %1 ], [ %4, %6 ], [ null, %.preheader ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.preheader, %13
  %10 = phi %struct.AVCodec.134* [ %11, %13 ], [ %.ph, %.loopexit.preheader ]
  %11 = tail call fastcc %struct.AVCodec.134* @av_codec_next(%struct.AVCodec.134* %10) #18
  %12 = icmp eq %struct.AVCodec.134* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %.loopexit
  %14 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %11, i64 0, i32 11
  %15 = load %struct.AVClass*, %struct.AVClass** %14, align 8, !tbaa !145
  %16 = icmp eq %struct.AVClass* %15, null
  br i1 %16, label %.loopexit, label %17

17:                                               ; preds = %13, %.loopexit
  %18 = phi %struct.AVClass* [ %15, %13 ], [ null, %.loopexit ]
  ret %struct.AVClass* %18
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i32 @get_category(i8* nocapture readonly) #15 {
  %2 = getelementptr inbounds i8, i8* %0, i64 16
  %3 = bitcast i8* %2 to %struct.AVCodec**
  %4 = load %struct.AVCodec*, %struct.AVCodec** %3, align 8, !tbaa !40
  %5 = icmp eq %struct.AVCodec* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %4, i64 0, i32 22
  %8 = load i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)** %7, align 8, !tbaa !151
  %9 = icmp eq i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %6, %1
  br label %11

11:                                               ; preds = %10, %6
  %12 = phi i32 [ 5, %10 ], [ 6, %6 ]
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.AVCodecContext* @avcodec_alloc_context3(%struct.AVCodec* readonly) unnamed_addr #5 {
  %2 = tail call fastcc noalias i8* @av_malloc(i64 1056) #18
  %3 = bitcast i8* %2 to %struct.AVCodecContext*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = tail call fastcc i32 @avcodec_get_context_defaults3(%struct.AVCodecContext* nonnull %3, %struct.AVCodec* %0)
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  tail call fastcc void @av_free(i8* nonnull %2) #18
  br label %9

9:                                                ; preds = %8, %5, %1
  %10 = phi %struct.AVCodecContext* [ null, %8 ], [ null, %1 ], [ %3, %5 ]
  ret %struct.AVCodecContext* %10
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc noalias %struct.AVCodecParserContext* @av_parser_init(i32) unnamed_addr #11 {
  ret %struct.AVCodecParserContext* null
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @ff_fetch_timestamp(%struct.AVCodecParserContext* nocapture) unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 7
  store i64 -9223372036854775808, i64* %2, align 8, !tbaa !152
  %3 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 8
  store i64 -9223372036854775808, i64* %3, align 8, !tbaa !154
  %4 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 25
  store i64 -1, i64* %4, align 8, !tbaa !155
  %5 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 17
  store i64 0, i64* %5, align 8, !tbaa !156
  %6 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 3
  %7 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 4
  %9 = load i64, i64* %6, align 8, !tbaa !157
  %10 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 13, i64 0
  %11 = load i64, i64* %10, align 8, !tbaa !26
  %12 = icmp slt i64 %9, %11
  br i1 %12, label %35, label %13

13:                                               ; preds = %1
  %14 = load i64, i64* %7, align 8, !tbaa !158
  %15 = icmp slt i64 %14, %11
  br i1 %15, label %21, label %16

16:                                               ; preds = %13
  %17 = icmp eq i64 %14, 0
  br i1 %17, label %18, label %35

18:                                               ; preds = %16
  %19 = load i64, i64* %8, align 8, !tbaa !159
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %35

21:                                               ; preds = %18, %13
  %22 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 18, i64 0
  %23 = load i64, i64* %22, align 8, !tbaa !26
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %35, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 15, i64 0
  %27 = load i64, i64* %26, align 8, !tbaa !26
  store i64 %27, i64* %3, align 8, !tbaa !154
  %28 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 14, i64 0
  %29 = load i64, i64* %28, align 8, !tbaa !26
  store i64 %29, i64* %2, align 8, !tbaa !152
  %30 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 24, i64 0
  %31 = load i64, i64* %30, align 8, !tbaa !26
  store i64 %31, i64* %4, align 8, !tbaa !155
  %32 = load i64, i64* %8, align 8, !tbaa !159
  %33 = sub nsw i64 %32, %11
  store i64 %33, i64* %5, align 8, !tbaa !156
  %34 = icmp slt i64 %9, %23
  br i1 %34, label %39, label %35

35:                                               ; preds = %25, %21, %18, %16, %1
  %36 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 13, i64 1
  %37 = load i64, i64* %36, align 8, !tbaa !26
  %38 = icmp slt i64 %9, %37
  br i1 %38, label %62, label %40

39:                                               ; preds = %104, %100, %97, %95, %88, %78, %52, %25
  ret void

40:                                               ; preds = %35
  %41 = load i64, i64* %7, align 8, !tbaa !158
  %42 = icmp slt i64 %41, %37
  br i1 %42, label %48, label %43

43:                                               ; preds = %40
  %44 = icmp eq i64 %41, 0
  br i1 %44, label %45, label %62

45:                                               ; preds = %43
  %46 = load i64, i64* %8, align 8, !tbaa !159
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %62

48:                                               ; preds = %45, %40
  %49 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 18, i64 1
  %50 = load i64, i64* %49, align 8, !tbaa !26
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %62, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 15, i64 1
  %54 = load i64, i64* %53, align 8, !tbaa !26
  store i64 %54, i64* %3, align 8, !tbaa !154
  %55 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 14, i64 1
  %56 = load i64, i64* %55, align 8, !tbaa !26
  store i64 %56, i64* %2, align 8, !tbaa !152
  %57 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 24, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !26
  store i64 %58, i64* %4, align 8, !tbaa !155
  %59 = load i64, i64* %8, align 8, !tbaa !159
  %60 = sub nsw i64 %59, %37
  store i64 %60, i64* %5, align 8, !tbaa !156
  %61 = icmp slt i64 %9, %50
  br i1 %61, label %39, label %62

62:                                               ; preds = %52, %48, %45, %43, %35
  %63 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 13, i64 2
  %64 = load i64, i64* %63, align 8, !tbaa !26
  %65 = icmp slt i64 %9, %64
  br i1 %65, label %88, label %66

66:                                               ; preds = %62
  %67 = load i64, i64* %7, align 8, !tbaa !158
  %68 = icmp slt i64 %67, %64
  br i1 %68, label %74, label %69

69:                                               ; preds = %66
  %70 = icmp eq i64 %67, 0
  br i1 %70, label %71, label %88

71:                                               ; preds = %69
  %72 = load i64, i64* %8, align 8, !tbaa !159
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %88

74:                                               ; preds = %71, %66
  %75 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 18, i64 2
  %76 = load i64, i64* %75, align 8, !tbaa !26
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %88, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 15, i64 2
  %80 = load i64, i64* %79, align 8, !tbaa !26
  store i64 %80, i64* %3, align 8, !tbaa !154
  %81 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 14, i64 2
  %82 = load i64, i64* %81, align 8, !tbaa !26
  store i64 %82, i64* %2, align 8, !tbaa !152
  %83 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 24, i64 2
  %84 = load i64, i64* %83, align 8, !tbaa !26
  store i64 %84, i64* %4, align 8, !tbaa !155
  %85 = load i64, i64* %8, align 8, !tbaa !159
  %86 = sub nsw i64 %85, %64
  store i64 %86, i64* %5, align 8, !tbaa !156
  %87 = icmp slt i64 %9, %76
  br i1 %87, label %39, label %88

88:                                               ; preds = %78, %74, %71, %69, %62
  %89 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 13, i64 3
  %90 = load i64, i64* %89, align 8, !tbaa !26
  %91 = icmp slt i64 %9, %90
  br i1 %91, label %39, label %92

92:                                               ; preds = %88
  %93 = load i64, i64* %7, align 8, !tbaa !158
  %94 = icmp slt i64 %93, %90
  br i1 %94, label %100, label %95

95:                                               ; preds = %92
  %96 = icmp eq i64 %93, 0
  br i1 %96, label %97, label %39

97:                                               ; preds = %95
  %98 = load i64, i64* %8, align 8, !tbaa !159
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %39

100:                                              ; preds = %97, %92
  %101 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 18, i64 3
  %102 = load i64, i64* %101, align 8, !tbaa !26
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %39, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 15, i64 3
  %106 = load i64, i64* %105, align 8, !tbaa !26
  store i64 %106, i64* %3, align 8, !tbaa !154
  %107 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 14, i64 3
  %108 = load i64, i64* %107, align 8, !tbaa !26
  store i64 %108, i64* %2, align 8, !tbaa !152
  %109 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 24, i64 3
  %110 = load i64, i64* %109, align 8, !tbaa !26
  store i64 %110, i64* %4, align 8, !tbaa !155
  %111 = load i64, i64* %8, align 8, !tbaa !159
  %112 = sub nsw i64 %111, %90
  store i64 %112, i64* %5, align 8, !tbaa !156
  br label %39
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_parser_parse2(%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32, i64, i64, i64) unnamed_addr #5 {
  %10 = alloca [16 x i8], align 16
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #18
  %12 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 16
  %13 = load i32, i32* %12, align 8, !tbaa !160
  %14 = and i32 %13, 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 3
  store i64 %8, i64* %17, align 8, !tbaa !157
  %18 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 4
  store i64 %8, i64* %18, align 8, !tbaa !159
  %19 = or i32 %13, 4
  store i32 %19, i32* %12, align 8, !tbaa !160
  br label %20

20:                                               ; preds = %16, %9
  %21 = icmp eq i32 %5, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 16, i1 false)
  br label %43

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 3
  %25 = load i64, i64* %24, align 8, !tbaa !157
  %26 = sext i32 %5 to i64
  %27 = add nsw i64 %25, %26
  %28 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 12
  %29 = load i32, i32* %28, align 4, !tbaa !161
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 18, i64 %30
  %32 = load i64, i64* %31, align 8, !tbaa !26
  %33 = icmp eq i64 %27, %32
  br i1 %33, label %43, label %34

34:                                               ; preds = %23
  %35 = add nsw i32 %29, 1
  %36 = and i32 %35, 3
  store i32 %36, i32* %28, align 4, !tbaa !161
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 13, i64 %37
  store i64 %25, i64* %38, align 8, !tbaa !26
  %39 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 18, i64 %37
  store i64 %27, i64* %39, align 8, !tbaa !26
  %40 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 14, i64 %37
  store i64 %6, i64* %40, align 8, !tbaa !26
  %41 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 15, i64 %37
  store i64 %7, i64* %41, align 8, !tbaa !26
  %42 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 24, i64 %37
  store i64 %8, i64* %42, align 8, !tbaa !26
  br label %43

43:                                               ; preds = %34, %23, %22
  %44 = phi i8* [ %11, %22 ], [ %4, %34 ], [ %4, %23 ]
  %45 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 11
  %46 = load i32, i32* %45, align 8, !tbaa !162
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %58, label %48

48:                                               ; preds = %43
  store i32 0, i32* %45, align 8, !tbaa !162
  %49 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 7
  %50 = load i64, i64* %49, align 8, !tbaa !152
  %51 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 9
  store i64 %50, i64* %51, align 8, !tbaa !163
  %52 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 8
  %53 = load i64, i64* %52, align 8, !tbaa !154
  %54 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 10
  store i64 %53, i64* %54, align 8, !tbaa !164
  %55 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 25
  %56 = load i64, i64* %55, align 8, !tbaa !155
  %57 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 26
  store i64 %56, i64* %57, align 8, !tbaa !165
  tail call fastcc void @ff_fetch_timestamp(%struct.AVCodecParserContext* nonnull %0)
  br label %58

58:                                               ; preds = %48, %43
  %59 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 1
  %60 = load %struct.AVCodecParser*, %struct.AVCodecParser** %59, align 8, !tbaa !166
  %61 = getelementptr inbounds %struct.AVCodecParser, %struct.AVCodecParser* %60, i64 0, i32 3
  %62 = load i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)** %61, align 8, !tbaa !167
  %63 = call i32 %62(%struct.AVCodecParserContext* nonnull %0, %struct.AVCodecContext* %1, i8** %2, i32* %3, i8* %44, i32 %5) #18
  %64 = load i32, i32* %3, align 4, !tbaa !28
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %58
  %67 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 3
  %68 = load i64, i64* %67, align 8, !tbaa !157
  br label %77

69:                                               ; preds = %58
  %70 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 4
  %71 = load i64, i64* %70, align 8, !tbaa !159
  %72 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 2
  store i64 %71, i64* %72, align 8, !tbaa !158
  %73 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 3
  %74 = load i64, i64* %73, align 8, !tbaa !157
  %75 = sext i32 %63 to i64
  %76 = add nsw i64 %74, %75
  store i64 %76, i64* %70, align 8, !tbaa !159
  store i32 1, i32* %45, align 8, !tbaa !162
  br label %77

77:                                               ; preds = %69, %66
  %78 = phi i64 [ %68, %66 ], [ %74, %69 ]
  %79 = icmp sgt i32 %63, 0
  %80 = select i1 %79, i32 %63, i32 0
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 3
  %83 = add nsw i64 %78, %81
  store i64 %83, i64* %82, align 8, !tbaa !157
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #18
  ret i32 %80
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_parser_close(%struct.AVCodecParserContext*) unnamed_addr #5 {
  %2 = icmp eq %struct.AVCodecParserContext* %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 1
  %5 = load %struct.AVCodecParser*, %struct.AVCodecParser** %4, align 8, !tbaa !166
  %6 = getelementptr inbounds %struct.AVCodecParser, %struct.AVCodecParser* %5, i64 0, i32 4
  %7 = load void (%struct.AVCodecParserContext*)*, void (%struct.AVCodecParserContext*)** %6, align 8, !tbaa !169
  %8 = icmp eq void (%struct.AVCodecParserContext*)* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %3
  tail call void %7(%struct.AVCodecParserContext* nonnull %0) #18
  br label %10

10:                                               ; preds = %9, %3
  %11 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8, !tbaa !170
  tail call fastcc void @av_free(i8* %12) #18
  %13 = bitcast %struct.AVCodecParserContext* %0 to i8*
  tail call fastcc void @av_free(i8* nonnull %13) #18
  br label %14

14:                                               ; preds = %10, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_get_logical_cpus(%struct.AVCodecContext.202*) unnamed_addr #5 {
  %2 = alloca %struct.cpu_set_t, align 8
  %3 = bitcast %struct.cpu_set_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 128, i1 false)
  %4 = call i32 @sched_getaffinity(i32 0, i64 128, %struct.cpu_set_t* nonnull %2) #18
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = call i32 @__sched_cpucount(i64 128, %struct.cpu_set_t* nonnull %2) #18
  br label %8

8:                                                ; preds = %6, %1
  %9 = phi i32 [ 1, %1 ], [ %7, %6 ]
  %10 = bitcast %struct.AVCodecContext.202* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %10, i32 48, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1338, i64 0, i64 0), i32 %9) #18
  %11 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 24
  %12 = load i32, i32* %11, align 8, !tbaa !71
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %8
  %15 = add nsw i32 %12, 15
  %16 = sdiv i32 %15, 16
  %17 = icmp sgt i32 %9, %16
  %18 = select i1 %17, i32 %16, i32 %9
  br label %19

19:                                               ; preds = %14, %8
  %20 = phi i32 [ %18, %14 ], [ %9, %8 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #18
  ret i32 %20
}

; Function Attrs: nounwind
declare dso_local i32 @sched_getaffinity(i32, i64, %struct.cpu_set_t*) local_unnamed_addr #12

; Function Attrs: nounwind
declare dso_local i32 @__sched_cpucount(i64, %struct.cpu_set_t*) local_unnamed_addr #12

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_thread_decode_frame(%struct.AVCodecContext.202*, %struct.AVFrame.195* nocapture, i32* nocapture, %struct.AVPacket* nocapture readonly) unnamed_addr #5 {
  %5 = alloca i8*, align 8
  %6 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 182
  %7 = bitcast i8** %6 to %struct.FrameThreadContext**
  %8 = load %struct.FrameThreadContext*, %struct.FrameThreadContext** %7, align 8, !tbaa !171
  %9 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %8, i64 0, i32 4
  %10 = load i32, i32* %9, align 4, !tbaa !172
  %11 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %8, i64 0, i32 0
  %12 = load %struct.PerThreadContext*, %struct.PerThreadContext** %11, align 8, !tbaa !174
  %13 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %8, i64 0, i32 3
  %14 = load i32, i32* %13, align 8, !tbaa !175
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 8
  %17 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %16, align 8, !tbaa !176
  %18 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 16
  %19 = load i32, i32* %18, align 8, !tbaa !64
  %20 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 16
  store i32 %19, i32* %20, align 8, !tbaa !64
  %21 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 30
  %22 = bitcast void (%struct.AVCodecContext.202*, %struct.AVFrame.195*, i32*, i32, i32, i32)** %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !178
  %24 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 30
  %25 = bitcast void (%struct.AVCodecContext.202*, %struct.AVFrame.195*, i32*, i32, i32, i32)** %24 to i64*
  store i64 %23, i64* %25, align 8, !tbaa !178
  %26 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 112
  %27 = bitcast i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)** %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !138
  %29 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 112
  %30 = bitcast i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)** %29 to i64*
  store i64 %28, i64* %30, align 8, !tbaa !138
  %31 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 113
  %32 = bitcast void (%struct.AVCodecContext.202*, %struct.AVFrame.195*)** %31 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !58
  %34 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 113
  %35 = bitcast void (%struct.AVCodecContext.202*, %struct.AVFrame.195*)** %34 to i64*
  store i64 %33, i64* %35, align 8, !tbaa !58
  %36 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 11
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8, !tbaa !179
  %39 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 11
  %40 = bitcast i8** %39 to i64*
  store i64 %38, i64* %40, align 8, !tbaa !179
  %41 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 162
  %42 = load i32, i32* %41, align 4, !tbaa !180
  %43 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 162
  store i32 %42, i32* %43, align 4, !tbaa !180
  %44 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 163
  %45 = load i32, i32* %44, align 8, !tbaa !181
  %46 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 163
  store i32 %45, i32* %46, align 8, !tbaa !181
  %47 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 67
  %48 = load i32, i32* %47, align 4, !tbaa !182
  %49 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 67
  store i32 %48, i32* %49, align 4, !tbaa !182
  %50 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 17
  %51 = load i32, i32* %50, align 4, !tbaa !183
  %52 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 17
  store i32 %51, i32* %52, align 4, !tbaa !183
  %53 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 186
  %54 = bitcast i32* %53 to i8*
  %55 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 186
  %56 = bitcast i32* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %54, i8* nonnull align 4 %56, i64 12, i1 false) #18
  %57 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 104
  %58 = load i32, i32* %57, align 8, !tbaa !184
  %59 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 104
  store i32 %58, i32* %59, align 8, !tbaa !184
  %60 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 165
  %61 = load i64, i64* %60, align 8, !tbaa !144
  %62 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 165
  store i64 %61, i64* %62, align 8, !tbaa !144
  %63 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 179
  %64 = load i32, i32* %63, align 4, !tbaa !185
  %65 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 179
  store i32 %64, i32* %65, align 4, !tbaa !185
  %66 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 48
  %67 = load i32, i32* %66, align 8, !tbaa !186
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %99, label %69

69:                                               ; preds = %4
  %70 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 50
  %71 = load i32*, i32** %70, align 8, !tbaa !187
  %72 = icmp eq i32* %71, null
  br i1 %72, label %99, label %73

73:                                               ; preds = %69
  %74 = bitcast i32* %71 to i8*
  %75 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 48
  %76 = load i32, i32* %75, align 8, !tbaa !186
  %77 = icmp slt i32 %76, %67
  %78 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 50
  %79 = bitcast i32** %78 to i8**
  %80 = load i8*, i8** %79, align 8, !tbaa !187
  br i1 %77, label %81, label %90

81:                                               ; preds = %73
  %82 = sext i32 %67 to i64
  %83 = shl nsw i64 %82, 2
  %84 = tail call fastcc i8* @av_realloc(i8* %80, i64 %83) #18
  %85 = icmp eq i8* %84, null
  br i1 %85, label %97, label %86

86:                                               ; preds = %81
  store i8* %84, i8** %79, align 8, !tbaa !187
  %87 = bitcast i32** %70 to i8**
  %88 = load i8*, i8** %87, align 8, !tbaa !187
  %89 = load i32, i32* %66, align 8, !tbaa !186
  br label %90

90:                                               ; preds = %86, %73
  %91 = phi i32 [ %89, %86 ], [ %67, %73 ]
  %92 = phi i8* [ %88, %86 ], [ %74, %73 ]
  %93 = phi i8* [ %84, %86 ], [ %80, %73 ]
  %94 = sext i32 %91 to i64
  %95 = shl nsw i64 %94, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %93, i8* align 4 %92, i64 %95, i1 false) #18
  %96 = load i32, i32* %66, align 8, !tbaa !186
  br label %99

97:                                               ; preds = %81
  %98 = load i8*, i8** %79, align 8, !tbaa !187
  tail call fastcc void @av_free(i8* %98) #18
  br label %454

99:                                               ; preds = %90, %69, %4
  %100 = phi i32 [ %67, %69 ], [ 0, %4 ], [ %96, %90 ]
  %101 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %17, i64 0, i32 48
  store i32 %100, i32* %101, align 8, !tbaa !186
  %102 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15
  %103 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %102, i64 0, i32 0
  %104 = load %struct.FrameThreadContext*, %struct.FrameThreadContext** %103, align 8, !tbaa !188
  %105 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %104, i64 0, i32 1
  %106 = load %struct.PerThreadContext*, %struct.PerThreadContext** %105, align 8, !tbaa !189
  %107 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %16, align 8, !tbaa !176
  %108 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %107, i64 0, i32 3
  %109 = load %struct.AVCodec.196*, %struct.AVCodec.196** %108, align 8, !tbaa !40
  %110 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %110) #18
  %111 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 9
  %112 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 9, i32 2
  %113 = bitcast i8** %112 to i64*
  %114 = load i64, i64* %113, align 8, !tbaa !190
  %115 = bitcast i8** %5 to i64*
  store i64 %114, i64* %115, align 8, !tbaa !27
  %116 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %117 = load i32, i32* %116, align 8, !tbaa !17
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %124

119:                                              ; preds = %99
  %120 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %109, i64 0, i32 4
  %121 = load i32, i32* %120, align 8, !tbaa !41
  %122 = and i32 %121, 32
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %310, label %124

124:                                              ; preds = %119, %99
  %125 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 6
  %126 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %125) #18
  %127 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 16
  %128 = load i32, i32* %127, align 8, !tbaa !191
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %.loopexit16

130:                                              ; preds = %124
  %131 = load %struct.FrameThreadContext*, %struct.FrameThreadContext** %103, align 8, !tbaa !188
  %132 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %131, i64 0, i32 2
  br label %133

133:                                              ; preds = %133, %130
  %134 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %132) #18
  %135 = load i32, i32* %127, align 8, !tbaa !191
  %136 = add nsw i32 %135, -1
  store i32 %136, i32* %127, align 8, !tbaa !191
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 15, i64 %137
  %139 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 15, i64 %137, i32 37
  %140 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %139, align 8, !tbaa !192
  %141 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %140, i64 0, i32 182
  %142 = bitcast i8** %141 to %struct.PerThreadContext**
  %143 = load %struct.PerThreadContext*, %struct.PerThreadContext** %142, align 8, !tbaa !171
  %144 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 15, i64 %137, i32 38
  %145 = bitcast i8** %144 to i64*
  %146 = load i64, i64* %145, align 8, !tbaa !193
  %147 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %143, i64 0, i32 17, i64 0, i64 0
  %148 = ptrtoint i32* %147 to i64
  %149 = sub i64 %146, %148
  %150 = ashr exact i64 %149, 2
  %151 = sdiv i64 %150, 2
  %152 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %143, i64 0, i32 18, i64 %151
  store volatile i8 0, i8* %152, align 1, !tbaa !33
  store i8* null, i8** %144, align 8, !tbaa !193
  %153 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %139, align 8, !tbaa !192
  %154 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %153, i64 0, i32 113
  %155 = load void (%struct.AVCodecContext.202*, %struct.AVFrame.195*)*, void (%struct.AVCodecContext.202*, %struct.AVFrame.195*)** %154, align 8, !tbaa !58
  tail call void %155(%struct.AVCodecContext.202* %153, %struct.AVFrame.195* nonnull %138) #18
  %156 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %132) #18
  %157 = load i32, i32* %127, align 8, !tbaa !191
  %158 = icmp sgt i32 %157, 0
  br i1 %158, label %133, label %.loopexit16

.loopexit16:                                      ; preds = %133, %124
  %159 = icmp eq %struct.PerThreadContext* %106, null
  br i1 %159, label %255, label %160

160:                                              ; preds = %.loopexit16
  %161 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %106, i64 0, i32 14
  %162 = load i32, i32* %161, align 8, !tbaa !194
  %163 = icmp eq i32 %162, 1
  br i1 %163, label %164, label %176

164:                                              ; preds = %160
  %165 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %106, i64 0, i32 7
  %166 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %165) #18
  %167 = load i32, i32* %161, align 8, !tbaa !194
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %169, label %.loopexit15

169:                                              ; preds = %164
  %170 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %106, i64 0, i32 4
  br label %171

171:                                              ; preds = %171, %169
  %172 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %170, %union.pthread_mutex_t* nonnull %165) #18
  %173 = load i32, i32* %161, align 8, !tbaa !194
  %174 = icmp eq i32 %173, 1
  br i1 %174, label %171, label %.loopexit15

.loopexit15:                                      ; preds = %171, %164
  %175 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %165) #18
  br label %176

176:                                              ; preds = %.loopexit15, %160
  %177 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %16, align 8, !tbaa !176
  %178 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %106, i64 0, i32 8
  %179 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %178, align 8, !tbaa !176
  %180 = icmp eq %struct.AVCodecContext.202* %177, %179
  br i1 %180, label %246, label %181

181:                                              ; preds = %176
  %182 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 20
  %183 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 20
  %184 = bitcast %struct.AVRational* %183 to i64*
  %185 = bitcast %struct.AVRational* %182 to i64*
  %186 = load i64, i64* %184, align 4
  store i64 %186, i64* %185, align 4
  %187 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 23
  %188 = load i32, i32* %187, align 4, !tbaa !70
  %189 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 23
  store i32 %188, i32* %189, align 4, !tbaa !70
  %190 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 24
  %191 = load i32, i32* %190, align 8, !tbaa !71
  %192 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 24
  store i32 %191, i32* %192, align 8, !tbaa !71
  %193 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 28
  %194 = load i32, i32* %193, align 8, !tbaa !69
  %195 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 28
  store i32 %194, i32* %195, align 8, !tbaa !69
  %196 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 25
  %197 = load i32, i32* %196, align 4, !tbaa !195
  %198 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 25
  store i32 %197, i32* %198, align 4, !tbaa !195
  %199 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 26
  %200 = load i32, i32* %199, align 8, !tbaa !196
  %201 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 26
  store i32 %200, i32* %201, align 8, !tbaa !196
  %202 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 39
  %203 = load i32, i32* %202, align 4, !tbaa !197
  %204 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 39
  store i32 %203, i32* %204, align 4, !tbaa !197
  %205 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 170
  %206 = load i32, i32* %205, align 4, !tbaa !198
  %207 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 170
  store i32 %206, i32* %207, align 4, !tbaa !198
  %208 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 172
  %209 = load i32, i32* %208, align 4, !tbaa !199
  %210 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 172
  store i32 %209, i32* %210, align 4, !tbaa !199
  %211 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 51
  %212 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 51
  %213 = bitcast %struct.AVRational* %212 to i64*
  %214 = bitcast %struct.AVRational* %211 to i64*
  %215 = load i64, i64* %213, align 8
  store i64 %215, i64* %214, align 8
  %216 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 62
  %217 = load i32, i32* %216, align 8, !tbaa !200
  %218 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 62
  store i32 %217, i32* %218, align 8, !tbaa !200
  %219 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 184
  %220 = load i32, i32* %219, align 4, !tbaa !201
  %221 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 184
  store i32 %220, i32* %221, align 4, !tbaa !201
  %222 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 185
  %223 = load i32, i32* %222, align 8, !tbaa !202
  %224 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 185
  store i32 %223, i32* %224, align 8, !tbaa !202
  %225 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 173
  %226 = load i32, i32* %225, align 8, !tbaa !203
  %227 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 173
  store i32 %226, i32* %227, align 8, !tbaa !203
  %228 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 21
  %229 = load i32, i32* %228, align 4, !tbaa !204
  %230 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 21
  store i32 %229, i32* %230, align 4, !tbaa !204
  %231 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 93
  %232 = load i32, i32* %231, align 4, !tbaa !205
  %233 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 93
  store i32 %232, i32* %233, align 4, !tbaa !205
  %234 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 94
  %235 = load i32, i32* %234, align 8, !tbaa !206
  %236 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 94
  store i32 %235, i32* %236, align 8, !tbaa !206
  %237 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 95
  %238 = load i32, i32* %237, align 4, !tbaa !207
  %239 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 95
  store i32 %238, i32* %239, align 4, !tbaa !207
  %240 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 96
  %241 = load i32, i32* %240, align 8, !tbaa !208
  %242 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 96
  store i32 %241, i32* %242, align 8, !tbaa !208
  %243 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %179, i64 0, i32 97
  %244 = load i32, i32* %243, align 4, !tbaa !209
  %245 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 97
  store i32 %244, i32* %245, align 4, !tbaa !209
  br label %246

246:                                              ; preds = %181, %176
  %247 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %177, i64 0, i32 3
  %248 = load %struct.AVCodec.196*, %struct.AVCodec.196** %247, align 8, !tbaa !40
  %249 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %248, i64 0, i32 16
  %250 = load i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)*, i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)** %249, align 8, !tbaa !210
  %251 = icmp eq i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)* %250, null
  br i1 %251, label %255, label %252

252:                                              ; preds = %246
  %253 = tail call i32 %250(%struct.AVCodecContext.202* nonnull %177, %struct.AVCodecContext.202* %179) #18
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %308

255:                                              ; preds = %252, %246, %.loopexit16
  %256 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 10
  %257 = load i32, i32* %116, align 8, !tbaa !17
  %258 = add nsw i32 %257, 16
  %259 = sext i32 %258 to i64
  call fastcc void @av_fast_malloc(i8* nonnull %110, i32* nonnull %256, i64 %259) #18
  %260 = bitcast %struct.AVPacket* %111 to i8*
  %261 = bitcast %struct.AVPacket* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %260, i8* align 8 %261, i64 88, i1 false) #18, !tbaa.struct !25
  %262 = load i64, i64* %115, align 8, !tbaa !27
  store i64 %262, i64* %113, align 8, !tbaa !190
  %263 = inttoptr i64 %262 to i8*
  %264 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 2
  %265 = load i8*, i8** %264, align 8, !tbaa !16
  %266 = load i32, i32* %116, align 8, !tbaa !17
  %267 = sext i32 %266 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %263, i8* align 1 %265, i64 %267, i1 false) #18
  %268 = load i8*, i8** %5, align 8, !tbaa !27
  %269 = load i32, i32* %116, align 8, !tbaa !17
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %268, i64 %270
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %271, i8 0, i64 16, i1 false) #18
  %272 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 14
  store i32 1, i32* %272, align 8, !tbaa !194
  %273 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 3
  %274 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* nonnull %273) #18
  %275 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %125) #18
  %276 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %16, align 8, !tbaa !176
  %277 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %276, i64 0, i32 179
  %278 = load i32, i32* %277, align 4, !tbaa !185
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %.loopexit14

280:                                              ; preds = %255
  %281 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %276, i64 0, i32 112
  %282 = load i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)*, i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)** %281, align 8, !tbaa !138
  %283 = icmp eq i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)* %282, bitcast (i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)* @avcodec_default_get_buffer to i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)*)
  br i1 %283, label %.loopexit14, label %284

284:                                              ; preds = %280
  %285 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 7
  %286 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 4
  %287 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 19
  %288 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %12, i64 %15, i32 13
  %289 = bitcast %struct.AVCodecContext.202** %16 to %struct.AVCodecContext.129**
  %290 = bitcast %struct.AVFrame.195** %287 to %struct.AVFrame.123**
  br label %291

291:                                              ; preds = %.loopexit13, %284
  %292 = load i32, i32* %272, align 8, !tbaa !194
  switch i32 %292, label %293 [
    i32 3, label %.loopexit14
    i32 0, label %.loopexit14
  ]

293:                                              ; preds = %291
  %294 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %285) #18
  br label %295

295:                                              ; preds = %297, %293
  %296 = load i32, i32* %272, align 8, !tbaa !194
  switch i32 %296, label %.loopexit13 [
    i32 1, label %297
    i32 2, label %299
  ]

297:                                              ; preds = %295
  %298 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %286, %union.pthread_mutex_t* nonnull %285) #18
  br label %295

299:                                              ; preds = %295
  %300 = load %struct.AVCodecContext.129*, %struct.AVCodecContext.129** %289, align 8, !tbaa !176
  %301 = load %struct.AVFrame.123*, %struct.AVFrame.123** %290, align 8, !tbaa !211
  %302 = tail call fastcc i32 @ff_get_buffer(%struct.AVCodecContext.129* %300, %struct.AVFrame.123* %301) #18
  store i32 %302, i32* %288, align 4, !tbaa !212
  store i32 1, i32* %272, align 8, !tbaa !194
  %303 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* nonnull %286) #18
  br label %.loopexit13

.loopexit13:                                      ; preds = %295, %299
  %304 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %285) #18
  br label %291

.loopexit14:                                      ; preds = %291, %291, %280, %255
  store %struct.PerThreadContext* %102, %struct.PerThreadContext** %105, align 8, !tbaa !189
  %305 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %104, i64 0, i32 3
  %306 = load i32, i32* %305, align 8, !tbaa !175
  %307 = add nsw i32 %306, 1
  store i32 %307, i32* %305, align 8, !tbaa !175
  br label %310

308:                                              ; preds = %252
  %309 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %125) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110) #18
  br label %454

310:                                              ; preds = %.loopexit14, %119
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110) #18
  %311 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %8, i64 0, i32 5
  %312 = load i32, i32* %311, align 8, !tbaa !213
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %324, label %314

314:                                              ; preds = %310
  %315 = load i32, i32* %13, align 8, !tbaa !175
  %316 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 176
  %317 = load i32, i32* %316, align 8, !tbaa !43
  %318 = add nsw i32 %317, -1
  %319 = icmp slt i32 %315, %318
  br i1 %319, label %321, label %320

320:                                              ; preds = %314
  store i32 0, i32* %311, align 8, !tbaa !213
  br label %321

321:                                              ; preds = %320, %314
  store i32 0, i32* %2, align 4, !tbaa !28
  %322 = load i32, i32* %116, align 8, !tbaa !17
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %324, label %454

324:                                              ; preds = %321, %310
  %325 = bitcast %struct.AVFrame.195* %1 to i8*
  %326 = getelementptr inbounds %struct.AVFrame.195, %struct.AVFrame.195* %1, i64 0, i32 13
  %327 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 176
  br label %328

328:                                              ; preds = %363, %324
  %329 = phi i32 [ %10, %324 ], [ %357, %363 ]
  %330 = load %struct.PerThreadContext*, %struct.PerThreadContext** %11, align 8, !tbaa !174
  %331 = add nsw i32 %329, 1
  %332 = sext i32 %329 to i64
  %333 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %330, i64 %332, i32 14
  %334 = load i32, i32* %333, align 8, !tbaa !194
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %348, label %336

336:                                              ; preds = %328
  %337 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %330, i64 %332, i32 7
  %338 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %337) #18
  %339 = load i32, i32* %333, align 8, !tbaa !194
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %.loopexit, label %341

341:                                              ; preds = %336
  %342 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %330, i64 %332, i32 5
  br label %343

343:                                              ; preds = %343, %341
  %344 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %342, %union.pthread_mutex_t* nonnull %337) #18
  %345 = load i32, i32* %333, align 8, !tbaa !194
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %.loopexit, label %343

.loopexit:                                        ; preds = %343, %336
  %347 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %337) #18
  br label %348

348:                                              ; preds = %.loopexit, %328
  %349 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %330, i64 %332, i32 11
  %350 = bitcast %struct.AVFrame.195* %349 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %325, i8* nonnull align 8 %350, i64 520, i1 false), !tbaa.struct !113
  %351 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %330, i64 %332, i32 12
  %352 = load i32, i32* %351, align 8, !tbaa !214
  store i32 %352, i32* %2, align 4, !tbaa !28
  %353 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %330, i64 %332, i32 9, i32 1
  %354 = load i64, i64* %353, align 8, !tbaa !215
  store i64 %354, i64* %326, align 8, !tbaa !216
  store i32 0, i32* %351, align 8, !tbaa !214
  %355 = load i32, i32* %327, align 8, !tbaa !43
  %356 = icmp slt i32 %331, %355
  %357 = select i1 %356, i32 %331, i32 0
  %358 = load i32, i32* %116, align 8, !tbaa !17
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %360, label %366

360:                                              ; preds = %348
  %361 = load i32, i32* %2, align 4, !tbaa !28
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %366

363:                                              ; preds = %360
  %364 = load i32, i32* %9, align 4, !tbaa !172
  %365 = icmp eq i32 %357, %364
  br i1 %365, label %366, label %328

366:                                              ; preds = %363, %360, %348
  %367 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %330, i64 %332, i32 8
  %368 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %367, align 8, !tbaa !176
  %369 = icmp eq %struct.AVCodecContext.202* %368, %0
  br i1 %369, label %435, label %370

370:                                              ; preds = %366
  %371 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 20
  %372 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 20
  %373 = bitcast %struct.AVRational* %372 to i64*
  %374 = bitcast %struct.AVRational* %371 to i64*
  %375 = load i64, i64* %373, align 4
  store i64 %375, i64* %374, align 4
  %376 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 23
  %377 = load i32, i32* %376, align 4, !tbaa !70
  %378 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 23
  store i32 %377, i32* %378, align 4, !tbaa !70
  %379 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 24
  %380 = load i32, i32* %379, align 8, !tbaa !71
  %381 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 24
  store i32 %380, i32* %381, align 8, !tbaa !71
  %382 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 28
  %383 = load i32, i32* %382, align 8, !tbaa !69
  %384 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 28
  store i32 %383, i32* %384, align 8, !tbaa !69
  %385 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 25
  %386 = load i32, i32* %385, align 4, !tbaa !195
  %387 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 25
  store i32 %386, i32* %387, align 4, !tbaa !195
  %388 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 26
  %389 = load i32, i32* %388, align 8, !tbaa !196
  %390 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 26
  store i32 %389, i32* %390, align 8, !tbaa !196
  %391 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 39
  %392 = load i32, i32* %391, align 4, !tbaa !197
  %393 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 39
  store i32 %392, i32* %393, align 4, !tbaa !197
  %394 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 170
  %395 = load i32, i32* %394, align 4, !tbaa !198
  %396 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 170
  store i32 %395, i32* %396, align 4, !tbaa !198
  %397 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 172
  %398 = load i32, i32* %397, align 4, !tbaa !199
  %399 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 172
  store i32 %398, i32* %399, align 4, !tbaa !199
  %400 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 51
  %401 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 51
  %402 = bitcast %struct.AVRational* %401 to i64*
  %403 = bitcast %struct.AVRational* %400 to i64*
  %404 = load i64, i64* %402, align 8
  store i64 %404, i64* %403, align 8
  %405 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 62
  %406 = load i32, i32* %405, align 8, !tbaa !200
  %407 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 62
  store i32 %406, i32* %407, align 8, !tbaa !200
  %408 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 184
  %409 = load i32, i32* %408, align 4, !tbaa !201
  %410 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 184
  store i32 %409, i32* %410, align 4, !tbaa !201
  %411 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 185
  %412 = load i32, i32* %411, align 8, !tbaa !202
  %413 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 185
  store i32 %412, i32* %413, align 8, !tbaa !202
  %414 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 173
  %415 = load i32, i32* %414, align 8, !tbaa !203
  %416 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 173
  store i32 %415, i32* %416, align 8, !tbaa !203
  %417 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 21
  %418 = load i32, i32* %417, align 4, !tbaa !204
  %419 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 21
  store i32 %418, i32* %419, align 4, !tbaa !204
  %420 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 93
  %421 = load i32, i32* %420, align 4, !tbaa !205
  %422 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 93
  store i32 %421, i32* %422, align 4, !tbaa !205
  %423 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 94
  %424 = load i32, i32* %423, align 8, !tbaa !206
  %425 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 94
  store i32 %424, i32* %425, align 8, !tbaa !206
  %426 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 95
  %427 = load i32, i32* %426, align 4, !tbaa !207
  %428 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 95
  store i32 %427, i32* %428, align 4, !tbaa !207
  %429 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 96
  %430 = load i32, i32* %429, align 8, !tbaa !208
  %431 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 96
  store i32 %430, i32* %431, align 8, !tbaa !208
  %432 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 97
  %433 = load i32, i32* %432, align 4, !tbaa !209
  %434 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 97
  store i32 %433, i32* %434, align 4, !tbaa !209
  br label %435

435:                                              ; preds = %370, %366
  %436 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 176
  %437 = load i32, i32* %436, align 8, !tbaa !43
  %438 = add nsw i32 %437, -1
  %439 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 22
  store i32 %438, i32* %439, align 8, !tbaa !217
  %440 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %368, i64 0, i32 175
  %441 = bitcast %struct.AVFrame.195** %440 to i64*
  %442 = load i64, i64* %441, align 8, !tbaa !76
  %443 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 175
  %444 = bitcast %struct.AVFrame.195** %443 to i64*
  store i64 %442, i64* %444, align 8, !tbaa !76
  %445 = load i32, i32* %13, align 8, !tbaa !175
  %446 = icmp slt i32 %445, %355
  br i1 %446, label %448, label %447

447:                                              ; preds = %435
  store i32 0, i32* %13, align 8, !tbaa !175
  br label %448

448:                                              ; preds = %447, %435
  store i32 %357, i32* %9, align 4, !tbaa !172
  %449 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %330, i64 %332, i32 13
  %450 = load i32, i32* %449, align 4, !tbaa !212
  %451 = icmp sgt i32 %450, -1
  br i1 %451, label %452, label %454

452:                                              ; preds = %448
  %453 = load i32, i32* %116, align 8, !tbaa !17
  br label %454

454:                                              ; preds = %452, %448, %321, %308, %97
  %455 = phi i32 [ -12, %97 ], [ %253, %308 ], [ %322, %321 ], [ %453, %452 ], [ %450, %448 ]
  ret i32 %455
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_thread_init(%struct.AVCodecContext.202*) unnamed_addr #5 {
  %2 = alloca %struct.cpu_set_t, align 8
  %3 = alloca %struct.cpu_set_t, align 8
  %4 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 182
  %5 = load i8*, i8** %4, align 8, !tbaa !171
  %6 = icmp eq i8* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = bitcast %struct.AVCodecContext.202* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %8, i32 16, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7.1346, i64 0, i64 0)) #18
  br label %.loopexit20

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 3
  %11 = load %struct.AVCodec.196*, %struct.AVCodec.196** %10, align 8, !tbaa !40
  %12 = icmp eq %struct.AVCodec.196* %11, null
  br i1 %12, label %.loopexit20, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %11, i64 0, i32 4
  %15 = load i32, i32* %14, align 8, !tbaa !41
  %16 = and i32 %15, 4096
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %28, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 16
  %20 = load i32, i32* %19, align 8, !tbaa !64
  %21 = and i32 %20, 589824
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %28

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 17
  %25 = load i32, i32* %24, align 4, !tbaa !183
  %26 = trunc i32 %25 to i16
  %27 = icmp sgt i16 %26, -1
  br label %28

28:                                               ; preds = %23, %18, %13
  %29 = phi i1 [ false, %18 ], [ false, %13 ], [ %27, %23 ]
  %30 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 176
  %31 = load i32, i32* %30, align 8, !tbaa !43
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 178
  store i32 0, i32* %34, align 8, !tbaa !54
  br label %61

35:                                               ; preds = %28
  br i1 %29, label %36, label %41

36:                                               ; preds = %35
  %37 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 177
  %38 = load i32, i32* %37, align 4, !tbaa !36
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %36, %35
  %42 = and i32 %15, 8192
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 177
  %46 = load i32, i32* %45, align 4, !tbaa !36
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %54

49:                                               ; preds = %44, %41
  %50 = trunc i32 %15 to i16
  %51 = icmp slt i16 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %49
  store i32 1, i32* %30, align 8, !tbaa !43
  %53 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 178
  store i32 0, i32* %53, align 8, !tbaa !54
  br label %61

54:                                               ; preds = %44, %36
  %55 = phi i32 [ 1, %36 ], [ 2, %44 ]
  %56 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 178
  store i32 %55, i32* %56, align 8, !tbaa !54
  br label %57

57:                                               ; preds = %54, %49
  %58 = icmp sgt i32 %31, 16
  br i1 %58, label %59, label %61

59:                                               ; preds = %57
  %60 = bitcast %struct.AVCodecContext.202* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %60, i32 24, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9.1347, i64 0, i64 0), i32 %31, i32 16) #18
  br label %61

61:                                               ; preds = %59, %57, %52, %33
  %62 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 178
  %63 = load i32, i32* %62, align 8, !tbaa !54
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %156, label %66

66:                                               ; preds = %61
  %67 = load i32, i32* %30, align 8, !tbaa !43
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %95

69:                                               ; preds = %66
  %70 = bitcast %struct.cpu_set_t* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %70) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %70, i8 0, i64 128, i1 false) #18
  %71 = call i32 @sched_getaffinity(i32 0, i64 128, %struct.cpu_set_t* nonnull %3) #18
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %69
  %74 = call i32 @__sched_cpucount(i64 128, %struct.cpu_set_t* nonnull %3) #18
  br label %75

75:                                               ; preds = %73, %69
  %76 = phi i32 [ 1, %69 ], [ %74, %73 ]
  %77 = bitcast %struct.AVCodecContext.202* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %77, i32 48, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1338, i64 0, i64 0), i32 %76) #18
  %78 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 24
  %79 = load i32, i32* %78, align 8, !tbaa !71
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %86, label %81

81:                                               ; preds = %75
  %82 = add nsw i32 %79, 15
  %83 = sdiv i32 %82, 16
  %84 = icmp sgt i32 %76, %83
  %85 = select i1 %84, i32 %83, i32 %76
  br label %86

86:                                               ; preds = %81, %75
  %87 = phi i32 [ %85, %81 ], [ %76, %75 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %70) #18
  %88 = icmp sgt i32 %87, 1
  br i1 %88, label %89, label %93

89:                                               ; preds = %86
  %90 = icmp slt i32 %87, 15
  %91 = select i1 %90, i32 %87, i32 15
  %92 = add nuw nsw i32 %91, 1
  br label %93

93:                                               ; preds = %89, %86
  %94 = phi i32 [ %92, %89 ], [ 1, %86 ]
  store i32 %94, i32* %30, align 8, !tbaa !43
  br label %95

95:                                               ; preds = %93, %66
  %96 = phi i32 [ %67, %66 ], [ %94, %93 ]
  %97 = icmp slt i32 %96, 2
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  store i32 0, i32* %62, align 8, !tbaa !54
  br label %.loopexit20

99:                                               ; preds = %95
  %100 = call fastcc noalias i8* @av_mallocz(i64 208) #18
  %101 = icmp eq i8* %100, null
  br i1 %101, label %.loopexit20, label %102

102:                                              ; preds = %99
  %103 = sext i32 %96 to i64
  %104 = shl nsw i64 %103, 3
  %105 = call fastcc noalias i8* @av_mallocz(i64 %104) #18
  %106 = bitcast i8* %100 to i64**
  %107 = bitcast i8* %100 to i8**
  store i8* %105, i8** %107, align 8, !tbaa !218
  %108 = icmp eq i8* %105, null
  br i1 %108, label %109, label %110

109:                                              ; preds = %102
  call fastcc void @av_free(i8* nonnull %100) #18
  br label %.loopexit20

110:                                              ; preds = %102
  store i8* %100, i8** %4, align 8, !tbaa !171
  %111 = getelementptr inbounds i8, i8* %100, i64 192
  %112 = bitcast i8* %111 to i32*
  store i32 0, i32* %112, align 8, !tbaa !220
  %113 = getelementptr inbounds i8, i8* %100, i64 44
  %114 = bitcast i8* %113 to i32*
  store i32 0, i32* %114, align 4, !tbaa !221
  %115 = getelementptr inbounds i8, i8* %100, i64 48
  %116 = bitcast i8* %115 to i32*
  store i32 0, i32* %116, align 8, !tbaa !222
  %117 = getelementptr inbounds i8, i8* %100, i64 200
  %118 = bitcast i8* %117 to i32*
  store i32 0, i32* %118, align 8, !tbaa !223
  %119 = getelementptr inbounds i8, i8* %100, i64 104
  %120 = bitcast i8* %119 to %union.pthread_cond_t*
  %121 = call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %120, %union.pthread_mutexattr_t* null) #18
  %122 = getelementptr inbounds i8, i8* %100, i64 56
  %123 = bitcast i8* %122 to %union.pthread_cond_t*
  %124 = call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %123, %union.pthread_mutexattr_t* null) #18
  %125 = getelementptr inbounds i8, i8* %100, i64 152
  %126 = bitcast i8* %125 to %union.pthread_mutex_t*
  %127 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %126, %union.pthread_mutexattr_t* null) #18
  %128 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %126) #18
  %129 = bitcast %struct.AVCodecContext.202* %0 to i8*
  %130 = zext i32 %96 to i64
  br label %131

131:                                              ; preds = %140, %110
  %132 = phi i64 [ 0, %110 ], [ %141, %140 ]
  %133 = load i64*, i64** %106, align 8, !tbaa !218
  %134 = getelementptr inbounds i64, i64* %133, i64 %132
  %135 = call i32 @pthread_create(i64* %134, %union.pthread_attr_t* null, i8* (i8*)* nonnull @worker.1348, i8* %129) #18
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %140, label %137

137:                                              ; preds = %131
  %138 = trunc i64 %132 to i32
  store i32 %138, i32* %30, align 8, !tbaa !43
  %139 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %126) #18
  call fastcc void @ff_thread_free(%struct.AVCodecContext.202* %0) #18
  br label %.loopexit20

140:                                              ; preds = %131
  %141 = add nuw nsw i64 %132, 1
  %142 = icmp eq i64 %141, %130
  br i1 %142, label %143, label %131

143:                                              ; preds = %140
  %144 = load i32, i32* %112, align 8, !tbaa !220
  %145 = load i32, i32* %114, align 4, !tbaa !221
  %146 = add nsw i32 %145, %96
  %147 = icmp eq i32 %144, %146
  br i1 %147, label %.loopexit21, label %.preheader

.preheader:                                       ; preds = %143, %.preheader
  %148 = call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %123, %union.pthread_mutex_t* nonnull %126) #18
  %149 = load i32, i32* %112, align 8, !tbaa !220
  %150 = load i32, i32* %114, align 4, !tbaa !221
  %151 = add nsw i32 %150, %96
  %152 = icmp eq i32 %149, %151
  br i1 %152, label %.loopexit21, label %.preheader

.loopexit21:                                      ; preds = %.preheader, %143
  %153 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %126) #18
  %154 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 180
  store i32 (%struct.AVCodecContext.202*, i32 (%struct.AVCodecContext.202*, i8*)*, i8*, i32*, i32, i32)* @avcodec_thread_execute, i32 (%struct.AVCodecContext.202*, i32 (%struct.AVCodecContext.202*, i8*)*, i8*, i32*, i32, i32)** %154, align 8, !tbaa !140
  %155 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 181
  store i32 (%struct.AVCodecContext.202*, i32 (%struct.AVCodecContext.202*, i8*, i32, i32)*, i8*, i32*, i32)* @avcodec_thread_execute2, i32 (%struct.AVCodecContext.202*, i32 (%struct.AVCodecContext.202*, i8*, i32, i32)*, i8*, i32*, i32)** %155, align 8, !tbaa !141
  br label %.loopexit20

156:                                              ; preds = %61
  %157 = and i32 %63, 1
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %.loopexit20, label %159

159:                                              ; preds = %156
  %160 = load i32, i32* %30, align 8, !tbaa !43
  %161 = load %struct.AVCodec.196*, %struct.AVCodec.196** %10, align 8, !tbaa !40
  %162 = icmp eq i32 %160, 0
  br i1 %162, label %163, label %198

163:                                              ; preds = %159
  %164 = bitcast %struct.cpu_set_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %164) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %164, i8 0, i64 128, i1 false) #18
  %165 = call i32 @sched_getaffinity(i32 0, i64 128, %struct.cpu_set_t* nonnull %2) #18
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %163
  %168 = call i32 @__sched_cpucount(i64 128, %struct.cpu_set_t* nonnull %2) #18
  br label %169

169:                                              ; preds = %167, %163
  %170 = phi i32 [ 1, %163 ], [ %168, %167 ]
  %171 = bitcast %struct.AVCodecContext.202* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %171, i32 48, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1338, i64 0, i64 0), i32 %170) #18
  %172 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 24
  %173 = load i32, i32* %172, align 8, !tbaa !71
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %180, label %175

175:                                              ; preds = %169
  %176 = add nsw i32 %173, 15
  %177 = sdiv i32 %176, 16
  %178 = icmp sgt i32 %170, %177
  %179 = select i1 %178, i32 %177, i32 %170
  br label %180

180:                                              ; preds = %175, %169
  %181 = phi i32 [ %179, %175 ], [ %170, %169 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %164) #18
  %182 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 162
  %183 = load i32, i32* %182, align 4, !tbaa !180
  %184 = and i32 %183, 24576
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %196

186:                                              ; preds = %180
  %187 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 163
  %188 = load i32, i32* %187, align 8, !tbaa !181
  %189 = icmp eq i32 %188, 0
  %190 = icmp sgt i32 %181, 1
  %191 = and i1 %190, %189
  br i1 %191, label %192, label %196

192:                                              ; preds = %186
  %193 = icmp slt i32 %181, 15
  %194 = select i1 %193, i32 %181, i32 15
  %195 = add nuw nsw i32 %194, 1
  br label %196

196:                                              ; preds = %192, %186, %180
  %197 = phi i32 [ %195, %192 ], [ 1, %180 ], [ 1, %186 ]
  store i32 %197, i32* %30, align 8, !tbaa !43
  br label %198

198:                                              ; preds = %196, %159
  %199 = phi i32 [ %160, %159 ], [ %197, %196 ]
  %200 = icmp slt i32 %199, 2
  br i1 %200, label %201, label %202

201:                                              ; preds = %198
  store i32 0, i32* %62, align 8, !tbaa !54
  br label %.loopexit20

202:                                              ; preds = %198
  %203 = call fastcc noalias i8* @av_mallocz(i64 72) #18
  store i8* %203, i8** %4, align 8, !tbaa !171
  %204 = sext i32 %199 to i64
  %205 = mul nsw i64 %204, 19416
  %206 = call fastcc noalias i8* @av_mallocz(i64 %205) #18
  %207 = bitcast i8* %203 to %struct.PerThreadContext**
  %208 = bitcast i8* %203 to i8**
  store i8* %206, i8** %208, align 8, !tbaa !174
  %209 = getelementptr inbounds i8, i8* %203, i64 16
  %210 = bitcast i8* %209 to %union.pthread_mutex_t*
  %211 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %210, %union.pthread_mutexattr_t* null) #18
  %212 = getelementptr inbounds i8, i8* %203, i64 64
  %213 = bitcast i8* %212 to i32*
  store i32 1, i32* %213, align 8, !tbaa !213
  %214 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %161, i64 0, i32 13
  %215 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %161, i64 0, i32 15
  %216 = bitcast {}** %215 to i32 (%struct.AVCodecContext.202*)**
  %217 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %161, i64 0, i32 19
  %218 = bitcast {}** %217 to i32 (%struct.AVCodecContext.202*)**
  %219 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 20
  %220 = bitcast %struct.AVRational* %219 to i64*
  %221 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 23
  %222 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 24
  %223 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 28
  %224 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 25
  %225 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 26
  %226 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 39
  %227 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 170
  %228 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 172
  %229 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 51
  %230 = bitcast %struct.AVRational* %229 to i64*
  %231 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 62
  %232 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 184
  %233 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 185
  %234 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 173
  %235 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 21
  %236 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 93
  %237 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 94
  %238 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 95
  %239 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 96
  %240 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 97
  %241 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 22
  %242 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 175
  %243 = bitcast %struct.AVFrame.195** %242 to i64*
  %244 = zext i32 %199 to i64
  br label %245

245:                                              ; preds = %389, %202
  %246 = phi i64 [ 0, %202 ], [ %390, %389 ]
  %247 = phi %struct.AVCodecContext.202* [ %0, %202 ], [ %383, %389 ]
  %248 = call fastcc noalias i8* @av_malloc(i64 1056) #18
  %249 = bitcast i8* %248 to %struct.AVCodecContext.202*
  %250 = load %struct.PerThreadContext*, %struct.PerThreadContext** %207, align 8, !tbaa !174
  %251 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246
  %252 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246, i32 6
  %253 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %252, %union.pthread_mutexattr_t* null) #18
  %254 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246, i32 7
  %255 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %254, %union.pthread_mutexattr_t* null) #18
  %256 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246, i32 3
  %257 = call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %256, %union.pthread_mutexattr_t* null) #18
  %258 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246, i32 4
  %259 = call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %258, %union.pthread_mutexattr_t* null) #18
  %260 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246, i32 5
  %261 = call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %260, %union.pthread_mutexattr_t* null) #18
  %262 = bitcast %struct.PerThreadContext* %251 to i8**
  store i8* %203, i8** %262, align 8, !tbaa !188
  %263 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246, i32 8
  %264 = bitcast %struct.AVCodecContext.202** %263 to i8**
  store i8* %248, i8** %264, align 8, !tbaa !176
  %265 = icmp eq i8* %248, null
  br i1 %265, label %.loopexit, label %266

266:                                              ; preds = %245
  %267 = bitcast %struct.AVCodecContext.202* %247 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %248, i8* align 8 %267, i64 1056, i1 false) #18, !tbaa.struct !51
  %268 = bitcast %struct.PerThreadContext* %251 to i8*
  %269 = getelementptr inbounds i8, i8* %248, i64 936
  %270 = bitcast i8* %269 to %struct.PerThreadContext**
  store %struct.PerThreadContext* %251, %struct.PerThreadContext** %270, align 8, !tbaa !171
  %271 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246, i32 9
  %272 = getelementptr inbounds i8, i8* %248, i64 984
  %273 = bitcast i8* %272 to %struct.AVPacket**
  store %struct.AVPacket* %271, %struct.AVPacket** %273, align 8, !tbaa !224
  %274 = icmp eq i64 %246, 0
  br i1 %274, label %275, label %352

275:                                              ; preds = %266
  %276 = load i32 (%struct.AVCodecContext.202*)*, i32 (%struct.AVCodecContext.202*)** %218, align 8, !tbaa !225
  %277 = icmp eq i32 (%struct.AVCodecContext.202*)* %276, null
  br i1 %277, label %280, label %278

278:                                              ; preds = %275
  %279 = call i32 %276(%struct.AVCodecContext.202* nonnull %249) #18
  br label %280

280:                                              ; preds = %278, %275
  %281 = phi i32 [ %279, %278 ], [ 0, %275 ]
  %282 = icmp eq %struct.AVCodecContext.202* %249, %0
  br i1 %282, label %344, label %283

283:                                              ; preds = %280
  %284 = getelementptr inbounds i8, i8* %248, i64 132
  %285 = bitcast i8* %284 to i64*
  %286 = load i64, i64* %285, align 4
  store i64 %286, i64* %220, align 4
  %287 = getelementptr inbounds i8, i8* %248, i64 148
  %288 = bitcast i8* %287 to i32*
  %289 = load i32, i32* %288, align 4, !tbaa !70
  store i32 %289, i32* %221, align 4, !tbaa !70
  %290 = getelementptr inbounds i8, i8* %248, i64 152
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 8, !tbaa !71
  store i32 %292, i32* %222, align 8, !tbaa !71
  %293 = getelementptr inbounds i8, i8* %248, i64 168
  %294 = bitcast i8* %293 to i32*
  %295 = load i32, i32* %294, align 8, !tbaa !69
  store i32 %295, i32* %223, align 8, !tbaa !69
  %296 = getelementptr inbounds i8, i8* %248, i64 156
  %297 = bitcast i8* %296 to i32*
  %298 = load i32, i32* %297, align 4, !tbaa !195
  store i32 %298, i32* %224, align 4, !tbaa !195
  %299 = getelementptr inbounds i8, i8* %248, i64 160
  %300 = bitcast i8* %299 to i32*
  %301 = load i32, i32* %300, align 8, !tbaa !196
  store i32 %301, i32* %225, align 8, !tbaa !196
  %302 = getelementptr inbounds i8, i8* %248, i64 220
  %303 = bitcast i8* %302 to i32*
  %304 = load i32, i32* %303, align 4, !tbaa !197
  store i32 %304, i32* %226, align 4, !tbaa !197
  %305 = getelementptr inbounds i8, i8* %248, i64 876
  %306 = bitcast i8* %305 to i32*
  %307 = load i32, i32* %306, align 4, !tbaa !198
  store i32 %307, i32* %227, align 4, !tbaa !198
  %308 = getelementptr inbounds i8, i8* %248, i64 884
  %309 = bitcast i8* %308 to i32*
  %310 = load i32, i32* %309, align 4, !tbaa !199
  store i32 %310, i32* %228, align 4, !tbaa !199
  %311 = getelementptr inbounds i8, i8* %248, i64 272
  %312 = bitcast i8* %311 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %230, align 8
  %314 = getelementptr inbounds i8, i8* %248, i64 320
  %315 = bitcast i8* %314 to i32*
  %316 = load i32, i32* %315, align 8, !tbaa !200
  store i32 %316, i32* %231, align 8, !tbaa !200
  %317 = getelementptr inbounds i8, i8* %248, i64 948
  %318 = bitcast i8* %317 to i32*
  %319 = load i32, i32* %318, align 4, !tbaa !201
  store i32 %319, i32* %232, align 4, !tbaa !201
  %320 = getelementptr inbounds i8, i8* %248, i64 952
  %321 = bitcast i8* %320 to i32*
  %322 = load i32, i32* %321, align 8, !tbaa !202
  store i32 %322, i32* %233, align 8, !tbaa !202
  %323 = getelementptr inbounds i8, i8* %248, i64 888
  %324 = bitcast i8* %323 to i32*
  %325 = load i32, i32* %324, align 8, !tbaa !203
  store i32 %325, i32* %234, align 8, !tbaa !203
  %326 = getelementptr inbounds i8, i8* %248, i64 140
  %327 = bitcast i8* %326 to i32*
  %328 = load i32, i32* %327, align 4, !tbaa !204
  store i32 %328, i32* %235, align 4, !tbaa !204
  %329 = getelementptr inbounds i8, i8* %248, i64 452
  %330 = bitcast i8* %329 to i32*
  %331 = load i32, i32* %330, align 4, !tbaa !205
  store i32 %331, i32* %236, align 4, !tbaa !205
  %332 = getelementptr inbounds i8, i8* %248, i64 456
  %333 = bitcast i8* %332 to i32*
  %334 = load i32, i32* %333, align 8, !tbaa !206
  store i32 %334, i32* %237, align 8, !tbaa !206
  %335 = getelementptr inbounds i8, i8* %248, i64 460
  %336 = bitcast i8* %335 to i32*
  %337 = load i32, i32* %336, align 4, !tbaa !207
  store i32 %337, i32* %238, align 4, !tbaa !207
  %338 = getelementptr inbounds i8, i8* %248, i64 464
  %339 = bitcast i8* %338 to i32*
  %340 = load i32, i32* %339, align 8, !tbaa !208
  store i32 %340, i32* %239, align 8, !tbaa !208
  %341 = getelementptr inbounds i8, i8* %248, i64 468
  %342 = bitcast i8* %341 to i32*
  %343 = load i32, i32* %342, align 4, !tbaa !209
  store i32 %343, i32* %240, align 4, !tbaa !209
  br label %344

344:                                              ; preds = %283, %280
  %345 = getelementptr inbounds i8, i8* %248, i64 904
  %346 = bitcast i8* %345 to i32*
  %347 = load i32, i32* %346, align 8, !tbaa !43
  %348 = add nsw i32 %347, -1
  store i32 %348, i32* %241, align 8, !tbaa !217
  %349 = getelementptr inbounds i8, i8* %248, i64 896
  %350 = bitcast i8* %349 to i64*
  %351 = load i64, i64* %350, align 8, !tbaa !76
  store i64 %351, i64* %243, align 8, !tbaa !76
  br label %378

352:                                              ; preds = %266
  %353 = load i32, i32* %214, align 8, !tbaa !53
  %354 = sext i32 %353 to i64
  %355 = call fastcc noalias i8* @av_malloc(i64 %354) #18
  %356 = getelementptr inbounds i8, i8* %248, i64 72
  %357 = bitcast i8* %356 to i8**
  store i8* %355, i8** %357, align 8, !tbaa !50
  %358 = icmp eq i8* %355, null
  br i1 %358, label %.loopexit, label %359

359:                                              ; preds = %352
  %360 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %247, i64 0, i32 9
  %361 = load i8*, i8** %360, align 8, !tbaa !50
  %362 = load i32, i32* %214, align 8, !tbaa !53
  %363 = sext i32 %362 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %355, i8* align 1 %361, i64 %363, i1 false) #18
  %364 = call fastcc noalias i8* @av_malloc(i64 72) #18
  %365 = getelementptr inbounds i8, i8* %248, i64 80
  %366 = bitcast i8* %365 to i8**
  store i8* %364, i8** %366, align 8, !tbaa !44
  %367 = icmp eq i8* %364, null
  br i1 %367, label %.loopexit, label %368

368:                                              ; preds = %359
  %369 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %247, i64 0, i32 10
  %370 = bitcast %struct.AVCodecInternal** %369 to i8**
  %371 = load i8*, i8** %370, align 8, !tbaa !44
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %364, i8* align 8 %371, i64 72, i1 false) #18, !tbaa.struct !226
  %372 = getelementptr inbounds i8, i8* %364, i64 16
  %373 = bitcast i8* %372 to i32*
  store i32 1, i32* %373, align 8, !tbaa !227
  %374 = load i32 (%struct.AVCodecContext.202*)*, i32 (%struct.AVCodecContext.202*)** %216, align 8, !tbaa !228
  %375 = icmp eq i32 (%struct.AVCodecContext.202*)* %374, null
  br i1 %375, label %382, label %376

376:                                              ; preds = %368
  %377 = call i32 %374(%struct.AVCodecContext.202* nonnull %249) #18
  br label %378

378:                                              ; preds = %376, %344
  %379 = phi %struct.AVCodecContext.202* [ %247, %376 ], [ %249, %344 ]
  %380 = phi i32 [ %377, %376 ], [ %281, %344 ]
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %382, label %.loopexit

382:                                              ; preds = %378, %368
  %383 = phi %struct.AVCodecContext.202* [ %379, %378 ], [ %247, %368 ]
  %384 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246, i32 1
  %385 = call i32 @pthread_create(i64* nonnull %384, %union.pthread_attr_t* null, i8* (i8*)* nonnull @frame_worker_thread, i8* %268) #18
  %386 = icmp eq i32 %385, 0
  %387 = zext i1 %386 to i32
  %388 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %250, i64 %246, i32 2
  store i32 %387, i32* %388, align 8, !tbaa !229
  br i1 %386, label %389, label %392

389:                                              ; preds = %382
  %390 = add nuw nsw i64 %246, 1
  %391 = icmp eq i64 %390, %244
  br i1 %391, label %.loopexit20, label %245

392:                                              ; preds = %382
  %393 = sub nsw i32 0, %385
  br label %.loopexit

.loopexit:                                        ; preds = %378, %359, %352, %245, %392
  %394 = phi i32 [ %393, %392 ], [ -12, %245 ], [ -12, %352 ], [ -12, %359 ], [ %380, %378 ]
  %395 = trunc i64 %246 to i32
  %396 = add nuw nsw i32 %395, 1
  call fastcc void @frame_thread_free(%struct.AVCodecContext.202* %0, i32 %396) #18
  br label %.loopexit20

.loopexit20:                                      ; preds = %389, %.loopexit, %201, %156, %.loopexit21, %137, %109, %99, %98, %9, %7
  %397 = phi i32 [ -1, %7 ], [ 0, %156 ], [ 0, %9 ], [ 0, %98 ], [ -1, %137 ], [ 0, %.loopexit21 ], [ -1, %109 ], [ -1, %99 ], [ 0, %201 ], [ %394, %.loopexit ], [ 0, %389 ]
  ret i32 %397
}

; Function Attrs: nounwind uwtable
define internal noalias i8* @worker.1348(i8*) #5 {
  %2 = bitcast i8* %0 to %struct.AVCodecContext.202*
  %3 = getelementptr inbounds i8, i8* %0, i64 936
  %4 = bitcast i8* %3 to %struct.ThreadContext.211**
  %5 = load %struct.ThreadContext.211*, %struct.ThreadContext.211** %4, align 8, !tbaa !171
  %6 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 6
  %7 = load i32, i32* %6, align 4, !tbaa !221
  %8 = getelementptr inbounds i8, i8* %0, i64 904
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 8, !tbaa !43
  %11 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 10
  %12 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %11) #18
  %13 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 11
  %14 = load i32, i32* %13, align 8, !tbaa !220
  %15 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 8
  %16 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 13
  %17 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 12
  %18 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 9
  %19 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 1
  %20 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 3
  %21 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 7
  %22 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 2
  %23 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 4
  %24 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %5, i64 0, i32 5
  br label %25

25:                                               ; preds = %69, %1
  %26 = phi i32 [ %14, %1 ], [ %77, %69 ]
  %27 = phi i32 [ 0, %1 ], [ %31, %69 ]
  %28 = phi i32 [ %7, %1 ], [ %77, %69 ]
  %29 = add nsw i32 %26, 1
  store i32 %29, i32* %13, align 8, !tbaa !220
  br label %30

30:                                               ; preds = %.loopexit5, %25
  %31 = phi i32 [ %27, %25 ], [ %50, %.loopexit5 ]
  %32 = phi i32 [ %28, %25 ], [ %14, %.loopexit5 ]
  %33 = load i32, i32* %6, align 4, !tbaa !221
  %34 = icmp slt i32 %32, %33
  br i1 %34, label %54, label %35

35:                                               ; preds = %30
  %36 = load i32, i32* %13, align 8, !tbaa !220
  %37 = add nsw i32 %33, %10
  %38 = icmp eq i32 %36, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* nonnull %15) #18
  br label %41

41:                                               ; preds = %39, %35
  %42 = load i32, i32* %17, align 4, !tbaa !230
  %43 = icmp eq i32 %31, %42
  br i1 %43, label %.preheader, label %.loopexit5

.preheader:                                       ; preds = %41, %46
  %44 = load i32, i32* %16, align 8, !tbaa !223
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %.loopexit

46:                                               ; preds = %.preheader
  %47 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %18, %union.pthread_mutex_t* nonnull %11) #18
  %48 = load i32, i32* %17, align 4, !tbaa !230
  %49 = icmp eq i32 %31, %48
  br i1 %49, label %.preheader, label %.loopexit5

.loopexit5:                                       ; preds = %46, %41
  %50 = phi i32 [ %42, %41 ], [ %48, %46 ]
  %51 = load i32, i32* %16, align 8, !tbaa !223
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %30, label %.loopexit

.loopexit:                                        ; preds = %.loopexit5, %.preheader
  %53 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %11) #18
  ret i8* null

54:                                               ; preds = %30
  %55 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %11) #18
  %56 = load i32 (%struct.AVCodecContext.202*, i8*)*, i32 (%struct.AVCodecContext.202*, i8*)** %19, align 8, !tbaa !231
  %57 = icmp eq i32 (%struct.AVCodecContext.202*, i8*)* %56, null
  br i1 %57, label %65, label %58

58:                                               ; preds = %54
  %59 = load i8*, i8** %20, align 8, !tbaa !232
  %60 = load i32, i32* %21, align 8, !tbaa !222
  %61 = mul nsw i32 %60, %32
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = tail call i32 %56(%struct.AVCodecContext.202* %2, i8* %63) #18
  br label %69

65:                                               ; preds = %54
  %66 = load i32 (%struct.AVCodecContext.202*, i8*, i32, i32)*, i32 (%struct.AVCodecContext.202*, i8*, i32, i32)** %22, align 8, !tbaa !233
  %67 = load i8*, i8** %20, align 8, !tbaa !232
  %68 = tail call i32 %66(%struct.AVCodecContext.202* %2, i8* %67, i32 %32, i32 %14) #18
  br label %69

69:                                               ; preds = %65, %58
  %70 = phi i32 [ %64, %58 ], [ %68, %65 ]
  %71 = load i32*, i32** %23, align 8, !tbaa !234
  %72 = load i32, i32* %24, align 8, !tbaa !235
  %73 = srem i32 %32, %72
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %71, i64 %74
  store i32 %70, i32* %75, align 4, !tbaa !28
  %76 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %11) #18
  %77 = load i32, i32* %13, align 8, !tbaa !220
  br label %25
}

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_thread_free(%struct.AVCodecContext.202*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 178
  %3 = load i32, i32* %2, align 8, !tbaa !54
  %4 = and i32 %3, 1
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 176
  %8 = load i32, i32* %7, align 8, !tbaa !43
  tail call fastcc void @frame_thread_free(%struct.AVCodecContext.202* nonnull %0, i32 %8)
  br label %41

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 182
  %11 = bitcast i8** %10 to %struct.ThreadContext.211**
  %12 = load %struct.ThreadContext.211*, %struct.ThreadContext.211** %11, align 8, !tbaa !171
  %13 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %12, i64 0, i32 10
  %14 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %13) #18
  %15 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %12, i64 0, i32 13
  store i32 1, i32* %15, align 8, !tbaa !223
  %16 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %12, i64 0, i32 9
  %17 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* nonnull %16) #18
  %18 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %13) #18
  %19 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 176
  %20 = load i32, i32* %19, align 8, !tbaa !43
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %.loopexit

22:                                               ; preds = %9
  %23 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %12, i64 0, i32 0
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %30, %24 ]
  %26 = load i64*, i64** %23, align 8, !tbaa !218
  %27 = getelementptr inbounds i64, i64* %26, i64 %25
  %28 = load i64, i64* %27, align 8, !tbaa !26
  %29 = tail call i32 @pthread_join(i64 %28, i8** null) #18
  %30 = add nuw nsw i64 %25, 1
  %31 = load i32, i32* %19, align 8, !tbaa !43
  %32 = sext i32 %31 to i64
  %33 = icmp slt i64 %30, %32
  br i1 %33, label %24, label %.loopexit

.loopexit:                                        ; preds = %24, %9
  %34 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %13) #18
  %35 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* nonnull %16) #18
  %36 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %12, i64 0, i32 8
  %37 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* nonnull %36) #18
  %38 = bitcast %struct.ThreadContext.211* %12 to i8**
  %39 = load i8*, i8** %38, align 8, !tbaa !218
  tail call fastcc void @av_free(i8* %39) #18
  %40 = bitcast i8** %10 to i8*
  tail call fastcc void @av_freep(i8* nonnull %40) #18
  br label %41

41:                                               ; preds = %.loopexit, %6
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @avcodec_thread_execute(%struct.AVCodecContext.202*, i32 (%struct.AVCodecContext.202*, i8*)*, i8*, i32*, i32, i32) #5 {
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 182
  %9 = bitcast i8** %8 to %struct.ThreadContext.211**
  %10 = load %struct.ThreadContext.211*, %struct.ThreadContext.211** %9, align 8, !tbaa !171
  %11 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #18
  %12 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 178
  %13 = load i32, i32* %12, align 8, !tbaa !54
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 176
  %18 = load i32, i32* %17, align 8, !tbaa !43
  %19 = icmp slt i32 %18, 2
  br i1 %19, label %20, label %24

20:                                               ; preds = %16, %6
  %21 = bitcast %struct.AVCodecContext.202* %0 to %struct.AVCodecContext.129*
  %22 = bitcast i32 (%struct.AVCodecContext.202*, i8*)* %1 to i32 (%struct.AVCodecContext.129*, i8*)*
  %23 = tail call i32 @avcodec_default_execute(%struct.AVCodecContext.129* nonnull %21, i32 (%struct.AVCodecContext.129*, i8*)* %22, i8* %2, i32* %3, i32 %4, i32 %5) #18
  br label %59

24:                                               ; preds = %16
  %25 = icmp slt i32 %4, 1
  br i1 %25, label %59, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 10
  %28 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %27) #18
  %29 = load i32, i32* %17, align 8, !tbaa !43
  %30 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 11
  store i32 %29, i32* %30, align 8, !tbaa !220
  %31 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 6
  store i32 %4, i32* %31, align 4, !tbaa !221
  %32 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 7
  store i32 %5, i32* %32, align 8, !tbaa !222
  %33 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 3
  store i8* %2, i8** %33, align 8, !tbaa !232
  %34 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 1
  store i32 (%struct.AVCodecContext.202*, i8*)* %1, i32 (%struct.AVCodecContext.202*, i8*)** %34, align 8, !tbaa !231
  %35 = icmp eq i32* %3, null
  %36 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 4
  %37 = select i1 %35, i32* %7, i32* %3
  %38 = select i1 %35, i32 1, i32 %4
  store i32* %37, i32** %36, align 8, !tbaa !234
  %39 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 5
  store i32 %38, i32* %39, align 8
  %40 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 12
  %41 = load i32, i32* %40, align 4, !tbaa !230
  %42 = add i32 %41, 1
  store i32 %42, i32* %40, align 4, !tbaa !230
  %43 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 9
  %44 = call i32 @pthread_cond_broadcast(%union.pthread_cond_t* nonnull %43) #18
  %45 = load i32, i32* %17, align 8, !tbaa !43
  %46 = load i32, i32* %30, align 8, !tbaa !220
  %47 = load i32, i32* %31, align 4, !tbaa !221
  %48 = add nsw i32 %47, %45
  %49 = icmp eq i32 %46, %48
  br i1 %49, label %.loopexit, label %50

50:                                               ; preds = %26
  %51 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %10, i64 0, i32 8
  br label %52

52:                                               ; preds = %52, %50
  %53 = call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %51, %union.pthread_mutex_t* nonnull %27) #18
  %54 = load i32, i32* %30, align 8, !tbaa !220
  %55 = load i32, i32* %31, align 4, !tbaa !221
  %56 = add nsw i32 %55, %45
  %57 = icmp eq i32 %54, %56
  br i1 %57, label %.loopexit, label %52

.loopexit:                                        ; preds = %52, %26
  %58 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %27) #18
  br label %59

59:                                               ; preds = %.loopexit, %24, %20
  %60 = phi i32 [ %23, %20 ], [ 0, %.loopexit ], [ 0, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #18
  ret i32 %60
}

; Function Attrs: nounwind uwtable
define internal i32 @avcodec_thread_execute2(%struct.AVCodecContext.202*, i32 (%struct.AVCodecContext.202*, i8*, i32, i32)*, i8*, i32*, i32) #5 {
  %6 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 182
  %7 = bitcast i8** %6 to %struct.ThreadContext.211**
  %8 = load %struct.ThreadContext.211*, %struct.ThreadContext.211** %7, align 8, !tbaa !171
  %9 = getelementptr inbounds %struct.ThreadContext.211, %struct.ThreadContext.211* %8, i64 0, i32 2
  store i32 (%struct.AVCodecContext.202*, i8*, i32, i32)* %1, i32 (%struct.AVCodecContext.202*, i8*, i32, i32)** %9, align 8, !tbaa !233
  %10 = tail call i32 @avcodec_thread_execute(%struct.AVCodecContext.202* %0, i32 (%struct.AVCodecContext.202*, i8*)* null, i8* %2, i32* %3, i32 %4, i32 0)
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal noalias i8* @frame_worker_thread(i8*) #5 {
  %2 = bitcast i8* %0 to %struct.FrameThreadContext**
  %3 = load %struct.FrameThreadContext*, %struct.FrameThreadContext** %2, align 8, !tbaa !188
  %4 = getelementptr inbounds i8, i8* %0, i64 248
  %5 = bitcast i8* %4 to %struct.AVCodecContext.202**
  %6 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %5, align 8, !tbaa !176
  %7 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %6, i64 0, i32 3
  %8 = load %struct.AVCodec.196*, %struct.AVCodec.196** %7, align 8, !tbaa !40
  %9 = getelementptr inbounds i8, i8* %0, i64 168
  %10 = bitcast i8* %9 to %union.pthread_mutex_t*
  %11 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %10) #18
  %12 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %3, i64 0, i32 6
  %13 = getelementptr inbounds i8, i8* %0, i64 880
  %14 = bitcast i8* %13 to i32*
  %15 = getelementptr inbounds i8, i8* %0, i64 24
  %16 = bitcast i8* %15 to %union.pthread_cond_t*
  %17 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %8, i64 0, i32 16
  %18 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %6, i64 0, i32 179
  %19 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %6, i64 0, i32 112
  %20 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %6, i64 0, i32 182
  %21 = bitcast i8** %20 to %struct.PerThreadContext**
  %22 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %6, i64 0, i32 178
  %23 = bitcast %struct.AVCodecContext.202* %6 to i8*
  %24 = getelementptr inbounds i8, i8* %0, i64 352
  %25 = getelementptr inbounds i8, i8* %0, i64 872
  %26 = bitcast i8* %25 to i32*
  %27 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %8, i64 0, i32 22
  %28 = getelementptr inbounds i8, i8* %0, i64 256
  %29 = bitcast i8* %28 to %struct.AVPacket*
  %30 = getelementptr inbounds i8, i8* %0, i64 876
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8, i8* %0, i64 448
  %33 = bitcast i8* %32 to i8**
  %34 = getelementptr inbounds i8, i8* %0, i64 208
  %35 = bitcast i8* %34 to %union.pthread_mutex_t*
  %36 = getelementptr inbounds i8, i8* %0, i64 19372
  %37 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %6, i64 0, i32 5
  %38 = getelementptr inbounds i8, i8* %0, i64 19092
  %39 = bitcast i8* %38 to [35 x [2 x i32]]*
  %40 = getelementptr inbounds i8, i8* %0, i64 72
  %41 = bitcast i8* %40 to %union.pthread_cond_t*
  %42 = getelementptr inbounds i8, i8* %0, i64 120
  %43 = bitcast i8* %42 to %union.pthread_cond_t*
  %44 = bitcast i8* %24 to %struct.AVFrame.123*
  br label %45

45:                                               ; preds = %124, %1
  %46 = load i32, i32* %14, align 8, !tbaa !194
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %.preheader, label %.loopexit1

.preheader:                                       ; preds = %45, %50
  %48 = load i32, i32* %12, align 4, !tbaa !236
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %.loopexit

50:                                               ; preds = %.preheader
  %51 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %16, %union.pthread_mutex_t* nonnull %10) #18
  %52 = load i32, i32* %14, align 8, !tbaa !194
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %.preheader, label %.loopexit1

.loopexit1:                                       ; preds = %50, %45
  %54 = load i32, i32* %12, align 4, !tbaa !236
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %.loopexit

56:                                               ; preds = %.loopexit1
  %57 = load i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)*, i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)** %17, align 8, !tbaa !210
  %58 = icmp eq i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)* %57, null
  br i1 %58, label %59, label %81

59:                                               ; preds = %56
  %60 = load i32, i32* %18, align 4, !tbaa !185
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %59
  %63 = load i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)*, i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)** %19, align 8, !tbaa !138
  %64 = icmp eq i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)* %63, bitcast (i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)* @avcodec_default_get_buffer to i32 (%struct.AVCodecContext.202*, %struct.AVFrame.195*)*)
  br i1 %64, label %65, label %81

65:                                               ; preds = %62, %59
  %66 = load %struct.PerThreadContext*, %struct.PerThreadContext** %21, align 8, !tbaa !171
  %67 = load i32, i32* %22, align 8, !tbaa !54
  %68 = and i32 %67, 1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %81, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %66, i64 0, i32 14
  %72 = load i32, i32* %71, align 8, !tbaa !194
  %73 = icmp eq i32 %72, 3
  br i1 %73, label %74, label %75

74:                                               ; preds = %70
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %23, i32 24, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3.1341, i64 0, i64 0)) #18
  br label %75

75:                                               ; preds = %74, %70
  %76 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %66, i64 0, i32 7
  %77 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %76) #18
  store i32 3, i32* %71, align 8, !tbaa !194
  %78 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %66, i64 0, i32 4
  %79 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* nonnull %78) #18
  %80 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %76) #18
  br label %81

81:                                               ; preds = %75, %65, %62, %56
  tail call fastcc void @avcodec_get_frame_defaults(%struct.AVFrame.123* nonnull %44) #18
  store i32 0, i32* %26, align 8, !tbaa !214
  %82 = load i32 (%struct.AVCodecContext.202*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.202*, i8*, i32*, %struct.AVPacket*)** %27, align 8, !tbaa !151
  %83 = tail call i32 %82(%struct.AVCodecContext.202* %6, i8* nonnull %24, i32* nonnull %26, %struct.AVPacket* nonnull %29) #18
  store i32 %83, i32* %31, align 4, !tbaa !212
  store i8* %24, i8** %33, align 8, !tbaa !237
  %84 = load i32, i32* %14, align 8, !tbaa !194
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %86, label %102

86:                                               ; preds = %81
  %87 = load %struct.PerThreadContext*, %struct.PerThreadContext** %21, align 8, !tbaa !171
  %88 = load i32, i32* %22, align 8, !tbaa !54
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %102, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %87, i64 0, i32 14
  %93 = load i32, i32* %92, align 8, !tbaa !194
  %94 = icmp eq i32 %93, 3
  br i1 %94, label %95, label %96

95:                                               ; preds = %91
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %23, i32 24, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3.1341, i64 0, i64 0)) #18
  br label %96

96:                                               ; preds = %95, %91
  %97 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %87, i64 0, i32 7
  %98 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %97) #18
  store i32 3, i32* %92, align 8, !tbaa !194
  %99 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %87, i64 0, i32 4
  %100 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* nonnull %99) #18
  %101 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %97) #18
  br label %102

102:                                              ; preds = %96, %86, %81
  %103 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %35) #18
  br label %104

104:                                              ; preds = %121, %102
  %105 = phi i64 [ 0, %102 ], [ %122, %121 ]
  %106 = getelementptr inbounds i8, i8* %36, i64 %105
  %107 = load volatile i8, i8* %106, align 1, !tbaa !33
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %121, label %109

109:                                              ; preds = %104
  %110 = load i32, i32* %26, align 8, !tbaa !214
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %118

112:                                              ; preds = %109
  %113 = load i32, i32* %31, align 4, !tbaa !212
  %114 = icmp slt i32 %113, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %112
  %116 = load i32, i32* %37, align 8, !tbaa !238
  %117 = icmp eq i32 %116, 28
  br i1 %117, label %121, label %118

118:                                              ; preds = %115, %112, %109
  %119 = getelementptr inbounds [35 x [2 x i32]], [35 x [2 x i32]]* %39, i64 0, i64 %105, i64 0
  store volatile i32 2147483647, i32* %119, align 4, !tbaa !28
  %120 = getelementptr inbounds [35 x [2 x i32]], [35 x [2 x i32]]* %39, i64 0, i64 %105, i64 1
  store volatile i32 2147483647, i32* %120, align 4, !tbaa !28
  br label %121

121:                                              ; preds = %118, %115, %104
  %122 = add nuw nsw i64 %105, 1
  %123 = icmp eq i64 %122, 35
  br i1 %123, label %124, label %104

124:                                              ; preds = %121
  store i32 0, i32* %14, align 8, !tbaa !194
  %125 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* nonnull %41) #18
  %126 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* nonnull %43) #18
  %127 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %35) #18
  br label %45

.loopexit:                                        ; preds = %.loopexit1, %.preheader
  %128 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %10) #18
  ret i8* null
}

; Function Attrs: nounwind uwtable
define internal fastcc void @frame_thread_free(%struct.AVCodecContext.202*, i32) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 182
  %4 = bitcast i8** %3 to %struct.FrameThreadContext**
  %5 = load %struct.FrameThreadContext*, %struct.FrameThreadContext** %4, align 8, !tbaa !171
  %6 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %0, i64 0, i32 3
  %7 = load %struct.AVCodec.196*, %struct.AVCodec.196** %6, align 8, !tbaa !40
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %.loopexit13

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %5, i64 0, i32 0
  %11 = zext i32 %1 to i64
  br label %12

12:                                               ; preds = %30, %9
  %13 = phi i64 [ 0, %9 ], [ %32, %30 ]
  %14 = load %struct.PerThreadContext*, %struct.PerThreadContext** %10, align 8, !tbaa !174
  %15 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %14, i64 %13, i32 14
  %16 = load i32, i32* %15, align 8, !tbaa !194
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %14, i64 %13, i32 7
  %20 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %19) #18
  %21 = load i32, i32* %15, align 8, !tbaa !194
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %.loopexit12, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %14, i64 %13, i32 5
  br label %25

25:                                               ; preds = %25, %23
  %26 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %24, %union.pthread_mutex_t* nonnull %19) #18
  %27 = load i32, i32* %15, align 8, !tbaa !194
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %.loopexit12, label %25

.loopexit12:                                      ; preds = %25, %18
  %29 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %19) #18
  br label %30

30:                                               ; preds = %.loopexit12, %12
  %31 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %14, i64 %13, i32 12
  store i32 0, i32* %31, align 8, !tbaa !214
  %32 = add nuw nsw i64 %13, 1
  %33 = icmp eq i64 %32, %11
  br i1 %33, label %.loopexit13, label %12

.loopexit13:                                      ; preds = %30, %2
  %34 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %5, i64 0, i32 1
  %35 = load %struct.PerThreadContext*, %struct.PerThreadContext** %34, align 8, !tbaa !189
  %36 = icmp eq %struct.PerThreadContext* %35, null
  br i1 %36, label %136, label %37

37:                                               ; preds = %.loopexit13
  %38 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %5, i64 0, i32 0
  %39 = load %struct.PerThreadContext*, %struct.PerThreadContext** %38, align 8, !tbaa !174
  %40 = icmp eq %struct.PerThreadContext* %35, %39
  br i1 %40, label %136, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %39, i64 0, i32 8
  %43 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %42, align 8, !tbaa !176
  %44 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %35, i64 0, i32 8
  %45 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %44, align 8, !tbaa !176
  %46 = icmp eq %struct.AVCodecContext.202* %43, %45
  br i1 %46, label %112, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 20
  %49 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 20
  %50 = bitcast %struct.AVRational* %49 to i64*
  %51 = bitcast %struct.AVRational* %48 to i64*
  %52 = load i64, i64* %50, align 4
  store i64 %52, i64* %51, align 4
  %53 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 23
  %54 = load i32, i32* %53, align 4, !tbaa !70
  %55 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 23
  store i32 %54, i32* %55, align 4, !tbaa !70
  %56 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 24
  %57 = load i32, i32* %56, align 8, !tbaa !71
  %58 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 24
  store i32 %57, i32* %58, align 8, !tbaa !71
  %59 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 28
  %60 = load i32, i32* %59, align 8, !tbaa !69
  %61 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 28
  store i32 %60, i32* %61, align 8, !tbaa !69
  %62 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 25
  %63 = load i32, i32* %62, align 4, !tbaa !195
  %64 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 25
  store i32 %63, i32* %64, align 4, !tbaa !195
  %65 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 26
  %66 = load i32, i32* %65, align 8, !tbaa !196
  %67 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 26
  store i32 %66, i32* %67, align 8, !tbaa !196
  %68 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 39
  %69 = load i32, i32* %68, align 4, !tbaa !197
  %70 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 39
  store i32 %69, i32* %70, align 4, !tbaa !197
  %71 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 170
  %72 = load i32, i32* %71, align 4, !tbaa !198
  %73 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 170
  store i32 %72, i32* %73, align 4, !tbaa !198
  %74 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 172
  %75 = load i32, i32* %74, align 4, !tbaa !199
  %76 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 172
  store i32 %75, i32* %76, align 4, !tbaa !199
  %77 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 51
  %78 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 51
  %79 = bitcast %struct.AVRational* %78 to i64*
  %80 = bitcast %struct.AVRational* %77 to i64*
  %81 = load i64, i64* %79, align 8
  store i64 %81, i64* %80, align 8
  %82 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 62
  %83 = load i32, i32* %82, align 8, !tbaa !200
  %84 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 62
  store i32 %83, i32* %84, align 8, !tbaa !200
  %85 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 184
  %86 = load i32, i32* %85, align 4, !tbaa !201
  %87 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 184
  store i32 %86, i32* %87, align 4, !tbaa !201
  %88 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 185
  %89 = load i32, i32* %88, align 8, !tbaa !202
  %90 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 185
  store i32 %89, i32* %90, align 8, !tbaa !202
  %91 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 173
  %92 = load i32, i32* %91, align 8, !tbaa !203
  %93 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 173
  store i32 %92, i32* %93, align 8, !tbaa !203
  %94 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 21
  %95 = load i32, i32* %94, align 4, !tbaa !204
  %96 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 21
  store i32 %95, i32* %96, align 4, !tbaa !204
  %97 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 93
  %98 = load i32, i32* %97, align 4, !tbaa !205
  %99 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 93
  store i32 %98, i32* %99, align 4, !tbaa !205
  %100 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 94
  %101 = load i32, i32* %100, align 8, !tbaa !206
  %102 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 94
  store i32 %101, i32* %102, align 8, !tbaa !206
  %103 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 95
  %104 = load i32, i32* %103, align 4, !tbaa !207
  %105 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 95
  store i32 %104, i32* %105, align 4, !tbaa !207
  %106 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 96
  %107 = load i32, i32* %106, align 8, !tbaa !208
  %108 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 96
  store i32 %107, i32* %108, align 8, !tbaa !208
  %109 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %45, i64 0, i32 97
  %110 = load i32, i32* %109, align 4, !tbaa !209
  %111 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 97
  store i32 %110, i32* %111, align 4, !tbaa !209
  br label %112

112:                                              ; preds = %47, %41
  %113 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %43, i64 0, i32 3
  %114 = load %struct.AVCodec.196*, %struct.AVCodec.196** %113, align 8, !tbaa !40
  %115 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %114, i64 0, i32 16
  %116 = load i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)*, i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)** %115, align 8, !tbaa !210
  %117 = icmp eq i32 (%struct.AVCodecContext.202*, %struct.AVCodecContext.202*)* %116, null
  br i1 %117, label %136, label %118

118:                                              ; preds = %112
  %119 = tail call i32 %116(%struct.AVCodecContext.202* nonnull %43, %struct.AVCodecContext.202* %45) #18
  %120 = icmp slt i32 %119, 0
  br i1 %120, label %121, label %136

121:                                              ; preds = %118
  %122 = bitcast %struct.AVCodecContext.202* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %122, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10.1349, i64 0, i64 0)) #18
  %123 = load %struct.PerThreadContext*, %struct.PerThreadContext** %38, align 8, !tbaa !174
  %124 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %123, i64 0, i32 8
  %125 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %124, align 8, !tbaa !176
  %126 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %125, i64 0, i32 10
  %127 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %126, align 8, !tbaa !44
  %128 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %127, i64 0, i32 2
  %129 = load i32, i32* %128, align 8, !tbaa !227
  %130 = load %struct.PerThreadContext*, %struct.PerThreadContext** %34, align 8, !tbaa !189
  %131 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %130, i64 0, i32 8
  %132 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %131, align 8, !tbaa !176
  %133 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %132, i64 0, i32 10
  %134 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %133, align 8, !tbaa !44
  %135 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %134, i64 0, i32 2
  store i32 %129, i32* %135, align 8, !tbaa !227
  store i32 1, i32* %128, align 8, !tbaa !227
  br label %136

136:                                              ; preds = %121, %118, %112, %37, %.loopexit13
  %137 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %5, i64 0, i32 6
  store i32 1, i32* %137, align 4, !tbaa !236
  br i1 %8, label %138, label %.loopexit

138:                                              ; preds = %136
  %139 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %5, i64 0, i32 0
  %140 = getelementptr inbounds %struct.AVCodec.196, %struct.AVCodec.196* %7, i64 0, i32 23
  %141 = bitcast {}** %140 to i32 (%struct.AVCodecContext.202*)**
  %142 = zext i32 %1 to i64
  br label %143

143:                                              ; preds = %.loopexit11, %138
  %144 = phi i64 [ 0, %138 ], [ %199, %.loopexit11 ]
  %145 = load %struct.PerThreadContext*, %struct.PerThreadContext** %139, align 8, !tbaa !174
  %146 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 6
  %147 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %146) #18
  %148 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 3
  %149 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* nonnull %148) #18
  %150 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %146) #18
  %151 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 2
  %152 = load i32, i32* %151, align 8, !tbaa !229
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %143
  %155 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 1
  %156 = load i64, i64* %155, align 8, !tbaa !239
  %157 = tail call i32 @pthread_join(i64 %156, i8** null) #18
  br label %158

158:                                              ; preds = %154, %143
  store i32 0, i32* %151, align 8, !tbaa !229
  %159 = load i32 (%struct.AVCodecContext.202*)*, i32 (%struct.AVCodecContext.202*)** %141, align 8, !tbaa !240
  %160 = icmp eq i32 (%struct.AVCodecContext.202*)* %159, null
  br i1 %160, label %165, label %161

161:                                              ; preds = %158
  %162 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 8
  %163 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %162, align 8, !tbaa !176
  %164 = tail call i32 %159(%struct.AVCodecContext.202* %163) #18
  br label %165

165:                                              ; preds = %161, %158
  store %struct.AVCodec.196* null, %struct.AVCodec.196** %6, align 8, !tbaa !40
  %166 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 16
  %167 = load i32, i32* %166, align 8, !tbaa !191
  %168 = icmp sgt i32 %167, 0
  br i1 %168, label %169, label %.loopexit11

169:                                              ; preds = %165
  %170 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 0
  %171 = load %struct.FrameThreadContext*, %struct.FrameThreadContext** %170, align 8, !tbaa !188
  %172 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %171, i64 0, i32 2
  br label %173

173:                                              ; preds = %173, %169
  %174 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %172) #18
  %175 = load i32, i32* %166, align 8, !tbaa !191
  %176 = add nsw i32 %175, -1
  store i32 %176, i32* %166, align 8, !tbaa !191
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 15, i64 %177
  %179 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 15, i64 %177, i32 37
  %180 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %179, align 8, !tbaa !192
  %181 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %180, i64 0, i32 182
  %182 = bitcast i8** %181 to %struct.PerThreadContext**
  %183 = load %struct.PerThreadContext*, %struct.PerThreadContext** %182, align 8, !tbaa !171
  %184 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %145, i64 %144, i32 15, i64 %177, i32 38
  %185 = bitcast i8** %184 to i64*
  %186 = load i64, i64* %185, align 8, !tbaa !193
  %187 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %183, i64 0, i32 17, i64 0, i64 0
  %188 = ptrtoint i32* %187 to i64
  %189 = sub i64 %186, %188
  %190 = ashr exact i64 %189, 2
  %191 = sdiv i64 %190, 2
  %192 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %183, i64 0, i32 18, i64 %191
  store volatile i8 0, i8* %192, align 1, !tbaa !33
  store i8* null, i8** %184, align 8, !tbaa !193
  %193 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %179, align 8, !tbaa !192
  %194 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %193, i64 0, i32 113
  %195 = load void (%struct.AVCodecContext.202*, %struct.AVFrame.195*)*, void (%struct.AVCodecContext.202*, %struct.AVFrame.195*)** %194, align 8, !tbaa !58
  tail call void %195(%struct.AVCodecContext.202* %193, %struct.AVFrame.195* nonnull %178) #18
  %196 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %172) #18
  %197 = load i32, i32* %166, align 8, !tbaa !191
  %198 = icmp sgt i32 %197, 0
  br i1 %198, label %173, label %.loopexit11

.loopexit11:                                      ; preds = %173, %165
  %199 = add nuw nsw i64 %144, 1
  %200 = icmp eq i64 %199, %142
  br i1 %200, label %.preheader, label %143

.preheader:                                       ; preds = %.loopexit11, %229
  %201 = phi i64 [ %231, %229 ], [ 0, %.loopexit11 ]
  %202 = load %struct.PerThreadContext*, %struct.PerThreadContext** %139, align 8, !tbaa !174
  %203 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %202, i64 %201, i32 8
  %204 = bitcast %struct.AVCodecContext.202** %203 to %struct.AVCodecContext.129**
  %205 = load %struct.AVCodecContext.129*, %struct.AVCodecContext.129** %204, align 8, !tbaa !176
  tail call fastcc void @avcodec_default_free_buffers(%struct.AVCodecContext.129* %205) #18
  %206 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %202, i64 %201, i32 6
  %207 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %206) #18
  %208 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %202, i64 %201, i32 7
  %209 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %208) #18
  %210 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %202, i64 %201, i32 3
  %211 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* nonnull %210) #18
  %212 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %202, i64 %201, i32 4
  %213 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* nonnull %212) #18
  %214 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %202, i64 %201, i32 5
  %215 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* nonnull %214) #18
  %216 = getelementptr inbounds %struct.PerThreadContext, %struct.PerThreadContext* %202, i64 %201, i32 9, i32 2
  %217 = bitcast i8** %216 to i8*
  tail call fastcc void @av_freep(i8* nonnull %217) #18
  %218 = icmp eq i64 %201, 0
  br i1 %218, label %229, label %219

219:                                              ; preds = %.preheader
  %220 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %203, align 8, !tbaa !176
  %221 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %220, i64 0, i32 9
  %222 = bitcast i8** %221 to i8*
  tail call fastcc void @av_freep(i8* nonnull %222) #18
  %223 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %203, align 8, !tbaa !176
  %224 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %223, i64 0, i32 10
  %225 = bitcast %struct.AVCodecInternal** %224 to i8*
  tail call fastcc void @av_freep(i8* nonnull %225) #18
  %226 = load %struct.AVCodecContext.202*, %struct.AVCodecContext.202** %203, align 8, !tbaa !176
  %227 = getelementptr inbounds %struct.AVCodecContext.202, %struct.AVCodecContext.202* %226, i64 0, i32 50
  %228 = bitcast i32** %227 to i8*
  tail call fastcc void @av_freep(i8* nonnull %228) #18
  br label %229

229:                                              ; preds = %219, %.preheader
  %230 = bitcast %struct.AVCodecContext.202** %203 to i8*
  tail call fastcc void @av_freep(i8* nonnull %230) #18
  %231 = add nuw nsw i64 %201, 1
  %232 = icmp eq i64 %231, %142
  br i1 %232, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %229, %136
  %233 = bitcast %struct.FrameThreadContext* %5 to i8*
  tail call fastcc void @av_freep(i8* %233) #18
  %234 = getelementptr inbounds %struct.FrameThreadContext, %struct.FrameThreadContext* %5, i64 0, i32 2
  %235 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %234) #18
  %236 = bitcast i8** %3 to i8*
  tail call fastcc void @av_freep(i8* nonnull %236) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @raw_init_encoder(%struct.AVCodecContext.129* nocapture) #5 {
  %2 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %3 = load i32, i32* %2, align 8, !tbaa !69
  %4 = tail call fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %3) #18
  %5 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 9
  %6 = bitcast i8** %5 to %struct.AVFrame.123**
  %7 = load %struct.AVFrame.123*, %struct.AVFrame.123** %6, align 8, !tbaa !50
  %8 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 175
  store %struct.AVFrame.123* %7, %struct.AVFrame.123** %8, align 8, !tbaa !76
  tail call fastcc void @avcodec_get_frame_defaults(%struct.AVFrame.123* %7) #18
  %9 = load %struct.AVFrame.123*, %struct.AVFrame.123** %8, align 8, !tbaa !76
  %10 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %9, i64 0, i32 8
  store i32 1, i32* %10, align 4, !tbaa !68
  %11 = tail call fastcc i32 @av_get_bits_per_pixel(%struct.AVPixFmtDescriptor* %4) #18
  %12 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 172
  store i32 %11, i32* %12, align 4, !tbaa !199
  %13 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 6
  %14 = load i32, i32* %13, align 4, !tbaa !241
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %1
  %17 = load i32, i32* %2, align 8, !tbaa !69
  %18 = tail call fastcc i32 @avcodec_pix_fmt_to_codec_tag(i32 %17) #18
  store i32 %18, i32* %13, align 4, !tbaa !241
  br label %19

19:                                               ; preds = %16, %1
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @raw_encode(%struct.AVCodecContext.129*, %struct.AVPacket* nocapture, %struct.AVFrame.123* nocapture readonly, i32* nocapture) #5 {
  %5 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %6 = load i32, i32* %5, align 8, !tbaa !69
  %7 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %8 = load i32, i32* %7, align 4, !tbaa !70
  %9 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %10 = load i32, i32* %9, align 8, !tbaa !71
  %11 = tail call fastcc i32 @avpicture_get_size(i32 %6, i32 %8, i32 %10) #18
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %57, label %13

13:                                               ; preds = %4
  %14 = tail call fastcc i32 @ff_alloc_packet2(%struct.AVCodecContext.129* nonnull %0, %struct.AVPacket* %1, i32 %11) #18
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %57, label %16

16:                                               ; preds = %13
  %17 = bitcast %struct.AVFrame.123* %2 to %struct.AVPicture*
  %18 = load i32, i32* %5, align 8, !tbaa !69
  %19 = load i32, i32* %7, align 4, !tbaa !70
  %20 = load i32, i32* %9, align 8, !tbaa !71
  %21 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 2
  %22 = load i8*, i8** %21, align 8, !tbaa !16
  %23 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 3
  %24 = load i32, i32* %23, align 8, !tbaa !17
  %25 = tail call fastcc i32 @avpicture_layout(%struct.AVPicture* %17, i32 %18, i32 %19, i32 %20, i8* %22, i32 %24) #18
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %57, label %27

27:                                               ; preds = %16
  %28 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 6
  %29 = load i32, i32* %28, align 4, !tbaa !241
  %30 = icmp eq i32 %29, 846624121
  %31 = icmp ne i32 %25, 0
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %.loopexit

33:                                               ; preds = %27
  %34 = load i32, i32* %5, align 8, !tbaa !69
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %.loopexit

36:                                               ; preds = %33
  %37 = load i32, i32* %9, align 8, !tbaa !71
  %38 = load i32, i32* %7, align 4, !tbaa !70
  %39 = shl i32 %37, 1
  %40 = mul i32 %39, %38
  %41 = icmp sgt i32 %40, 1
  br i1 %41, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %36, %.preheader
  %42 = phi i64 [ %47, %.preheader ], [ 1, %36 ]
  %43 = load i8*, i8** %21, align 8, !tbaa !16
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  %45 = load i8, i8* %44, align 1, !tbaa !33
  %46 = xor i8 %45, -128
  store i8 %46, i8* %44, align 1, !tbaa !33
  %47 = add nuw nsw i64 %42, 2
  %48 = load i32, i32* %9, align 8, !tbaa !71
  %49 = load i32, i32* %7, align 4, !tbaa !70
  %50 = shl i32 %48, 1
  %51 = mul i32 %50, %49
  %52 = sext i32 %51 to i64
  %53 = icmp slt i64 %47, %52
  br i1 %53, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %36, %33, %27
  %54 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 5
  %55 = load i32, i32* %54, align 8, !tbaa !22
  %56 = or i32 %55, 1
  store i32 %56, i32* %54, align 8, !tbaa !22
  store i32 1, i32* %3, align 4, !tbaa !28
  br label %57

57:                                               ; preds = %.loopexit, %16, %13, %4
  %58 = phi i32 [ 0, %.loopexit ], [ %11, %4 ], [ %14, %13 ], [ %25, %16 ]
  ret i32 %58
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc i32 @avcodec_pix_fmt_to_codec_tag(i32) unnamed_addr #15 {
  br label %2

2:                                                ; preds = %9, %1
  %3 = phi i32 [ 0, %1 ], [ %12, %9 ]
  %4 = phi %struct.AVRational* [ getelementptr inbounds ([154 x %struct.AVRational], [154 x %struct.AVRational]* @ff_raw_pix_fmt_tags, i64 0, i64 0), %1 ], [ %10, %9 ]
  %5 = icmp eq i32 %3, %0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %4, i64 0, i32 1
  %8 = load i32, i32* %7, align 4, !tbaa !242
  br label %.loopexit

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %4, i64 1
  %11 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 4, !tbaa !244
  %13 = icmp sgt i32 %12, -1
  br i1 %13, label %2, label %.loopexit

.loopexit:                                        ; preds = %9, %6
  %14 = phi i32 [ %8, %6 ], [ 0, %9 ]
  ret i32 %14
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #6

; Function Attrs: nounwind uwtable
define internal fastcc i8* @av_fast_realloc(i8*, i32* nocapture, i64) unnamed_addr #5 {
  %4 = load i32, i32* %1, align 4, !tbaa !28
  %5 = zext i32 %4 to i64
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %17, label %7

7:                                                ; preds = %3
  %8 = mul i64 %2, 17
  %9 = lshr i64 %8, 4
  %10 = add nuw nsw i64 %9, 32
  %11 = icmp ugt i64 %10, %2
  %12 = select i1 %11, i64 %10, i64 %2
  %13 = tail call fastcc i8* @av_realloc(i8* %0, i64 %12) #18
  %14 = icmp eq i8* %13, null
  %15 = trunc i64 %12 to i32
  %16 = select i1 %14, i32 0, i32 %15
  store i32 %16, i32* %1, align 4, !tbaa !28
  br label %17

17:                                               ; preds = %7, %3
  %18 = phi i8* [ %13, %7 ], [ %0, %3 ]
  ret i8* %18
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_fast_malloc(i8* nocapture, i32* nocapture, i64) unnamed_addr #5 {
  %4 = bitcast i8* %0 to i8**
  %5 = load i32, i32* %1, align 4, !tbaa !28
  %6 = zext i32 %5 to i64
  %7 = icmp ugt i64 %6, %2
  br i1 %7, label %19, label %8

8:                                                ; preds = %3
  %9 = mul i64 %2, 17
  %10 = lshr i64 %9, 4
  %11 = add nuw nsw i64 %10, 32
  %12 = icmp ugt i64 %11, %2
  %13 = select i1 %12, i64 %11, i64 %2
  %14 = load i8*, i8** %4, align 8, !tbaa !27
  tail call fastcc void @av_free(i8* %14) #18
  %15 = tail call fastcc noalias i8* @av_malloc(i64 %13) #18
  store i8* %15, i8** %4, align 8, !tbaa !27
  %16 = icmp eq i8* %15, null
  %17 = trunc i64 %13 to i32
  %18 = select i1 %16, i32 0, i32 %17
  store i32 %18, i32* %1, align 4, !tbaa !28
  br label %19

19:                                               ; preds = %8, %3
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc %struct.AVCodec.134* @av_codec_next(%struct.AVCodec.134* readonly) unnamed_addr #15 {
  %2 = icmp eq %struct.AVCodec.134* %0, null
  %3 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %0, i64 0, i32 14
  %4 = select i1 %2, %struct.AVCodec.134** @first_avcodec, %struct.AVCodec.134** %3
  %5 = load %struct.AVCodec.134*, %struct.AVCodec.134** %4, align 8, !tbaa !27
  ret %struct.AVCodec.134* %5
}

; Function Attrs: nounwind uwtable
define internal fastcc void @avcodec_register(%struct.AVCodec.134*) unnamed_addr #5 {
  %2 = load i1, i1* @avcodec_init.initialized, align 4
  br i1 %2, label %.preheader, label %3

3:                                                ; preds = %1
  store i1 true, i1* @avcodec_init.initialized, align 4
  br label %.preheader

.preheader:                                       ; preds = %3, %1
  br label %4

4:                                                ; preds = %.preheader, %4
  %5 = phi %struct.AVCodec.134** [ %8, %4 ], [ @first_avcodec, %.preheader ]
  %6 = load %struct.AVCodec.134*, %struct.AVCodec.134** %5, align 8, !tbaa !27
  %7 = icmp eq %struct.AVCodec.134* %6, null
  %8 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %6, i64 0, i32 14
  br i1 %7, label %9, label %4

9:                                                ; preds = %4
  store %struct.AVCodec.134* %0, %struct.AVCodec.134** %5, align 8, !tbaa !27
  %10 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %0, i64 0, i32 14
  store %struct.AVCodec.134* null, %struct.AVCodec.134** %10, align 8, !tbaa !245
  %11 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %0, i64 0, i32 18
  %12 = load void (%struct.AVCodec.134*)*, void (%struct.AVCodec.134*)** %11, align 8, !tbaa !246
  %13 = icmp eq void (%struct.AVCodec.134*)* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %9
  tail call void %12(%struct.AVCodec.134* nonnull %0) #18
  br label %15

15:                                               ; preds = %14, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @avcodec_set_dimensions(%struct.AVCodecContext.129* nocapture, i32, i32) unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 25
  store i32 %1, i32* %4, align 4, !tbaa !195
  %5 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 26
  store i32 %2, i32* %5, align 8, !tbaa !196
  %6 = sub nsw i32 0, %1
  %7 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 174
  %8 = load i32, i32* %7, align 4, !tbaa !247
  %9 = ashr i32 %6, %8
  %10 = sub nsw i32 0, %9
  %11 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  store i32 %10, i32* %11, align 4, !tbaa !70
  %12 = sub nsw i32 0, %2
  %13 = ashr i32 %12, %8
  %14 = sub nsw i32 0, %13
  %15 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  store i32 %14, i32* %15, align 8, !tbaa !71
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @avcodec_align_dimensions2(%struct.AVCodecContext.129* nocapture readonly, i32* nocapture, i32* nocapture, i32* nocapture) unnamed_addr #9 {
  %5 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %6 = load i32, i32* %5, align 8, !tbaa !69
  switch i32 %6, label %7 [
    i32 0, label %32
    i32 1, label %32
    i32 17, label %32
    i32 4, label %32
    i32 33, label %32
    i32 5, label %32
    i32 82, label %32
    i32 8, label %32
    i32 31, label %32
    i32 32, label %32
    i32 12, label %32
    i32 13, label %32
    i32 34, label %32
    i32 14, label %32
    i32 35, label %32
    i32 300, label %32
    i32 299, label %32
    i32 70, label %32
    i32 69, label %32
    i32 72, label %32
    i32 71, label %32
    i32 302, label %32
    i32 301, label %32
    i32 304, label %32
    i32 303, label %32
    i32 80, label %32
    i32 79, label %32
    i32 74, label %32
    i32 73, label %32
    i32 306, label %32
    i32 305, label %32
    i32 308, label %32
    i32 307, label %32
    i32 76, label %32
    i32 75, label %32
    i32 78, label %32
    i32 77, label %32
    i32 310, label %32
    i32 309, label %32
    i32 312, label %32
    i32 311, label %32
    i32 84, label %32
    i32 83, label %32
    i32 86, label %32
    i32 85, label %32
    i32 314, label %32
    i32 313, label %32
    i32 316, label %32
    i32 315, label %32
    i32 7, label %10
    i32 18, label %10
    i32 6, label %39
    i32 46, label %11
    i32 11, label %16
    i32 19, label %16
    i32 22, label %16
    i32 3, label %21
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %9 = load i32, i32* %8, align 8, !tbaa !238
  br label %27

10:                                               ; preds = %4, %4
  br label %32

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %13 = load i32, i32* %12, align 8, !tbaa !238
  %14 = icmp eq i32 %13, 43
  %15 = select i1 %14, i32 4, i32 1
  br label %27

16:                                               ; preds = %4, %4, %4
  %17 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %18 = load i32, i32* %17, align 8, !tbaa !238
  %19 = icmp eq i32 %18, 50
  %20 = select i1 %19, i32 4, i32 1
  br label %27

21:                                               ; preds = %4
  %22 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %23 = load i32, i32* %22, align 8, !tbaa !238
  %24 = and i32 %23, -2
  %25 = icmp eq i32 %24, 54
  %26 = select i1 %25, i32 4, i32 1
  br label %27

27:                                               ; preds = %21, %16, %11, %7
  %28 = phi i32 [ %23, %21 ], [ %18, %16 ], [ %13, %11 ], [ %9, %7 ]
  %29 = phi i32 [ %26, %21 ], [ %20, %16 ], [ %15, %11 ], [ 1, %7 ]
  %30 = and i32 %28, -2
  %31 = icmp eq i32 %30, 138
  br label %50

32:                                               ; preds = %10, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4
  %33 = phi i
  %34 = phi i32 [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 32, %4 ], [ 8, %10 ]
  %35 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %36 = load i32, i32* %35, align 8, !tbaa !238
  %37 = and i32 %36, -2
  %38 = icmp eq i32 %37, 138
  br label %45

39:                                               ; preds = %4
  %40 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %41 = load i32, i32* %40, align 8, !tbaa !238
  %42 = icmp eq i32 %41, 23
  %43 = and i32 %41, -2
  %44 = icmp eq i32 %43, 138
  br i1 %42, label %45, label %50

45:                                               ; preds = %39, %32
  %46 = phi i1 [ %38, %32 ], [ %44, %39 ]
  %47 = phi i32 [ %36, %32 ], [ 23, %39 ]
  %48 = phi i32 [ %34, %32 ], [ 64, %39 ]
  %49 = phi i32 [ %33, %32 ], [ 64, %39 ]
  br label %50

50:                                               ; preds = %45, %39, %27
  %51 = phi i1 [ %46, %45 ], [ %44, %39 ], [ %31, %27 ]
  %52 = phi i32 [ %47, %45 ], [ %41, %39 ], [ %28, %27 ]
  %53 = phi i32 [ %48, %45 ], [ 1, %39 ], [ %29, %27 ]
  %54 = phi i32 [ %49, %45 ], [ 1, %39 ], [ %29, %27 ]
  %55 = phi i32 [ %49, %45 ], [ 8, %39 ], [ 8, %27 ]
  %56 = select i1 %51, i32 %55, i32 %54
  %57 = load i32, i32* %1, align 4, !tbaa !28
  %58 = add nsw i32 %56, -1
  %59 = add i32 %58, %57
  %60 = sub nsw i32 0, %56
  %61 = and i32 %59, %60
  store i32 %61, i32* %1, align 4, !tbaa !28
  %62 = load i32, i32* %2, align 4, !tbaa !28
  %63 = add nsw i32 %53, -1
  %64 = add i32 %63, %62
  %65 = sub nsw i32 0, %53
  %66 = and i32 %64, %65
  store i32 %66, i32* %2, align 4, !tbaa !28
  %67 = icmp eq i32 %52, 28
  br i1 %67, label %72, label %68

68:                                               ; preds = %50
  %69 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 174
  %70 = load i32, i32* %69, align 4, !tbaa !247
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %68, %50
  %73 = add nsw i32 %66, 2
  store i32 %73, i32* %2, align 4, !tbaa !28
  br label %74

74:                                               ; preds = %72, %68
  store i32 8, i32* %3, align 4, !tbaa !28
  %75 = getelementptr inbounds i32, i32* %3, i64 1
  store i32 8, i32* %75, align 4, !tbaa !28
  %76 = getelementptr inbounds i32, i32* %3, i64 2
  store i32 8, i32* %76, align 4, !tbaa !28
  %77 = getelementptr inbounds i32, i32* %3, i64 3
  store i32 8, i32* %77, align 4, !tbaa !28
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avcodec_fill_audio_frame(%struct.AVFrame.123*, i32, i32, i8*, i32) unnamed_addr #5 {
  %6 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8, !tbaa !248
  %8 = tail call fastcc i32 @av_samples_get_buffer_size(i32 %1, i32 %7, i32 %2) #18
  %9 = icmp sgt i32 %8, %4
  br i1 %9, label %79, label %10

10:                                               ; preds = %5
  %11 = tail call fastcc i32 @av_sample_fmt_is_planar(i32 %2) #18
  %12 = icmp ne i32 %11, 0
  %13 = icmp sgt i32 %1, 8
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %23

15:                                               ; preds = %10
  %16 = sext i32 %1 to i64
  %17 = shl nsw i64 %16, 3
  %18 = tail call fastcc noalias i8* @av_mallocz(i64 %17) #18
  %19 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 2
  %20 = bitcast i8*** %19 to i8**
  store i8* %18, i8** %20, align 8, !tbaa !249
  %21 = icmp eq i8* %18, null
  %22 = bitcast i8* %18 to i8**
  br i1 %21, label %79, label %26

23:                                               ; preds = %10
  %24 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 0
  %25 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 2
  store i8** %24, i8*** %25, align 8, !tbaa !249
  br label %26

26:                                               ; preds = %23, %15
  %27 = phi i8** [ %22, %15 ], [ %24, %23 ]
  %28 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 2
  %29 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 1, i64 0
  %30 = load i32, i32* %6, align 8, !tbaa !248
  %31 = tail call fastcc i32 @av_samples_fill_arrays(i8** %27, i32* nonnull %29, i8* %3, i32 %1, i32 %30, i32 %2) #18
  %32 = icmp slt i32 %31, 0
  %33 = load i8**, i8*** %28, align 8, !tbaa !249
  %34 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 0
  %35 = icmp ne i8** %33, %34
  br i1 %32, label %36, label %39

36:                                               ; preds = %26
  br i1 %35, label %37, label %79

37:                                               ; preds = %36
  %38 = bitcast i8*** %28 to i8*
  tail call fastcc void @av_freep(i8* nonnull %38) #18
  br label %79

39:                                               ; preds = %26
  br i1 %35, label %40, label %79

40:                                               ; preds = %39
  %41 = bitcast i8** %33 to i64*
  %42 = load i64, i64* %41, align 8, !tbaa !27
  %43 = bitcast %struct.AVFrame.123* %0 to i64*
  store i64 %42, i64* %43, align 8, !tbaa !27
  %44 = getelementptr inbounds i8*, i8** %33, i64 1
  %45 = bitcast i8** %44 to i64*
  %46 = load i64, i64* %45, align 8, !tbaa !27
  %47 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 1
  %48 = bitcast i8** %47 to i64*
  store i64 %46, i64* %48, align 8, !tbaa !27
  %49 = getelementptr inbounds i8*, i8** %33, i64 2
  %50 = bitcast i8** %49 to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !27
  %52 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 2
  %53 = bitcast i8** %52 to i64*
  store i64 %51, i64* %53, align 8, !tbaa !27
  %54 = getelementptr inbounds i8*, i8** %33, i64 3
  %55 = bitcast i8** %54 to i64*
  %56 = load i64, i64* %55, align 8, !tbaa !27
  %57 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 3
  %58 = bitcast i8** %57 to i64*
  store i64 %56, i64* %58, align 8, !tbaa !27
  %59 = getelementptr inbounds i8*, i8** %33, i64 4
  %60 = bitcast i8** %59 to i64*
  %61 = load i64, i64* %60, align 8, !tbaa !27
  %62 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 4
  %63 = bitcast i8** %62 to i64*
  store i64 %61, i64* %63, align 8, !tbaa !27
  %64 = getelementptr inbounds i8*, i8** %33, i64 5
  %65 = bitcast i8** %64 to i64*
  %66 = load i64, i64* %65, align 8, !tbaa !27
  %67 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 5
  %68 = bitcast i8** %67 to i64*
  store i64 %66, i64* %68, align 8, !tbaa !27
  %69 = getelementptr inbounds i8*, i8** %33, i64 6
  %70 = bitcast i8** %69 to i64*
  %71 = load i64, i64* %70, align 8, !tbaa !27
  %72 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 6
  %73 = bitcast i8** %72 to i64*
  store i64 %71, i64* %73, align 8, !tbaa !27
  %74 = getelementptr inbounds i8*, i8** %33, i64 7
  %75 = bitcast i8** %74 to i64*
  %76 = load i64, i64* %75, align 8, !tbaa !27
  %77 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 7
  %78 = bitcast i8** %77 to i64*
  store i64 %76, i64* %78, align 8, !tbaa !27
  br label %79

79:                                               ; preds = %40, %39, %37, %36, %15, %5
  %80 = phi i32 [ -22, %5 ], [ -12, %15 ], [ %31, %37 ], [ %31, %36 ], [ %31, %39 ], [ %31, %40 ]
  ret i32 %80
}

; Function Attrs: nounwind uwtable
define internal i32 @avcodec_default_get_buffer(%struct.AVCodecContext.129*, %struct.AVFrame.123*) #5 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [4 x i32], align 16
  %8 = alloca %struct.AVPicture, align 8
  %9 = alloca [8 x i32], align 16
  %10 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 28
  store i32 1, i32* %10, align 8, !tbaa !250
  %11 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4, !tbaa !136
  switch i32 %12, label %546 [
    i32 0, label %13
    i32 1, label %511
  ]

13:                                               ; preds = %2
  %14 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #18
  %15 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %16 = load i32, i32* %15, align 4, !tbaa !70
  store i32 %16, i32* %3, align 4, !tbaa !28
  %17 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #18
  %18 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %19 = load i32, i32* %18, align 8, !tbaa !71
  store i32 %19, i32* %4, align 4, !tbaa !28
  %20 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 10
  %21 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %20, align 8, !tbaa !44
  %22 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 0
  %23 = load i8*, i8** %22, align 8, !tbaa !27
  %24 = icmp eq i8* %23, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %13
  %26 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %26, i32 16, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.79.1409, i64 0, i64 0)) #18
  br label %509

27:                                               ; preds = %13
  %28 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %21, i64 0, i32 0
  %29 = load i32, i32* %28, align 8, !tbaa !251
  %30 = icmp sgt i32 %29, 32
  %31 = bitcast %struct.AVCodecContext.129* %0 to i8*
  br i1 %30, label %32, label %33

32:                                               ; preds = %27
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %31, i32 16, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.80.1410, i64 0, i64 0)) #18
  br label %509

33:                                               ; preds = %27
  %34 = tail call fastcc i32 @av_image_check_size(i32 %16, i32 %19, i8* %31) #18
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %40

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %38 = load i32, i32* %37, align 8, !tbaa !69
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %36, %33
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %31, i32 16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.81.1411, i64 0, i64 0)) #18
  br label %509

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %21, i64 0, i32 1
  %43 = load %struct.InternalBuffer*, %struct.InternalBuffer** %42, align 8, !tbaa !252
  %44 = icmp eq %struct.InternalBuffer* %43, null
  br i1 %44, label %45, label %49

45:                                               ; preds = %41
  %46 = tail call fastcc noalias i8* @av_mallocz(i64 5984) #18
  %47 = bitcast %struct.InternalBuffer** %42 to i8**
  store i8* %46, i8** %47, align 8, !tbaa !252
  %48 = bitcast i8* %46 to %struct.InternalBuffer*
  br label %49

49:                                               ; preds = %45, %41
  %50 = phi %struct.InternalBuffer* [ %43, %41 ], [ %48, %45 ]
  %51 = load i32, i32* %28, align 8, !tbaa !251
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52
  %54 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %53, i64 0, i32 0, i64 0
  %55 = load i8*, i8** %54, align 8, !tbaa !27
  %56 = icmp eq i8* %55, null
  br i1 %56, label %100, label %57

57:                                               ; preds = %49
  %58 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 3
  %59 = load i32, i32* %58, align 8, !tbaa !253
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %70

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 4
  %63 = load i32, i32* %62, align 4, !tbaa !255
  %64 = icmp eq i32 %63, %19
  br i1 %64, label %65, label %70

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 5
  %67 = load i32, i32* %66, align 8, !tbaa !256
  %68 = load i32, i32* %37, align 8, !tbaa !69
  %69 = icmp eq i32 %67, %68
  br i1 %69, label %97, label %70

70:                                               ; preds = %65, %61, %57
  %71 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 0
  %72 = bitcast i8** %71 to i8*
  tail call fastcc void @av_freep(i8* %72) #18
  %73 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 0
  store i8* null, i8** %73, align 8, !tbaa !27
  %74 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 1
  %75 = bitcast i8** %74 to i8*
  tail call fastcc void @av_freep(i8* nonnull %75) #18
  %76 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 1
  store i8* null, i8** %76, align 8, !tbaa !27
  %77 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 2
  %78 = bitcast i8** %77 to i8*
  tail call fastcc void @av_freep(i8* nonnull %78) #18
  %79 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 2
  store i8* null, i8** %79, align 8, !tbaa !27
  %80 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 3
  %81 = bitcast i8** %80 to i8*
  tail call fastcc void @av_freep(i8* nonnull %81) #18
  %82 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 3
  store i8* null, i8** %82, align 8, !tbaa !27
  %83 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 4
  %84 = bitcast i8** %83 to i8*
  tail call fastcc void @av_freep(i8* nonnull %84) #18
  %85 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 4
  store i8* null, i8** %85, align 8, !tbaa !27
  %86 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 5
  %87 = bitcast i8** %86 to i8*
  tail call fastcc void @av_freep(i8* nonnull %87) #18
  %88 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 5
  store i8* null, i8** %88, align 8, !tbaa !27
  %89 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 6
  %90 = bitcast i8** %89 to i8*
  tail call fastcc void @av_freep(i8* nonnull %90) #18
  %91 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 6
  store i8* null, i8** %91, align 8, !tbaa !27
  %92 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 7
  %93 = bitcast i8** %92 to i8*
  tail call fastcc void @av_freep(i8* nonnull %93) #18
  %94 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 7
  store i8* null, i8** %94, align 8, !tbaa !27
  %95 = load i8*, i8** %54, align 8, !tbaa !27
  %96 = icmp eq i8* %95, null
  br i1 %96, label %100, label %97

97:                                               ; preds = %70, %65
  %98 = phi i8* [ %95, %70 ], [ %55, %65 ]
  %99 = ptrtoint i8* %98 to i64
  br label %271

100:                                              ; preds = %70, %49
  %101 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %101) #18
  %102 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %102) #18
  %103 = bitcast [4 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %103) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %103, i8 0, i64 16, i1 false) #18
  %104 = bitcast %struct.AVPicture* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %104) #18
  %105 = bitcast [8 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %105) #18
  %106 = load i32, i32* %37, align 8, !tbaa !69
  %107 = tail call fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %106) #18
  %108 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %107, i64 0, i32 5, i64 0, i32 0
  %109 = load i16, i16* %108, align 4
  call fastcc void @av_pix_fmt_get_chroma_sub_sample(i32 %106, i32* nonnull %5, i32* nonnull %6) #18
  %110 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 0
  call fastcc void @avcodec_align_dimensions2(%struct.AVCodecContext.129* nonnull %0, i32* nonnull %3, i32* nonnull %4, i32* nonnull %110) #18
  %111 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 16
  %112 = load i32, i32* %111, align 8, !tbaa !64
  %113 = and i32 %112, 16384
  %114 = icmp eq i32 %113, 0
  %115 = load i32, i32* %3, align 4, !tbaa !28
  br i1 %114, label %116, label %120

116:                                              ; preds = %100
  %117 = add nsw i32 %115, 32
  store i32 %117, i32* %3, align 4, !tbaa !28
  %118 = load i32, i32* %4, align 4, !tbaa !28
  %119 = add nsw i32 %118, 32
  store i32 %119, i32* %4, align 4, !tbaa !28
  br label %120

120:                                              ; preds = %116, %100
  %121 = phi i32 [ %117, %116 ], [ %115, %100 ]
  %122 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 1, i64 0
  %123 = load i32, i32* %110, align 16, !tbaa !28
  %124 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 1
  %125 = load i32, i32* %124, align 4, !tbaa !28
  %126 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 2
  %127 = load i32, i32* %126, align 8, !tbaa !28
  %128 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 3
  %129 = load i32, i32* %128, align 4, !tbaa !28
  %130 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 1, i64 1
  %131 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 1, i64 2
  %132 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 1, i64 3
  br label %133

133:                                              ; preds = %133, %120
  %134 = phi i32 [ %150, %133 ], [ %121, %120 ]
  %135 = load i32, i32* %37, align 8, !tbaa !69
  %136 = call fastcc i32 @av_image_fill_linesizes(i32* nonnull %122, i32 %135, i32 %134) #18
  %137 = sub i32 0, %134
  %138 = and i32 %134, %137
  %139 = load i32, i32* %122, align 8, !tbaa !28
  %140 = srem i32 %139, %123
  %141 = load i32, i32* %130, align 4, !tbaa !28
  %142 = srem i32 %141, %125
  %143 = or i32 %142, %140
  %144 = load i32, i32* %131, align 8, !tbaa !28
  %145 = srem i32 %144, %127
  %146 = or i32 %143, %145
  %147 = load i32, i32* %132, align 4, !tbaa !28
  %148 = srem i32 %147, %129
  %149 = or i32 %146, %148
  %150 = add nsw i32 %138, %134
  %151 = icmp eq i32 %149, 0
  br i1 %151, label %152, label %133

152:                                              ; preds = %133
  store i32 %150, i32* %3, align 4, !tbaa !28
  %153 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 0
  %154 = load i32, i32* %37, align 8, !tbaa !69
  %155 = load i32, i32* %4, align 4, !tbaa !28
  %156 = call fastcc i32 @av_image_fill_pointers(i8** nonnull %153, i32 %154, i32 %155, i8* null, i32* nonnull %122) #18
  %157 = icmp slt i32 %156, 0
  br i1 %157, label %264, label %158

158:                                              ; preds = %152
  %159 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 1
  %160 = load i8*, i8** %159, align 8, !tbaa !27
  %161 = icmp eq i8* %160, null
  %162 = ptrtoint i8* %160 to i64
  %163 = bitcast %struct.AVPicture* %8 to i64*
  %164 = load i64, i64* %163, align 8, !tbaa !27
  br i1 %161, label %173, label %165

165:                                              ; preds = %158
  %166 = sub i64 %162, %164
  %167 = trunc i64 %166 to i32
  %168 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  store i32 %167, i32* %168, align 16, !tbaa !28
  %169 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 2
  %170 = load i8*, i8** %169, align 8, !tbaa !27
  %171 = icmp eq i8* %170, null
  %172 = ptrtoint i8* %170 to i64
  br i1 %171, label %173, label %497

173:                                              ; preds = %504, %497, %165, %158
  %174 = phi i64 [ 1, %165 ], [ 2, %497 ], [ 3, %504 ], [ 0, %158 ]
  %175 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 %174
  %176 = bitcast i8** %175 to i64*
  %177 = load i64, i64* %176, align 8, !tbaa !27
  %178 = sub i64 %164, %177
  %179 = trunc i64 %178 to i32
  %180 = add i32 %156, %179
  %181 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %174
  store i32 %180, i32* %181, align 4, !tbaa !28
  %182 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 2
  %183 = bitcast %struct.InternalBuffer* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %183, i8 0, i64 128, i1 false) #18
  %184 = load i32, i32* %182, align 8
  %185 = icmp eq i32 %184, 0
  %186 = shl i16 %109, 2
  %187 = and i16 %186, 112
  %188 = add nuw nsw i16 %187, 16
  %189 = zext i16 %188 to i32
  %190 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  %191 = load i32, i32* %190, align 16, !tbaa !28
  %192 = icmp eq i32 %191, 0
  br i1 %185, label %194, label %193

193:                                              ; preds = %173
  br i1 %192, label %548, label %212

194:                                              ; preds = %173
  br i1 %192, label %548, label %195

195:                                              ; preds = %194
  %196 = load i32, i32* %122, align 8, !tbaa !28
  %197 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 0
  store i32 %196, i32* %197, align 4, !tbaa !28
  %198 = add nsw i32 %191, 16
  %199 = sext i32 %198 to i64
  %200 = tail call fastcc noalias i8* @av_malloc(i64 %199) #18
  %201 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 0
  store i8* %200, i8** %201, align 8, !tbaa !27
  %202 = icmp eq i8* %200, null
  br i1 %202, label %264, label %203

203:                                              ; preds = %195
  %204 = sext i32 %191 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %200, i8 -128, i64 %204, i1 false) #18
  %205 = bitcast i8** %201 to i64*
  %206 = load i64, i64* %205, align 8, !tbaa !27
  %207 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 0
  %208 = bitcast i8** %207 to i64*
  store i64 %206, i64* %208, align 8, !tbaa !27
  %209 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  %210 = load i32, i32* %209, align 4, !tbaa !28
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %548, label %381

212:                                              ; preds = %193
  %213 = load i32, i32* %122, align 8, !tbaa !28
  %214 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 0
  store i32 %213, i32* %214, align 4, !tbaa !28
  %215 = add nsw i32 %191, 16
  %216 = sext i32 %215 to i64
  %217 = tail call fastcc noalias i8* @av_malloc(i64 %216) #18
  %218 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 0
  store i8* %217, i8** %218, align 8, !tbaa !27
  %219 = icmp eq i8* %217, null
  br i1 %219, label %264, label %220

220:                                              ; preds = %212
  %221 = sext i32 %191 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %217, i8 -128, i64 %221, i1 false) #18
  %222 = load i32, i32* %111, align 8, !tbaa !64
  %223 = and i32 %222, 16384
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %230, label %225

225:                                              ; preds = %220
  %226 = bitcast i8** %218 to i64*
  %227 = load i64, i64* %226, align 8, !tbaa !27
  %228 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 0
  %229 = bitcast i8** %228 to i64*
  store i64 %227, i64* %229, align 8, !tbaa !27
  br label %242

230:                                              ; preds = %220
  %231 = load i8*, i8** %218, align 8, !tbaa !27
  %232 = load i32, i32* %214, align 4, !tbaa !28
  %233 = shl i32 %232, 4
  %234 = add nsw i32 %189, -1
  %235 = add i32 %234, %123
  %236 = add i32 %235, %233
  %237 = sub i32 0, %123
  %238 = and i32 %236, %237
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %231, i64 %239
  %241 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 0
  store i8* %240, i8** %241, align 8, !tbaa !27
  br label %242

242:                                              ; preds = %230, %225
  %243 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  %244 = load i32, i32* %243, align 4, !tbaa !28
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %548, label %395

246:                                              ; preds = %585, %579, %573, %567, %548
  %247 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  %248 = load i32, i32* %247, align 4, !tbaa !28
  %249 = icmp eq i32 %248, 0
  %250 = xor i1 %185, true
  %251 = or i1 %249, %250
  br i1 %251, label %257, label %252

252:                                              ; preds = %246
  %253 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 1
  %254 = bitcast i8** %253 to i32**
  %255 = load i32*, i32** %254, align 8, !tbaa !27
  %256 = load i32, i32* %37, align 8, !tbaa !69
  tail call fastcc void @avpriv_set_systematic_pal2(i32* %255, i32 %256) #18
  br label %257

257:                                              ; preds = %252, %246
  %258 = load i32, i32* %15, align 4, !tbaa !70
  %259 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 3
  store i32 %258, i32* %259, align 8, !tbaa !253
  %260 = load i32, i32* %18, align 8, !tbaa !71
  %261 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 4
  store i32 %260, i32* %261, align 4, !tbaa !255
  %262 = load i32, i32* %37, align 8, !tbaa !69
  %263 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 5
  store i32 %262, i32* %263, align 8, !tbaa !256
  br label %264

264:                                              ; preds = %465, %429, %395, %381, %257, %212, %195, %152
  %265 = phi i1 [ true, %257 ], [ false, %152 ], [ false, %381 ], [ false, %195 ], [ false, %465 ], [ false, %429 ], [ false, %395 ], [ false, %212 ]
  %266 = phi i32 [ -12, %257 ], [ -1, %152 ], [ -12, %381 ], [ -12, %195 ], [ -12, %465 ], [ -12, %429 ], [ -12, %395 ], [ -12, %212 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %105) #18
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %104) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %103) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %102) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %101) #18
  br i1 %265, label %267, label %509

267:                                              ; preds = %264
  %268 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 0
  %269 = bitcast i8** %268 to i64*
  %270 = load i64, i64* %269, align 8, !tbaa !27
  br label %271

271:                                              ; preds = %267, %97
  %272 = phi i64 [ %270, %267 ], [ %99, %97 ]
  %273 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 9, i64 0
  %274 = bitcast i8** %273 to i64*
  store i64 %272, i64* %274, align 8, !tbaa !27
  %275 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 0
  %276 = bitcast i8** %275 to i64*
  %277 = load i64, i64* %276, align 8, !tbaa !27
  %278 = bitcast %struct.AVFrame.123* %1 to i64*
  store i64 %277, i64* %278, align 8, !tbaa !27
  %279 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 0
  %280 = load i32, i32* %279, align 4, !tbaa !28
  %281 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 1, i64 0
  store i32 %280, i32* %281, align 4, !tbaa !28
  %282 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 1
  %283 = bitcast i8** %282 to i64*
  %284 = load i64, i64* %283, align 8, !tbaa !27
  %285 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 9, i64 1
  %286 = bitcast i8** %285 to i64*
  store i64 %284, i64* %286, align 8, !tbaa !27
  %287 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 1
  %288 = bitcast i8** %287 to i64*
  %289 = load i64, i64* %288, align 8, !tbaa !27
  %290 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 1
  %291 = bitcast i8** %290 to i64*
  store i64 %289, i64* %291, align 8, !tbaa !27
  %292 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 1
  %293 = load i32, i32* %292, align 4, !tbaa !28
  %294 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 1, i64 1
  store i32 %293, i32* %294, align 4, !tbaa !28
  %295 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 2
  %296 = bitcast i8** %295 to i64*
  %297 = load i64, i64* %296, align 8, !tbaa !27
  %298 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 9, i64 2
  %299 = bitcast i8** %298 to i64*
  store i64 %297, i64* %299, align 8, !tbaa !27
  %300 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 2
  %301 = bitcast i8** %300 to i64*
  %302 = load i64, i64* %301, align 8, !tbaa !27
  %303 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 2
  %304 = bitcast i8** %303 to i64*
  store i64 %302, i64* %304, align 8, !tbaa !27
  %305 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 2
  %306 = load i32, i32* %305, align 4, !tbaa !28
  %307 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 1, i64 2
  store i32 %306, i32* %307, align 4, !tbaa !28
  %308 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 3
  %309 = bitcast i8** %308 to i64*
  %310 = load i64, i64* %309, align 8, !tbaa !27
  %311 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 9, i64 3
  %312 = bitcast i8** %311 to i64*
  store i64 %310, i64* %312, align 8, !tbaa !27
  %313 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 3
  %314 = bitcast i8** %313 to i64*
  %315 = load i64, i64* %314, align 8, !tbaa !27
  %316 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 3
  %317 = bitcast i8** %316 to i64*
  store i64 %315, i64* %317, align 8, !tbaa !27
  %318 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 3
  %319 = load i32, i32* %318, align 4, !tbaa !28
  %320 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 1, i64 3
  store i32 %319, i32* %320, align 4, !tbaa !28
  %321 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 4
  %322 = bitcast i8** %321 to i64*
  %323 = load i64, i64* %322, align 8, !tbaa !27
  %324 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 9, i64 4
  %325 = bitcast i8** %324 to i64*
  store i64 %323, i64* %325, align 8, !tbaa !27
  %326 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 4
  %327 = bitcast i8** %326 to i64*
  %328 = load i64, i64* %327, align 8, !tbaa !27
  %329 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 4
  %330 = bitcast i8** %329 to i64*
  store i64 %328, i64* %330, align 8, !tbaa !27
  %331 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 4
  %332 = load i32, i32* %331, align 4, !tbaa !28
  %333 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 1, i64 4
  store i32 %332, i32* %333, align 4, !tbaa !28
  %334 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 5
  %335 = bitcast i8** %334 to i64*
  %336 = load i64, i64* %335, align 8, !tbaa !27
  %337 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 9, i64 5
  %338 = bitcast i8** %337 to i64*
  store i64 %336, i64* %338, align 8, !tbaa !27
  %339 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 5
  %340 = bitcast i8** %339 to i64*
  %341 = load i64, i64* %340, align 8, !tbaa !27
  %342 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 5
  %343 = bitcast i8** %342 to i64*
  store i64 %341, i64* %343, align 8, !tbaa !27
  %344 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 5
  %345 = load i32, i32* %344, align 4, !tbaa !28
  %346 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 1, i64 5
  store i32 %345, i32* %346, align 4, !tbaa !28
  %347 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 6
  %348 = bitcast i8** %347 to i64*
  %349 = load i64, i64* %348, align 8, !tbaa !27
  %350 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 9, i64 6
  %351 = bitcast i8** %350 to i64*
  store i64 %349, i64* %351, align 8, !tbaa !27
  %352 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 6
  %353 = bitcast i8** %352 to i64*
  %354 = load i64, i64* %353, align 8, !tbaa !27
  %355 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 6
  %356 = bitcast i8** %355 to i64*
  store i64 %354, i64* %356, align 8, !tbaa !27
  %357 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 6
  %358 = load i32, i32* %357, align 4, !tbaa !28
  %359 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 1, i64 6
  store i32 %358, i32* %359, align 4, !tbaa !28
  %360 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 7
  %361 = bitcast i8** %360 to i64*
  %362 = load i64, i64* %361, align 8, !tbaa !27
  %363 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 9, i64 7
  %364 = bitcast i8** %363 to i64*
  store i64 %362, i64* %364, align 8, !tbaa !27
  %365 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 7
  %366 = bitcast i8** %365 to i64*
  %367 = load i64, i64* %366, align 8, !tbaa !27
  %368 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 7
  %369 = bitcast i8** %368 to i64*
  store i64 %367, i64* %369, align 8, !tbaa !27
  %370 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 7
  %371 = load i32, i32* %370, align 4, !tbaa !28
  %372 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 1, i64 7
  store i32 %371, i32* %372, align 4, !tbaa !28
  %373 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 2
  store i8** %22, i8*** %373, align 8, !tbaa !249
  %374 = load i32, i32* %28, align 8, !tbaa !251
  %375 = add nsw i32 %374, 1
  store i32 %375, i32* %28, align 8, !tbaa !251
  %376 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 162
  %377 = load i32, i32* %376, align 4, !tbaa !180
  %378 = trunc i32 %377 to i16
  %379 = icmp slt i16 %378, 0
  br i1 %379, label %380, label %509

380:                                              ; preds = %271
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %31, i32 48, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.82.1412, i64 0, i64 0), %struct.AVFrame.123* nonnull %1, i32 %375) #18
  br label %509

381:                                              ; preds = %203
  %382 = load i32, i32* %130, align 4, !tbaa !28
  %383 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 1
  store i32 %382, i32* %383, align 4, !tbaa !28
  %384 = add nsw i32 %210, 16
  %385 = sext i32 %384 to i64
  %386 = tail call fastcc noalias i8* @av_malloc(i64 %385) #18
  %387 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 1
  store i8* %386, i8** %387, align 8, !tbaa !27
  %388 = icmp eq i8* %386, null
  br i1 %388, label %264, label %389

389:                                              ; preds = %381
  %390 = sext i32 %210 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %386, i8 -128, i64 %390, i1 false) #18
  %391 = bitcast i8** %387 to i64*
  %392 = load i64, i64* %391, align 8, !tbaa !27
  %393 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 1
  %394 = bitcast i8** %393 to i64*
  store i64 %392, i64* %394, align 8, !tbaa !27
  br label %548

395:                                              ; preds = %242
  %396 = load i32, i32* %5, align 4
  %397 = load i32, i32* %6, align 4
  %398 = load i32, i32* %130, align 4, !tbaa !28
  %399 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 1
  store i32 %398, i32* %399, align 4, !tbaa !28
  %400 = add nsw i32 %244, 16
  %401 = sext i32 %400 to i64
  %402 = tail call fastcc noalias i8* @av_malloc(i64 %401) #18
  %403 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 1
  store i8* %402, i8** %403, align 8, !tbaa !27
  %404 = icmp eq i8* %402, null
  br i1 %404, label %264, label %405

405:                                              ; preds = %395
  %406 = sext i32 %244 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %402, i8 -128, i64 %406, i1 false) #18
  %407 = load i32, i32* %111, align 8, !tbaa !64
  %408 = and i32 %407, 16384
  %409 = icmp eq i32 %408, 0
  br i1 %409, label %415, label %410

410:                                              ; preds = %405
  %411 = bitcast i8** %403 to i64*
  %412 = load i64, i64* %411, align 8, !tbaa !27
  %413 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 1
  %414 = bitcast i8** %413 to i64*
  store i64 %412, i64* %414, align 8, !tbaa !27
  br label %429

415:                                              ; preds = %405
  %416 = load i8*, i8** %403, align 8, !tbaa !27
  %417 = load i32, i32* %399, align 4, !tbaa !28
  %418 = shl nsw i32 %417, 4
  %419 = ashr i32 %418, %397
  %420 = lshr i32 %189, %396
  %421 = add i32 %125, -1
  %422 = add i32 %421, %420
  %423 = add i32 %422, %419
  %424 = sub i32 0, %125
  %425 = and i32 %423, %424
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i8, i8* %416, i64 %426
  %428 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 1
  store i8* %427, i8** %428, align 8, !tbaa !27
  br label %429

429:                                              ; preds = %415, %410
  %430 = load i32, i32* %131, align 8, !tbaa !28
  %431 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 2
  store i32 %430, i32* %431, align 4, !tbaa !28
  %432 = add nsw i32 %184, 16
  %433 = sext i32 %432 to i64
  %434 = tail call fastcc noalias i8* @av_malloc(i64 %433) #18
  %435 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 2
  store i8* %434, i8** %435, align 8, !tbaa !27
  %436 = icmp eq i8* %434, null
  br i1 %436, label %264, label %437

437:                                              ; preds = %429
  %438 = sext i32 %184 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %434, i8 -128, i64 %438, i1 false) #18
  %439 = load i32, i32* %111, align 8, !tbaa !64
  %440 = and i32 %439, 16384
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %447, label %442

442:                                              ; preds = %437
  %443 = bitcast i8** %435 to i64*
  %444 = load i64, i64* %443, align 8, !tbaa !27
  %445 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 2
  %446 = bitcast i8** %445 to i64*
  store i64 %444, i64* %446, align 8, !tbaa !27
  br label %461

447:                                              ; preds = %437
  %448 = load i8*, i8** %435, align 8, !tbaa !27
  %449 = load i32, i32* %431, align 4, !tbaa !28
  %450 = shl nsw i32 %449, 4
  %451 = ashr i32 %450, %397
  %452 = lshr i32 %189, %396
  %453 = add i32 %127, -1
  %454 = add i32 %453, %452
  %455 = add i32 %454, %451
  %456 = sub i32 0, %127
  %457 = and i32 %455, %456
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds i8, i8* %448, i64 %458
  %460 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 2
  store i8* %459, i8** %460, align 8, !tbaa !27
  br label %461

461:                                              ; preds = %447, %442
  %462 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  %463 = load i32, i32* %462, align 4, !tbaa !28
  %464 = icmp eq i32 %463, 0
  br i1 %464, label %548, label %465

465:                                              ; preds = %461
  %466 = load i32, i32* %132, align 4, !tbaa !28
  %467 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 3
  store i32 %466, i32* %467, align 4, !tbaa !28
  %468 = add nsw i32 %463, 16
  %469 = sext i32 %468 to i64
  %470 = tail call fastcc noalias i8* @av_malloc(i64 %469) #18
  %471 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 3
  store i8* %470, i8** %471, align 8, !tbaa !27
  %472 = icmp eq i8* %470, null
  br i1 %472, label %264, label %473

473:                                              ; preds = %465
  %474 = sext i32 %463 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %470, i8 -128, i64 %474, i1 false) #18
  %475 = load i32, i32* %111, align 8, !tbaa !64
  %476 = and i32 %475, 16384
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %483, label %478

478:                                              ; preds = %473
  %479 = bitcast i8** %471 to i64*
  %480 = load i64, i64* %479, align 8, !tbaa !27
  %481 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 3
  %482 = bitcast i8** %481 to i64*
  store i64 %480, i64* %482, align 8, !tbaa !27
  br label %548

483:                                              ; preds = %473
  %484 = load i8*, i8** %471, align 8, !tbaa !27
  %485 = load i32, i32* %467, align 4, !tbaa !28
  %486 = shl nsw i32 %485, 4
  %487 = ashr i32 %486, %397
  %488 = lshr i32 %189, %396
  %489 = add i32 %129, -1
  %490 = add i32 %489, %488
  %491 = add i32 %490, %487
  %492 = sub i32 0, %129
  %493 = and i32 %491, %492
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds i8, i8* %484, i64 %494
  %496 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 3
  store i8* %495, i8** %496, align 8, !tbaa !27
  br label %548

497:                                              ; preds = %165
  %498 = sub i64 %172, %162
  %499 = trunc i64 %498 to i32
  %500 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %499, i32* %500, align 4, !tbaa !28
  %501 = getelementptr inbounds %struct.AVPicture, %struct.AVPicture* %8, i64 0, i32 0, i64 3
  %502 = load i8*, i8** %501, align 8, !tbaa !27
  %503 = icmp eq i8* %502, null
  br i1 %503, label %173, label %504

504:                                              ; preds = %497
  %505 = ptrtoint i8* %502 to i64
  %506 = sub i64 %505, %172
  %507 = trunc i64 %506 to i32
  %508 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 2
  store i32 %507, i32* %508, align 8, !tbaa !28
  br label %173

509:                                              ; preds = %380, %271, %264, %40, %32, %25
  %510 = phi i32 [ -1, %25 ], [ -1, %32 ], [ -1, %40 ], [ %266, %264 ], [ 0, %380 ], [ 0, %271 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #18
  br label %546

511:                                              ; preds = %2
  %512 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 10
  %513 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %512, align 8, !tbaa !44
  %514 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %513, i64 0, i32 5
  %515 = bitcast i8** %514 to i8*
  tail call fastcc void @av_freep(i8* nonnull %515) #18
  %516 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 101
  %517 = load i32, i32* %516, align 4, !tbaa !257
  %518 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 5
  %519 = load i32, i32* %518, align 8, !tbaa !248
  %520 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 102
  %521 = load i32, i32* %520, align 8, !tbaa !142
  %522 = tail call fastcc i32 @av_samples_get_buffer_size(i32 %517, i32 %519, i32 %521) #18
  %523 = icmp slt i32 %522, 0
  br i1 %523, label %546, label %524

524:                                              ; preds = %511
  %525 = sext i32 %522 to i64
  %526 = tail call fastcc noalias i8* @av_mallocz(i64 %525) #18
  %527 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 0
  store i8* %526, i8** %527, align 8, !tbaa !27
  %528 = icmp eq i8* %526, null
  br i1 %528, label %546, label %529

529:                                              ; preds = %524
  %530 = load i32, i32* %516, align 4, !tbaa !257
  %531 = load i32, i32* %520, align 8, !tbaa !142
  %532 = tail call fastcc i32 @avcodec_fill_audio_frame(%struct.AVFrame.123* nonnull %1, i32 %530, i32 %531, i8* nonnull %526, i32 %522) #18
  %533 = icmp slt i32 %532, 0
  br i1 %533, label %534, label %536

534:                                              ; preds = %529
  %535 = bitcast %struct.AVFrame.123* %1 to i8*
  tail call fastcc void @av_freep(i8* %535) #18
  br label %546

536:                                              ; preds = %529
  %537 = bitcast %struct.AVFrame.123* %1 to i64*
  %538 = load i64, i64* %537, align 8, !tbaa !27
  %539 = bitcast i8** %514 to i64*
  store i64 %538, i64* %539, align 8, !tbaa !258
  %540 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 162
  %541 = load i32, i32* %540, align 4, !tbaa !180
  %542 = trunc i32 %541 to i16
  %543 = icmp slt i16 %542, 0
  br i1 %543, label %544, label %546

544:                                              ; preds = %536
  %545 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %545, i32 48, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.83.1413, i64 0, i64 0), %struct.AVFrame.123* nonnull %1) #18
  br label %546

546:                                              ; preds = %544, %536, %534, %524, %511, %509, %2
  %547 = phi i32 [ %510, %509 ], [ -1, %2 ], [ %532, %534 ], [ -22, %511 ], [ -12, %524 ], [ 0, %544 ], [ 0, %536 ]
  ret i32 %547

548:                                              ; preds = %193, %194, %203, %242, %389, %461, %478, %483
  %549 = phi i64 [ 4, %478 ], [ 4, %483 ], [ 0, %194 ], [ 1, %203 ], [ 2, %389 ], [ 0, %193 ], [ 1, %242 ], [ 3, %461 ]
  %550 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 %549
  store i8* null, i8** %550, align 8, !tbaa !27
  %551 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 %549
  store i8* null, i8** %551, align 8, !tbaa !27
  %552 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 %549
  store i32 0, i32* %552, align 4, !tbaa !28
  %553 = add nuw nsw i64 %549, 1
  %554 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 %553
  store i8* null, i8** %554, align 8, !tbaa !27
  %555 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 %553
  store i8* null, i8** %555, align 8, !tbaa !27
  %556 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 %553
  store i32 0, i32* %556, align 4, !tbaa !28
  %557 = add nuw nsw i64 %549, 2
  %558 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 %557
  store i8* null, i8** %558, align 8, !tbaa !27
  %559 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 %557
  store i8* null, i8** %559, align 8, !tbaa !27
  %560 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 %557
  store i32 0, i32* %560, align 4, !tbaa !28
  %561 = add nuw nsw i64 %549, 3
  %562 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 %561
  store i8* null, i8** %562, align 8, !tbaa !27
  %563 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 %561
  store i8* null, i8** %563, align 8, !tbaa !27
  %564 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 %561
  store i32 0, i32* %564, align 4, !tbaa !28
  %565 = add nuw nsw i64 %549, 4
  %566 = icmp eq i64 %565, 8
  br i1 %566, label %246, label %567

567:                                              ; preds = %548
  %568 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 %565
  store i8* null, i8** %568, align 8, !tbaa !27
  %569 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 %565
  store i8* null, i8** %569, align 8, !tbaa !27
  %570 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 %565
  store i32 0, i32* %570, align 4, !tbaa !28
  %571 = add nuw nsw i64 %549, 5
  %572 = icmp eq i64 %571, 8
  br i1 %572, label %246, label %573

573:                                              ; preds = %567
  %574 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 %571
  store i8* null, i8** %574, align 8, !tbaa !27
  %575 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 %571
  store i8* null, i8** %575, align 8, !tbaa !27
  %576 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 %571
  store i32 0, i32* %576, align 4, !tbaa !28
  %577 = add nuw nsw i64 %549, 6
  %578 = icmp eq i64 %577, 8
  br i1 %578, label %246, label %579

579:                                              ; preds = %573
  %580 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 %577
  store i8* null, i8** %580, align 8, !tbaa !27
  %581 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 %577
  store i8* null, i8** %581, align 8, !tbaa !27
  %582 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 %577
  store i32 0, i32* %582, align 4, !tbaa !28
  %583 = add nuw nsw i64 %549, 7
  %584 = icmp eq i64 %583, 8
  br i1 %584, label %246, label %585

585:                                              ; preds = %579
  %586 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 1, i64 %583
  store i8* null, i8** %586, align 8, !tbaa !27
  %587 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 0, i64 %583
  store i8* null, i8** %587, align 8, !tbaa !27
  %588 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %50, i64 %52, i32 2, i64 %583
  store i32 0, i32* %588, align 4, !tbaa !28
  br label %246
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_get_buffer(%struct.AVCodecContext.129*, %struct.AVFrame.123*) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 192
  %4 = load %struct.AVPacket*, %struct.AVPacket** %3, align 8, !tbaa !224
  %5 = icmp eq %struct.AVPacket* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !18
  %9 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 11
  %10 = load i64, i64* %9, align 8, !tbaa !20
  %11 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 8
  %12 = load i32, i32* %11, align 4, !tbaa !83
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 3
  %15 = load i32, i32* %14, align 8, !tbaa !17
  br label %16

16:                                               ; preds = %6, %2
  %17 = phi i64 [ %8, %6 ], [ -9223372036854775808, %2 ]
  %18 = phi i64 [ %10, %6 ], [ -1, %2 ]
  %19 = phi i64 [ %13, %6 ], [ 0, %2 ]
  %20 = phi i32 [ %15, %6 ], [ -1, %2 ]
  %21 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 12
  store i64 %17, i64* %21, align 8
  %22 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 43
  store i64 %18, i64* %22, align 8
  %23 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 44
  store i64 %19, i64* %23, align 8
  %24 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 48
  store i32 %20, i32* %24, align 8
  %25 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 165
  %26 = load i64, i64* %25, align 8, !tbaa !144
  %27 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 35
  store i64 %26, i64* %27, align 8, !tbaa !259
  %28 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 3
  %29 = load %struct.AVCodec.134*, %struct.AVCodec.134** %28, align 8, !tbaa !40
  %30 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %29, i64 0, i32 2
  %31 = load i32, i32* %30, align 8, !tbaa !137
  switch i32 %31, label %61 [
    i32 0, label %32
    i32 1, label %47
  ]

32:                                               ; preds = %16
  %33 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %34 = load i32, i32* %33, align 4, !tbaa !70
  %35 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 3
  store i32 %34, i32* %35, align 8, !tbaa !260
  %36 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %37 = load i32, i32* %36, align 8, !tbaa !71
  %38 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 4
  store i32 %37, i32* %38, align 4, !tbaa !101
  %39 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %40 = load i32, i32* %39, align 8, !tbaa !69
  %41 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  store i32 %40, i32* %41, align 4, !tbaa !261
  %42 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 10
  %43 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 51
  %44 = bitcast %struct.AVRational* %43 to i64*
  %45 = bitcast %struct.AVRational* %42 to i64*
  %46 = load i64, i64* %44, align 8
  store i64 %46, i64* %45, align 8
  br label %61

47:                                               ; preds = %16
  %48 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 100
  %49 = load i32, i32* %48, align 8, !tbaa !262
  %50 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 40
  store i32 %49, i32* %50, align 4, !tbaa !263
  %51 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 102
  %52 = load i32, i32* %51, align 8, !tbaa !142
  %53 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  store i32 %52, i32* %53, align 4, !tbaa !261
  %54 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 108
  %55 = load i64, i64* %54, align 8, !tbaa !264
  %56 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 41
  store i64 %55, i64* %56, align 8, !tbaa !265
  %57 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 101
  %58 = load i32, i32* %57, align 4, !tbaa !257
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 47
  store i64 %59, i64* %60, align 8, !tbaa !266
  br label %61

61:                                               ; preds = %47, %32, %16
  %62 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 112
  %63 = load i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)** %62, align 8, !tbaa !138
  %64 = tail call i32 %63(%struct.AVCodecContext.129* nonnull %0, %struct.AVFrame.123* nonnull %1) #18
  ret i32 %64
}

; Function Attrs: nounwind uwtable
define internal void @avcodec_default_release_buffer(%struct.AVCodecContext.129*, %struct.AVFrame.123*) #5 {
  %3 = bitcast %struct.AVFrame.123* %1 to i8*
  %4 = alloca %struct.InternalBuffer, align 8
  %5 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 10
  %6 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %5, align 8, !tbaa !44
  %7 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4, !tbaa !136
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1.1421, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 554) #18
  tail call void @abort() #27
  unreachable

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %6, i64 0, i32 1
  %13 = load %struct.InternalBuffer*, %struct.InternalBuffer** %12, align 8, !tbaa !252
  %14 = icmp eq %struct.InternalBuffer* %13, null
  br i1 %14, label %41, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %6, i64 0, i32 0
  %17 = load i32, i32* %16, align 8, !tbaa !251
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %.loopexit

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 0
  %21 = load i8*, i8** %20, align 8, !tbaa !27
  %22 = sext i32 %17 to i64
  br label %24

23:                                               ; preds = %24
  %exitcond = icmp eq i64 %29, %22
  br i1 %exitcond, label %.loopexit, label %24

24:                                               ; preds = %23, %19
  %25 = phi i64 [ 0, %19 ], [ %29, %23 ]
  %26 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %13, i64 %25, i32 1, i64 0
  %27 = load i8*, i8** %26, align 8, !tbaa !27
  %28 = icmp eq i8* %27, %21
  %29 = add nuw nsw i64 %25, 1
  br i1 %28, label %30, label %23

.loopexit:                                        ; preds = %23, %15
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3.1423, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 566) #18
  tail call void @abort() #27
  unreachable

30:                                               ; preds = %24
  %31 = and i64 %25, 4294967295
  %32 = add nsw i32 %17, -1
  store i32 %32, i32* %16, align 8, !tbaa !251
  %33 = sext i32 %32 to i64
  %34 = icmp eq i64 %31, %33
  br i1 %34, label %41, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %13, i64 %31
  %37 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %13, i64 %33
  %38 = bitcast %struct.InternalBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %38)
  %39 = bitcast %struct.InternalBuffer* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %38, i8* nonnull align 8 %39, i64 176, i1 false), !tbaa.struct !267
  %40 = bitcast %struct.InternalBuffer* %36 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %39, i8* nonnull align 8 %40, i64 176, i1 false), !tbaa.struct !267
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %40, i8* nonnull align 8 %38, i64 176, i1 false), !tbaa.struct !267
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %38)
  br label %41

41:                                               ; preds = %35, %30, %11
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 64, i1 false)
  %42 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 162
  %43 = load i32, i32* %42, align 4, !tbaa !180
  %44 = trunc i32 %43 to i16
  %45 = icmp slt i16 %44, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %41
  %47 = bitcast %struct.AVCodecContext.129* %0 to i8*
  %48 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %6, i64 0, i32 0
  %49 = load i32, i32* %48, align 8, !tbaa !251
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %47, i32 48, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4.1424, i64 0, i64 0), %struct.AVFrame.123* nonnull %1, i32 %49) #18
  br label %50

50:                                               ; preds = %46, %41
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @avcodec_default_reget_buffer(%struct.AVCodecContext.129*, %struct.AVFrame.123*) #5 {
  %3 = bitcast %struct.AVFrame.123* %1 to i8*
  %4 = alloca %struct.AVFrame.123, align 8
  %5 = bitcast %struct.AVFrame.123* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %5) #18
  %6 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4, !tbaa !136
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %2
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1.1421, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 588) #18
  tail call void @abort() #27
  unreachable

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 0
  %12 = load i8*, i8** %11, align 8, !tbaa !27
  %13 = icmp eq i8* %12, null
  br i1 %13, label %44, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 3
  %16 = load i32, i32* %15, align 8, !tbaa !260
  %17 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %18 = load i32, i32* %17, align 4, !tbaa !70
  %19 = icmp eq i32 %16, %18
  %20 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 4
  %21 = load i32, i32* %20, align 4, !tbaa !101
  br i1 %19, label %22, label %32

22:                                               ; preds = %14
  %23 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %24 = load i32, i32* %23, align 8, !tbaa !71
  %25 = icmp eq i32 %21, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  %28 = load i32, i32* %27, align 4, !tbaa !261
  %29 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %30 = load i32, i32* %29, align 8, !tbaa !69
  %31 = icmp eq i32 %28, %30
  br i1 %31, label %44, label %32

32:                                               ; preds = %26, %22, %14
  %33 = bitcast %struct.AVCodecContext.129* %0 to i8*
  %34 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  %35 = load i32, i32* %34, align 4, !tbaa !261
  %36 = tail call fastcc i8* @av_get_pix_fmt_name(i32 %35) #18
  %37 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %38 = load i32, i32* %37, align 8, !tbaa !71
  %39 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %40 = load i32, i32* %39, align 8, !tbaa !69
  %41 = tail call fastcc i8* @av_get_pix_fmt_name(i32 %40) #18
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %33, i32 24, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.5.1427, i64 0, i64 0), i32 %16, i32 %21, i8* %36, i32 %18, i32 %38, i8* %41) #18
  %42 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 113
  %43 = load void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)** %42, align 8, !tbaa !58
  tail call void %43(%struct.AVCodecContext.129* nonnull %0, %struct.AVFrame.123* nonnull %1) #18
  br label %44

44:                                               ; preds = %32, %26, %10
  %45 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 192
  %46 = load %struct.AVPacket*, %struct.AVPacket** %45, align 8, !tbaa !224
  %47 = icmp eq %struct.AVPacket* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %46, i64 0, i32 0
  %50 = load i64, i64* %49, align 8, !tbaa !18
  %51 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %46, i64 0, i32 11
  %52 = load i64, i64* %51, align 8, !tbaa !20
  %53 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %46, i64 0, i32 8
  %54 = load i32, i32* %53, align 4, !tbaa !83
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %46, i64 0, i32 3
  %57 = load i32, i32* %56, align 8, !tbaa !17
  br label %58

58:                                               ; preds = %48, %44
  %59 = phi i64 [ %50, %48 ], [ -9223372036854775808, %44 ]
  %60 = phi i64 [ %52, %48 ], [ -1, %44 ]
  %61 = phi i64 [ %55, %48 ], [ 0, %44 ]
  %62 = phi i32 [ %57, %48 ], [ -1, %44 ]
  %63 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 12
  store i64 %59, i64* %63, align 8
  %64 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 43
  store i64 %60, i64* %64, align 8
  %65 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 44
  store i64 %61, i64* %65, align 8
  %66 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 48
  store i32 %62, i32* %66, align 8
  %67 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 165
  %68 = load i64, i64* %67, align 8, !tbaa !144
  %69 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 35
  store i64 %68, i64* %69, align 8, !tbaa !259
  %70 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 3
  %71 = load %struct.AVCodec.134*, %struct.AVCodec.134** %70, align 8, !tbaa !40
  %72 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %71, i64 0, i32 2
  %73 = load i32, i32* %72, align 8, !tbaa !137
  switch i32 %73, label %103 [
    i32 0, label %74
    i32 1, label %89
  ]

74:                                               ; preds = %58
  %75 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %76 = load i32, i32* %75, align 4, !tbaa !70
  %77 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 3
  store i32 %76, i32* %77, align 8, !tbaa !260
  %78 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %79 = load i32, i32* %78, align 8, !tbaa !71
  %80 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 4
  store i32 %79, i32* %80, align 4, !tbaa !101
  %81 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %82 = load i32, i32* %81, align 8, !tbaa !69
  %83 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  store i32 %82, i32* %83, align 4, !tbaa !261
  %84 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 10
  %85 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 51
  %86 = bitcast %struct.AVRational* %85 to i64*
  %87 = bitcast %struct.AVRational* %84 to i64*
  %88 = load i64, i64* %86, align 8
  store i64 %88, i64* %87, align 8
  br label %103

89:                                               ; preds = %58
  %90 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 100
  %91 = load i32, i32* %90, align 8, !tbaa !262
  %92 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 40
  store i32 %91, i32* %92, align 4, !tbaa !263
  %93 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 102
  %94 = load i32, i32* %93, align 8, !tbaa !142
  %95 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  store i32 %94, i32* %95, align 4, !tbaa !261
  %96 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 108
  %97 = load i64, i64* %96, align 8, !tbaa !264
  %98 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 41
  store i64 %97, i64* %98, align 8, !tbaa !265
  %99 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 101
  %100 = load i32, i32* %99, align 4, !tbaa !257
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 47
  store i64 %101, i64* %102, align 8, !tbaa !266
  br label %103

103:                                              ; preds = %89, %74, %58
  %104 = load i8*, i8** %11, align 8, !tbaa !27
  %105 = icmp eq i8* %104, null
  br i1 %105, label %106, label %164

106:                                              ; preds = %103
  %107 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 33
  %108 = load i32, i32* %107, align 4, !tbaa !268
  %109 = or i32 %108, 2
  store i32 %109, i32* %107, align 4, !tbaa !268
  %110 = load %struct.AVPacket*, %struct.AVPacket** %45, align 8, !tbaa !224
  %111 = icmp eq %struct.AVPacket* %110, null
  br i1 %111, label %122, label %112

112:                                              ; preds = %106
  %113 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %110, i64 0, i32 0
  %114 = load i64, i64* %113, align 8, !tbaa !18
  %115 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %110, i64 0, i32 11
  %116 = load i64, i64* %115, align 8, !tbaa !20
  %117 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %110, i64 0, i32 8
  %118 = load i32, i32* %117, align 4, !tbaa !83
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %110, i64 0, i32 3
  %121 = load i32, i32* %120, align 8, !tbaa !17
  br label %122

122:                                              ; preds = %112, %106
  %123 = phi i64 [ %114, %112 ], [ -9223372036854775808, %106 ]
  %124 = phi i64 [ %116, %112 ], [ -1, %106 ]
  %125 = phi i64 [ %119, %112 ], [ 0, %106 ]
  %126 = phi i32 [ %121, %112 ], [ -1, %106 ]
  store i64 %123, i64* %63, align 8
  store i64 %124, i64* %64, align 8
  store i64 %125, i64* %65, align 8
  store i32 %126, i32* %66, align 8
  %127 = load i64, i64* %67, align 8, !tbaa !144
  store i64 %127, i64* %69, align 8, !tbaa !259
  %128 = load %struct.AVCodec.134*, %struct.AVCodec.134** %70, align 8, !tbaa !40
  %129 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %128, i64 0, i32 2
  %130 = load i32, i32* %129, align 8, !tbaa !137
  switch i32 %130, label %160 [
    i32 0, label %131
    i32 1, label %146
  ]

131:                                              ; preds = %122
  %132 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %133 = load i32, i32* %132, align 4, !tbaa !70
  %134 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 3
  store i32 %133, i32* %134, align 8, !tbaa !260
  %135 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %136 = load i32, i32* %135, align 8, !tbaa !71
  %137 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 4
  store i32 %136, i32* %137, align 4, !tbaa !101
  %138 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %139 = load i32, i32* %138, align 8, !tbaa !69
  %140 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  store i32 %139, i32* %140, align 4, !tbaa !261
  %141 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 10
  %142 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 51
  %143 = bitcast %struct.AVRational* %142 to i64*
  %144 = bitcast %struct.AVRational* %141 to i64*
  %145 = load i64, i64* %143, align 8
  store i64 %145, i64* %144, align 8
  br label %160

146:                                              ; preds = %122
  %147 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 100
  %148 = load i32, i32* %147, align 8, !tbaa !262
  %149 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 40
  store i32 %148, i32* %149, align 4, !tbaa !263
  %150 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 102
  %151 = load i32, i32* %150, align 8, !tbaa !142
  %152 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  store i32 %151, i32* %152, align 4, !tbaa !261
  %153 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 108
  %154 = load i64, i64* %153, align 8, !tbaa !264
  %155 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 41
  store i64 %154, i64* %155, align 8, !tbaa !265
  %156 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 101
  %157 = load i32, i32* %156, align 4, !tbaa !257
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 47
  store i64 %158, i64* %159, align 8, !tbaa !266
  br label %160

160:                                              ; preds = %146, %131, %122
  %161 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 112
  %162 = load i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)** %161, align 8, !tbaa !138
  %163 = tail call i32 %162(%struct.AVCodecContext.129* nonnull %0, %struct.AVFrame.123* nonnull %1) #18
  br label %238

164:                                              ; preds = %103
  %165 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 28
  %166 = load i32, i32* %165, align 8, !tbaa !250
  %167 = icmp eq i32 %166, 1
  br i1 %167, label %238, label %168

168:                                              ; preds = %164
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* nonnull align 8 %3, i64 520, i1 false), !tbaa.struct !113
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 64, i1 false)
  %169 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 9, i64 0
  %170 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 26
  store i8* null, i8** %170, align 8, !tbaa !269
  %171 = bitcast i8** %169 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 0, i64 64, i1 false)
  %172 = load %struct.AVPacket*, %struct.AVPacket** %45, align 8, !tbaa !224
  %173 = icmp eq %struct.AVPacket* %172, null
  br i1 %173, label %184, label %174

174:                                              ; preds = %168
  %175 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %172, i64 0, i32 0
  %176 = load i64, i64* %175, align 8, !tbaa !18
  %177 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %172, i64 0, i32 11
  %178 = load i64, i64* %177, align 8, !tbaa !20
  %179 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %172, i64 0, i32 8
  %180 = load i32, i32* %179, align 4, !tbaa !83
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %172, i64 0, i32 3
  %183 = load i32, i32* %182, align 8, !tbaa !17
  br label %184

184:                                              ; preds = %174, %168
  %185 = phi i64 [ %176, %174 ], [ -9223372036854775808, %168 ]
  %186 = phi i64 [ %178, %174 ], [ -1, %168 ]
  %187 = phi i64 [ %181, %174 ], [ 0, %168 ]
  %188 = phi i32 [ %183, %174 ], [ -1, %168 ]
  store i64 %185, i64* %63, align 8
  store i64 %186, i64* %64, align 8
  store i64 %187, i64* %65, align 8
  store i32 %188, i32* %66, align 8
  %189 = load i64, i64* %67, align 8, !tbaa !144
  store i64 %189, i64* %69, align 8, !tbaa !259
  %190 = load %struct.AVCodec.134*, %struct.AVCodec.134** %70, align 8, !tbaa !40
  %191 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %190, i64 0, i32 2
  %192 = load i32, i32* %191, align 8, !tbaa !137
  switch i32 %192, label %222 [
    i32 0, label %193
    i32 1, label %208
  ]

193:                                              ; preds = %184
  %194 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %195 = load i32, i32* %194, align 4, !tbaa !70
  %196 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 3
  store i32 %195, i32* %196, align 8, !tbaa !260
  %197 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %198 = load i32, i32* %197, align 8, !tbaa !71
  %199 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 4
  store i32 %198, i32* %199, align 4, !tbaa !101
  %200 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %201 = load i32, i32* %200, align 8, !tbaa !69
  %202 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  store i32 %201, i32* %202, align 4, !tbaa !261
  %203 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 10
  %204 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 51
  %205 = bitcast %struct.AVRational* %204 to i64*
  %206 = bitcast %struct.AVRational* %203 to i64*
  %207 = load i64, i64* %205, align 8
  store i64 %207, i64* %206, align 8
  br label %222

208:                                              ; preds = %184
  %209 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 100
  %210 = load i32, i32* %209, align 8, !tbaa !262
  %211 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 40
  store i32 %210, i32* %211, align 4, !tbaa !263
  %212 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 102
  %213 = load i32, i32* %212, align 8, !tbaa !142
  %214 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  store i32 %213, i32* %214, align 4, !tbaa !261
  %215 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 108
  %216 = load i64, i64* %215, align 8, !tbaa !264
  %217 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 41
  store i64 %216, i64* %217, align 8, !tbaa !265
  %218 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 101
  %219 = load i32, i32* %218, align 4, !tbaa !257
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 47
  store i64 %220, i64* %221, align 8, !tbaa !266
  br label %222

222:                                              ; preds = %208, %193, %184
  %223 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 112
  %224 = load i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, i32 (%struct.AVCodecContext.129*, %struct.AVFrame.123*)** %223, align 8, !tbaa !138
  %225 = tail call i32 %224(%struct.AVCodecContext.129* nonnull %0, %struct.AVFrame.123* nonnull %1) #18
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %238

227:                                              ; preds = %222
  %228 = bitcast %struct.AVFrame.123* %1 to %struct.AVPicture*
  %229 = bitcast %struct.AVFrame.123* %4 to %struct.AVPicture*
  %230 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %231 = load i32, i32* %230, align 8, !tbaa !69
  %232 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %233 = load i32, i32* %232, align 4, !tbaa !70
  %234 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %235 = load i32, i32* %234, align 8, !tbaa !71
  call fastcc void @av_picture_copy(%struct.AVPicture* %228, %struct.AVPicture* nonnull %229, i32 %231, i32 %233, i32 %235) #18
  %236 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 113
  %237 = load void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)*, void (%struct.AVCodecContext.129*, %struct.AVFrame.123*)** %236, align 8, !tbaa !58
  call void %237(%struct.AVCodecContext.129* nonnull %0, %struct.AVFrame.123* nonnull %4) #18
  br label %238

238:                                              ; preds = %227, %222, %164, %160
  %239 = phi i32 [ %163, %160 ], [ 0, %227 ], [ 0, %164 ], [ %225, %222 ]
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %5) #18
  ret i32 %239
}

; Function Attrs: nounwind uwtable
define internal i32 @avcodec_default_execute(%struct.AVCodecContext.129*, i32 (%struct.AVCodecContext.129*, i8*)* nocapture, i8*, i32*, i32, i32) #5 {
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %.loopexit

8:                                                ; preds = %6
  %9 = icmp eq i32* %3, null
  %10 = sext i32 %5 to i64
  %11 = zext i32 %4 to i64
  br i1 %9, label %.preheader, label %.preheader1

.preheader:                                       ; preds = %8, %.preheader
  %12 = phi i64 [ %16, %.preheader ], [ 0, %8 ]
  %13 = mul nsw i64 %12, %10
  %14 = getelementptr inbounds i8, i8* %2, i64 %13
  %15 = tail call i32 %1(%struct.AVCodecContext.129* %0, i8* %14) #18
  %16 = add nuw nsw i64 %12, 1
  %17 = icmp eq i64 %16, %11
  br i1 %17, label %.loopexit, label %.preheader

.preheader1:                                      ; preds = %8, %.preheader1
  %18 = phi i64 [ %23, %.preheader1 ], [ 0, %8 ]
  %19 = mul nsw i64 %18, %10
  %20 = getelementptr inbounds i8, i8* %2, i64 %19
  %21 = tail call i32 %1(%struct.AVCodecContext.129* %0, i8* %20) #18
  %22 = getelementptr inbounds i32, i32* %3, i64 %18
  store i32 %21, i32* %22, align 4, !tbaa !28
  %23 = add nuw nsw i64 %18, 1
  %24 = icmp eq i64 %23, %11
  br i1 %24, label %.loopexit, label %.preheader1

.loopexit:                                        ; preds = %.preheader1, %.preheader, %6
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @avcodec_default_execute2(%struct.AVCodecContext.129*, i32 (%struct.AVCodecContext.129*, i8*, i32, i32)* nocapture, i8*, i32*, i32) #5 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %.loopexit

7:                                                ; preds = %5
  %8 = icmp eq i32* %3, null
  br i1 %8, label %.preheader, label %9

9:                                                ; preds = %7
  %10 = zext i32 %4 to i64
  br label %15

.preheader:                                       ; preds = %7, %.preheader
  %11 = phi i32 [ %13, %.preheader ], [ 0, %7 ]
  %12 = tail call i32 %1(%struct.AVCodecContext.129* %0, i8* %2, i32 %11, i32 0) #18
  %13 = add nuw nsw i32 %11, 1
  %14 = icmp eq i32 %13, %4
  br i1 %14, label %.loopexit, label %.preheader

15:                                               ; preds = %15, %9
  %16 = phi i64 [ 0, %9 ], [ %20, %15 ]
  %17 = trunc i64 %16 to i32
  %18 = tail call i32 %1(%struct.AVCodecContext.129* %0, i8* %2, i32 %17, i32 0) #18
  %19 = getelementptr inbounds i32, i32* %3, i64 %16
  store i32 %18, i32* %19, align 4, !tbaa !28
  %20 = add nuw nsw i64 %16, 1
  %21 = icmp eq i64 %20, %10
  br i1 %21, label %.loopexit, label %15

.loopexit:                                        ; preds = %15, %.preheader, %5
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i32 @avcodec_default_get_format(%struct.AVCodecContext.129* nocapture readnone, i32* nocapture readonly) #15 {
  %3 = load i32, i32* %1, align 4, !tbaa !33
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %2, %14
  %5 = phi i32 [ %16, %14 ], [ %3, %2 ]
  %6 = phi i32* [ %15, %14 ], [ %1, %2 ]
  %7 = tail call fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %5) #18
  %8 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %7, i64 0, i32 4
  %9 = load i8, i8* %8, align 1, !tbaa !270
  %10 = and i8 %9, 8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %.preheader
  %13 = load i32, i32* %6, align 4, !tbaa !33
  br label %.loopexit

14:                                               ; preds = %.preheader
  %15 = getelementptr inbounds i32, i32* %6, i64 1
  %16 = load i32, i32* %15, align 4, !tbaa !33
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %14, %12, %2
  %18 = phi i32 [ -1, %2 ], [ %13, %12 ], [ -1, %14 ]
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal fastcc void @avcodec_get_frame_defaults(%struct.AVFrame.123*) unnamed_addr #5 {
  %2 = bitcast %struct.AVFrame.123* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 520, i1 false)
  %3 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 42
  store i64 -9223372036854775808, i64* %3, align 8, !tbaa !272
  %4 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 12
  store i64 -9223372036854775808, i64* %4, align 8, !tbaa !273
  %5 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 13
  store i64 -9223372036854775808, i64* %5, align 8, !tbaa !216
  %6 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 11
  store i64 -9223372036854775808, i64* %6, align 8, !tbaa !65
  %7 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 44
  store i64 0, i64* %7, align 8, !tbaa !274
  %8 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 43
  store i64 -1, i64* %8, align 8, !tbaa !275
  %9 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 48
  store i32 -1, i32* %9, align 8, !tbaa !276
  %10 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 7
  store i32 1, i32* %10, align 8, !tbaa !277
  %11 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 10, i32 0
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 10, i32 1
  store i32 1, i32* %12, align 4
  %13 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 6
  store i32 -1, i32* %13, align 4, !tbaa !261
  %14 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 0, i64 0
  %15 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %0, i64 0, i32 2
  store i8** %14, i8*** %15, align 8, !tbaa !249
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.AVFrame.123* @avcodec_alloc_frame() unnamed_addr #5 {
  %1 = tail call fastcc noalias i8* @av_malloc(i64 520) #18
  %2 = icmp eq i8* %1, null
  br i1 %2, label %29, label %3

3:                                                ; preds = %0
  %4 = bitcast i8* %1 to %struct.AVFrame.123*
  %5 = getelementptr inbounds i8, i8* %1, i64 96
  %6 = getelementptr inbounds i8, i8* %1, i64 464
  %7 = bitcast i8* %6 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1, i8 0, i64 520, i1 false)
  store i64 -9223372036854775808, i64* %7, align 8, !tbaa !272
  %8 = getelementptr inbounds i8, i8* %1, i64 208
  %9 = bitcast i8* %8 to i64*
  store i64 -9223372036854775808, i64* %9, align 8, !tbaa !273
  %10 = getelementptr inbounds i8, i8* %1, i64 216
  %11 = bitcast i8* %10 to i64*
  store i64 -9223372036854775808, i64* %11, align 8, !tbaa !216
  %12 = getelementptr inbounds i8, i8* %1, i64 200
  %13 = bitcast i8* %12 to i64*
  store i64 -9223372036854775808, i64* %13, align 8, !tbaa !65
  %14 = getelementptr inbounds i8, i8* %1, i64 480
  %15 = bitcast i8* %14 to i64*
  store i64 0, i64* %15, align 8, !tbaa !274
  %16 = getelementptr inbounds i8, i8* %1, i64 472
  %17 = bitcast i8* %16 to i64*
  store i64 -1, i64* %17, align 8, !tbaa !275
  %18 = getelementptr inbounds i8, i8* %1, i64 512
  %19 = bitcast i8* %18 to i32*
  store i32 -1, i32* %19, align 8, !tbaa !276
  %20 = getelementptr inbounds i8, i8* %1, i64 120
  %21 = bitcast i8* %20 to i32*
  store i32 1, i32* %21, align 8, !tbaa !277
  %22 = getelementptr inbounds i8, i8* %1, i64 192
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 8
  %24 = getelementptr inbounds i8, i8* %1, i64 196
  %25 = bitcast i8* %24 to i32*
  store i32 1, i32* %25, align 4
  %26 = getelementptr inbounds i8, i8* %1, i64 116
  %27 = bitcast i8* %26 to i32*
  store i32 -1, i32* %27, align 4, !tbaa !261
  %28 = bitcast i8* %5 to i8**
  store i8* %1, i8** %28, align 8, !tbaa !249
  br label %29

29:                                               ; preds = %3, %0
  %30 = phi %struct.AVFrame.123* [ %4, %3 ], [ null, %0 ]
  ret %struct.AVFrame.123* %30
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define internal fastcc void @av_codec_set_pkt_timebase(%struct.AVCodecContext.129* nocapture, i64) unnamed_addr #7 {
  %3 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 194
  %4 = bitcast %struct.AVRational* %3 to i64*
  store i64 %1, i64* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc %struct.AVCodecDescriptor* @av_codec_get_codec_descriptor(%struct.AVCodecContext.129* nocapture readonly) unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 195
  %3 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %2, align 8, !tbaa !278
  ret %struct.AVCodecDescriptor* %3
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define internal fastcc void @av_codec_set_codec_descriptor(%struct.AVCodecContext.129* nocapture, %struct.AVCodecDescriptor*) unnamed_addr #7 {
  %3 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 195
  store %struct.AVCodecDescriptor* %1, %struct.AVCodecDescriptor** %3, align 8, !tbaa !278
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @avcodec_open2(%struct.AVCodecContext.129*, %struct.AVCodec.134*, %struct.AVDictionary**) unnamed_addr #5 {
  %4 = alloca %struct.AVDictionary*, align 8
  %5 = alloca [128 x i8], align 16
  %6 = alloca [128 x i8], align 16
  %7 = alloca [512 x i8], align 16
  %8 = alloca [512 x i8], align 16
  %9 = alloca [512 x i8], align 16
  %10 = bitcast %struct.AVDictionary** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #18
  store %struct.AVDictionary* null, %struct.AVDictionary** %4, align 8, !tbaa !27
  %11 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 10
  %12 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %11, align 8, !tbaa !44
  %13 = icmp eq %struct.AVCodecInternal* %12, null
  br i1 %13, label %14, label %613

14:                                               ; preds = %3
  %15 = icmp eq %struct.AVCodec.134* %1, null
  %16 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 3
  %17 = load %struct.AVCodec.134*, %struct.AVCodec.134** %16, align 8, !tbaa !40
  %18 = icmp eq %struct.AVCodec.134* %17, null
  br i1 %15, label %19, label %22

19:                                               ; preds = %14
  br i1 %18, label %20, label %31

20:                                               ; preds = %19
  %21 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %21, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6.1440, i64 0, i64 0)) #18
  br label %613

22:                                               ; preds = %14
  %23 = icmp eq %struct.AVCodec.134* %17, %1
  %24 = or i1 %18, %23
  br i1 %24, label %31, label %25

25:                                               ; preds = %22
  %26 = bitcast %struct.AVCodecContext.129* %0 to i8*
  %27 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %17, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8, !tbaa !150
  %29 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %1, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8, !tbaa !150
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %26, i32 16, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.7.1441, i64 0, i64 0), i8* %28, i8* %30) #18
  br label %613

31:                                               ; preds = %22, %19
  %32 = phi %struct.AVCodec.134* [ %1, %22 ], [ %17, %19 ]
  %33 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 19
  %34 = load i32, i32* %33, align 8, !tbaa !279
  %35 = icmp ugt i32 %34, 268435439
  br i1 %35, label %613, label %36

36:                                               ; preds = %31
  %37 = icmp ne %struct.AVDictionary** %2, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = load %struct.AVDictionary*, %struct.AVDictionary** %2, align 8, !tbaa !27
  call fastcc void @av_dict_copy(%struct.AVDictionary** nonnull %4, %struct.AVDictionary* %39) #18
  br label %40

40:                                               ; preds = %38, %36
  %41 = tail call fastcc i32 @ff_lock_avcodec(%struct.AVCodecContext.129* nonnull %0)
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %613, label %43

43:                                               ; preds = %40
  %44 = tail call fastcc noalias i8* @av_mallocz(i64 72) #18
  %45 = bitcast %struct.AVCodecInternal** %11 to i8**
  store i8* %44, i8** %45, align 8, !tbaa !44
  %46 = icmp eq i8* %44, null
  br i1 %46, label %597, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 13
  %49 = load i32, i32* %48, align 8, !tbaa !53
  %50 = icmp sgt i32 %49, 0
  %51 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 9
  br i1 %50, label %52, label %73

52:                                               ; preds = %47
  %53 = load i8*, i8** %51, align 8, !tbaa !50
  %54 = icmp eq i8* %53, null
  br i1 %54, label %55, label %65

55:                                               ; preds = %52
  %56 = sext i32 %49 to i64
  %57 = tail call fastcc noalias i8* @av_mallocz(i64 %56) #18
  store i8* %57, i8** %51, align 8, !tbaa !50
  %58 = icmp eq i8* %57, null
  br i1 %58, label %597, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 11
  %61 = load %struct.AVClass*, %struct.AVClass** %60, align 8, !tbaa !145
  %62 = icmp eq %struct.AVClass* %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %59
  %64 = bitcast i8* %57 to %struct.AVClass**
  store %struct.AVClass* %61, %struct.AVClass** %64, align 8, !tbaa !27
  tail call fastcc void @av_opt_set_defaults(i8* nonnull %57) #18
  br label %65

65:                                               ; preds = %63, %59, %52
  %66 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 11
  %67 = load %struct.AVClass*, %struct.AVClass** %66, align 8, !tbaa !145
  %68 = icmp eq %struct.AVClass* %67, null
  br i1 %68, label %74, label %69

69:                                               ; preds = %65
  %70 = load i8*, i8** %51, align 8, !tbaa !50
  %71 = call fastcc i32 @av_opt_set_dict(i8* %70, %struct.AVDictionary** nonnull %4) #18
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %609, label %74

73:                                               ; preds = %47
  store i8* null, i8** %51, align 8, !tbaa !50
  br label %74

74:                                               ; preds = %73, %69, %65
  %75 = bitcast %struct.AVCodecContext.129* %0 to i8*
  %76 = call fastcc i32 @av_opt_set_dict(i8* %75, %struct.AVDictionary** nonnull %4) #18
  %77 = icmp slt i32 %76, 0
  br i1 %77, label %609, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 25
  %80 = load i32, i32* %79, align 4, !tbaa !195
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %108, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 26
  %84 = load i32, i32* %83, align 8, !tbaa !196
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %108, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %88 = load i32, i32* %87, align 4, !tbaa !70
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %98, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %92 = load i32, i32* %91, align 8, !tbaa !71
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %98, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %96 = load i32, i32* %95, align 8, !tbaa !238
  %97 = icmp eq i32 %96, 28
  br i1 %97, label %127, label %98

98:                                               ; preds = %94, %90, %86
  %99 = sub nsw i32 0, %80
  %100 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 174
  %101 = load i32, i32* %100, align 4, !tbaa !247
  %102 = ashr i32 %99, %101
  %103 = sub nsw i32 0, %102
  store i32 %103, i32* %87, align 4, !tbaa !70
  %104 = sub nsw i32 0, %84
  %105 = ashr i32 %104, %101
  %106 = sub nsw i32 0, %105
  %107 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  store i32 %106, i32* %107, align 8, !tbaa !71
  br label %127

108:                                              ; preds = %82, %78
  %109 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %110 = load i32, i32* %109, align 4, !tbaa !70
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %126, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %114 = load i32, i32* %113, align 8, !tbaa !71
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %126, label %116

116:                                              ; preds = %112
  store i32 %110, i32* %79, align 4, !tbaa !195
  %117 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 26
  store i32 %114, i32* %117, align 8, !tbaa !196
  %118 = sub nsw i32 0, %110
  %119 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 174
  %120 = load i32, i32* %119, align 4, !tbaa !247
  %121 = ashr i32 %118, %120
  %122 = sub nsw i32 0, %121
  store i32 %122, i32* %109, align 4, !tbaa !70
  %123 = sub nsw i32 0, %114
  %124 = ashr i32 %123, %120
  %125 = sub nsw i32 0, %124
  store i32 %125, i32* %113, align 8, !tbaa !71
  br label %127

126:                                              ; preds = %112, %108
  br i1 %81, label %131, label %127

127:                                              ; preds = %126, %116, %98, %94
  %128 = phi i32 [ %80, %126 ], [ %80, %94 ], [ %110, %116 ], [ %80, %98 ]
  %129 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 26
  %130 = load i32, i32* %129, align 8, !tbaa !196
  br label %139

131:                                              ; preds = %126
  %132 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 26
  %133 = load i32, i32* %132, align 8, !tbaa !196
  %134 = icmp ne i32 %133, 0
  %.not52 = xor i1 %111, true
  %brmerge = or i1 %134, %.not52
  br i1 %brmerge, label %139, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %137 = load i32, i32* %136, align 8, !tbaa !71
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %154, label %139

139:                                              ; preds = %131, %135, %127
  %140 = phi i32 [ %128, %127 ], [ 0, %135 ], [ 0, %131 ]
  %141 = phi i32 [ %130, %127 ], [ 0, %135 ], [ %133, %131 ]
  %142 = tail call fastcc i32 @av_image_check_size(i32 %140, i32 %141, i8* nonnull %75) #18
  %143 = icmp slt i32 %142, 0
  br i1 %143, label %151, label %144

144:                                              ; preds = %139
  %145 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %146 = load i32, i32* %145, align 4, !tbaa !70
  %147 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %148 = load i32, i32* %147, align 8, !tbaa !71
  %149 = tail call fastcc i32 @av_image_check_size(i32 %146, i32 %148, i8* nonnull %75) #18
  %150 = icmp slt i32 %149, 0
  br i1 %150, label %151, label %154

151:                                              ; preds = %144, %139
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 24, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8.1442, i64 0, i64 0)) #18
  %152 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %153 = bitcast i32* %152 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %153, i8 0, i64 16, i1 false)
  br label %154

154:                                              ; preds = %151, %144, %135
  %155 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 22
  %156 = load i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)** %155, align 8, !tbaa !151
  %157 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)* %156, null
  br i1 %157, label %161, label %158

158:                                              ; preds = %154
  %159 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 189
  %160 = bitcast i8** %159 to i8*
  tail call fastcc void @av_freep(i8* nonnull %160) #18
  br label %161

161:                                              ; preds = %158, %154
  %162 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 101
  %163 = load i32, i32* %162, align 4, !tbaa !257
  %164 = icmp ugt i32 %163, 128
  br i1 %164, label %609, label %165

165:                                              ; preds = %161
  store %struct.AVCodec.134* %32, %struct.AVCodec.134** %16, align 8, !tbaa !40
  %166 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 2
  %167 = load i32, i32* %166, align 4, !tbaa !136
  %168 = icmp eq i32 %167, -1
  br i1 %168, label %176, label %169

169:                                              ; preds = %165
  %170 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 2
  %171 = load i32, i32* %170, align 8, !tbaa !137
  %172 = icmp eq i32 %167, %171
  br i1 %172, label %176, label %173

173:                                              ; preds = %169
  %174 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %175 = load i32, i32* %174, align 8, !tbaa !238
  br label %185

176:                                              ; preds = %169, %165
  %177 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %178 = load i32, i32* %177, align 8, !tbaa !238
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %185

180:                                              ; preds = %176
  %181 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 2
  %182 = load i32, i32* %181, align 8, !tbaa !137
  store i32 %182, i32* %166, align 4, !tbaa !136
  %183 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 3
  %184 = load i32, i32* %183, align 4, !tbaa !280
  store i32 %184, i32* %177, align 8, !tbaa !238
  br label %185

185:                                              ; preds = %180, %176, %173
  %186 = phi i32 [ %167, %173 ], [ %182, %180 ], [ %167, %176 ]
  %187 = phi i32 [ %175, %173 ], [ %184, %180 ], [ %178, %176 ]
  %188 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %189 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 3
  %190 = load i32, i32* %189, align 4, !tbaa !280
  %191 = icmp eq i32 %187, %190
  br i1 %191, label %192, label %198

192:                                              ; preds = %185
  %193 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 2
  %194 = load i32, i32* %193, align 8, !tbaa !137
  %195 = icmp eq i32 %186, %194
  %196 = icmp eq i32 %186, 4
  %197 = or i1 %196, %195
  br i1 %197, label %199, label %198

198:                                              ; preds = %192, %185
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 16, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9.1443, i64 0, i64 0)) #18
  br label %609

199:                                              ; preds = %192
  %200 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 104
  store i32 0, i32* %200, align 8, !tbaa !184
  %201 = tail call fastcc %struct.AVCodecDescriptor* @avcodec_descriptor_get(i32 %187) #18
  %202 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 195
  store %struct.AVCodecDescriptor* %201, %struct.AVCodecDescriptor** %202, align 8, !tbaa !278
  %203 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 4
  %204 = load i32, i32* %203, align 8, !tbaa !41
  %205 = and i32 %204, 512
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %302, label %207

207:                                              ; preds = %199
  %208 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 160
  %209 = load i32, i32* %208, align 4, !tbaa !281
  %210 = icmp sgt i32 %209, -2
  br i1 %210, label %211, label %302

211:                                              ; preds = %207
  %212 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 20
  %213 = load i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)** %212, align 8, !tbaa !282
  %214 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)* %213, null
  br i1 %214, label %215, label %220

215:                                              ; preds = %211
  %216 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 21
  %217 = load i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)*, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)** %216, align 8, !tbaa !283
  %218 = icmp eq i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)* %217, null
  %219 = select i1 %218, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11.1444, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10.1445, i64 0, i64 0)
  br label %220

220:                                              ; preds = %215, %211
  %221 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10.1445, i64 0, i64 0), %211 ], [ %219, %215 ]
  %222 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 0
  %223 = load i8*, i8** %222, align 8, !tbaa !150
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.12.1446, i64 0, i64 0), i8* nonnull %221, i8* %223, i32 -2) #18
  %224 = load i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)** %212, align 8, !tbaa !282
  %225 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)* %224, null
  br i1 %225, label %228, label %226

226:                                              ; preds = %220
  %227 = load i32, i32* %189, align 4, !tbaa !280
  br label %233

228:                                              ; preds = %220
  %229 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %32, i64 0, i32 21
  %230 = load i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)*, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)** %229, align 8, !tbaa !283
  %231 = icmp eq i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)* %230, null
  %232 = load i32, i32* %189, align 4, !tbaa !280
  br i1 %231, label %266, label %233

233:                                              ; preds = %228, %226
  %234 = phi i32 [ %227, %226 ], [ %232, %228 ]
  %235 = load %struct.AVCodec.134*, %struct.AVCodec.134** @first_avcodec, align 8, !tbaa !27
  switch i32 %234, label %237 [
    i32 86077, label %238
    i32 86079, label %236
  ]

236:                                              ; preds = %233
  br label %238

237:                                              ; preds = %233
  br label %238

238:                                              ; preds = %237, %236, %233
  %239 = phi i32 [ %234, %237 ], [ 1950507339, %236 ], [ 1330664787, %233 ]
  br label %240

240:                                              ; preds = %261, %238
  %241 = phi %struct.AVCodec.134* [ %262, %261 ], [ null, %238 ]
  %242 = phi %struct.AVCodec.134* [ %264, %261 ], [ %235, %238 ]
  %243 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %242, i64 0, i32 20
  %244 = load i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)** %243, align 8, !tbaa !282
  %245 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)* %244, null
  br i1 %245, label %246, label %250

246:                                              ; preds = %240
  %247 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %242, i64 0, i32 21
  %248 = load i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)*, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)** %247, align 8, !tbaa !283
  %249 = icmp eq i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)* %248, null
  br i1 %249, label %261, label %250

250:                                              ; preds = %246, %240
  %251 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %242, i64 0, i32 3
  %252 = load i32, i32* %251, align 4, !tbaa !280
  %253 = icmp eq i32 %252, %239
  br i1 %253, label %254, label %261

254:                                              ; preds = %250
  %255 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %242, i64 0, i32 4
  %256 = load i32, i32* %255, align 8, !tbaa !41
  %257 = and i32 %256, 512
  %258 = icmp eq i32 %257, 0
  %259 = icmp ne %struct.AVCodec.134* %241, null
  %260 = or i1 %259, %258
  br i1 %260, label %.loopexit60, label %261

261:                                              ; preds = %254, %250, %246
  %262 = phi %struct.AVCodec.134* [ %241, %250 ], [ %241, %246 ], [ %242, %254 ]
  %263 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %242, i64 0, i32 14
  %264 = load %struct.AVCodec.134*, %struct.AVCodec.134** %263, align 8, !tbaa !245
  %265 = icmp eq %struct.AVCodec.134* %264, null
  br i1 %265, label %.loopexit60, label %240

266:                                              ; preds = %228
  %267 = load %struct.AVCodec.134*, %struct.AVCodec.134** @first_avcodec, align 8, !tbaa !27
  switch i32 %232, label %269 [
    i32 86077, label %270
    i32 86079, label %268
  ]

268:                                              ; preds = %266
  br label %270

269:                                              ; preds = %266
  br label %270

270:                                              ; preds = %269, %268, %266
  %271 = phi i32 [ %232, %269 ], [ 1950507339, %268 ], [ 1330664787, %266 ]
  br label %272

272:                                              ; preds = %289, %270
  %273 = phi %struct.AVCodec.134* [ %290, %289 ], [ null, %270 ]
  %274 = phi %struct.AVCodec.134* [ %292, %289 ], [ %267, %270 ]
  %275 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %274, i64 0, i32 22
  %276 = load i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)** %275, align 8, !tbaa !151
  %277 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)* %276, null
  br i1 %277, label %289, label %278

278:                                              ; preds = %272
  %279 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %274, i64 0, i32 3
  %280 = load i32, i32* %279, align 4, !tbaa !280
  %281 = icmp eq i32 %280, %271
  br i1 %281, label %282, label %289

282:                                              ; preds = %278
  %283 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %274, i64 0, i32 4
  %284 = load i32, i32* %283, align 8, !tbaa !41
  %285 = and i32 %284, 512
  %286 = icmp eq i32 %285, 0
  %287 = icmp ne %struct.AVCodec.134* %273, null
  %288 = or i1 %287, %286
  br i1 %288, label %.loopexit60, label %289

289:                                              ; preds = %282, %278, %272
  %290 = phi %struct.AVCodec.134* [ %273, %278 ], [ %273, %272 ], [ %274, %282 ]
  %291 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %274, i64 0, i32 14
  %292 = load %struct.AVCodec.134*, %struct.AVCodec.134** %291, align 8, !tbaa !245
  %293 = icmp eq %struct.AVCodec.134* %292, null
  br i1 %293, label %.loopexit60, label %272

.loopexit60:                                      ; preds = %261, %254, %289, %282
  %294 = phi %struct.AVCodec.134* [ %274, %282 ], [ %290, %289 ], [ %242, %254 ], [ %262, %261 ]
  %295 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %294, i64 0, i32 4
  %296 = load i32, i32* %295, align 8, !tbaa !41
  %297 = and i32 %296, 512
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %299, label %609

299:                                              ; preds = %.loopexit60
  %300 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %294, i64 0, i32 0
  %301 = load i8*, i8** %300, align 8, !tbaa !150
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.13.1447, i64 0, i64 0), i8* %221, i8* %301) #18
  br label %609

302:                                              ; preds = %207, %199
  %303 = load i32, i32* %166, align 4, !tbaa !136
  %304 = icmp eq i32 %303, 1
  br i1 %304, label %305, label %317

305:                                              ; preds = %302
  %306 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 20, i32 0
  %307 = load i32, i32* %306, align 4, !tbaa !284
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %313, label %309

309:                                              ; preds = %305
  %310 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 20, i32 1
  %311 = load i32, i32* %310, align 4, !tbaa !285
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %317

313:                                              ; preds = %309, %305
  store i32 1, i32* %306, align 4, !tbaa !284
  %314 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 100
  %315 = load i32, i32* %314, align 8, !tbaa !262
  %316 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 20, i32 1
  store i32 %315, i32* %316, align 4, !tbaa !285
  br label %317

317:                                              ; preds = %313, %309, %302
  %318 = load volatile i32, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %320, label %321

320:                                              ; preds = %317
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.78.1448, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 2609) #18
  tail call void @abort() #27
  unreachable

321:                                              ; preds = %317
  store volatile i32 0, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %322 = load volatile i32, i32* @entangled_thread_counter, align 4, !tbaa !28
  %323 = add nsw i32 %322, -1
  store volatile i32 %323, i32* @entangled_thread_counter, align 4, !tbaa !28
  br i1 %37, label %324, label %326

324:                                              ; preds = %321
  %325 = load %struct.AVDictionary*, %struct.AVDictionary** %2, align 8, !tbaa !27
  br label %326

326:                                              ; preds = %324, %321
  %327 = phi %struct.AVDictionary* [ %325, %324 ], [ null, %321 ]
  %328 = bitcast %struct.AVCodecContext.129* %0 to %struct.AVCodecContext*
  %329 = tail call fastcc i32 @ff_frame_thread_encoder_init(%struct.AVCodecContext* nonnull %328, %struct.AVDictionary* %327) #18
  %330 = tail call fastcc i32 @ff_lock_avcodec(%struct.AVCodecContext.129* nonnull %0)
  %331 = icmp slt i32 %329, 0
  br i1 %331, label %609, label %332

332:                                              ; preds = %326
  %333 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 182
  %334 = load i8*, i8** %333, align 8, !tbaa !171
  %335 = icmp eq i8* %334, null
  br i1 %335, label %336, label %350

336:                                              ; preds = %332
  %337 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %11, align 8, !tbaa !44
  %338 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %337, i64 0, i32 8
  %339 = load i8*, i8** %338, align 8, !tbaa !45
  %340 = icmp eq i8* %339, null
  br i1 %340, label %346, label %341

341:                                              ; preds = %336
  %342 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 178
  %343 = load i32, i32* %342, align 8, !tbaa !54
  %344 = and i32 %343, 1
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %346, label %350

346:                                              ; preds = %341, %336
  %347 = bitcast %struct.AVCodecContext.129* %0 to %struct.AVCodecContext.202*
  %348 = tail call fastcc i32 @ff_thread_init(%struct.AVCodecContext.202* nonnull %347) #18
  %349 = icmp slt i32 %348, 0
  br i1 %349, label %609, label %350

350:                                              ; preds = %346, %341, %332
  %351 = load %struct.AVCodec.134*, %struct.AVCodec.134** %16, align 8, !tbaa !40
  %352 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %351, i64 0, i32 10
  %353 = load i8, i8* %352, align 8, !tbaa !286
  %354 = zext i8 %353 to i32
  %355 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 174
  %356 = load i32, i32* %355, align 4, !tbaa !247
  %357 = icmp ugt i32 %356, %354
  br i1 %357, label %358, label %359

358:                                              ; preds = %350
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 16, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.14.1449, i64 0, i64 0), i32 %354) #18
  br label %609

359:                                              ; preds = %350
  %360 = icmp eq %struct.AVCodec.134* %351, null
  br i1 %360, label %524, label %361

361:                                              ; preds = %359
  %362 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %351, i64 0, i32 20
  %363 = load i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)** %362, align 8, !tbaa !282
  %364 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)* %363, null
  br i1 %364, label %365, label %369

365:                                              ; preds = %361
  %366 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %351, i64 0, i32 21
  %367 = load i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)*, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)** %366, align 8, !tbaa !283
  %368 = icmp eq i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)* %367, null
  br i1 %368, label %524, label %369

369:                                              ; preds = %365, %361
  %370 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %351, i64 0, i32 8
  %371 = load i32*, i32** %370, align 8, !tbaa !287
  %372 = icmp eq i32* %371, null
  br i1 %372, label %413, label %373

373:                                              ; preds = %369
  %374 = load i32, i32* %371, align 4, !tbaa !33
  %375 = icmp eq i32 %374, -1
  br i1 %375, label %.loopexit59, label %376

376:                                              ; preds = %373
  %377 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 102
  %378 = load i32, i32* %377, align 8, !tbaa !142
  br label %379

379:                                              ; preds = %393, %376
  %380 = phi i64 [ 0, %376 ], [ %394, %393 ]
  %381 = phi i32 [ %374, %376 ], [ %396, %393 ]
  %382 = icmp eq i32 %378, %381
  br i1 %382, label %.loopexit59, label %383

383:                                              ; preds = %379
  %384 = load i32, i32* %162, align 4, !tbaa !257
  %385 = icmp eq i32 %384, 1
  br i1 %385, label %386, label %393

386:                                              ; preds = %383
  %387 = tail call fastcc i32 @av_get_planar_sample_fmt(i32 %378) #18
  %388 = getelementptr inbounds i32, i32* %371, i64 %380
  %389 = load i32, i32* %388, align 4, !tbaa !33
  %390 = tail call fastcc i32 @av_get_planar_sample_fmt(i32 %389) #18
  %391 = icmp eq i32 %387, %390
  br i1 %391, label %392, label %393

392:                                              ; preds = %386
  store i32 %389, i32* %377, align 8, !tbaa !142
  br label %.loopexit59

393:                                              ; preds = %386, %383
  %394 = add nuw i64 %380, 1
  %395 = getelementptr inbounds i32, i32* %371, i64 %394
  %396 = load i32, i32* %395, align 4, !tbaa !33
  %397 = icmp eq i32 %396, -1
  br i1 %397, label %398, label %379

398:                                              ; preds = %393
  %399 = and i64 %394, 4294967295
  br label %.loopexit59

.loopexit59:                                      ; preds = %379, %398, %392, %373
  %400 = phi i64 [ %380, %392 ], [ %399, %398 ], [ 0, %373 ], [ %380, %379 ]
  %401 = getelementptr inbounds i32, i32* %371, i64 %400
  %402 = load i32, i32* %401, align 4, !tbaa !33
  %403 = icmp eq i32 %402, -1
  br i1 %403, label %404, label %413

404:                                              ; preds = %.loopexit59
  %405 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %405) #18
  %406 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 102
  %407 = load i32, i32* %406, align 8, !tbaa !142
  %408 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %405, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15.1450, i64 0, i64 0), i32 %407) #18
  %409 = load i32, i32* %406, align 8, !tbaa !142
  %410 = tail call fastcc i8* @av_get_sample_fmt_name(i32 %409) #18
  %411 = icmp eq i8* %410, null
  %412 = select i1 %411, i8* %405, i8* %410
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 16, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.16.1451, i64 0, i64 0), i8* %412) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %405) #18
  br label %609

413:                                              ; preds = %.loopexit59, %369
  %414 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %351, i64 0, i32 6
  %415 = load i32*, i32** %414, align 8, !tbaa !288
  %416 = icmp eq i32* %415, null
  br i1 %416, label %.loopexit57, label %417

417:                                              ; preds = %413
  %418 = load i32, i32* %415, align 4, !tbaa !33
  %419 = icmp eq i32 %418, -1
  br i1 %419, label %.loopexit58, label %420

420:                                              ; preds = %417
  %421 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %422 = load i32, i32* %421, align 8, !tbaa !69
  br label %427

423:                                              ; preds = %427
  %424 = getelementptr inbounds i32, i32* %415, i64 %431
  %425 = load i32, i32* %424, align 4, !tbaa !33
  %426 = icmp eq i32 %425, -1
  br i1 %426, label %.loopexit58, label %427

427:                                              ; preds = %423, %420
  %428 = phi i64 [ 0, %420 ], [ %431, %423 ]
  %429 = phi i32 [ %418, %420 ], [ %425, %423 ]
  %430 = icmp eq i32 %422, %429
  %431 = add nuw i64 %428, 1
  br i1 %430, label %.loopexit57, label %423

.loopexit58:                                      ; preds = %423, %417
  %432 = load i32, i32* %188, align 8, !tbaa !238
  switch i32 %432, label %437 [
    i32 8, label %433
    i32 10, label %433
  ]

433:                                              ; preds = %.loopexit58, %.loopexit58
  %434 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 160
  %435 = load i32, i32* %434, align 4, !tbaa !281
  %436 = icmp slt i32 %435, 0
  br i1 %436, label %.loopexit57, label %437

437:                                              ; preds = %433, %.loopexit58
  %438 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %438) #18
  %439 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %440 = load i32, i32* %439, align 8, !tbaa !69
  %441 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %438, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15.1450, i64 0, i64 0), i32 %440) #18
  %442 = load i32, i32* %439, align 8, !tbaa !69
  %443 = tail call fastcc i8* @av_get_pix_fmt_name(i32 %442) #18
  %444 = icmp eq i8* %443, null
  %445 = select i1 %444, i8* %438, i8* %443
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 16, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.17.1452, i64 0, i64 0), i8* %445) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %438) #18
  br label %609

.loopexit57:                                      ; preds = %427, %433, %413
  %446 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %351, i64 0, i32 7
  %447 = load i32*, i32** %446, align 8, !tbaa !289
  %448 = icmp eq i32* %447, null
  br i1 %448, label %.loopexit55, label %449

449:                                              ; preds = %.loopexit57
  %450 = load i32, i32* %447, align 4, !tbaa !28
  %451 = icmp eq i32 %450, 0
  %452 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 100
  %453 = load i32, i32* %452, align 8, !tbaa !262
  br i1 %451, label %.loopexit56, label %.preheader54

454:                                              ; preds = %.preheader54
  %455 = getelementptr inbounds i32, i32* %447, i64 %461
  %456 = load i32, i32* %455, align 4, !tbaa !28
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %.loopexit56, label %.preheader54

.preheader54:                                     ; preds = %449, %454
  %458 = phi i64 [ %461, %454 ], [ 0, %449 ]
  %459 = phi i32 [ %456, %454 ], [ %450, %449 ]
  %460 = icmp eq i32 %453, %459
  %461 = add nuw i64 %458, 1
  br i1 %460, label %.loopexit55, label %454

.loopexit56:                                      ; preds = %454, %449
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %75, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.18.1453, i64 0, i64 0), i32 %453) #18
  br label %609

.loopexit55:                                      ; preds = %.preheader54, %.loopexit57
  %462 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %351, i64 0, i32 9
  %463 = load i64*, i64** %462, align 8, !tbaa !290
  %464 = icmp eq i64* %463, null
  br i1 %464, label %.loopexit, label %465

465:                                              ; preds = %.loopexit55
  %466 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 108
  %467 = load i64, i64* %466, align 8, !tbaa !264
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %472, label %469

469:                                              ; preds = %465
  %470 = load i64, i64* %463, align 8, !tbaa !26
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %.loopexit53, label %.preheader

472:                                              ; preds = %465
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 24, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19.1454, i64 0, i64 0)) #18
  br label %.loopexit

473:                                              ; preds = %.preheader
  %474 = getelementptr inbounds i64, i64* %463, i64 %480
  %475 = load i64, i64* %474, align 8, !tbaa !26
  %476 = icmp eq i64 %475, 0
  br i1 %476, label %.loopexit53, label %.preheader

.preheader:                                       ; preds = %469, %473
  %477 = phi i64 [ %480, %473 ], [ 0, %469 ]
  %478 = phi i64 [ %475, %473 ], [ %470, %469 ]
  %479 = icmp eq i64 %467, %478
  %480 = add nuw i64 %477, 1
  br i1 %479, label %.loopexit, label %473

.loopexit53:                                      ; preds = %473, %469
  %481 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %481) #18
  call fastcc void @av_get_channel_layout_string(i8* nonnull %481, i32 512, i32 -1, i64 %467) #18
  call void (i8*, i32, i8*, ...) @av_log(i8* %75, i32 16, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.20.1455, i64 0, i64 0), i8* nonnull %481) #18
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %481) #18
  br label %609

.loopexit:                                        ; preds = %.preheader, %472, %.loopexit55
  %482 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 108
  %483 = load i64, i64* %482, align 8, !tbaa !264
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %495, label %485

485:                                              ; preds = %.loopexit
  %486 = load i32, i32* %162, align 4, !tbaa !257
  %487 = icmp eq i32 %486, 0
  %488 = tail call fastcc i32 @av_get_channel_layout_nb_channels(i64 %483) #18
  br i1 %487, label %494, label %489

489:                                              ; preds = %485
  %490 = icmp eq i32 %488, %486
  br i1 %490, label %495, label %491

491:                                              ; preds = %489
  %492 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %492) #18
  call fastcc void @av_get_channel_layout_string(i8* nonnull %492, i32 512, i32 -1, i64 %483) #18
  %493 = load i32, i32* %162, align 4, !tbaa !257
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 16, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.21.1456, i64 0, i64 0), i8* nonnull %492, i32 %488, i32 %493) #18
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %492) #18
  br label %609

494:                                              ; preds = %485
  store i32 %488, i32* %162, align 4, !tbaa !257
  br label %495

495:                                              ; preds = %494, %489, %.loopexit
  %496 = load i32, i32* %166, align 4, !tbaa !136
  switch i32 %496, label %515 [
    i32 0, label %497
    i32 1, label %509
  ]

497:                                              ; preds = %495
  %498 = load i32, i32* %188, align 8, !tbaa !238
  %499 = icmp eq i32 %498, 63
  br i1 %499, label %509, label %500

500:                                              ; preds = %497
  %501 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %502 = load i32, i32* %501, align 4, !tbaa !70
  %503 = icmp slt i32 %502, 1
  br i1 %503, label %508, label %504

504:                                              ; preds = %500
  %505 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %506 = load i32, i32* %505, align 8, !tbaa !71
  %507 = icmp slt i32 %506, 1
  br i1 %507, label %508, label %509

508:                                              ; preds = %504, %500
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22.1457, i64 0, i64 0)) #18
  br label %609

509:                                              ; preds = %504, %497, %495
  %510 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 12
  %511 = load i32, i32* %510, align 8, !tbaa !291
  %512 = add i32 %511, -1
  %513 = icmp ult i32 %512, 999
  br i1 %513, label %514, label %515

514:                                              ; preds = %509
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 24, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.23.1458, i64 0, i64 0), i32 %511, i32 %511) #18
  br label %515

515:                                              ; preds = %514, %509, %495
  %516 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 133
  %517 = load i32, i32* %516, align 8, !tbaa !292
  %518 = icmp eq i32 %517, 0
  br i1 %518, label %519, label %524

519:                                              ; preds = %515
  %520 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 123
  %521 = load i32, i32* %520, align 8, !tbaa !293
  %522 = mul nsw i32 %521, 3
  %523 = sdiv i32 %522, 4
  store i32 %523, i32* %516, align 8, !tbaa !292
  br label %524

524:                                              ; preds = %519, %515, %365, %359
  %525 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 196
  %526 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 199
  %527 = bitcast i64* %525 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %527, i8 0, i64 16, i1 false)
  store i64 -9223372036854775808, i64* %526, align 8, !tbaa !294
  %528 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 198
  store i64 -9223372036854775808, i64* %528, align 8, !tbaa !295
  %529 = load %struct.AVCodec.134*, %struct.AVCodec.134** %16, align 8, !tbaa !40
  %530 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %529, i64 0, i32 19
  %531 = load i32 (%struct.AVCodecContext.129*)*, i32 (%struct.AVCodecContext.129*)** %530, align 8, !tbaa !225
  %532 = icmp eq i32 (%struct.AVCodecContext.129*)* %531, null
  br i1 %532, label %548, label %533

533:                                              ; preds = %524
  %534 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 178
  %535 = load i32, i32* %534, align 8, !tbaa !54
  %536 = and i32 %535, 1
  %537 = icmp eq i32 %536, 0
  br i1 %537, label %543, label %538

538:                                              ; preds = %533
  %539 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %11, align 8, !tbaa !44
  %540 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %539, i64 0, i32 8
  %541 = load i8*, i8** %540, align 8, !tbaa !45
  %542 = icmp eq i8* %541, null
  br i1 %542, label %548, label %543

543:                                              ; preds = %538, %533
  %544 = tail call i32 %531(%struct.AVCodecContext.129* nonnull %0) #18
  %545 = icmp slt i32 %544, 0
  br i1 %545, label %609, label %546

546:                                              ; preds = %543
  %547 = load %struct.AVCodec.134*, %struct.AVCodec.134** %16, align 8, !tbaa !40
  br label %548

548:                                              ; preds = %546, %538, %524
  %549 = phi %struct.AVCodec.134* [ %529, %524 ], [ %547, %546 ], [ %529, %538 ]
  %550 = icmp eq %struct.AVCodec.134* %549, null
  br i1 %550, label %597, label %551

551:                                              ; preds = %548
  %552 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %549, i64 0, i32 22
  %553 = load i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)** %552, align 8, !tbaa !151
  %554 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)* %553, null
  br i1 %554, label %597, label %555

555:                                              ; preds = %551
  %556 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 12
  %557 = load i32, i32* %556, align 8, !tbaa !291
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %559, label %578

559:                                              ; preds = %555
  %560 = load i32, i32* %166, align 4, !tbaa !136
  %561 = icmp eq i32 %560, 1
  br i1 %561, label %562, label %576

562:                                              ; preds = %559
  %563 = load i32, i32* %188, align 8, !tbaa !238
  switch i32 %563, label %566 [
    i32 69649, label %569
    i32 69648, label %564
    i32 69647, label %565
    i32 69633, label %565
    i32 69632, label %565
    i32 69645, label %565
    i32 69638, label %565
  ]

564:                                              ; preds = %562
  br label %569

565:                                              ; preds = %562, %562, %562, %562, %562
  br label %569

566:                                              ; preds = %562
  %567 = tail call fastcc i32 @av_get_exact_bits_per_sample(i32 %563) #18
  %568 = icmp eq i32 %567, 0
  br i1 %568, label %576, label %569

569:                                              ; preds = %566, %565, %564, %562
  %570 = phi i32 [ %567, %566 ], [ 2, %562 ], [ 3, %564 ], [ 4, %565 ]
  %571 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 100
  %572 = load i32, i32* %571, align 8, !tbaa !262
  %573 = load i32, i32* %162, align 4, !tbaa !257
  %574 = mul i32 %572, %570
  %575 = mul i32 %574, %573
  br label %576

576:                                              ; preds = %569, %566, %559
  %577 = phi i32 [ %575, %569 ], [ 0, %566 ], [ 0, %559 ]
  store i32 %577, i32* %556, align 8, !tbaa !291
  br label %578

578:                                              ; preds = %576, %555
  %579 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 108
  %580 = load i64, i64* %579, align 8, !tbaa !264
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %592, label %582

582:                                              ; preds = %578
  %583 = tail call fastcc i32 @av_get_channel_layout_nb_channels(i64 %580) #18
  %584 = load i32, i32* %162, align 4, !tbaa !257
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %586, label %587

586:                                              ; preds = %582
  store i32 %583, i32* %162, align 4, !tbaa !257
  br label %594

587:                                              ; preds = %582
  %588 = icmp eq i32 %583, %584
  br i1 %588, label %594, label %589

589:                                              ; preds = %587
  %590 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %590) #18
  call fastcc void @av_get_channel_layout_string(i8* nonnull %590, i32 512, i32 -1, i64 %580) #18
  %591 = load i32, i32* %162, align 4, !tbaa !257
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %75, i32 24, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.24.1459, i64 0, i64 0), i8* nonnull %590, i32 %583, i32 %591) #18
  store i64 0, i64* %579, align 8, !tbaa !264
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %590) #18
  br label %592

592:                                              ; preds = %589, %578
  %593 = load i32, i32* %162, align 4, !tbaa !257
  br label %594

594:                                              ; preds = %592, %587, %586
  %595 = phi i32 [ %593, %592 ], [ %583, %586 ], [ %583, %587 ]
  %596 = icmp ugt i32 %595, 128
  br i1 %596, label %609, label %597

597:                                              ; preds = %609, %594, %551, %548, %55, %43
  %598 = phi i32 [ %610, %609 ], [ 0, %551 ], [ -12, %43 ], [ -12, %55 ], [ 0, %548 ], [ 0, %594 ]
  %599 = load volatile i32, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %601, label %602

601:                                              ; preds = %597
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.78.1448, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 2609) #18
  call void @abort() #27
  unreachable

602:                                              ; preds = %597
  store volatile i32 0, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %603 = load volatile i32, i32* @entangled_thread_counter, align 4, !tbaa !28
  %604 = add nsw i32 %603, -1
  store volatile i32 %604, i32* @entangled_thread_counter, align 4, !tbaa !28
  br i1 %37, label %605, label %613

605:                                              ; preds = %602
  call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %2) #18
  %606 = bitcast %struct.AVDictionary** %4 to i64*
  %607 = load i64, i64* %606, align 8, !tbaa !27
  %608 = bitcast %struct.AVDictionary** %2 to i64*
  store i64 %607, i64* %608, align 8, !tbaa !27
  br label %613

609:                                              ; preds = %594, %543, %508, %491, %.loopexit53, %.loopexit56, %437, %404, %358, %346, %326, %299, %.loopexit60, %198, %161, %74, %69
  %610 = phi i32 [ %71, %69 ], [ %76, %74 ], [ -22, %198 ], [ %329, %326 ], [ -22, %358 ], [ %544, %543 ], [ %348, %346 ], [ -22, %161 ], [ -733130664, %.loopexit60 ], [ -733130664, %299 ], [ -22, %594 ], [ -22, %404 ], [ -22, %.loopexit56 ], [ -22, %.loopexit53 ], [ -22, %508 ], [ -22, %491 ], [ -22, %437 ]
  call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %4) #18
  %611 = bitcast i8** %51 to i8*
  call fastcc void @av_freep(i8* nonnull %611) #18
  %612 = bitcast %struct.AVCodecInternal** %11 to i8*
  call fastcc void @av_freep(i8* nonnull %612) #18
  store %struct.AVCodec.134* null, %struct.AVCodec.134** %16, align 8, !tbaa !40
  br label %597

613:                                              ; preds = %605, %602, %40, %31, %25, %20, %3
  %614 = phi i32 [ -22, %25 ], [ -22, %20 ], [ 0, %3 ], [ -22, %31 ], [ %41, %40 ], [ %598, %605 ], [ %598, %602 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #18
  ret i32 %614
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_lock_avcodec(%struct.AVCodecContext.129*) unnamed_addr #5 {
  %2 = load volatile i32, i32* @entangled_thread_counter, align 4, !tbaa !28
  %3 = add nsw i32 %2, 1
  store volatile i32 %3, i32* @entangled_thread_counter, align 4, !tbaa !28
  %4 = load volatile i32, i32* @entangled_thread_counter, align 4, !tbaa !28
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %7, i32 16, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.76.1460, i64 0, i64 0)) #18
  store volatile i32 1, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %8 = load volatile i32, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.78.1448, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 2609) #18
  tail call void @abort() #27
  unreachable

11:                                               ; preds = %6
  store volatile i32 0, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %12 = load volatile i32, i32* @entangled_thread_counter, align 4, !tbaa !28
  %13 = add nsw i32 %12, -1
  store volatile i32 %13, i32* @entangled_thread_counter, align 4, !tbaa !28
  br label %19

14:                                               ; preds = %1
  %15 = load volatile i32, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %14
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.77.1461, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 2602) #18
  tail call void @abort() #27
  unreachable

18:                                               ; preds = %14
  store volatile i32 1, i32* @ff_avcodec_locked, align 4, !tbaa !28
  br label %19

19:                                               ; preds = %11, %18
  %20 = phi i32 [ 0, %18 ], [ -22, %11 ]
  ret i32 %20
}

; Function Attrs: nofree nounwind
declare dso_local i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #16

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc i32 @av_get_exact_bits_per_sample(i32) unnamed_addr #11 {
  switch i32 %0, label %7 [
    i32 86071, label %8
    i32 86072, label %8
    i32 69644, label %8
    i32 69661, label %8
    i32 69655, label %8
    i32 1330333984, label %8
    i32 69636, label %8
    i32 69660, label %8
    i32 69646, label %8
    i32 65543, label %2
    i32 65542, label %2
    i32 65540, label %2
    i32 65563, label %2
    i32 65541, label %2
    i32 65553, label %2
    i32 65537, label %3
    i32 1347637264, label %3
    i32 65536, label %3
    i32 65554, label %3
    i32 65539, label %3
    i32 65538, label %3
    i32 65552, label %4
    i32 65549, label %4
    i32 65548, label %4
    i32 407917392, label %4
    i32 65551, label %4
    i32 65550, label %4
    i32 65545, label %5
    i32 65544, label %5
    i32 542135120, label %5
    i32 65547, label %5
    i32 65546, label %5
    i32 65556, label %5
    i32 65557, label %5
    i32 65558, label %6
    i32 65559, label %6
  ]

2:                                                ; preds = %1, %1, %1, %1, %1, %1
  br label %8

3:                                                ; preds = %1, %1, %1, %1, %1, %1
  br label %8

4:                                                ; preds = %1, %1, %1, %1, %1, %1
  br label %8

5:                                                ; preds = %1, %1, %1, %1, %1, %1, %1
  br label %8

6:                                                ; preds = %1, %1
  br label %8

7:                                                ; preds = %1
  br label %8

8:                                                ; preds = %7, %6, %5, %4, %3, %2, %1, %1, %1, %1, %1, %1, %1, %1, %1
  %9 = phi i32 [ 0, %7 ], [ 64, %6 ], [ 32, %5 ], [ 24, %4 ], [ 16, %3 ], [ 8, %2 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ]
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_alloc_packet2(%struct.AVCodecContext.129*, %struct.AVPacket* nocapture, i32) unnamed_addr #5 {
  %4 = icmp slt i32 %2, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 3
  %7 = load i32, i32* %6, align 8, !tbaa !17
  %8 = icmp slt i32 %7, 0
  %9 = icmp sgt i32 %2, 2147483631
  %10 = or i1 %9, %8
  br i1 %10, label %11, label %13

11:                                               ; preds = %5, %3
  %12 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %12, i32 16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.25.1466, i64 0, i64 0), i32 %2) #18
  br label %80

13:                                               ; preds = %5
  %14 = icmp eq %struct.AVCodecContext.129* %0, null
  %15 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8, !tbaa !16
  br i1 %14, label %60, label %17

17:                                               ; preds = %13
  %18 = icmp eq i8* %16, null
  %19 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 10
  %20 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %19, align 8, !tbaa !44
  br i1 %18, label %28, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %20, i64 0, i32 6
  %23 = load i8*, i8** %22, align 8, !tbaa !296
  %24 = icmp eq i8* %16, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.26.1467, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 1089) #18
  tail call void @abort() #27
  unreachable

26:                                               ; preds = %21
  %27 = icmp slt i32 %7, %2
  br i1 %27, label %28, label %64

28:                                               ; preds = %26, %17
  %29 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %20, i64 0, i32 6
  %30 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %20, i64 0, i32 7
  %31 = sext i32 %2 to i64
  %32 = add nuw nsw i64 %31, 16
  %33 = load i32, i32* %30, align 4, !tbaa !28
  %34 = zext i32 %33 to i64
  %35 = icmp ult i64 %32, %34
  br i1 %35, label %47, label %36

36:                                               ; preds = %28
  %37 = mul nsw i64 %32, 17
  %38 = lshr i64 %37, 4
  %39 = add nuw nsw i64 %38, 32
  %40 = icmp ugt i64 %39, %32
  %41 = select i1 %40, i64 %39, i64 %32
  %42 = load i8*, i8** %29, align 8, !tbaa !27
  tail call fastcc void @av_free(i8* %42) #18
  %43 = tail call fastcc noalias i8* @av_mallocz(i64 %41) #18
  store i8* %43, i8** %29, align 8, !tbaa !27
  %44 = icmp eq i8* %43, null
  %45 = trunc i64 %41 to i32
  %46 = select i1 %44, i32 0, i32 %45
  store i32 %46, i32* %30, align 4, !tbaa !28
  br label %50

47:                                               ; preds = %28
  %48 = load i8*, i8** %29, align 8, !tbaa !27
  %49 = getelementptr inbounds i8, i8* %48, i64 %31
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 0, i64 16, i1 false) #18
  br label %50

50:                                               ; preds = %47, %36
  %51 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %19, align 8, !tbaa !44
  %52 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %51, i64 0, i32 6
  %53 = bitcast i8** %52 to i64*
  %54 = load i64, i64* %53, align 8, !tbaa !296
  %55 = bitcast i8** %15 to i64*
  store i64 %54, i64* %55, align 8, !tbaa !16
  %56 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %51, i64 0, i32 7
  %57 = load i32, i32* %56, align 8, !tbaa !297
  store i32 %57, i32* %6, align 8, !tbaa !17
  %58 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 9
  store void (%struct.AVPacket*)* null, void (%struct.AVPacket*)** %58, align 8, !tbaa !24
  %59 = inttoptr i64 %54 to i8*
  br label %60

60:                                               ; preds = %50, %13
  %61 = phi i32 [ %57, %50 ], [ %7, %13 ]
  %62 = phi i8* [ %59, %50 ], [ %16, %13 ]
  %63 = icmp eq i8* %62, null
  br i1 %63, label %74, label %64

64:                                               ; preds = %60, %26
  %65 = phi i32 [ %61, %60 ], [ %7, %26 ]
  %66 = icmp slt i32 %65, %2
  br i1 %66, label %67, label %69

67:                                               ; preds = %64
  %68 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %68, i32 16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27.1468, i64 0, i64 0), i32 %65, i32 %2) #18
  br label %80

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 9
  %71 = bitcast void (%struct.AVPacket*)** %70 to i64*
  %72 = load i64, i64* %71, align 8, !tbaa !24
  %73 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  tail call void @av_init_packet(%struct.AVPacket.21* nonnull %73) #18
  store i64 %72, i64* %71, align 8, !tbaa !24
  store i32 %2, i32* %6, align 8, !tbaa !17
  br label %80

74:                                               ; preds = %60
  %75 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  %76 = tail call fastcc i32 @av_new_packet(%struct.AVPacket.21* nonnull %75, i32 %2) #18
  %77 = icmp slt i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %74
  %79 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %79, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.28.1469, i64 0, i64 0), i32 %2) #18
  br label %80

80:                                               ; preds = %78, %74, %69, %67, %11
  %81 = phi i32 [ -22, %11 ], [ -22, %67 ], [ 0, %69 ], [ %76, %78 ], [ %76, %74 ]
  ret i32 %81
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avcodec_encode_video2(%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*) unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 9
  %10 = bitcast void (%struct.AVPacket*)** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = icmp ne i8* %6, null
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i32
  store i32 0, i32* %3, align 4, !tbaa !28
  %15 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 10
  %16 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %15, align 8, !tbaa !44
  %17 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %16, i64 0, i32 8
  %18 = load i8*, i8** %17, align 8, !tbaa !45
  %19 = icmp eq i8* %18, null
  br i1 %19, label %29, label %20

20:                                               ; preds = %4
  %21 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 178
  %22 = load i32, i32* %21, align 8, !tbaa !54
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %20
  %26 = bitcast %struct.AVCodecContext.129* %0 to %struct.AVCodecContext*
  %27 = bitcast %struct.AVFrame.123* %2 to %struct.AVFrame*
  %28 = tail call fastcc i32 @ff_thread_video_encode_frame(%struct.AVCodecContext* nonnull %26, %struct.AVPacket* nonnull %1, %struct.AVFrame* %27, i32* nonnull %3) #18
  br label %132

29:                                               ; preds = %20, %4
  %30 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 16
  %31 = load i32, i32* %30, align 8, !tbaa !64
  %32 = and i32 %31, 512
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 157
  %36 = load i8*, i8** %35, align 8, !tbaa !298
  %37 = icmp eq i8* %36, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %34
  store i8 0, i8* %36, align 1, !tbaa !33
  br label %39

39:                                               ; preds = %38, %34, %29
  %40 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 3
  %41 = load %struct.AVCodec.134*, %struct.AVCodec.134** %40, align 8, !tbaa !40
  %42 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %41, i64 0, i32 4
  %43 = load i32, i32* %42, align 8, !tbaa !41
  %44 = and i32 %43, 32
  %45 = icmp ne i32 %44, 0
  %46 = icmp ne %struct.AVFrame.123* %2, null
  %47 = or i1 %46, %45
  br i1 %47, label %50, label %48

48:                                               ; preds = %39
  %49 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  tail call void @av_free_packet(%struct.AVPacket.21* nonnull %49) #18
  tail call void @av_init_packet(%struct.AVPacket.21* nonnull %49) #18
  store i32 0, i32* %7, align 8, !tbaa !17
  br label %132

50:                                               ; preds = %39
  %51 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %52 = load i32, i32* %51, align 4, !tbaa !70
  %53 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %54 = load i32, i32* %53, align 8, !tbaa !71
  %55 = bitcast %struct.AVCodecContext.129* %0 to i8*
  %56 = tail call fastcc i32 @av_image_check_size(i32 %52, i32 %54, i8* %55) #18
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %132

58:                                               ; preds = %50
  %59 = load %struct.AVCodec.134*, %struct.AVCodec.134** %40, align 8, !tbaa !40
  %60 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %59, i64 0, i32 21
  %61 = load i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)*, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)** %60, align 8, !tbaa !283
  %62 = icmp eq i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)* %61, null
  br i1 %62, label %63, label %64

63:                                               ; preds = %58
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.1479, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 1437) #18
  tail call void @abort() #27
  unreachable

64:                                               ; preds = %58
  %65 = tail call i32 %61(%struct.AVCodecContext.129* nonnull %0, %struct.AVPacket* nonnull %1, %struct.AVFrame.123* %2, i32* nonnull %3) #18
  %66 = icmp slt i32 %65, 1
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.37.1480, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 1440) #18
  tail call void @abort() #27
  unreachable

68:                                               ; preds = %64
  %69 = load i8*, i8** %5, align 8, !tbaa !16
  %70 = icmp eq i8* %69, null
  br i1 %70, label %89, label %71

71:                                               ; preds = %68
  %72 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %15, align 8, !tbaa !44
  %73 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %72, i64 0, i32 6
  %74 = load i8*, i8** %73, align 8, !tbaa !296
  %75 = icmp eq i8* %69, %74
  br i1 %75, label %76, label %89

76:                                               ; preds = %71
  br i1 %12, label %77, label %85

77:                                               ; preds = %76
  %78 = load i32, i32* %7, align 8, !tbaa !17
  %79 = icmp slt i32 %8, %78
  br i1 %79, label %82, label %80

80:                                               ; preds = %77
  %81 = sext i32 %78 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %6, i8* nonnull align 1 %69, i64 %81, i1 false)
  br label %83

82:                                               ; preds = %77
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %55, i32 16, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.33.1474, i64 0, i64 0), i32 %78) #18
  store i32 %8, i32* %7, align 8, !tbaa !17
  br label %83

83:                                               ; preds = %82, %80
  %84 = phi i32 [ %65, %80 ], [ -1, %82 ]
  store i8* %6, i8** %5, align 8, !tbaa !16
  store i64 %11, i64* %10, align 8, !tbaa !24
  br label %89

85:                                               ; preds = %76
  %86 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  %87 = tail call fastcc i32 @av_dup_packet(%struct.AVPacket.21* nonnull %86) #18
  %88 = icmp slt i32 %87, 0
  br i1 %88, label %129, label %89

89:                                               ; preds = %85, %83, %71, %68
  %90 = phi i32 [ %84, %83 ], [ %65, %71 ], [ %65, %68 ], [ %65, %85 ]
  %91 = phi i32 [ 0, %83 ], [ %14, %71 ], [ %14, %68 ], [ 0, %85 ]
  %92 = icmp eq i32 %90, 0
  br i1 %92, label %93, label %129

93:                                               ; preds = %89
  %94 = load i32, i32* %3, align 4, !tbaa !28
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %93
  store i32 0, i32* %7, align 8, !tbaa !17
  br label %108

97:                                               ; preds = %93
  %98 = load %struct.AVCodec.134*, %struct.AVCodec.134** %40, align 8, !tbaa !40
  %99 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %98, i64 0, i32 4
  %100 = load i32, i32* %99, align 8, !tbaa !41
  %101 = and i32 %100, 32
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %108

103:                                              ; preds = %97
  %104 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %2, i64 0, i32 11
  %105 = load i64, i64* %104, align 8, !tbaa !65
  %106 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 1
  store i64 %105, i64* %106, align 8, !tbaa !19
  %107 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 0
  store i64 %105, i64* %107, align 8, !tbaa !18
  br label %108

108:                                              ; preds = %103, %97, %96
  %109 = icmp eq i32 %91, 0
  br i1 %109, label %123, label %110

110:                                              ; preds = %108
  %111 = load i8*, i8** %5, align 8, !tbaa !16
  %112 = icmp eq i8* %111, null
  br i1 %112, label %123, label %113

113:                                              ; preds = %110
  %114 = load void (%struct.AVPacket*)*, void (%struct.AVPacket*)** %9, align 8, !tbaa !24
  %115 = icmp eq void (%struct.AVPacket*)* %114, bitcast (void (%struct.AVPacket.21*)* @av_destruct_packet to void (%struct.AVPacket*)*)
  br i1 %115, label %116, label %123

116:                                              ; preds = %113
  %117 = load i32, i32* %7, align 8, !tbaa !17
  %118 = add nsw i32 %117, 16
  %119 = sext i32 %118 to i64
  %120 = tail call fastcc i8* @av_realloc(i8* nonnull %111, i64 %119) #18
  %121 = icmp eq i8* %120, null
  br i1 %121, label %123, label %122

122:                                              ; preds = %116
  store i8* %120, i8** %5, align 8, !tbaa !16
  br label %123

123:                                              ; preds = %122, %116, %113, %110, %108
  %124 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 104
  %125 = load i32, i32* %124, align 8, !tbaa !184
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %124, align 8, !tbaa !184
  %127 = load i32, i32* %3, align 4, !tbaa !28
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %132

129:                                              ; preds = %123, %89, %85
  %130 = phi i32 [ 0, %123 ], [ %90, %89 ], [ -12, %85 ]
  %131 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  tail call void @av_free_packet(%struct.AVPacket.21* nonnull %131) #18
  br label %132

132:                                              ; preds = %129, %123, %50, %48, %25
  %133 = phi i32 [ %28, %25 ], [ 0, %48 ], [ -22, %50 ], [ 0, %123 ], [ %130, %129 ]
  ret i32 %133
}

; Function Attrs: nounwind uwtable
define internal i32 @avcodec_decode_video2(%struct.AVCodecContext.129*, %struct.AVFrame.123*, i32*, %struct.AVPacket* nocapture readonly) unnamed_addr #5 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.AVPacket, align 8
  %7 = bitcast %struct.AVPacket* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %7) #18
  %8 = bitcast %struct.AVPacket* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %8, i64 88, i1 false), !tbaa.struct !25
  %9 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 3
  %10 = load %struct.AVCodec.134*, %struct.AVCodec.134** %9, align 8, !tbaa !40
  %11 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 8, !tbaa !137
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %4
  %15 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %15, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.39.1484, i64 0, i64 0)) #18
  br label %198

16:                                               ; preds = %4
  store i32 0, i32* %2, align 4, !tbaa !28
  %17 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 25
  %18 = load i32, i32* %17, align 4, !tbaa !195
  %19 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 26
  %20 = load i32, i32* %19, align 8, !tbaa !196
  %21 = or i32 %20, %18
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %16
  %24 = bitcast %struct.AVCodecContext.129* %0 to i8*
  %25 = tail call fastcc i32 @av_image_check_size(i32 %18, i32 %20, i8* %24) #18
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %198

27:                                               ; preds = %23, %16
  %28 = bitcast %struct.AVFrame.123* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 520, i1 false) #18
  %29 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 42
  store i64 -9223372036854775808, i64* %29, align 8, !tbaa !272
  %30 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 12
  store i64 -9223372036854775808, i64* %30, align 8, !tbaa !273
  %31 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 13
  store i64 -9223372036854775808, i64* %31, align 8, !tbaa !216
  %32 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 11
  store i64 -9223372036854775808, i64* %32, align 8, !tbaa !65
  %33 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 44
  store i64 0, i64* %33, align 8, !tbaa !274
  %34 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 43
  store i64 -1, i64* %34, align 8, !tbaa !275
  %35 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 48
  store i32 -1, i32* %35, align 8, !tbaa !276
  %36 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 7
  store i32 1, i32* %36, align 8, !tbaa !277
  %37 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 10, i32 0
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 10, i32 1
  store i32 1, i32* %38, align 4
  %39 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 6
  store i32 -1, i32* %39, align 4, !tbaa !261
  %40 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 0, i64 0
  %41 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 2
  store i8** %40, i8*** %41, align 8, !tbaa !249
  %42 = load %struct.AVCodec.134*, %struct.AVCodec.134** %9, align 8, !tbaa !40
  %43 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %42, i64 0, i32 4
  %44 = load i32, i32* %43, align 8, !tbaa !41
  %45 = and i32 %44, 32
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %56

47:                                               ; preds = %27
  %48 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %49 = load i32, i32* %48, align 8, !tbaa !17
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %56

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 178
  %53 = load i32, i32* %52, align 8, !tbaa !54
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %196, label %56

56:                                               ; preds = %51, %47, %27
  %57 = bitcast %struct.AVPacket* %6 to %struct.AVPacket.21*
  %58 = call fastcc i32 @av_packet_split_side_data(%struct.AVPacket.21* nonnull %57) #18
  call fastcc void @apply_param_change(%struct.AVCodecContext.129* nonnull %0, %struct.AVPacket* nonnull %6)
  %59 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 192
  store %struct.AVPacket* %6, %struct.AVPacket** %59, align 8, !tbaa !224
  %60 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 178
  %61 = load i32, i32* %60, align 8, !tbaa !54
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %56
  %65 = bitcast %struct.AVCodecContext.129* %0 to %struct.AVCodecContext.202*
  %66 = bitcast %struct.AVFrame.123* %1 to %struct.AVFrame.195*
  %67 = call fastcc i32 @ff_thread_decode_frame(%struct.AVCodecContext.202* nonnull %65, %struct.AVFrame.195* nonnull %66, i32* nonnull %2, %struct.AVPacket* nonnull %6) #18
  br label %117

68:                                               ; preds = %56
  %69 = load %struct.AVCodec.134*, %struct.AVCodec.134** %9, align 8, !tbaa !40
  %70 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %69, i64 0, i32 22
  %71 = load i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)** %70, align 8, !tbaa !151
  %72 = call i32 %71(%struct.AVCodecContext.129* nonnull %0, i8* %28, i32* nonnull %2, %struct.AVPacket* nonnull %6) #18
  %73 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %74 = load i64, i64* %73, align 8, !tbaa !19
  store i64 %74, i64* %31, align 8, !tbaa !216
  %75 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 39
  %76 = load i32, i32* %75, align 4, !tbaa !197
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %68
  %79 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 11
  %80 = load i64, i64* %79, align 8, !tbaa !20
  store i64 %80, i64* %34, align 8, !tbaa !275
  br label %81

81:                                               ; preds = %78, %68
  %82 = load %struct.AVCodec.134*, %struct.AVCodec.134** %9, align 8, !tbaa !40
  %83 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %82, i64 0, i32 4
  %84 = load i32, i32* %83, align 8, !tbaa !41
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %117

87:                                               ; preds = %81
  %88 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 10
  %89 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %88, i64 0, i32 0
  %90 = load i32, i32* %89, align 8, !tbaa !299
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %97

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 51
  %94 = bitcast %struct.AVRational* %93 to i64*
  %95 = bitcast %struct.AVRational* %88 to i64*
  %96 = load i64, i64* %94, align 8
  store i64 %96, i64* %95, align 8
  br label %97

97:                                               ; preds = %92, %87
  %98 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 3
  %99 = load i32, i32* %98, align 8, !tbaa !260
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  %103 = load i32, i32* %102, align 4, !tbaa !70
  store i32 %103, i32* %98, align 8, !tbaa !260
  br label %104

104:                                              ; preds = %101, %97
  %105 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 4
  %106 = load i32, i32* %105, align 4, !tbaa !101
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %111

108:                                              ; preds = %104
  %109 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %110 = load i32, i32* %109, align 8, !tbaa !71
  store i32 %110, i32* %105, align 4, !tbaa !101
  br label %111

111:                                              ; preds = %108, %104
  %112 = load i32, i32* %39, align 4, !tbaa !261
  %113 = icmp eq i32 %112, -1
  br i1 %113, label %114, label %117

114:                                              ; preds = %111
  %115 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 28
  %116 = load i32, i32* %115, align 8, !tbaa !69
  store i32 %116, i32* %39, align 4, !tbaa !261
  br label %117

117:                                              ; preds = %114, %111, %81, %64
  %118 = phi i32 [ %67, %64 ], [ %72, %81 ], [ %72, %114 ], [ %72, %111 ]
  %119 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %119) #18
  %120 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 200
  call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %120) #18
  %121 = bitcast %struct.AVPacket** %59 to %struct.AVPacket.21**
  %122 = load %struct.AVPacket.21*, %struct.AVPacket.21** %121, align 8, !tbaa !224
  %123 = call fastcc i8* @av_packet_get_side_data(%struct.AVPacket.21* %122, i32 72, i32* nonnull %5) #18
  %124 = icmp eq i8* %123, null
  br i1 %124, label %.loopexit, label %125

125:                                              ; preds = %117
  %126 = load i32, i32* %5, align 4, !tbaa !28
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %123, i64 %127
  %129 = icmp sgt i32 %126, 0
  br i1 %129, label %130, label %.loopexit

130:                                              ; preds = %125
  %131 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 45
  br label %132

132:                                              ; preds = %139, %130
  %133 = phi i8* [ %123, %130 ], [ %142, %139 ]
  %134 = call i64 @strlen(i8* nonnull %133) #28
  %135 = getelementptr inbounds i8, i8* %133, i64 1
  %136 = getelementptr inbounds i8, i8* %135, i64 %134
  %137 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %131, i8* nonnull %133, i8* nonnull %136, i32 0) #18
  %138 = icmp slt i32 %137, 0
  br i1 %138, label %.loopexit, label %139

139:                                              ; preds = %132
  %140 = call i64 @strlen(i8* nonnull %136) #28
  %141 = getelementptr inbounds i8, i8* %136, i64 1
  %142 = getelementptr inbounds i8, i8* %141, i64 %140
  %143 = icmp ult i8* %142, %128
  br i1 %143, label %132, label %.loopexit

.loopexit:                                        ; preds = %139, %132, %125, %117
  %144 = getelementptr inbounds %struct.AVFrame.123, %struct.AVFrame.123* %1, i64 0, i32 45
  %145 = bitcast %struct.AVDictionary** %144 to i64*
  %146 = load i64, i64* %145, align 8, !tbaa !300
  %147 = bitcast %struct.AVDictionary** %120 to i64*
  store i64 %146, i64* %147, align 8, !tbaa !301
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %119) #18
  store %struct.AVPacket* null, %struct.AVPacket** %59, align 8, !tbaa !224
  %148 = icmp eq i32 %58, 0
  br i1 %148, label %156, label %149

149:                                              ; preds = %.loopexit
  call fastcc void @ff_packet_free_side_data(%struct.AVPacket.21* nonnull %57) #18
  %150 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %6, i64 0, i32 3
  %151 = load i32, i32* %150, align 8, !tbaa !17
  %152 = icmp eq i32 %118, %151
  br i1 %152, label %153, label %156

153:                                              ; preds = %149
  %154 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %155 = load i32, i32* %154, align 8, !tbaa !17
  br label %156

156:                                              ; preds = %153, %149, %.loopexit
  %157 = phi i32 [ %155, %153 ], [ %118, %149 ], [ %118, %.loopexit ]
  %158 = load i32, i32* %2, align 4, !tbaa !28
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %196, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 104
  %162 = load i32, i32* %161, align 8, !tbaa !184
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %161, align 8, !tbaa !184
  %164 = load i64, i64* %30, align 8, !tbaa !273
  %165 = load i64, i64* %31, align 8, !tbaa !216
  %166 = icmp eq i64 %165, -9223372036854775808
  br i1 %166, label %175, label %167

167:                                              ; preds = %160
  %168 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 199
  %169 = load i64, i64* %168, align 8, !tbaa !294
  %170 = icmp sge i64 %169, %165
  %171 = zext i1 %170 to i64
  %172 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 197
  %173 = load i64, i64* %172, align 8, !tbaa !302
  %174 = add nsw i64 %173, %171
  store i64 %174, i64* %172, align 8, !tbaa !302
  store i64 %165, i64* %168, align 8, !tbaa !294
  br label %175

175:                                              ; preds = %167, %160
  %176 = icmp ne i64 %164, -9223372036854775808
  br i1 %176, label %180, label %177

177:                                              ; preds = %175
  %178 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 196
  %179 = load i64, i64* %178, align 8, !tbaa !303
  br label %188

180:                                              ; preds = %175
  %181 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 198
  %182 = load i64, i64* %181, align 8, !tbaa !295
  %183 = icmp sge i64 %182, %164
  %184 = zext i1 %183 to i64
  %185 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 196
  %186 = load i64, i64* %185, align 8, !tbaa !303
  %187 = add nsw i64 %186, %184
  store i64 %187, i64* %185, align 8, !tbaa !303
  store i64 %164, i64* %181, align 8, !tbaa !295
  br label %188

188:                                              ; preds = %180, %177
  %189 = phi i64 [ %179, %177 ], [ %187, %180 ]
  %190 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 197
  %191 = load i64, i64* %190, align 8, !tbaa !302
  %192 = icmp sle i64 %189, %191
  %193 = or i1 %166, %192
  %194 = and i1 %176, %193
  %195 = select i1 %194, i64 %164, i64 %165
  store i64 %195, i64* %29, align 8, !tbaa !272
  br label %196

196:                                              ; preds = %188, %156, %51
  %197 = phi i32 [ %157, %156 ], [ %157, %188 ], [ 0, %51 ]
  store i8** %40, i8*** %41, align 8, !tbaa !249
  br label %198

198:                                              ; preds = %196, %23, %14
  %199 = phi i32 [ -22, %14 ], [ %197, %196 ], [ -22, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %7) #18
  ret i32 %199
}

; Function Attrs: nounwind uwtable
define internal fastcc void @apply_param_change(%struct.AVCodecContext.129* nocapture, %struct.AVPacket* nocapture readonly) unnamed_addr #5 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #18
  store i32 0, i32* %3, align 4, !tbaa !28
  %5 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 3
  %6 = load %struct.AVCodec.134*, %struct.AVCodec.134** %5, align 8, !tbaa !40
  %7 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %6, i64 0, i32 4
  %8 = load i32, i32* %7, align 8, !tbaa !41
  %9 = and i32 %8, 16384
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %85, label %11

11:                                               ; preds = %2
  %12 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  %13 = call fastcc i8* @av_packet_get_side_data(%struct.AVPacket.21* %12, i32 2, i32* nonnull %3) #18
  %14 = icmp eq i8* %13, null
  %15 = load i32, i32* %3, align 4
  %16 = icmp slt i32 %15, 4
  %17 = or i1 %14, %16
  br i1 %17, label %85, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds i8, i8* %13, i64 4
  %20 = bitcast i8* %13 to i32*
  %21 = load i32, i32* %20, align 1, !tbaa !33
  %22 = add nsw i32 %15, -4
  store i32 %22, i32* %3, align 4, !tbaa !28
  %23 = icmp slt i32 %22, 4
  br i1 %23, label %85, label %24

24:                                               ; preds = %18
  %25 = and i32 %21, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %33, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds i8, i8* %13, i64 8
  %29 = bitcast i8* %19 to i32*
  %30 = load i32, i32* %29, align 1, !tbaa !33
  %31 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 101
  store i32 %30, i32* %31, align 4, !tbaa !257
  %32 = add nsw i32 %15, -8
  store i32 %32, i32* %3, align 4, !tbaa !28
  br label %33

33:                                               ; preds = %27, %24
  %34 = phi i32 [ %22, %24 ], [ %32, %27 ]
  %35 = phi i8* [ %19, %24 ], [ %28, %27 ]
  %36 = and i32 %21, 2
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = icmp slt i32 %34, 8
  br i1 %39, label %85, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds i8, i8* %35, i64 8
  %42 = bitcast i8* %35 to i64*
  %43 = load i64, i64* %42, align 1, !tbaa !33
  %44 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 108
  store i64 %43, i64* %44, align 8, !tbaa !264
  %45 = add nsw i32 %34, -8
  store i32 %45, i32* %3, align 4, !tbaa !28
  br label %46

46:                                               ; preds = %40, %33
  %47 = phi i32 [ %45, %40 ], [ %34, %33 ]
  %48 = phi i8* [ %41, %40 ], [ %35, %33 ]
  %49 = icmp slt i32 %47, 4
  br i1 %49, label %85, label %50

50:                                               ; preds = %46
  %51 = and i32 %21, 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %59, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds i8, i8* %48, i64 4
  %55 = bitcast i8* %48 to i32*
  %56 = load i32, i32* %55, align 1, !tbaa !33
  %57 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 100
  store i32 %56, i32* %57, align 8, !tbaa !262
  %58 = add nsw i32 %47, -4
  store i32 %58, i32* %3, align 4, !tbaa !28
  br label %59

59:                                               ; preds = %53, %50
  %60 = phi i32 [ %47, %50 ], [ %58, %53 ]
  %61 = phi i8* [ %48, %50 ], [ %54, %53 ]
  %62 = and i32 %21, 8
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %60, 8
  %65 = or i1 %63, %64
  br i1 %65, label %85, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds i8, i8* %61, i64 4
  %68 = bitcast i8* %61 to i32*
  %69 = load i32, i32* %68, align 1, !tbaa !33
  %70 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 23
  store i32 %69, i32* %70, align 4, !tbaa !70
  %71 = bitcast i8* %67 to i32*
  %72 = load i32, i32* %71, align 1, !tbaa !33
  %73 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 24
  %74 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 25
  store i32 %69, i32* %74, align 4, !tbaa !195
  %75 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 26
  store i32 %72, i32* %75, align 8, !tbaa !196
  %76 = sub nsw i32 0, %69
  %77 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 174
  %78 = load i32, i32* %77, align 4, !tbaa !247
  %79 = ashr i32 %76, %78
  %80 = sub nsw i32 0, %79
  store i32 %80, i32* %70, align 4, !tbaa !70
  %81 = sub nsw i32 0, %72
  %82 = ashr i32 %81, %78
  %83 = sub nsw i32 0, %82
  store i32 %83, i32* %73, align 8, !tbaa !71
  %84 = add nsw i32 %60, -8
  store i32 %84, i32* %3, align 4, !tbaa !28
  br label %85

85:                                               ; preds = %66, %59, %46, %38, %18, %11, %2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #18
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #17

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avcodec_close(%struct.AVCodecContext.129*) unnamed_addr #5 {
  %2 = tail call fastcc i32 @ff_lock_avcodec(%struct.AVCodecContext.129* %0)
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %87, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 10
  %6 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %5, align 8, !tbaa !44
  %7 = icmp eq %struct.AVCodecInternal* %6, null
  br i1 %7, label %49, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %6, i64 0, i32 8
  %10 = load i8*, i8** %9, align 8, !tbaa !45
  %11 = icmp eq i8* %10, null
  br i1 %11, label %25, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 176
  %14 = load i32, i32* %13, align 8, !tbaa !43
  %15 = icmp sgt i32 %14, 1
  br i1 %15, label %16, label %25

16:                                               ; preds = %12
  %17 = load volatile i32, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.78.1448, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 2609) #18
  tail call void @abort() #27
  unreachable

20:                                               ; preds = %16
  store volatile i32 0, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %21 = load volatile i32, i32* @entangled_thread_counter, align 4, !tbaa !28
  %22 = add nsw i32 %21, -1
  store volatile i32 %22, i32* @entangled_thread_counter, align 4, !tbaa !28
  %23 = bitcast %struct.AVCodecContext.129* %0 to %struct.AVCodecContext*
  tail call fastcc void @ff_frame_thread_encoder_free(%struct.AVCodecContext* nonnull %23) #18
  %24 = tail call fastcc i32 @ff_lock_avcodec(%struct.AVCodecContext.129* nonnull %0)
  br label %25

25:                                               ; preds = %20, %12, %8
  %26 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 182
  %27 = load i8*, i8** %26, align 8, !tbaa !171
  %28 = icmp eq i8* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %25
  %30 = bitcast %struct.AVCodecContext.129* %0 to %struct.AVCodecContext.202*
  tail call fastcc void @ff_thread_free(%struct.AVCodecContext.202* nonnull %30) #18
  br label %31

31:                                               ; preds = %29, %25
  %32 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 3
  %33 = load %struct.AVCodec.134*, %struct.AVCodec.134** %32, align 8, !tbaa !40
  %34 = icmp eq %struct.AVCodec.134* %33, null
  br i1 %34, label %41, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %33, i64 0, i32 23
  %37 = load i32 (%struct.AVCodecContext.129*)*, i32 (%struct.AVCodecContext.129*)** %36, align 8, !tbaa !240
  %38 = icmp eq i32 (%struct.AVCodecContext.129*)* %37, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  %40 = tail call i32 %37(%struct.AVCodecContext.129* nonnull %0) #18
  br label %41

41:                                               ; preds = %39, %35, %31
  tail call fastcc void @avcodec_default_free_buffers(%struct.AVCodecContext.129* nonnull %0)
  %42 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 175
  store %struct.AVFrame.123* null, %struct.AVFrame.123** %42, align 8, !tbaa !76
  %43 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %5, align 8, !tbaa !44
  %44 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %43, i64 0, i32 7
  store i32 0, i32* %44, align 8, !tbaa !297
  %45 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %43, i64 0, i32 6
  %46 = bitcast i8** %45 to i8*
  tail call fastcc void @av_freep(i8* nonnull %46) #18
  %47 = bitcast %struct.AVCodecInternal** %5 to i8*
  tail call fastcc void @av_freep(i8* nonnull %47) #18
  %48 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 200
  tail call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %48) #18
  br label %49

49:                                               ; preds = %41, %4
  %50 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 9
  %51 = load i8*, i8** %50, align 8, !tbaa !50
  %52 = icmp eq i8* %51, null
  br i1 %52, label %62, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 3
  %55 = load %struct.AVCodec.134*, %struct.AVCodec.134** %54, align 8, !tbaa !40
  %56 = icmp eq %struct.AVCodec.134* %55, null
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %55, i64 0, i32 11
  %59 = load %struct.AVClass*, %struct.AVClass** %58, align 8, !tbaa !145
  %60 = icmp eq %struct.AVClass* %59, null
  br i1 %60, label %62, label %61

61:                                               ; preds = %57
  tail call fastcc void @av_opt_free(i8* nonnull %51) #18
  br label %62

62:                                               ; preds = %61, %57, %53, %49
  %63 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call fastcc void @av_opt_free(i8* %63) #18
  %64 = bitcast i8** %50 to i8*
  tail call fastcc void @av_freep(i8* nonnull %64) #18
  %65 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 3
  %66 = load %struct.AVCodec.134*, %struct.AVCodec.134** %65, align 8, !tbaa !40
  %67 = icmp eq %struct.AVCodec.134* %66, null
  br i1 %67, label %79, label %68

68:                                               ; preds = %62
  %69 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %66, i64 0, i32 20
  %70 = load i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)** %69, align 8, !tbaa !282
  %71 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)* %70, null
  br i1 %71, label %72, label %76

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %66, i64 0, i32 21
  %74 = load i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)*, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)** %73, align 8, !tbaa !283
  %75 = icmp eq i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)* %74, null
  br i1 %75, label %79, label %76

76:                                               ; preds = %72, %68
  %77 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 18
  %78 = bitcast i8** %77 to i8*
  tail call fastcc void @av_freep(i8* nonnull %78) #18
  br label %79

79:                                               ; preds = %76, %72, %62
  store %struct.AVCodec.134* null, %struct.AVCodec.134** %65, align 8, !tbaa !40
  %80 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 178
  store i32 0, i32* %80, align 8, !tbaa !54
  %81 = load volatile i32, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %79
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1420, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.78.1448, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.1422, i64 0, i64 0), i32 2609) #18
  tail call void @abort() #27
  unreachable

84:                                               ; preds = %79
  store volatile i32 0, i32* @ff_avcodec_locked, align 4, !tbaa !28
  %85 = load volatile i32, i32* @entangled_thread_counter, align 4, !tbaa !28
  %86 = add nsw i32 %85, -1
  store volatile i32 %86, i32* @entangled_thread_counter, align 4, !tbaa !28
  br label %87

87:                                               ; preds = %84, %1
  %88 = phi i32 [ %2, %1 ], [ 0, %84 ]
  ret i32 %88
}

; Function Attrs: nounwind uwtable
define internal fastcc void @avcodec_default_free_buffers(%struct.AVCodecContext.129*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4, !tbaa !136
  switch i32 %3, label %40 [
    i32 0, label %4
    i32 1, label %35
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 10
  %6 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %5, align 8, !tbaa !44
  %7 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %6, i64 0, i32 1
  %8 = load %struct.InternalBuffer*, %struct.InternalBuffer** %7, align 8, !tbaa !252
  %9 = icmp eq %struct.InternalBuffer* %8, null
  br i1 %9, label %40, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %6, i64 0, i32 0
  %12 = load i32, i32* %11, align 8, !tbaa !251
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %.preheader, label %14

14:                                               ; preds = %10
  %15 = bitcast %struct.AVCodecContext.129* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %15, i32 24, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.84.1499, i64 0, i64 0), i32 %12) #18
  br label %.preheader

.preheader:                                       ; preds = %14, %10
  br label %16

16:                                               ; preds = %.preheader, %16
  %17 = phi i64 [ %31, %16 ], [ 0, %.preheader ]
  %18 = load %struct.InternalBuffer*, %struct.InternalBuffer** %7, align 8, !tbaa !252
  %19 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %18, i64 %17, i32 0, i64 0
  %20 = bitcast i8** %19 to i8*
  tail call fastcc void @av_freep(i8* %20) #18
  %21 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %18, i64 %17, i32 1, i64 0
  store i8* null, i8** %21, align 8, !tbaa !27
  %22 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %18, i64 %17, i32 0, i64 1
  %23 = bitcast i8** %22 to i8*
  tail call fastcc void @av_freep(i8* nonnull %23) #18
  %24 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %18, i64 %17, i32 1, i64 1
  store i8* null, i8** %24, align 8, !tbaa !27
  %25 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %18, i64 %17, i32 0, i64 2
  %26 = bitcast i8** %25 to i8*
  tail call fastcc void @av_freep(i8* nonnull %26) #18
  %27 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %18, i64 %17, i32 1, i64 2
  store i8* null, i8** %27, align 8, !tbaa !27
  %28 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %18, i64 %17, i32 0, i64 3
  %29 = bitcast i8** %28 to i8*
  tail call fastcc void @av_freep(i8* nonnull %29) #18
  %30 = getelementptr inbounds %struct.InternalBuffer, %struct.InternalBuffer* %18, i64 %17, i32 1, i64 3
  store i8* null, i8** %30, align 8, !tbaa !27
  %31 = add nuw nsw i64 %17, 1
  %32 = icmp eq i64 %31, 33
  br i1 %32, label %33, label %16

33:                                               ; preds = %16
  %34 = bitcast %struct.InternalBuffer** %7 to i8*
  tail call fastcc void @av_freep(i8* nonnull %34) #18
  store i32 0, i32* %11, align 8, !tbaa !251
  br label %40

35:                                               ; preds = %1
  %36 = getelementptr %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 10
  %37 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %36, align 8, !tbaa !44
  %38 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %37, i64 0, i32 5
  %39 = bitcast i8** %38 to i8*
  tail call fastcc void @av_freep(i8* nonnull %39) #18
  br label %40

40:                                               ; preds = %35, %33, %4, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i8* @avcodec_get_name(i32) unnamed_addr #5 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %77, label %3

3:                                                ; preds = %1
  %4 = tail call fastcc %struct.AVCodecDescriptor* @avcodec_descriptor_get(i32 %0) #18
  %5 = icmp eq %struct.AVCodecDescriptor* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %4, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8, !tbaa !304
  br label %77

9:                                                ; preds = %3
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 24, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.51.1500, i64 0, i64 0), i32 %0) #18
  %10 = load %struct.AVCodec.134*, %struct.AVCodec.134** @first_avcodec, align 8, !tbaa !27
  switch i32 %0, label %12 [
    i32 86077, label %13
    i32 86079, label %11
  ]

11:                                               ; preds = %9
  br label %13

12:                                               ; preds = %9
  br label %13

13:                                               ; preds = %12, %11, %9
  %14 = phi i32 [ %0, %12 ], [ 1950507339, %11 ], [ 1330664787, %9 ]
  %15 = icmp eq %struct.AVCodec.134* %10, null
  br i1 %15, label %42, label %.preheader7

.preheader7:                                      ; preds = %13, %32
  %16 = phi %struct.AVCodec.134* [ %33, %32 ], [ null, %13 ]
  %17 = phi %struct.AVCodec.134* [ %35, %32 ], [ %10, %13 ]
  %18 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %17, i64 0, i32 22
  %19 = load i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)** %18, align 8, !tbaa !151
  %20 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32*, %struct.AVPacket*)* %19, null
  br i1 %20, label %32, label %21

21:                                               ; preds = %.preheader7
  %22 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %17, i64 0, i32 3
  %23 = load i32, i32* %22, align 4, !tbaa !280
  %24 = icmp eq i32 %23, %14
  br i1 %24, label %25, label %32

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %17, i64 0, i32 4
  %27 = load i32, i32* %26, align 8, !tbaa !41
  %28 = and i32 %27, 512
  %29 = icmp eq i32 %28, 0
  %30 = icmp ne %struct.AVCodec.134* %16, null
  %31 = or i1 %30, %29
  br i1 %31, label %.loopexit8, label %32

32:                                               ; preds = %25, %21, %.preheader7
  %33 = phi %struct.AVCodec.134* [ %16, %21 ], [ %16, %.preheader7 ], [ %17, %25 ]
  %34 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %17, i64 0, i32 14
  %35 = load %struct.AVCodec.134*, %struct.AVCodec.134** %34, align 8, !tbaa !245
  %36 = icmp eq %struct.AVCodec.134* %35, null
  br i1 %36, label %37, label %.preheader7

37:                                               ; preds = %32
  %38 = icmp eq %struct.AVCodec.134* %33, null
  br i1 %38, label %42, label %.loopexit8

.loopexit8:                                       ; preds = %25, %37
  %39 = phi %struct.AVCodec.134* [ %33, %37 ], [ %17, %25 ]
  %40 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %39, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8, !tbaa !150
  br label %77

42:                                               ; preds = %37, %13
  switch i32 %0, label %44 [
    i32 86077, label %45
    i32 86079, label %43
  ]

43:                                               ; preds = %42
  br label %45

44:                                               ; preds = %42
  br label %45

45:                                               ; preds = %44, %43, %42
  %46 = phi i32 [ %0, %44 ], [ 1950507339, %43 ], [ 1330664787, %42 ]
  br i1 %15, label %77, label %.preheader

.preheader:                                       ; preds = %45, %67
  %47 = phi %struct.AVCodec.134* [ %68, %67 ], [ null, %45 ]
  %48 = phi %struct.AVCodec.134* [ %70, %67 ], [ %10, %45 ]
  %49 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %48, i64 0, i32 20
  %50 = load i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)** %49, align 8, !tbaa !282
  %51 = icmp eq i32 (%struct.AVCodecContext.129*, i8*, i32, %struct.AVSubtitle*)* %50, null
  br i1 %51, label %52, label %56

52:                                               ; preds = %.preheader
  %53 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %48, i64 0, i32 21
  %54 = load i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)*, i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)** %53, align 8, !tbaa !283
  %55 = icmp eq i32 (%struct.AVCodecContext.129*, %struct.AVPacket*, %struct.AVFrame.123*, i32*)* %54, null
  br i1 %55, label %67, label %56

56:                                               ; preds = %52, %.preheader
  %57 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %48, i64 0, i32 3
  %58 = load i32, i32* %57, align 4, !tbaa !280
  %59 = icmp eq i32 %58, %46
  br i1 %59, label %60, label %67

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %48, i64 0, i32 4
  %62 = load i32, i32* %61, align 8, !tbaa !41
  %63 = and i32 %62, 512
  %64 = icmp eq i32 %63, 0
  %65 = icmp ne %struct.AVCodec.134* %47, null
  %66 = or i1 %65, %64
  br i1 %66, label %.loopexit, label %67

67:                                               ; preds = %60, %56, %52
  %68 = phi %struct.AVCodec.134* [ %47, %56 ], [ %47, %52 ], [ %48, %60 ]
  %69 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %48, i64 0, i32 14
  %70 = load %struct.AVCodec.134*, %struct.AVCodec.134** %69, align 8, !tbaa !245
  %71 = icmp eq %struct.AVCodec.134* %70, null
  br i1 %71, label %72, label %.preheader

72:                                               ; preds = %67
  %73 = icmp eq %struct.AVCodec.134* %68, null
  br i1 %73, label %77, label %.loopexit

.loopexit:                                        ; preds = %60, %72
  %74 = phi %struct.AVCodec.134* [ %68, %72 ], [ %48, %60 ]
  %75 = getelementptr inbounds %struct.AVCodec.134, %struct.AVCodec.134* %74, i64 0, i32 0
  %76 = load i8*, i8** %75, align 8, !tbaa !150
  br label %77

77:                                               ; preds = %.loopexit, %72, %45, %.loopexit8, %6, %1
  %78 = phi i8* [ %8, %6 ], [ %41, %.loopexit8 ], [ %76, %.loopexit ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50.1501, i64 0, i64 0), %1 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.52.1502, i64 0, i64 0), %72 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.52.1502, i64 0, i64 0), %45 ]
  ret i8* %78
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc i32 @av_get_audio_frame_duration(%struct.AVCodecContext.129* nocapture readonly, i32) unnamed_addr #15 {
  %3 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 8, !tbaa !238
  %5 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 100
  %6 = load i32, i32* %5, align 8, !tbaa !262
  %7 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 101
  %8 = load i32, i32* %7, align 4, !tbaa !257
  %9 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 105
  %10 = load i32, i32* %9, align 4, !tbaa !305
  %11 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 4, !tbaa !241
  %13 = tail call fastcc i32 @av_get_exact_bits_per_sample(i32 %4)
  %14 = icmp sgt i32 %13, 0
  %15 = icmp sgt i32 %8, 0
  %16 = and i1 %15, %14
  %17 = icmp sgt i32 %1, 0
  %18 = and i1 %17, %16
  %19 = icmp slt i32 %8, 32768
  %20 = and i1 %19, %18
  %21 = icmp slt i32 %13, 32768
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %30

23:                                               ; preds = %2
  %24 = sext i32 %1 to i64
  %25 = shl nsw i64 %24, 3
  %26 = mul nsw i32 %13, %8
  %27 = sext i32 %26 to i64
  %28 = sdiv i64 %25, %27
  %29 = trunc i64 %28 to i32
  br label %199

30:                                               ; preds = %2
  %31 = getelementptr inbounds %struct.AVCodecContext.129, %struct.AVCodecContext.129* %0, i64 0, i32 172
  %32 = load i32, i32* %31, align 4, !tbaa !199
  switch i32 %4, label %42 [
    i32 69641, label %199
    i32 69632, label %33
    i32 69657, label %34
    i32 73728, label %35
    i32 1936029283, label %35
    i32 86034, label %35
    i32 86040, label %35
    i32 77825, label %35
    i32 73729, label %36
    i32 86046, label %36
    i32 86059, label %37
    i32 86063, label %38
    i32 86047, label %39
    i32 86016, label %40
    i32 86044, label %40
    i32 86019, label %41
  ]

33:                                               ; preds = %30
  br label %199

34:                                               ; preds = %30
  br label %199

35:                                               ; preds = %30, %30, %30, %30, %30
  br label %199

36:                                               ; preds = %30, %30
  br label %199

37:                                               ; preds = %30
  br label %199

38:                                               ; preds = %30
  br label %199

39:                                               ; preds = %30
  br label %199

40:                                               ; preds = %30, %30
  br label %199

41:                                               ; preds = %30
  br label %199

42:                                               ; preds = %30
  %43 = icmp sgt i32 %6, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %42
  %45 = icmp eq i32 %4, 86038
  br i1 %45, label %46, label %49

46:                                               ; preds = %44
  %47 = shl nsw i32 %6, 8
  %48 = sdiv i32 %47, 245
  br label %199

49:                                               ; preds = %44
  %50 = icmp eq i32 %4, 86065
  %51 = and i1 %50, %15
  br i1 %51, label %52, label %56

52:                                               ; preds = %49
  %53 = udiv i32 %6, 22050
  %54 = shl i32 480, %53
  %55 = sdiv i32 %54, %8
  br label %199

56:                                               ; preds = %49, %42
  %57 = icmp sgt i32 %10, 0
  br i1 %57, label %58, label %65

58:                                               ; preds = %56
  switch i32 %4, label %65 [
    i32 86058, label %59
    i32 86076, label %63
  ]

59:                                               ; preds = %58
  switch i32 %10, label %65 [
    i32 20, label %199
    i32 19, label %60
    i32 29, label %61
    i32 37, label %62
  ]

60:                                               ; preds = %59
  br label %199

61:                                               ; preds = %59
  br label %199

62:                                               ; preds = %59
  br label %199

63:                                               ; preds = %58
  switch i32 %10, label %65 [
    i32 38, label %199
    i32 50, label %64
  ]

64:                                               ; preds = %63
  br label %199

65:                                               ; preds = %63, %59, %58, %56
  br i1 %17, label %66, label %199

66:                                               ; preds = %65
  switch i32 %4, label %79 [
    i32 86037, label %67
    i32 86050, label %70
    i32 77824, label %73
    i32 86069, label %76
  ]

67:                                               ; preds = %66
  %68 = lshr i32 %1, 5
  %69 = mul nsw i32 %68, 240
  br label %199

70:                                               ; preds = %66
  %71 = lshr i32 %1, 6
  %72 = shl nsw i32 %71, 8
  br label %199

73:                                               ; preds = %66
  %74 = udiv i32 %1, 20
  %75 = mul nsw i32 %74, 160
  br label %199

76:                                               ; preds = %66
  %77 = udiv i32 %1, 24
  %78 = mul nsw i32 %77, 240
  br label %199

79:                                               ; preds = %66
  %80 = icmp sgt i32 %32, 0
  %81 = icmp eq i32 %4, 69643
  %82 = and i1 %81, %80
  br i1 %82, label %83, label %86

83:                                               ; preds = %79
  %84 = shl nsw i32 %1, 3
  %85 = sdiv i32 %84, %32
  br label %199

86:                                               ; preds = %79
  br i1 %15, label %87, label %199

87:                                               ; preds = %86
  switch i32 %4, label %133 [
    i32 1095123744, label %88
    i32 69639, label %92
    i32 69659, label %92
    i32 69637, label %97
    i32 69651, label %101
    i32 69640, label %105
    i32 81921, label %109
    i32 81920, label %113
    i32 81922, label %116
    i32 86025, label %120
    i32 86026, label %123
    i32 65561, label %126
    i32 86075, label %130
    i32 86043, label %130
  ]

88:                                               ; preds = %87
  %89 = mul nsw i32 %8, 9
  %90 = sdiv i32 %1, %89
  %91 = shl nsw i32 %90, 4
  br label %199

92:                                               ; preds = %87, %87
  %93 = shl nsw i32 %8, 2
  %94 = sub nsw i32 %1, %93
  %95 = shl nsw i32 %94, 1
  %96 = sdiv i32 %95, %8
  br label %199

97:                                               ; preds = %87
  %98 = shl i32 %1, 1
  %99 = add i32 %98, -8
  %100 = sdiv i32 %99, %8
  br label %199

101:                                              ; preds = %87
  %102 = shl i32 %1, 1
  %103 = add i32 %102, -16
  %104 = sdiv i32 %103, %8
  br label %199

105:                                              ; preds = %87
  %106 = lshr i32 %1, 7
  %107 = mul nsw i32 %106, 224
  %108 = sdiv i32 %107, %8
  br label %199

109:                                              ; preds = %87
  %110 = add nsw i32 %1, -6
  %111 = sub i32 %110, %8
  %112 = sdiv i32 %111, %8
  br label %199

113:                                              ; preds = %87
  %114 = add nsw i32 %1, -8
  %115 = sdiv i32 %114, %8
  br label %199

116:                                              ; preds = %87
  %117 = shl nsw i32 %8, 1
  %118 = sub nsw i32 %1, %117
  %119 = sdiv i32 %118, %8
  br label %199

120:                                              ; preds = %87
  %121 = mul nsw i32 %1, 3
  %122 = sdiv i32 %121, %8
  br label %199

123:                                              ; preds = %87
  %124 = mul nsw i32 %1, 6
  %125 = sdiv i32 %124, %8
  br label %199

126:                                              ; preds = %87
  %127 = mul nsw i32 %8, 5
  %128 = sdiv i32 %1, %127
  %129 = shl nsw i32 %128, 1
  br label %199

130:                                              ; preds = %87, %87
  %131 = shl nsw i32 %1, 2
  %132 = sdiv i32 %131, %8
  br label %199

133:                                              ; preds = %87
  %134 = icmp ne i32 %12, 0
  %135 = icmp eq i32 %4, 81923
  %136 = and i1 %135, %134
  br i1 %136, label %137, label %144

137:                                              ; preds = %133
  %138 = icmp eq i32 %12, 3
  br i1 %138, label %139, label %141

139:                                              ; preds = %137
  %140 = udiv i32 %1, %8
  br label %199

141:                                              ; preds = %137
  %142 = shl nsw i32 %1, 1
  %143 = sdiv i32 %142, %8
  br label %199

144:                                              ; preds = %133
  br i1 %57, label %145, label %176

145:                                              ; preds = %144
  %146 = udiv i32 %1, %10
  switch i32 %4, label %175 [
    i32 69633, label %147
    i32 69634, label %154
    i32 69635, label %161
    i32 69638, label %168
  ]

147:                                              ; preds = %145
  %148 = shl nsw i32 %8, 2
  %149 = sub nsw i32 %10, %148
  %150 = sdiv i32 %149, %148
  %151 = shl nsw i32 %150, 3
  %152 = or i32 %151, 1
  %153 = mul nsw i32 %152, %146
  br label %199

154:                                              ; preds = %145
  %155 = shl i32 %10, 1
  %156 = add i32 %155, -32
  %157 = sdiv i32 %156, 3
  %158 = shl nsw i32 %157, 2
  %159 = sdiv i32 %158, %8
  %160 = mul nsw i32 %159, %146
  br label %199

161:                                              ; preds = %145
  %162 = shl nsw i32 %8, 2
  %163 = sub nsw i32 %10, %162
  %164 = shl nsw i32 %163, 1
  %165 = sdiv i32 %164, %8
  %166 = add nsw i32 %165, 1
  %167 = mul nsw i32 %166, %146
  br label %199

168:                                              ; preds = %145
  %169 = mul i32 %8, -7
  %170 = add i32 %10, %169
  %171 = shl nsw i32 %170, 1
  %172 = sdiv i32 %171, %8
  %173 = add nsw i32 %172, 2
  %174 = mul nsw i32 %173, %146
  br label %199

175:                                              ; preds = %145
  br i1 %80, label %177, label %199

176:                                              ; preds = %144
  br i1 %80, label %177, label %199

177:                                              ; preds = %176, %175
  switch i32 %4, label %199 [
    i32 65555, label %178
    i32 65560, label %185
    i32 65562, label %193
  ]

178:                                              ; preds = %177
  %179 = icmp slt i32 %32, 4
  br i1 %179, label %199, label %180

180:                                              ; preds = %178
  %181 = lshr i32 %32, 2
  %182 = mul nsw i32 %181, %8
  %183 = sdiv i32 %1, %182
  %184 = shl nsw i32 %183, 1
  br label %199

185:                                              ; preds = %177
  %186 = icmp slt i32 %32, 4
  br i1 %186, label %199, label %187

187:                                              ; preds = %185
  %188 = add nuw nsw i32 %8, 1
  %189 = and i32 %188, -2
  %190 = mul nsw i32 %32, %189
  %191 = sdiv i32 %190, 8
  %192 = sdiv i32 %1, %191
  br label %199

193:                                              ; preds = %177
  %194 = add nuw nsw i32 %32, 4
  %195 = sdiv i32 %194, 4
  %196 = sdiv i32 %1, %195
  %197 = shl nsw i32 %196, 1
  %198 = sdiv i32 %197, %8
  br label %199

199:                                              ; preds = %193, %187, %185, %180, %178, %177, %176, %175, %168, %161, %154, %147, %141, %139, %130, %126, %123, %120, %116, %113, %109, %105, %101, %97, %92, %88, %86, %83, %76, %73, %70, %67, %65, %64, %63, %62, %61, %60, %59, %52, %46, %41, %40, %39, %38, %37, %36, %35, %34, %33, %30, %23
  %200 = phi i32 [ %29, %23 ], [ %48, %46 ], [ %55, %52 ], [ %69, %67 ], [ %72, %70 ], [ %75, %73 ], [ %78, %76 ], [ %85, %83 ], [ %140, %139 ], [ %143, %141 ], [ %198, %193 ], [ %192, %187 ], [ %184, %180 ], [ 0, %175 ], [ %132, %130 ], [ %129, %126 ], [ %125, %123 ], [ %122, %120 ], [ %119, %116 ], [ %115, %113 ], [ %112, %109 ], [ %108, %105 ], [ %104, %101 ], [ %100, %97 ], [ %96, %92 ], [ %91, %88 ], [ 480, %62 ], [ 288, %61 ], [ 144, %60 ], [ 240, %64 ], [ 1536, %41 ], [ 1152, %40 ], [ 1024, %39 ], [ 512, %38 ], [ 384, %37 ], [ 320, %36 ], [ 160, %35 ], [ 128, %34 ], [ 64, %33 ], [ 32, %30 ], [ 160, %59 ], [ 160, %63 ], [ 0, %178 ], [ 0, %185 ], [ 0, %86 ], [ 0, %177 ], [ 0, %176 ], [ 0, %65 ], [ %153, %147 ], [ %160, %154 ], [ %167, %161 ], [ %174, %168 ]
  ret i32 %200
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #18

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #18

; Function Attrs: nounwind readnone
declare dso_local i32** @__ctype_toupper_loc() local_unnamed_addr #19

; Function Attrs: nounwind uwtable
define internal fastcc void @av_register_all() unnamed_addr #5 {
  %1 = load i1, i1* @av_register_all.initialized, align 4
  br i1 %1, label %3, label %2

2:                                                ; preds = %0
  store i1 true, i1* @av_register_all.initialized, align 4
  tail call fastcc void @avcodec_register_all() #18
  tail call fastcc void @av_register_input_format() #18
  tail call fastcc void @av_register_output_format() #18
  tail call fastcc void @ffurl_register_protocol() #18
  br label %3

3:                                                ; preds = %2, %0
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i8* @ffio_url_child_next(i8* nocapture readonly, i8* readnone) #15 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 40
  %6 = bitcast i8* %5 to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !306
  br label %8

8:                                                ; preds = %4, %2
  %9 = phi i8* [ %7, %4 ], [ null, %2 ]
  ret i8* %9
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal %struct.AVClass.334* @ffio_url_child_class_next(%struct.AVClass.334* readnone) #11 {
  %2 = icmp eq %struct.AVClass.334* %0, null
  %3 = select i1 %2, %struct.AVClass.334* bitcast (%struct.AVClass* @ffurl_context_class to %struct.AVClass.334*), %struct.AVClass.334* null
  ret %struct.AVClass.334* %3
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc i32 @ffio_init_context(%struct.AVIOContext.335* nocapture, i8*, i32, i32, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*) unnamed_addr #9 {
  %9 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  store i8* %1, i8** %9, align 8, !tbaa !308
  %10 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 2
  store i32 %2, i32* %10, align 8, !tbaa !309
  %11 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  store i8* %1, i8** %11, align 8, !tbaa !310
  %12 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  store i8* %4, i8** %12, align 8, !tbaa !306
  %13 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 22
  store i32 0, i32* %13, align 8, !tbaa !311
  %14 = icmp ne i32 %3, 0
  %15 = sext i32 %2 to i64
  %16 = getelementptr inbounds i8, i8* %1, i64 %15
  %17 = select i1 %14, i8* %16, i8* %1
  %18 = zext i1 %14 to i32
  %19 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  store i8* %17, i8** %19, align 8
  %20 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 12
  store i32 %18, i32* %20, align 8
  %21 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 7
  store i32 (i8*, i8*, i32)* %6, i32 (i8*, i8*, i32)** %21, align 8, !tbaa !312
  %22 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 6
  store i32 (i8*, i8*, i32)* %5, i32 (i8*, i8*, i32)** %22, align 8, !tbaa !313
  %23 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 8
  store i64 (i8*, i64, i32)* %7, i64 (i8*, i64, i32)** %23, align 8, !tbaa !314
  %24 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %25 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  store i32 0, i32* %25, align 8, !tbaa !315
  %26 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 20
  %27 = bitcast i64* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 16, i1 false)
  store i32 1, i32* %26, align 8, !tbaa !316
  %28 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 13
  store i32 0, i32* %28, align 4, !tbaa !317
  %29 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 16
  store i64 (i64, i8*, i32)* null, i64 (i64, i8*, i32)** %29, align 8, !tbaa !318
  %30 = icmp ne i32 (i8*, i8*, i32)* %5, null
  %31 = or i1 %14, %30
  br i1 %31, label %33, label %32

32:                                               ; preds = %8
  store i64 %15, i64* %24, align 8, !tbaa !319
  store i8* %16, i8** %19, align 8, !tbaa !320
  br label %33

33:                                               ; preds = %32, %8
  %34 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 18
  %35 = bitcast i32 (i8*, i32)** %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 16, i1 false)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal noalias %struct.AVIOContext.335* @avio_alloc_context(i8*, i32, i32, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*) unnamed_addr #5 {
  %8 = tail call fastcc noalias i8* @av_mallocz(i64 184) #18
  %9 = bitcast i8* %8 to %struct.AVIOContext.335*
  %10 = icmp eq i8* %8, null
  br i1 %10, label %52, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds i8, i8* %8, i64 8
  %13 = bitcast i8* %12 to i8**
  store i8* %0, i8** %13, align 8, !tbaa !308
  %14 = getelementptr inbounds i8, i8* %8, i64 16
  %15 = bitcast i8* %14 to i32*
  store i32 %1, i32* %15, align 8, !tbaa !309
  %16 = getelementptr inbounds i8, i8* %8, i64 24
  %17 = bitcast i8* %16 to i8**
  store i8* %0, i8** %17, align 8, !tbaa !310
  %18 = getelementptr inbounds i8, i8* %8, i64 40
  %19 = bitcast i8* %18 to i8**
  store i8* %3, i8** %19, align 8, !tbaa !306
  %20 = getelementptr inbounds i8, i8* %8, i64 160
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 8, !tbaa !311
  %22 = icmp ne i32 %2, 0
  %23 = sext i32 %1 to i64
  %24 = getelementptr inbounds i8, i8* %0, i64 %23
  %25 = select i1 %22, i8* %24, i8* %0
  %26 = zext i1 %22 to i32
  %27 = getelementptr inbounds i8, i8* %8, i64 32
  %28 = bitcast i8* %27 to i8**
  store i8* %25, i8** %28, align 8
  %29 = getelementptr inbounds i8, i8* %8, i64 88
  %30 = bitcast i8* %29 to i32*
  store i32 %26, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %8, i64 56
  %32 = bitcast i8* %31 to i32 (i8*, i8*, i32)**
  store i32 (i8*, i8*, i32)* %5, i32 (i8*, i8*, i32)** %32, align 8, !tbaa !312
  %33 = getelementptr inbounds i8, i8* %8, i64 48
  %34 = bitcast i8* %33 to i32 (i8*, i8*, i32)**
  store i32 (i8*, i8*, i32)* %4, i32 (i8*, i8*, i32)** %34, align 8, !tbaa !313
  %35 = getelementptr inbounds i8, i8* %8, i64 64
  %36 = bitcast i8* %35 to i64 (i8*, i64, i32)**
  store i64 (i8*, i64, i32)* %6, i64 (i8*, i64, i32)** %36, align 8, !tbaa !314
  %37 = getelementptr inbounds i8, i8* %8, i64 72
  %38 = getelementptr inbounds i8, i8* %8, i64 120
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 8, !tbaa !315
  %40 = getelementptr inbounds i8, i8* %8, i64 144
  %41 = bitcast i8* %40 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 0, i64 16, i1 false) #18
  store i32 1, i32* %41, align 8, !tbaa !316
  %42 = getelementptr inbounds i8, i8* %8, i64 92
  %43 = bitcast i8* %42 to i32*
  store i32 0, i32* %43, align 4, !tbaa !317
  %44 = getelementptr inbounds i8, i8* %8, i64 112
  %45 = bitcast i8* %44 to i64 (i64, i8*, i32)**
  store i64 (i64, i8*, i32)* null, i64 (i64, i8*, i32)** %45, align 8, !tbaa !318
  %46 = icmp ne i32 (i8*, i8*, i32)* %4, null
  %47 = or i1 %22, %46
  br i1 %47, label %50, label %48

48:                                               ; preds = %11
  %49 = bitcast i8* %37 to i64*
  store i64 %23, i64* %49, align 8, !tbaa !319
  store i8* %24, i8** %28, align 8, !tbaa !320
  br label %50

50:                                               ; preds = %48, %11
  %51 = getelementptr inbounds i8, i8* %8, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 0, i64 16, i1 false) #18
  br label %52

52:                                               ; preds = %50, %7
  %53 = phi %struct.AVIOContext.335* [ %9, %50 ], [ null, %7 ]
  ret %struct.AVIOContext.335* %53
}

; Function Attrs: nounwind uwtable
define internal fastcc void @avio_w8(%struct.AVIOContext.335* nocapture, i32) unnamed_addr #5 {
  %3 = trunc i32 %1 to i8
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %5 = load i8*, i8** %4, align 8, !tbaa !310
  %6 = getelementptr inbounds i8, i8* %5, i64 1
  store i8* %6, i8** %4, align 8, !tbaa !310
  store i8 %3, i8* %5, align 1, !tbaa !33
  %7 = load i8*, i8** %4, align 8, !tbaa !310
  %8 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %9 = load i8*, i8** %8, align 8, !tbaa !320
  %10 = icmp ult i8* %7, %9
  br i1 %10, label %62, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %13 = load i8*, i8** %12, align 8, !tbaa !308
  %14 = icmp ugt i8* %7, %13
  %15 = ptrtoint i8* %13 to i64
  br i1 %14, label %16, label %59

16:                                               ; preds = %11
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %17, %15
  %19 = trunc i64 %18 to i32
  %20 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 7
  %21 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %20, align 8, !tbaa !312
  %22 = icmp eq i32 (i8*, i8*, i32)* %21, null
  br i1 %22, label %33, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  %25 = load i32, i32* %24, align 8, !tbaa !315
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %29 = load i8*, i8** %28, align 8, !tbaa !306
  %30 = tail call i32 %21(i8* %29, i8* %13, i32 %19) #18
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %27
  store i32 %30, i32* %24, align 8, !tbaa !315
  br label %33

33:                                               ; preds = %32, %27, %23, %16
  %34 = shl i64 %18, 32
  %35 = ashr exact i64 %34, 32
  %36 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %37 = load i64, i64* %36, align 8, !tbaa !319
  %38 = add nsw i64 %37, %35
  store i64 %38, i64* %36, align 8, !tbaa !319
  %39 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 16
  %40 = load i64 (i64, i8*, i32)*, i64 (i64, i8*, i32)** %39, align 8, !tbaa !318
  %41 = icmp eq i64 (i64, i8*, i32)* %40, null
  br i1 %41, label %42, label %45

42:                                               ; preds = %33
  %43 = bitcast i8** %12 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !308
  br label %59

45:                                               ; preds = %33
  %46 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 14
  %47 = load i64, i64* %46, align 8, !tbaa !321
  %48 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 15
  %49 = load i8*, i8** %48, align 8, !tbaa !322
  %50 = bitcast i8** %4 to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !310
  %52 = ptrtoint i8* %49 to i64
  %53 = sub i64 %51, %52
  %54 = trunc i64 %53 to i32
  %55 = tail call i64 %40(i64 %47, i8* %49, i32 %54) #18
  store i64 %55, i64* %46, align 8, !tbaa !321
  %56 = bitcast i8** %12 to i64*
  %57 = load i64, i64* %56, align 8, !tbaa !308
  %58 = bitcast i8** %48 to i64*
  store i64 %57, i64* %58, align 8, !tbaa !322
  br label %59

59:                                               ; preds = %45, %42, %11
  %60 = phi i64 [ %44, %42 ], [ %57, %45 ], [ %15, %11 ]
  %61 = bitcast i8** %4 to i64*
  store i64 %60, i64* %61, align 8, !tbaa !310
  br label %62

62:                                               ; preds = %59, %2
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @avio_write(%struct.AVIOContext.335*, i8*, i32) unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 22
  %5 = load i32, i32* %4, align 8, !tbaa !311
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %82, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 16
  %9 = load i64 (i64, i8*, i32)*, i64 (i64, i8*, i32)** %8, align 8, !tbaa !318
  %10 = icmp eq i64 (i64, i8*, i32)* %9, null
  br i1 %10, label %11, label %82

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8, !tbaa !310
  %14 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !308
  %16 = icmp ugt i8* %13, %15
  %17 = ptrtoint i8* %15 to i64
  br i1 %16, label %18, label %60

18:                                               ; preds = %11
  %19 = ptrtoint i8* %13 to i64
  %20 = sub i64 %19, %17
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 7
  %23 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %22, align 8, !tbaa !312
  %24 = icmp eq i32 (i8*, i8*, i32)* %23, null
  br i1 %24, label %35, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  %27 = load i32, i32* %26, align 8, !tbaa !315
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %35

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %31 = load i8*, i8** %30, align 8, !tbaa !306
  %32 = tail call i32 %23(i8* %31, i8* %15, i32 %21) #18
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %29
  store i32 %32, i32* %26, align 8, !tbaa !315
  br label %35

35:                                               ; preds = %34, %29, %25, %18
  %36 = shl i64 %20, 32
  %37 = ashr exact i64 %36, 32
  %38 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %39 = load i64, i64* %38, align 8, !tbaa !319
  %40 = add nsw i64 %39, %37
  store i64 %40, i64* %38, align 8, !tbaa !319
  %41 = load i64 (i64, i8*, i32)*, i64 (i64, i8*, i32)** %8, align 8, !tbaa !318
  %42 = icmp eq i64 (i64, i8*, i32)* %41, null
  br i1 %42, label %43, label %46

43:                                               ; preds = %35
  %44 = bitcast i8** %14 to i64*
  %45 = load i64, i64* %44, align 8, !tbaa !308
  br label %60

46:                                               ; preds = %35
  %47 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 14
  %48 = load i64, i64* %47, align 8, !tbaa !321
  %49 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 15
  %50 = load i8*, i8** %49, align 8, !tbaa !322
  %51 = bitcast i8** %12 to i64*
  %52 = load i64, i64* %51, align 8, !tbaa !310
  %53 = ptrtoint i8* %50 to i64
  %54 = sub i64 %52, %53
  %55 = trunc i64 %54 to i32
  %56 = tail call i64 %41(i64 %48, i8* %50, i32 %55) #18
  store i64 %56, i64* %47, align 8, !tbaa !321
  %57 = bitcast i8** %14 to i64*
  %58 = load i64, i64* %57, align 8, !tbaa !308
  %59 = bitcast i8** %49 to i64*
  store i64 %58, i64* %59, align 8, !tbaa !322
  br label %60

60:                                               ; preds = %46, %43, %11
  %61 = phi i64 [ %45, %43 ], [ %58, %46 ], [ %17, %11 ]
  %62 = bitcast i8** %12 to i64*
  store i64 %61, i64* %62, align 8, !tbaa !310
  %63 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 10
  store i32 0, i32* %63, align 8, !tbaa !323
  %64 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 7
  %65 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %64, align 8, !tbaa !312
  %66 = icmp eq i32 (i8*, i8*, i32)* %65, null
  br i1 %66, label %77, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  %69 = load i32, i32* %68, align 8, !tbaa !315
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %77

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %73 = load i8*, i8** %72, align 8, !tbaa !306
  %74 = tail call i32 %65(i8* %73, i8* %1, i32 %2) #18
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %71
  store i32 %74, i32* %68, align 8, !tbaa !315
  br label %77

77:                                               ; preds = %76, %71, %67, %60
  %78 = sext i32 %2 to i64
  %79 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %80 = load i64, i64* %79, align 8, !tbaa !319
  %81 = add nsw i64 %80, %78
  store i64 %81, i64* %79, align 8, !tbaa !319
  br label %.loopexit

82:                                               ; preds = %7, %3
  %83 = icmp sgt i32 %2, 0
  br i1 %83, label %84, label %.loopexit

84:                                               ; preds = %82
  %85 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %86 = bitcast i8** %85 to i64*
  %87 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %88 = bitcast i8** %87 to i64*
  %89 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %90 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 7
  %91 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  %92 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %93 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %94 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 16
  %95 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 14
  %96 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 15
  %97 = bitcast i8** %89 to i64*
  %98 = bitcast i8** %96 to i64*
  %99 = load i64, i64* %88, align 8, !tbaa !310
  br label %100

100:                                              ; preds = %155, %84
  %101 = phi i64 [ %99, %84 ], [ %156, %155 ]
  %102 = phi i8* [ %1, %84 ], [ %157, %155 ]
  %103 = phi i32 [ %2, %84 ], [ %158, %155 ]
  %104 = load i64, i64* %86, align 8, !tbaa !320
  %105 = sub i64 %104, %101
  %106 = sext i32 %103 to i64
  %107 = icmp sgt i64 %105, %106
  %108 = select i1 %107, i64 %106, i64 %105
  %109 = trunc i64 %108 to i32
  %110 = inttoptr i64 %101 to i8*
  %111 = shl i64 %108, 32
  %112 = ashr exact i64 %111, 32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %102, i64 %112, i1 false)
  %113 = load i8*, i8** %87, align 8, !tbaa !310
  %114 = getelementptr inbounds i8, i8* %113, i64 %112
  store i8* %114, i8** %87, align 8, !tbaa !310
  %115 = load i8*, i8** %85, align 8, !tbaa !320
  %116 = icmp ult i8* %114, %115
  %117 = ptrtoint i8* %114 to i64
  br i1 %116, label %155, label %118

118:                                              ; preds = %100
  %119 = load i8*, i8** %89, align 8, !tbaa !308
  %120 = icmp ugt i8* %114, %119
  %121 = ptrtoint i8* %119 to i64
  br i1 %120, label %122, label %153

122:                                              ; preds = %118
  %123 = sub i64 %117, %121
  %124 = trunc i64 %123 to i32
  %125 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %90, align 8, !tbaa !312
  %126 = icmp eq i32 (i8*, i8*, i32)* %125, null
  br i1 %126, label %135, label %127

127:                                              ; preds = %122
  %128 = load i32, i32* %91, align 8, !tbaa !315
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %135

130:                                              ; preds = %127
  %131 = load i8*, i8** %92, align 8, !tbaa !306
  %132 = tail call i32 %125(i8* %131, i8* %119, i32 %124) #18
  %133 = icmp slt i32 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %130
  store i32 %132, i32* %91, align 8, !tbaa !315
  br label %135

135:                                              ; preds = %134, %130, %127, %122
  %136 = shl i64 %123, 32
  %137 = ashr exact i64 %136, 32
  %138 = load i64, i64* %93, align 8, !tbaa !319
  %139 = add nsw i64 %138, %137
  store i64 %139, i64* %93, align 8, !tbaa !319
  %140 = load i64 (i64, i8*, i32)*, i64 (i64, i8*, i32)** %94, align 8, !tbaa !318
  %141 = icmp eq i64 (i64, i8*, i32)* %140, null
  br i1 %141, label %142, label %144

142:                                              ; preds = %135
  %143 = load i64, i64* %97, align 8, !tbaa !308
  br label %153

144:                                              ; preds = %135
  %145 = load i64, i64* %95, align 8, !tbaa !321
  %146 = load i8*, i8** %96, align 8, !tbaa !322
  %147 = load i64, i64* %88, align 8, !tbaa !310
  %148 = ptrtoint i8* %146 to i64
  %149 = sub i64 %147, %148
  %150 = trunc i64 %149 to i32
  %151 = tail call i64 %140(i64 %145, i8* %146, i32 %150) #18
  store i64 %151, i64* %95, align 8, !tbaa !321
  %152 = load i64, i64* %97, align 8, !tbaa !308
  store i64 %152, i64* %98, align 8, !tbaa !322
  br label %153

153:                                              ; preds = %144, %142, %118
  %154 = phi i64 [ %143, %142 ], [ %152, %144 ], [ %121, %118 ]
  store i64 %154, i64* %88, align 8, !tbaa !310
  br label %155

155:                                              ; preds = %153, %100
  %156 = phi i64 [ %117, %100 ], [ %154, %153 ]
  %157 = getelementptr inbounds i8, i8* %102, i64 %112
  %158 = sub nsw i32 %103, %109
  %159 = icmp sgt i32 %158, 0
  br i1 %159, label %100, label %.loopexit

.loopexit:                                        ; preds = %155, %82, %77
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @avio_seek(%struct.AVIOContext.335*, i64, i32) unnamed_addr #5 {
  %4 = and i32 %2, -131073
  %5 = icmp eq %struct.AVIOContext.335* %0, null
  br i1 %5, label %.loopexit, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %8 = load i64, i64* %7, align 8, !tbaa !319
  %9 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 12
  %10 = load i32, i32* %9, align 8, !tbaa !324
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %20

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !320
  %16 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !308
  %19 = sub i64 %15, %18
  br label %20

20:                                               ; preds = %12, %6
  %21 = phi i64 [ %19, %12 ], [ 0, %6 ]
  %22 = sub nsw i64 %8, %21
  %23 = icmp ugt i32 %4, 1
  br i1 %23, label %.loopexit, label %24

24:                                               ; preds = %20
  %25 = icmp eq i32 %4, 1
  br i1 %25, label %26, label %38

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !310
  %30 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8, !tbaa !308
  %33 = sub i64 %29, %32
  %34 = add nsw i64 %33, %22
  %35 = icmp eq i64 %1, 0
  br i1 %35, label %.loopexit, label %36

36:                                               ; preds = %26
  %37 = add nsw i64 %34, %1
  br label %38

38:                                               ; preds = %36, %24
  %39 = phi i64 [ %37, %36 ], [ %1, %24 ]
  %40 = sub nsw i64 %39, %22
  %41 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 10
  %42 = load i32, i32* %41, align 8, !tbaa !323
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %68

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 22
  %46 = load i32, i32* %45, align 8, !tbaa !311
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 8
  %50 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %49, align 8, !tbaa !314
  %51 = icmp eq i64 (i8*, i64, i32)* %50, null
  %52 = icmp sgt i64 %40, -1
  %53 = and i1 %52, %51
  br i1 %53, label %56, label %68

54:                                               ; preds = %44
  %55 = icmp sgt i64 %40, -1
  br i1 %55, label %56, label %68

56:                                               ; preds = %54, %48
  %57 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %58 = bitcast i8** %57 to i64*
  %59 = load i64, i64* %58, align 8, !tbaa !320
  %60 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %61 = load i8*, i8** %60, align 8, !tbaa !308
  %62 = ptrtoint i8* %61 to i64
  %63 = sub i64 %59, %62
  %64 = icmp sgt i64 %40, %63
  br i1 %64, label %68, label %65

65:                                               ; preds = %56
  %66 = getelementptr inbounds i8, i8* %61, i64 %40
  %67 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  store i8* %66, i8** %67, align 8, !tbaa !310
  br label %192

68:                                               ; preds = %56, %54, %48, %38
  %69 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 20
  %70 = load i32, i32* %69, align 8, !tbaa !316
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %82, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %74 = load i8*, i8** %73, align 8, !tbaa !320
  %75 = getelementptr inbounds i8, i8* %74, i64 4096
  %76 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8, !tbaa !308
  %79 = ptrtoint i8* %75 to i64
  %80 = sub i64 %79, %78
  %81 = icmp sgt i64 %40, %80
  br i1 %81, label %115, label %82

82:                                               ; preds = %72, %68
  %83 = icmp sgt i64 %40, -1
  %84 = and i1 %11, %83
  br i1 %84, label %85, label %115

85:                                               ; preds = %82
  %86 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 22
  %87 = load i32, i32* %86, align 8, !tbaa !311
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %95, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 8
  %91 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %90, align 8, !tbaa !314
  %92 = icmp ne i64 (i8*, i64, i32)* %91, null
  %93 = icmp eq i32 %2, 2
  %94 = or i1 %93, %92
  br i1 %94, label %115, label %97

95:                                               ; preds = %85
  %96 = icmp eq i32 %2, 2
  br i1 %96, label %115, label %97

97:                                               ; preds = %95, %89
  %98 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 11
  %99 = icmp slt i64 %8, %39
  br i1 %99, label %.preheader, label %.loopexit13

.preheader:                                       ; preds = %97, %102
  %100 = load i32, i32* %98, align 4, !tbaa !325
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %.loopexit

102:                                              ; preds = %.preheader
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0)
  %103 = load i64, i64* %7, align 8, !tbaa !319
  %104 = icmp slt i64 %103, %39
  br i1 %104, label %.preheader, label %.loopexit13

.loopexit13:                                      ; preds = %102, %97
  %105 = phi i64 [ %8, %97 ], [ %103, %102 ]
  %106 = load i32, i32* %98, align 4, !tbaa !325
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %.loopexit

108:                                              ; preds = %.loopexit13
  %109 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %110 = load i8*, i8** %109, align 8, !tbaa !320
  %111 = getelementptr inbounds i8, i8* %110, i64 %39
  %112 = sub i64 0, %105
  %113 = getelementptr inbounds i8, i8* %111, i64 %112
  %114 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  store i8* %113, i8** %114, align 8, !tbaa !310
  br label %192

115:                                              ; preds = %95, %89, %82, %72
  br i1 %11, label %168, label %116

116:                                              ; preds = %115
  %117 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %118 = load i8*, i8** %117, align 8, !tbaa !310
  %119 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %120 = load i8*, i8** %119, align 8, !tbaa !308
  %121 = icmp ugt i8* %118, %120
  %122 = ptrtoint i8* %120 to i64
  br i1 %121, label %123, label %165

123:                                              ; preds = %116
  %124 = ptrtoint i8* %118 to i64
  %125 = sub i64 %124, %122
  %126 = trunc i64 %125 to i32
  %127 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 7
  %128 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %127, align 8, !tbaa !312
  %129 = icmp eq i32 (i8*, i8*, i32)* %128, null
  br i1 %129, label %140, label %130

130:                                              ; preds = %123
  %131 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  %132 = load i32, i32* %131, align 8, !tbaa !315
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %140

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %136 = load i8*, i8** %135, align 8, !tbaa !306
  %137 = tail call i32 %128(i8* %136, i8* %120, i32 %126) #18
  %138 = icmp slt i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %134
  store i32 %137, i32* %131, align 8, !tbaa !315
  br label %140

140:                                              ; preds = %139, %134, %130, %123
  %141 = shl i64 %125, 32
  %142 = ashr exact i64 %141, 32
  %143 = load i64, i64* %7, align 8, !tbaa !319
  %144 = add nsw i64 %143, %142
  store i64 %144, i64* %7, align 8, !tbaa !319
  %145 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 16
  %146 = load i64 (i64, i8*, i32)*, i64 (i64, i8*, i32)** %145, align 8, !tbaa !318
  %147 = icmp eq i64 (i64, i8*, i32)* %146, null
  br i1 %147, label %148, label %151

148:                                              ; preds = %140
  %149 = bitcast i8** %119 to i64*
  %150 = load i64, i64* %149, align 8, !tbaa !308
  br label %165

151:                                              ; preds = %140
  %152 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 14
  %153 = load i64, i64* %152, align 8, !tbaa !321
  %154 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 15
  %155 = load i8*, i8** %154, align 8, !tbaa !322
  %156 = bitcast i8** %117 to i64*
  %157 = load i64, i64* %156, align 8, !tbaa !310
  %158 = ptrtoint i8* %155 to i64
  %159 = sub i64 %157, %158
  %160 = trunc i64 %159 to i32
  %161 = tail call i64 %146(i64 %153, i8* %155, i32 %160) #18
  store i64 %161, i64* %152, align 8, !tbaa !321
  %162 = bitcast i8** %119 to i64*
  %163 = load i64, i64* %162, align 8, !tbaa !308
  %164 = bitcast i8** %154 to i64*
  store i64 %163, i64* %164, align 8, !tbaa !322
  br label %165

165:                                              ; preds = %151, %148, %116
  %166 = phi i64 [ %150, %148 ], [ %163, %151 ], [ %122, %116 ]
  %167 = bitcast i8** %117 to i64*
  store i64 %166, i64* %167, align 8, !tbaa !310
  store i32 1, i32* %41, align 8, !tbaa !323
  br label %168

168:                                              ; preds = %165, %115
  %169 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 8
  %170 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %169, align 8, !tbaa !314
  %171 = icmp eq i64 (i8*, i64, i32)* %170, null
  br i1 %171, label %.loopexit, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %174 = load i8*, i8** %173, align 8, !tbaa !306
  %175 = tail call i64 %170(i8* %174, i64 %39, i32 0) #18
  %176 = icmp slt i64 %175, 0
  br i1 %176, label %.loopexit, label %177

177:                                              ; preds = %172
  %178 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 24
  %179 = load i32, i32* %178, align 8, !tbaa !326
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %178, align 8, !tbaa !326
  %181 = load i32, i32* %9, align 8, !tbaa !324
  %182 = icmp eq i32 %181, 0
  %183 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %184 = bitcast i8** %183 to i64*
  %185 = load i64, i64* %184, align 8, !tbaa !308
  br i1 %182, label %186, label %189

186:                                              ; preds = %177
  %187 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %188 = bitcast i8** %187 to i64*
  store i64 %185, i64* %188, align 8, !tbaa !320
  br label %189

189:                                              ; preds = %186, %177
  %190 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %191 = bitcast i8** %190 to i64*
  store i64 %185, i64* %191, align 8, !tbaa !310
  store i64 %39, i64* %7, align 8, !tbaa !319
  br label %192

192:                                              ; preds = %189, %108, %65
  %193 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 11
  store i32 0, i32* %193, align 4, !tbaa !325
  br label %.loopexit

.loopexit:                                        ; preds = %.preheader, %192, %172, %168, %.loopexit13, %26, %20, %3
  %194 = phi i64 [ %39, %192 ], [ -22, %3 ], [ -22, %20 ], [ %34, %26 ], [ -541478725, %.loopexit13 ], [ %175, %172 ], [ -32, %168 ], [ -541478725, %.preheader ]
  ret i64 %194
}

; Function Attrs: nounwind uwtable
define internal fastcc void @fill_buffer(%struct.AVIOContext.335*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 13
  %3 = load i32, i32* %2, align 4, !tbaa !317
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8, !tbaa !308
  %8 = ptrtoint i8* %7 to i64
  %9 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8, !tbaa !309
  %11 = bitcast i8** %6 to i64*
  br label %25

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %14 = load i8*, i8** %13, align 8, !tbaa !320
  %15 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %16 = bitcast i8** %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !308
  %18 = ptrtoint i8* %14 to i64
  %19 = sub i64 %18, %17
  %20 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 2
  %21 = load i32, i32* %20, align 8, !tbaa !309
  %22 = sext i32 %21 to i64
  %23 = icmp slt i64 %19, %22
  %24 = inttoptr i64 %17 to i8*
  br i1 %23, label %30, label %25

25:                                               ; preds = %12, %5
  %26 = phi i64 [ %8, %5 ], [ %17, %12 ]
  %27 = phi i64* [ %11, %5 ], [ %16, %12 ]
  %28 = phi i32 [ %10, %5 ], [ %21, %12 ]
  %29 = phi i8* [ %7, %5 ], [ %24, %12 ]
  br label %30

30:                                               ; preds = %25, %12
  %31 = phi i64 [ %18, %12 ], [ %26, %25 ]
  %32 = phi i64* [ %16, %12 ], [ %27, %25 ]
  %33 = phi i64 [ %17, %12 ], [ %26, %25 ]
  %34 = phi i8* [ %24, %12 ], [ %29, %25 ]
  %35 = phi i32 [ %21, %12 ], [ %28, %25 ]
  %36 = phi i8* [ %14, %12 ], [ %29, %25 ]
  %37 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 2
  %38 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %39 = sub i64 %33, %31
  %40 = trunc i64 %39 to i32
  %41 = add i32 %35, %40
  %42 = select i1 %4, i32 32768, i32 %3
  %43 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 6
  %44 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %43, align 8, !tbaa !313
  %45 = icmp eq i32 (i8*, i8*, i32)* %44, null
  br i1 %45, label %46, label %54

46:                                               ; preds = %30
  %47 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %48 = load i8*, i8** %47, align 8, !tbaa !310
  %49 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %50 = load i8*, i8** %49, align 8, !tbaa !320
  %51 = icmp ult i8* %48, %50
  br i1 %51, label %54, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 11
  store i32 1, i32* %53, align 4, !tbaa !325
  br label %54

54:                                               ; preds = %52, %46, %30
  %55 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 11
  %56 = load i32, i32* %55, align 4, !tbaa !325
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %137

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 16
  %60 = load i64 (i64, i8*, i32)*, i64 (i64, i8*, i32)** %59, align 8, !tbaa !318
  %61 = icmp ne i64 (i64, i8*, i32)* %60, null
  %62 = icmp eq i8* %36, %34
  %63 = and i1 %62, %61
  br i1 %63, label %64, label %84

64:                                               ; preds = %58
  %65 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %66 = load i8*, i8** %65, align 8, !tbaa !320
  %67 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 15
  %68 = load i8*, i8** %67, align 8, !tbaa !322
  %69 = icmp ugt i8* %66, %68
  br i1 %69, label %70, label %80

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 14
  %72 = load i64, i64* %71, align 8, !tbaa !321
  %73 = ptrtoint i8* %66 to i64
  %74 = ptrtoint i8* %68 to i64
  %75 = sub i64 %73, %74
  %76 = trunc i64 %75 to i32
  %77 = tail call i64 %60(i64 %72, i8* %68, i32 %76) #18
  store i64 %77, i64* %71, align 8, !tbaa !321
  %78 = load i64, i64* %32, align 8, !tbaa !308
  %79 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %43, align 8, !tbaa !313
  br label %80

80:                                               ; preds = %70, %64
  %81 = phi i32 (i8*, i8*, i32)* [ %79, %70 ], [ %44, %64 ]
  %82 = phi i64 [ %78, %70 ], [ %33, %64 ]
  %83 = bitcast i8** %67 to i64*
  store i64 %82, i64* %83, align 8, !tbaa !322
  br label %84

84:                                               ; preds = %80, %58
  %85 = phi i32 (i8*, i8*, i32)* [ %44, %58 ], [ %81, %80 ]
  %86 = icmp eq i32 (i8*, i8*, i32)* %85, null
  br i1 %86, label %113, label %87

87:                                               ; preds = %84
  %88 = load i32, i32* %37, align 8, !tbaa !309
  %89 = icmp sgt i32 %88, %42
  br i1 %89, label %90, label %114

90:                                               ; preds = %87
  %91 = sext i32 %42 to i64
  %92 = tail call fastcc noalias i8* @av_malloc(i64 %91) #18
  %93 = icmp eq i8* %92, null
  %94 = load i8*, i8** %38, align 8, !tbaa !308
  br i1 %93, label %95, label %97

95:                                               ; preds = %90
  %96 = load i32, i32* %37, align 8, !tbaa !309
  br label %107

97:                                               ; preds = %90
  tail call fastcc void @av_free(i8* %94) #18
  store i8* %92, i8** %38, align 8, !tbaa !308
  store i32 %42, i32* %37, align 8, !tbaa !309
  %98 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  store i8* %92, i8** %98, align 8, !tbaa !310
  %99 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 12
  %100 = load i32, i32* %99, align 8, !tbaa !324
  %101 = icmp eq i32 %100, 0
  %102 = getelementptr inbounds i8, i8* %92, i64 %91
  %103 = select i1 %101, i8* %92, i8* %102
  %104 = xor i1 %101, true
  %105 = zext i1 %104 to i32
  %106 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  store i8* %103, i8** %106, align 8
  store i32 %105, i32* %99, align 8
  br label %107

107:                                              ; preds = %97, %95
  %108 = phi i32 [ %96, %95 ], [ %42, %97 ]
  %109 = phi i8* [ %94, %95 ], [ %92, %97 ]
  %110 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 15
  store i8* %109, i8** %110, align 8, !tbaa !322
  %111 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %43, align 8, !tbaa !313
  %112 = icmp eq i32 (i8*, i8*, i32)* %111, null
  br i1 %112, label %113, label %114

113:                                              ; preds = %107, %84
  store i32 1, i32* %55, align 4, !tbaa !325
  br label %137

114:                                              ; preds = %107, %87
  %115 = phi i8* [ %109, %107 ], [ %36, %87 ]
  %116 = phi i32 [ %108, %107 ], [ %41, %87 ]
  %117 = phi i32 (i8*, i8*, i32)* [ %111, %107 ], [ %85, %87 ]
  %118 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %119 = load i8*, i8** %118, align 8, !tbaa !306
  %120 = tail call i32 %117(i8* %119, i8* %115, i32 %116) #18
  %121 = icmp slt i32 %120, 1
  br i1 %121, label %122, label %126

122:                                              ; preds = %114
  store i32 1, i32* %55, align 4, !tbaa !325
  %123 = icmp slt i32 %120, 0
  br i1 %123, label %124, label %137

124:                                              ; preds = %122
  %125 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  store i32 %120, i32* %125, align 8, !tbaa !315
  br label %137

126:                                              ; preds = %114
  %127 = sext i32 %120 to i64
  %128 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %129 = load i64, i64* %128, align 8, !tbaa !319
  %130 = add nsw i64 %129, %127
  store i64 %130, i64* %128, align 8, !tbaa !319
  %131 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  store i8* %115, i8** %131, align 8, !tbaa !310
  %132 = getelementptr inbounds i8, i8* %115, i64 %127
  %133 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  store i8* %132, i8** %133, align 8, !tbaa !320
  %134 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 23
  %135 = load i64, i64* %134, align 8, !tbaa !327
  %136 = add nsw i64 %135, %127
  store i64 %136, i64* %134, align 8, !tbaa !327
  br label %137

137:                                              ; preds = %126, %124, %122, %113, %54
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @avio_skip(%struct.AVIOContext.335*, i64) unnamed_addr #5 {
  %3 = tail call fastcc i64 @avio_seek(%struct.AVIOContext.335* %0, i64 %1, i32 1)
  ret i64 %3
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @avio_size(%struct.AVIOContext.335* readonly) unnamed_addr #5 {
  %2 = icmp eq %struct.AVIOContext.335* %0, null
  br i1 %2, label %24, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 8
  %5 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %4, align 8, !tbaa !314
  %6 = icmp eq i64 (i8*, i64, i32)* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %9 = load i8*, i8** %8, align 8, !tbaa !306
  %10 = tail call i64 %5(i8* %9, i64 0, i32 65536) #18
  %11 = icmp slt i64 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %4, align 8, !tbaa !314
  %14 = load i8*, i8** %8, align 8, !tbaa !306
  %15 = tail call i64 %13(i8* %14, i64 -1, i32 2) #18
  %16 = icmp slt i64 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %12
  %18 = add nuw nsw i64 %15, 1
  %19 = load i64 (i8*, i64, i32)*, i64 (i8*, i64, i32)** %4, align 8, !tbaa !314
  %20 = load i8*, i8** %8, align 8, !tbaa !306
  %21 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %22 = load i64, i64* %21, align 8, !tbaa !319
  %23 = tail call i64 %19(i8* %20, i64 %22, i32 0) #18
  br label %24

24:                                               ; preds = %17, %12, %7, %3, %1
  %25 = phi i64 [ -22, %1 ], [ -38, %3 ], [ %15, %12 ], [ %18, %17 ], [ %10, %7 ]
  ret i64 %25
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @url_feof(%struct.AVIOContext.335*) unnamed_addr #5 {
  %2 = icmp eq %struct.AVIOContext.335* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 4, !tbaa !325
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  store i32 0, i32* %4, align 4, !tbaa !325
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0)
  %8 = load i32, i32* %4, align 4, !tbaa !325
  br label %9

9:                                                ; preds = %7, %3, %1
  %10 = phi i32 [ 0, %1 ], [ 0, %3 ], [ %8, %7 ]
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avio_r8(%struct.AVIOContext.335*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8, !tbaa !310
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8, !tbaa !320
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0)
  %8 = load i8*, i8** %2, align 8, !tbaa !310
  %9 = load i8*, i8** %4, align 8, !tbaa !320
  br label %10

10:                                               ; preds = %7, %1
  %11 = phi i8* [ %5, %1 ], [ %9, %7 ]
  %12 = phi i8* [ %3, %1 ], [ %8, %7 ]
  %13 = icmp ult i8* %12, %11
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %15, i8** %2, align 8, !tbaa !310
  %16 = load i8, i8* %12, align 1, !tbaa !33
  %17 = zext i8 %16 to i32
  br label %18

18:                                               ; preds = %14, %10
  %19 = phi i32 [ %17, %14 ], [ 0, %10 ]
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avio_read(%struct.AVIOContext.335*, i8*, i32) unnamed_addr #5 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %91

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %7 = bitcast i8** %6 to i64*
  %8 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %9 = bitcast i8** %8 to i64*
  %10 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 12
  %11 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 22
  %12 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 2
  %13 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 16
  %14 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 6
  %15 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %16 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %17 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 23
  %18 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %9, align 8, !tbaa !310
  %21 = inttoptr i64 %20 to i8*
  br label %22

22:                                               ; preds = %83, %5
  %23 = phi i8* [ %21, %5 ], [ %84, %83 ]
  %24 = phi i64 [ %20, %5 ], [ %85, %83 ]
  %25 = phi i32 [ %2, %5 ], [ %87, %83 ]
  %26 = phi i8* [ %1, %5 ], [ %86, %83 ]
  %27 = load i64, i64* %7, align 8, !tbaa !320
  %28 = sub i64 %27, %24
  %29 = trunc i64 %28 to i32
  %30 = icmp slt i32 %25, %29
  %31 = select i1 %30, i32 %25, i32 %29
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %22
  %34 = load i32, i32* %10, align 8, !tbaa !324
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %76, label %36

36:                                               ; preds = %33, %22
  %37 = load i32, i32* %11, align 8, !tbaa !311
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %36
  %40 = load i32, i32* %12, align 8, !tbaa !309
  %41 = icmp sgt i32 %25, %40
  br i1 %41, label %42, label %69

42:                                               ; preds = %39, %36
  %43 = load i64 (i64, i8*, i32)*, i64 (i64, i8*, i32)** %13, align 8, !tbaa !318
  %44 = icmp eq i64 (i64, i8*, i32)* %43, null
  br i1 %44, label %45, label %69

45:                                               ; preds = %42
  %46 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %14, align 8, !tbaa !313
  %47 = icmp eq i32 (i8*, i8*, i32)* %46, null
  br i1 %47, label %51, label %48

48:                                               ; preds = %45
  %49 = load i8*, i8** %15, align 8, !tbaa !306
  %50 = tail call i32 %46(i8* %49, i8* %26, i32 %25) #18
  br label %51

51:                                               ; preds = %48, %45
  %52 = phi i32 [ %50, %48 ], [ %31, %45 ]
  %53 = icmp slt i32 %52, 1
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 11
  store i32 1, i32* %55, align 4, !tbaa !325
  %56 = icmp slt i32 %52, 0
  br i1 %56, label %57, label %.loopexit

57:                                               ; preds = %54
  %58 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  store i32 %52, i32* %58, align 8, !tbaa !315
  br label %.loopexit

59:                                               ; preds = %51
  %60 = sext i32 %52 to i64
  %61 = load i64, i64* %16, align 8, !tbaa !319
  %62 = add nsw i64 %61, %60
  store i64 %62, i64* %16, align 8, !tbaa !319
  %63 = load i64, i64* %17, align 8, !tbaa !327
  %64 = add nsw i64 %63, %60
  store i64 %64, i64* %17, align 8, !tbaa !327
  %65 = sub nsw i32 %25, %52
  %66 = getelementptr inbounds i8, i8* %26, i64 %60
  %67 = load i64, i64* %19, align 8, !tbaa !308
  store i64 %67, i64* %9, align 8, !tbaa !310
  store i64 %67, i64* %7, align 8, !tbaa !320
  %68 = inttoptr i64 %67 to i8*
  br label %83

69:                                               ; preds = %42, %39
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0)
  %70 = load i64, i64* %7, align 8, !tbaa !320
  %71 = load i64, i64* %9, align 8, !tbaa !310
  %72 = sub i64 %70, %71
  %73 = trunc i64 %72 to i32
  %74 = icmp eq i32 %73, 0
  %75 = inttoptr i64 %71 to i8*
  br i1 %74, label %.loopexit, label %83

76:                                               ; preds = %33
  %77 = sext i32 %31 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %23, i64 %77, i1 false)
  %78 = getelementptr inbounds i8, i8* %26, i64 %77
  %79 = load i8*, i8** %8, align 8, !tbaa !310
  %80 = getelementptr inbounds i8, i8* %79, i64 %77
  store i8* %80, i8** %8, align 8, !tbaa !310
  %81 = sub nsw i32 %25, %31
  %82 = ptrtoint i8* %80 to i64
  br label %83

83:                                               ; preds = %76, %69, %59
  %84 = phi i8* [ %75, %69 ], [ %68, %59 ], [ %80, %76 ]
  %85 = phi i64 [ %71, %69 ], [ %67, %59 ], [ %82, %76 ]
  %86 = phi i8* [ %26, %69 ], [ %66, %59 ], [ %78, %76 ]
  %87 = phi i32 [ %25, %69 ], [ %65, %59 ], [ %81, %76 ]
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %22, label %.loopexit

.loopexit:                                        ; preds = %83, %69, %57, %54
  %89 = phi i32 [ %25, %54 ], [ %25, %57 ], [ %25, %69 ], [ %87, %83 ]
  %90 = icmp eq i32 %89, %2
  br i1 %90, label %91, label %103

91:                                               ; preds = %.loopexit, %3
  %92 = phi i32 [ %89, %.loopexit ], [ %2, %3 ]
  %93 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  %94 = load i32, i32* %93, align 8, !tbaa !315
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %106

96:                                               ; preds = %91
  %97 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 11
  %98 = load i32, i32* %97, align 4, !tbaa !325
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %96
  store i32 0, i32* %97, align 4, !tbaa !325
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %101 = load i32, i32* %97, align 4, !tbaa !325
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %100, %96, %.loopexit
  %104 = phi i32 [ %92, %96 ], [ %92, %100 ], [ %89, %.loopexit ]
  %105 = sub nsw i32 %2, %104
  br label %106

106:                                              ; preds = %103, %100, %91
  %107 = phi i32 [ %105, %103 ], [ %94, %91 ], [ -541478725, %100 ]
  ret i32 %107
}

; Function Attrs: nounwind uwtable
define internal i32 @avio_rl16(%struct.AVIOContext.335*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8, !tbaa !310
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8, !tbaa !320
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %8 = load i8*, i8** %2, align 8, !tbaa !310
  %9 = load i8*, i8** %4, align 8, !tbaa !320
  br label %10

10:                                               ; preds = %7, %1
  %11 = phi i8* [ %5, %1 ], [ %9, %7 ]
  %12 = phi i8* [ %3, %1 ], [ %8, %7 ]
  %13 = icmp ult i8* %12, %11
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %15, i8** %2, align 8, !tbaa !310
  %16 = load i8, i8* %12, align 1, !tbaa !33
  %17 = zext i8 %16 to i32
  br label %18

18:                                               ; preds = %14, %10
  %19 = phi i8* [ %15, %14 ], [ %12, %10 ]
  %20 = phi i32 [ %17, %14 ], [ 0, %10 ]
  %21 = icmp ult i8* %19, %11
  br i1 %21, label %25, label %22

22:                                               ; preds = %18
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %23 = load i8*, i8** %2, align 8, !tbaa !310
  %24 = load i8*, i8** %4, align 8, !tbaa !320
  br label %25

25:                                               ; preds = %22, %18
  %26 = phi i8* [ %11, %18 ], [ %24, %22 ]
  %27 = phi i8* [ %19, %18 ], [ %23, %22 ]
  %28 = icmp ult i8* %27, %26
  br i1 %28, label %29, label %34

29:                                               ; preds = %25
  %30 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %30, i8** %2, align 8, !tbaa !310
  %31 = load i8, i8* %27, align 1, !tbaa !33
  %32 = zext i8 %31 to i32
  %33 = shl nuw nsw i32 %32, 8
  br label %34

34:                                               ; preds = %29, %25
  %35 = phi i32 [ %33, %29 ], [ 0, %25 ]
  %36 = or i32 %35, %20
  ret i32 %36
}

; Function Attrs: nounwind uwtable
define internal i32 @avio_rb16(%struct.AVIOContext.335*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8, !tbaa !310
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8, !tbaa !320
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %8 = load i8*, i8** %2, align 8, !tbaa !310
  %9 = load i8*, i8** %4, align 8, !tbaa !320
  br label %10

10:                                               ; preds = %7, %1
  %11 = phi i8* [ %5, %1 ], [ %9, %7 ]
  %12 = phi i8* [ %3, %1 ], [ %8, %7 ]
  %13 = icmp ult i8* %12, %11
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %15, i8** %2, align 8, !tbaa !310
  %16 = load i8, i8* %12, align 1, !tbaa !33
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  br label %19

19:                                               ; preds = %14, %10
  %20 = phi i8* [ %15, %14 ], [ %12, %10 ]
  %21 = phi i32 [ %18, %14 ], [ 0, %10 ]
  %22 = icmp ult i8* %20, %11
  br i1 %22, label %26, label %23

23:                                               ; preds = %19
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %24 = load i8*, i8** %2, align 8, !tbaa !310
  %25 = load i8*, i8** %4, align 8, !tbaa !320
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i8* [ %11, %19 ], [ %25, %23 ]
  %28 = phi i8* [ %20, %19 ], [ %24, %23 ]
  %29 = icmp ult i8* %28, %27
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %31, i8** %2, align 8, !tbaa !310
  %32 = load i8, i8* %28, align 1, !tbaa !33
  %33 = zext i8 %32 to i32
  br label %34

34:                                               ; preds = %30, %26
  %35 = phi i32 [ %33, %30 ], [ 0, %26 ]
  %36 = or i32 %35, %21
  ret i32 %36
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avio_rb24(%struct.AVIOContext.335*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8, !tbaa !310
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8, !tbaa !320
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %8 = load i8*, i8** %2, align 8, !tbaa !310
  %9 = load i8*, i8** %4, align 8, !tbaa !320
  br label %10

10:                                               ; preds = %7, %1
  %11 = phi i8* [ %5, %1 ], [ %9, %7 ]
  %12 = phi i8* [ %3, %1 ], [ %8, %7 ]
  %13 = icmp ult i8* %12, %11
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %15, i8** %2, align 8, !tbaa !310
  %16 = load i8, i8* %12, align 1, !tbaa !33
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  br label %19

19:                                               ; preds = %14, %10
  %20 = phi i8* [ %15, %14 ], [ %12, %10 ]
  %21 = phi i32 [ %18, %14 ], [ 0, %10 ]
  %22 = icmp ult i8* %20, %11
  br i1 %22, label %26, label %23

23:                                               ; preds = %19
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %24 = load i8*, i8** %2, align 8, !tbaa !310
  %25 = load i8*, i8** %4, align 8, !tbaa !320
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i8* [ %11, %19 ], [ %25, %23 ]
  %28 = phi i8* [ %20, %19 ], [ %24, %23 ]
  %29 = icmp ult i8* %28, %27
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %31, i8** %2, align 8, !tbaa !310
  %32 = load i8, i8* %28, align 1, !tbaa !33
  %33 = zext i8 %32 to i32
  br label %34

34:                                               ; preds = %30, %26
  %35 = phi i8* [ %31, %30 ], [ %28, %26 ]
  %36 = phi i32 [ %33, %30 ], [ 0, %26 ]
  %37 = or i32 %36, %21
  %38 = shl nsw i32 %37, 8
  %39 = icmp ult i8* %35, %27
  br i1 %39, label %43, label %40

40:                                               ; preds = %34
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %41 = load i8*, i8** %2, align 8, !tbaa !310
  %42 = load i8*, i8** %4, align 8, !tbaa !320
  br label %43

43:                                               ; preds = %40, %34
  %44 = phi i8* [ %27, %34 ], [ %42, %40 ]
  %45 = phi i8* [ %35, %34 ], [ %41, %40 ]
  %46 = icmp ult i8* %45, %44
  br i1 %46, label %47, label %51

47:                                               ; preds = %43
  %48 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %48, i8** %2, align 8, !tbaa !310
  %49 = load i8, i8* %45, align 1, !tbaa !33
  %50 = zext i8 %49 to i32
  br label %51

51:                                               ; preds = %47, %43
  %52 = phi i32 [ %50, %47 ], [ 0, %43 ]
  %53 = or i32 %52, %38
  ret i32 %53
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avio_rb32(%struct.AVIOContext.335*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8, !tbaa !310
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8, !tbaa !320
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %8 = load i8*, i8** %2, align 8, !tbaa !310
  %9 = load i8*, i8** %4, align 8, !tbaa !320
  br label %10

10:                                               ; preds = %7, %1
  %11 = phi i8* [ %5, %1 ], [ %9, %7 ]
  %12 = phi i8* [ %3, %1 ], [ %8, %7 ]
  %13 = icmp ult i8* %12, %11
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = getelementptr inbounds i8, i8* %12, i64 1
  store i8* %15, i8** %2, align 8, !tbaa !310
  %16 = load i8, i8* %12, align 1, !tbaa !33
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  br label %19

19:                                               ; preds = %14, %10
  %20 = phi i8* [ %15, %14 ], [ %12, %10 ]
  %21 = phi i32 [ %18, %14 ], [ 0, %10 ]
  %22 = icmp ult i8* %20, %11
  br i1 %22, label %26, label %23

23:                                               ; preds = %19
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %24 = load i8*, i8** %2, align 8, !tbaa !310
  %25 = load i8*, i8** %4, align 8, !tbaa !320
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i8* [ %11, %19 ], [ %25, %23 ]
  %28 = phi i8* [ %20, %19 ], [ %24, %23 ]
  %29 = icmp ult i8* %28, %27
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %31, i8** %2, align 8, !tbaa !310
  %32 = load i8, i8* %28, align 1, !tbaa !33
  %33 = zext i8 %32 to i32
  br label %34

34:                                               ; preds = %30, %26
  %35 = phi i8* [ %31, %30 ], [ %28, %26 ]
  %36 = phi i32 [ %33, %30 ], [ 0, %26 ]
  %37 = or i32 %36, %21
  %38 = shl i32 %37, 16
  %39 = icmp ult i8* %35, %27
  br i1 %39, label %43, label %40

40:                                               ; preds = %34
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %41 = load i8*, i8** %2, align 8, !tbaa !310
  %42 = load i8*, i8** %4, align 8, !tbaa !320
  br label %43

43:                                               ; preds = %40, %34
  %44 = phi i8* [ %27, %34 ], [ %42, %40 ]
  %45 = phi i8* [ %35, %34 ], [ %41, %40 ]
  %46 = icmp ult i8* %45, %44
  br i1 %46, label %47, label %52

47:                                               ; preds = %43
  %48 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %48, i8** %2, align 8, !tbaa !310
  %49 = load i8, i8* %45, align 1, !tbaa !33
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 8
  br label %52

52:                                               ; preds = %47, %43
  %53 = phi i8* [ %48, %47 ], [ %45, %43 ]
  %54 = phi i32 [ %51, %47 ], [ 0, %43 ]
  %55 = icmp ult i8* %53, %44
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %57 = load i8*, i8** %2, align 8, !tbaa !310
  %58 = load i8*, i8** %4, align 8, !tbaa !320
  br label %59

59:                                               ; preds = %56, %52
  %60 = phi i8* [ %44, %52 ], [ %58, %56 ]
  %61 = phi i8* [ %53, %52 ], [ %57, %56 ]
  %62 = icmp ult i8* %61, %60
  br i1 %62, label %63, label %67

63:                                               ; preds = %59
  %64 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %64, i8** %2, align 8, !tbaa !310
  %65 = load i8, i8* %61, align 1, !tbaa !33
  %66 = zext i8 %65 to i32
  br label %67

67:                                               ; preds = %63, %59
  %68 = phi i32 [ %66, %63 ], [ 0, %59 ]
  %69 = or i32 %54, %38
  %70 = or i32 %69, %68
  ret i32 %70
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avio_get_str(%struct.AVIOContext.335*, i32, i8* nocapture, i32) unnamed_addr #5 {
  %5 = icmp slt i32 %3, 1
  br i1 %5, label %.loopexit, label %6

6:                                                ; preds = %4
  %7 = add nsw i32 %3, -1
  %8 = icmp sgt i32 %7, %1
  %9 = select i1 %8, i32 %1, i32 %7
  %10 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %11 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %12 = sext i32 %9 to i64
  br label %13

13:                                               ; preds = %32, %6
  %14 = phi i64 [ %37, %32 ], [ 0, %6 ]
  %15 = icmp slt i64 %14, %12
  br i1 %15, label %16, label %38

16:                                               ; preds = %13
  %17 = load i8*, i8** %10, align 8, !tbaa !310
  %18 = load i8*, i8** %11, align 8, !tbaa !320
  %19 = icmp ult i8* %17, %18
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %21 = load i8*, i8** %10, align 8, !tbaa !310
  %22 = load i8*, i8** %11, align 8, !tbaa !320
  br label %23

23:                                               ; preds = %20, %16
  %24 = phi i8* [ %18, %16 ], [ %22, %20 ]
  %25 = phi i8* [ %17, %16 ], [ %21, %20 ]
  %26 = icmp ult i8* %25, %24
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = trunc i64 %14 to i32
  %29 = and i64 %14, 4294967295
  %30 = getelementptr inbounds i8, i8* %2, i64 %29
  store i8 0, i8* %30, align 1, !tbaa !33
  %31 = add nuw nsw i32 %28, 1
  br label %.loopexit

32:                                               ; preds = %23
  %33 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %33, i8** %10, align 8, !tbaa !310
  %34 = load i8, i8* %25, align 1, !tbaa !33
  %35 = getelementptr inbounds i8, i8* %2, i64 %14
  store i8 %34, i8* %35, align 1, !tbaa !33
  %36 = icmp eq i8 %34, 0
  %37 = add nuw nsw i64 %14, 1
  br i1 %36, label %63, label %13

38:                                               ; preds = %13
  %39 = trunc i64 %14 to i32
  %40 = and i64 %14, 4294967295
  %41 = getelementptr inbounds i8, i8* %2, i64 %40
  store i8 0, i8* %41, align 1, !tbaa !33
  br label %42

42:                                               ; preds = %58, %38
  %43 = phi i32 [ %39, %38 ], [ %62, %58 ]
  %44 = icmp slt i32 %43, %1
  br i1 %44, label %45, label %.loopexit

45:                                               ; preds = %42
  %46 = load i8*, i8** %10, align 8, !tbaa !310
  %47 = load i8*, i8** %11, align 8, !tbaa !320
  %48 = icmp ult i8* %46, %47
  br i1 %48, label %52, label %49

49:                                               ; preds = %45
  tail call fastcc void @fill_buffer(%struct.AVIOContext.335* nonnull %0) #18
  %50 = load i8*, i8** %10, align 8, !tbaa !310
  %51 = load i8*, i8** %11, align 8, !tbaa !320
  br label %52

52:                                               ; preds = %49, %45
  %53 = phi i8* [ %47, %45 ], [ %51, %49 ]
  %54 = phi i8* [ %46, %45 ], [ %50, %49 ]
  %55 = icmp ult i8* %54, %53
  br i1 %55, label %58, label %56

56:                                               ; preds = %52
  %57 = add nuw nsw i32 %43, 1
  br label %.loopexit

58:                                               ; preds = %52
  %59 = getelementptr inbounds i8, i8* %54, i64 1
  store i8* %59, i8** %10, align 8, !tbaa !310
  %60 = load i8, i8* %54, align 1, !tbaa !33
  %61 = icmp eq i8 %60, 0
  %62 = add nuw nsw i32 %43, 1
  br i1 %61, label %.loopexit, label %42

63:                                               ; preds = %32
  %64 = trunc i64 %37 to i32
  br label %.loopexit

.loopexit:                                        ; preds = %58, %42, %63, %56, %27, %4
  %65 = phi i32 [ -22, %4 ], [ %31, %27 ], [ %57, %56 ], [ %64, %63 ], [ %62, %58 ], [ %1, %42 ]
  ret i32 %65
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ffio_fdopen(%struct.AVIOContext.335** nocapture, %struct.URLContext.339*) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.URLContext.339, %struct.URLContext.339* %1, i64 0, i32 5
  %4 = load i32, i32* %3, align 4, !tbaa !328
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, i32 32768, i32 %4
  %7 = sext i32 %6 to i64
  %8 = tail call fastcc noalias i8* @av_malloc(i64 %7) #18
  %9 = icmp eq i8* %8, null
  br i1 %9, label %74, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.URLContext.339, %struct.URLContext.339* %1, i64 0, i32 4
  %12 = load i32, i32* %11, align 8, !tbaa !331
  %13 = tail call fastcc noalias i8* @av_mallocz(i64 184) #18
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  store %struct.AVIOContext.335* null, %struct.AVIOContext.335** %0, align 8, !tbaa !27
  tail call fastcc void @av_free(i8* nonnull %8) #18
  br label %74

16:                                               ; preds = %10
  %17 = and i32 %12, 2
  %18 = getelementptr inbounds i8, i8* %13, i64 8
  %19 = bitcast i8* %18 to i8**
  store i8* %8, i8** %19, align 8, !tbaa !308
  %20 = getelementptr inbounds i8, i8* %13, i64 16
  %21 = bitcast i8* %20 to i32*
  store i32 %6, i32* %21, align 8, !tbaa !309
  %22 = getelementptr inbounds i8, i8* %13, i64 24
  %23 = bitcast i8* %22 to i8**
  store i8* %8, i8** %23, align 8, !tbaa !310
  %24 = getelementptr inbounds i8, i8* %13, i64 40
  %25 = bitcast i8* %24 to %struct.URLContext.339**
  store %struct.URLContext.339* %1, %struct.URLContext.339** %25, align 8, !tbaa !306
  %26 = getelementptr inbounds i8, i8* %13, i64 160
  %27 = bitcast i8* %26 to i32*
  %28 = icmp eq i32 %17, 0
  %29 = getelementptr inbounds i8, i8* %8, i64 %7
  %30 = select i1 %28, i8* %8, i8* %29
  %31 = lshr exact i32 %17, 1
  %32 = getelementptr inbounds i8, i8* %13, i64 32
  %33 = bitcast i8* %32 to i8**
  store i8* %30, i8** %33, align 8
  %34 = getelementptr inbounds i8, i8* %13, i64 88
  %35 = bitcast i8* %34 to i32*
  store i32 %31, i32* %35, align 8
  %36 = getelementptr inbounds i8, i8* %13, i64 56
  %37 = bitcast i8* %36 to i32 (i8*, i8*, i32)**
  store i32 (i8*, i8*, i32)* bitcast (i32 (%struct.URLContext*, i8*, i32)* @ffurl_write to i32 (i8*, i8*, i32)*), i32 (i8*, i8*, i32)** %37, align 8, !tbaa !312
  %38 = getelementptr inbounds i8, i8* %13, i64 48
  %39 = bitcast i8* %38 to i32 (i8*, i8*, i32)**
  store i32 (i8*, i8*, i32)* bitcast (i32 (%struct.URLContext*, i8*, i32)* @ffurl_read to i32 (i8*, i8*, i32)*), i32 (i8*, i8*, i32)** %39, align 8, !tbaa !313
  %40 = getelementptr inbounds i8, i8* %13, i64 64
  %41 = bitcast i8* %40 to i64 (i8*, i64, i32)**
  store i64 (i8*, i64, i32)* bitcast (i64 (%struct.URLContext*, i64, i32)* @ffurl_seek to i64 (i8*, i64, i32)*), i64 (i8*, i64, i32)** %41, align 8, !tbaa !314
  %42 = getelementptr inbounds i8, i8* %13, i64 72
  %43 = getelementptr inbounds i8, i8* %13, i64 120
  %44 = bitcast i8* %43 to i32*
  store i32 0, i32* %44, align 8, !tbaa !315
  %45 = getelementptr inbounds i8, i8* %13, i64 144
  %46 = bitcast i8* %45 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 16, i1 false) #18
  %47 = getelementptr inbounds i8, i8* %13, i64 92
  %48 = bitcast i8* %47 to i32*
  %49 = getelementptr inbounds i8, i8* %13, i64 112
  %50 = bitcast i8* %49 to i64 (i64, i8*, i32)**
  store i64 (i64, i8*, i32)* null, i64 (i64, i8*, i32)** %50, align 8, !tbaa !318
  %51 = getelementptr inbounds i8, i8* %13, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 0, i64 16, i1 false) #18
  %52 = bitcast %struct.AVIOContext.335** %0 to i8**
  store i8* %13, i8** %52, align 8, !tbaa !27
  %53 = load i32, i32* %11, align 8, !tbaa !331
  %54 = and i32 %53, 32768
  store i32 %54, i32* %27, align 8, !tbaa !311
  %55 = getelementptr inbounds %struct.URLContext.339, %struct.URLContext.339* %1, i64 0, i32 6
  %56 = load i32, i32* %55, align 8, !tbaa !332
  %57 = icmp eq i32 %56, 0
  %58 = zext i1 %57 to i32
  store i32 %58, i32* %46, align 8, !tbaa !316
  store i32 %4, i32* %48, align 4, !tbaa !317
  %59 = getelementptr inbounds %struct.URLContext.339, %struct.URLContext.339* %1, i64 0, i32 1
  %60 = load %struct.URLProtocol.337*, %struct.URLProtocol.337** %59, align 8, !tbaa !333
  %61 = icmp eq %struct.URLProtocol.337* %60, null
  br i1 %61, label %72, label %62

62:                                               ; preds = %16
  %63 = getelementptr inbounds %struct.URLProtocol.337, %struct.URLProtocol.337* %60, i64 0, i32 8
  %64 = bitcast i32 (%struct.URLContext.339*, i32)** %63 to i64*
  %65 = load i64, i64* %64, align 8, !tbaa !334
  %66 = bitcast i8* %51 to i64*
  store i64 %65, i64* %66, align 8, !tbaa !336
  %67 = getelementptr inbounds %struct.URLProtocol.337, %struct.URLProtocol.337* %60, i64 0, i32 9
  %68 = bitcast i64 (%struct.URLContext.339*, i32, i64, i32)** %67 to i64*
  %69 = load i64, i64* %68, align 8, !tbaa !337
  %70 = getelementptr inbounds i8, i8* %13, i64 136
  %71 = bitcast i8* %70 to i64*
  store i64 %69, i64* %71, align 8, !tbaa !338
  br label %72

72:                                               ; preds = %62, %16
  %73 = bitcast i8* %13 to %struct.AVClass.334**
  store %struct.AVClass.334* bitcast ({ i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass.334* (%struct.AVClass.334*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }* @ffio_url_class to %struct.AVClass.334*), %struct.AVClass.334** %73, align 8, !tbaa !339
  br label %74

74:                                               ; preds = %72, %15, %2
  %75 = phi i32 [ 0, %72 ], [ -12, %15 ], [ -12, %2 ]
  ret i32 %75
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ffio_rewind_with_probe_data(%struct.AVIOContext.335* nocapture, i8** nocapture, i32) unnamed_addr #5 {
  %4 = load i8*, i8** %1, align 8, !tbaa !27
  %5 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 12
  %6 = load i32, i32* %5, align 8, !tbaa !324
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = bitcast i8** %1 to i8*
  tail call fastcc void @av_freep(i8* %9) #18
  br label %60

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 4
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !320
  %14 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !308
  %17 = sub i64 %13, %16
  %18 = trunc i64 %17 to i32
  %19 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %20 = load i64, i64* %19, align 8, !tbaa !319
  %21 = shl i64 %17, 32
  %22 = ashr exact i64 %21, 32
  %23 = sub nsw i64 %20, %22
  %24 = sext i32 %2 to i64
  %25 = icmp sgt i64 %23, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %10
  %27 = bitcast i8** %1 to i8*
  tail call fastcc void @av_freep(i8* %27) #18
  br label %60

28:                                               ; preds = %10
  %29 = trunc i64 %23 to i32
  %30 = sub i32 %2, %29
  %31 = add nsw i32 %18, %2
  %32 = sub i32 %31, %30
  %33 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 2
  %34 = load i32, i32* %33, align 8, !tbaa !309
  %35 = icmp sgt i32 %34, %32
  %36 = select i1 %35, i32 %34, i32 %32
  %37 = icmp sgt i32 %36, %2
  br i1 %37, label %38, label %42

38:                                               ; preds = %28
  %39 = sext i32 %36 to i64
  %40 = tail call fastcc i8* @av_realloc_f(i8* %4, i64 %39) #18
  store i8* %40, i8** %1, align 8, !tbaa !27
  %41 = icmp eq i8* %40, null
  br i1 %41, label %60, label %42

42:                                               ; preds = %38, %28
  %43 = phi i8* [ %40, %38 ], [ %4, %28 ]
  %44 = icmp sgt i32 %32, %2
  br i1 %44, label %45, label %53

45:                                               ; preds = %42
  %46 = getelementptr inbounds i8, i8* %43, i64 %24
  %47 = load i8*, i8** %14, align 8, !tbaa !308
  %48 = sext i32 %30 to i64
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  %50 = sub nsw i32 %18, %30
  %51 = sext i32 %50 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %49, i64 %51, i1 false)
  %52 = sext i32 %32 to i64
  br label %53

53:                                               ; preds = %45, %42
  %54 = phi i64 [ %52, %45 ], [ %24, %42 ]
  %55 = load i8*, i8** %14, align 8, !tbaa !308
  tail call fastcc void @av_free(i8* %55) #18
  store i8* %43, i8** %14, align 8, !tbaa !308
  %56 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  store i8* %43, i8** %56, align 8, !tbaa !310
  store i32 %36, i32* %33, align 8, !tbaa !309
  store i64 %54, i64* %19, align 8, !tbaa !319
  %57 = getelementptr inbounds i8, i8* %43, i64 %54
  store i8* %57, i8** %11, align 8, !tbaa !320
  %58 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 11
  store i32 0, i32* %58, align 4, !tbaa !325
  %59 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 10
  store i32 0, i32* %59, align 8, !tbaa !323
  br label %60

60:                                               ; preds = %53, %38, %26, %8
  %61 = phi i32 [ -22, %8 ], [ -22, %26 ], [ 0, %53 ], [ -12, %38 ]
  ret i32 %61
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avio_open2(%struct.AVIOContext.335** nocapture, i8* nocapture readonly, i32, %struct.AVIOInterruptCB* readonly, %struct.AVDictionary**) unnamed_addr #5 {
  %6 = alloca %struct.URLContext.339*, align 8
  %7 = bitcast %struct.URLContext.339** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #18
  %8 = bitcast %struct.URLContext.339** %6 to %struct.URLContext**
  %9 = call fastcc i32 @ffurl_open(%struct.URLContext** nonnull %8, i8* %1, i32 %2, %struct.AVIOInterruptCB* %3, %struct.AVDictionary** %4) #18
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %5
  %12 = load %struct.URLContext.339*, %struct.URLContext.339** %6, align 8, !tbaa !27
  %13 = tail call fastcc i32 @ffio_fdopen(%struct.AVIOContext.335** %0, %struct.URLContext.339* %12)
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %11
  %16 = load %struct.URLContext*, %struct.URLContext** %8, align 8, !tbaa !27
  %17 = tail call fastcc i32 @ffurl_close(%struct.URLContext* %16) #18
  br label %18

18:                                               ; preds = %15, %11, %5
  %19 = phi i32 [ %13, %15 ], [ %9, %5 ], [ 0, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #18
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avio_close(%struct.AVIOContext.335*) unnamed_addr #5 {
  %2 = icmp eq %struct.AVIOContext.335* %0, null
  br i1 %2, label %72, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %5 = load i8*, i8** %4, align 8, !tbaa !310
  %6 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8, !tbaa !308
  %8 = icmp ugt i8* %5, %7
  %9 = ptrtoint i8* %7 to i64
  br i1 %8, label %10, label %53

10:                                               ; preds = %3
  %11 = ptrtoint i8* %5 to i64
  %12 = sub i64 %11, %9
  %13 = trunc i64 %12 to i32
  %14 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 7
  %15 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %14, align 8, !tbaa !312
  %16 = icmp eq i32 (i8*, i8*, i32)* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  %19 = load i32, i32* %18, align 8, !tbaa !315
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %23 = load i8*, i8** %22, align 8, !tbaa !306
  %24 = tail call i32 %15(i8* %23, i8* %7, i32 %13) #18
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  store i32 %24, i32* %18, align 8, !tbaa !315
  br label %27

27:                                               ; preds = %26, %21, %17, %10
  %28 = shl i64 %12, 32
  %29 = ashr exact i64 %28, 32
  %30 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %31 = load i64, i64* %30, align 8, !tbaa !319
  %32 = add nsw i64 %31, %29
  store i64 %32, i64* %30, align 8, !tbaa !319
  %33 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 16
  %34 = load i64 (i64, i8*, i32)*, i64 (i64, i8*, i32)** %33, align 8, !tbaa !318
  %35 = icmp eq i64 (i64, i8*, i32)* %34, null
  br i1 %35, label %36, label %39

36:                                               ; preds = %27
  %37 = bitcast i8** %6 to i64*
  %38 = load i64, i64* %37, align 8, !tbaa !308
  br label %53

39:                                               ; preds = %27
  %40 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 14
  %41 = load i64, i64* %40, align 8, !tbaa !321
  %42 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 15
  %43 = load i8*, i8** %42, align 8, !tbaa !322
  %44 = bitcast i8** %4 to i64*
  %45 = load i64, i64* %44, align 8, !tbaa !310
  %46 = ptrtoint i8* %43 to i64
  %47 = sub i64 %45, %46
  %48 = trunc i64 %47 to i32
  %49 = tail call i64 %34(i64 %41, i8* %43, i32 %48) #18
  store i64 %49, i64* %40, align 8, !tbaa !321
  %50 = bitcast i8** %6 to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !308
  %52 = bitcast i8** %42 to i64*
  store i64 %51, i64* %52, align 8, !tbaa !322
  br label %53

53:                                               ; preds = %39, %36, %3
  %54 = phi i64 [ %38, %36 ], [ %51, %39 ], [ %9, %3 ]
  %55 = bitcast i8** %4 to i64*
  store i64 %54, i64* %55, align 8, !tbaa !310
  %56 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 10
  store i32 0, i32* %56, align 8, !tbaa !323
  %57 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %58 = bitcast i8** %57 to %struct.URLContext**
  %59 = load %struct.URLContext*, %struct.URLContext** %58, align 8, !tbaa !306
  %60 = bitcast i8** %6 to i8*
  tail call fastcc void @av_freep(i8* nonnull %60) #18
  %61 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 12
  %62 = load i32, i32* %61, align 8, !tbaa !324
  %63 = icmp eq i32 %62, 0
  %64 = bitcast %struct.AVIOContext.335* %0 to i8*
  br i1 %63, label %65, label %70

65:                                               ; preds = %53
  %66 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 23
  %67 = load i64, i64* %66, align 8, !tbaa !327
  %68 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 24
  %69 = load i32, i32* %68, align 8, !tbaa !326
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %64, i32 48, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1.1531, i64 0, i64 0), i64 %67, i32 %69) #18
  br label %70

70:                                               ; preds = %65, %53
  tail call fastcc void @av_free(i8* nonnull %64) #18
  %71 = tail call fastcc i32 @ffurl_close(%struct.URLContext* %59) #18
  br label %72

72:                                               ; preds = %70, %1
  %73 = phi i32 [ %71, %70 ], [ 0, %1 ]
  ret i32 %73
}

; Function Attrs: nofree nounwind
declare dso_local i32 @vsnprintf(i8* nocapture, i64, i8* nocapture readonly, %struct.__va_list_tag*) local_unnamed_addr #16

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avio_open_dyn_buf(%struct.AVIOContext.335** nocapture) unnamed_addr #5 {
  %2 = tail call fastcc noalias i8* @av_mallocz(i64 1056) #18
  %3 = icmp eq i8* %2, null
  br i1 %3, label %44, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds i8, i8* %2, i64 24
  %6 = bitcast i8* %5 to i32*
  store i32 1024, i32* %6, align 8, !tbaa !340
  %7 = getelementptr inbounds i8, i8* %2, i64 28
  %8 = tail call fastcc noalias i8* @av_mallocz(i64 184) #18
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store %struct.AVIOContext.335* null, %struct.AVIOContext.335** %0, align 8, !tbaa !27
  tail call fastcc void @av_free(i8* nonnull %2) #18
  br label %44

11:                                               ; preds = %4
  %12 = getelementptr inbounds i8, i8* %8, i64 8
  %13 = bitcast i8* %12 to i8**
  store i8* %7, i8** %13, align 8, !tbaa !308
  %14 = getelementptr inbounds i8, i8* %8, i64 16
  %15 = bitcast i8* %14 to i32*
  store i32 1024, i32* %15, align 8, !tbaa !309
  %16 = getelementptr inbounds i8, i8* %8, i64 24
  %17 = bitcast i8* %16 to i8**
  store i8* %7, i8** %17, align 8, !tbaa !310
  %18 = getelementptr inbounds i8, i8* %8, i64 40
  %19 = bitcast i8* %18 to i8**
  store i8* %2, i8** %19, align 8, !tbaa !306
  %20 = getelementptr inbounds i8, i8* %8, i64 160
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 8, !tbaa !311
  %22 = getelementptr inbounds i8, i8* %2, i64 1052
  %23 = getelementptr inbounds i8, i8* %8, i64 32
  %24 = bitcast i8* %23 to i8**
  store i8* %22, i8** %24, align 8
  %25 = getelementptr inbounds i8, i8* %8, i64 88
  %26 = bitcast i8* %25 to i32*
  store i32 1, i32* %26, align 8
  %27 = getelementptr inbounds i8, i8* %8, i64 56
  %28 = bitcast i8* %27 to i32 (i8*, i8*, i32)**
  store i32 (i8*, i8*, i32)* @dyn_buf_write, i32 (i8*, i8*, i32)** %28, align 8, !tbaa !312
  %29 = getelementptr inbounds i8, i8* %8, i64 48
  %30 = bitcast i8* %29 to i32 (i8*, i8*, i32)**
  store i32 (i8*, i8*, i32)* null, i32 (i8*, i8*, i32)** %30, align 8, !tbaa !313
  %31 = getelementptr inbounds i8, i8* %8, i64 64
  %32 = bitcast i8* %31 to i64 (i8*, i64, i32)**
  store i64 (i8*, i64, i32)* @dyn_buf_seek, i64 (i8*, i64, i32)** %32, align 8, !tbaa !314
  %33 = getelementptr inbounds i8, i8* %8, i64 72
  %34 = getelementptr inbounds i8, i8* %8, i64 120
  %35 = bitcast i8* %34 to i32*
  store i32 0, i32* %35, align 8, !tbaa !315
  %36 = getelementptr inbounds i8, i8* %8, i64 144
  %37 = bitcast i8* %36 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 16, i1 false) #18
  store i32 1, i32* %37, align 8, !tbaa !316
  %38 = getelementptr inbounds i8, i8* %8, i64 92
  %39 = bitcast i8* %38 to i32*
  %40 = getelementptr inbounds i8, i8* %8, i64 112
  %41 = bitcast i8* %40 to i64 (i64, i8*, i32)**
  store i64 (i64, i8*, i32)* null, i64 (i64, i8*, i32)** %41, align 8, !tbaa !318
  %42 = getelementptr inbounds i8, i8* %8, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 16, i1 false) #18
  %43 = bitcast %struct.AVIOContext.335** %0 to i8**
  store i8* %8, i8** %43, align 8, !tbaa !27
  store i32 0, i32* %39, align 4, !tbaa !317
  br label %44

44:                                               ; preds = %11, %10, %1
  %45 = phi i32 [ 0, %11 ], [ -12, %10 ], [ -12, %1 ]
  ret i32 %45
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal i64 @dyn_buf_seek(i8* nocapture, i64, i32) #9 {
  switch i32 %2, label %15 [
    i32 1, label %4
    i32 2, label %9
  ]

4:                                                ; preds = %3
  %5 = bitcast i8* %0 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !342
  %7 = sext i32 %6 to i64
  %8 = add nsw i64 %7, %1
  br label %15

9:                                                ; preds = %3
  %10 = getelementptr inbounds i8, i8* %0, i64 4
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4, !tbaa !343
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %13, %1
  br label %15

15:                                               ; preds = %9, %4, %3
  %16 = phi i64 [ %8, %4 ], [ %14, %9 ], [ %1, %3 ]
  %17 = icmp ugt i64 %16, 2147483647
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = trunc i64 %16 to i32
  %20 = bitcast i8* %0 to i32*
  store i32 %19, i32* %20, align 8, !tbaa !342
  br label %21

21:                                               ; preds = %18, %15
  %22 = phi i64 [ 0, %18 ], [ -1, %15 ]
  ret i64 %22
}

; Function Attrs: nounwind uwtable
define internal i32 @dyn_buf_write(i8* nocapture, i8* nocapture readonly, i32) #5 {
  %4 = bitcast i8* %0 to i32*
  %5 = load i32, i32* %4, align 8, !tbaa !342
  %6 = add nsw i32 %5, %2
  %7 = getelementptr inbounds i8, i8* %0, i64 8
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8, !tbaa !344
  %10 = icmp ult i32 %6, %5
  %11 = icmp ugt i32 %6, 1073741823
  %12 = or i1 %10, %11
  br i1 %12, label %49, label %13

13:                                               ; preds = %3
  %14 = icmp ugt i32 %6, %9
  br i1 %14, label %.preheader, label %25

.preheader:                                       ; preds = %13, %17
  %15 = phi i32 [ %20, %17 ], [ %9, %13 ]
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %.preheader
  %18 = lshr i32 %15, 1
  %19 = add nuw i32 %15, 1
  %20 = add i32 %19, %18
  %21 = icmp ugt i32 %6, %20
  br i1 %21, label %.preheader, label %22

22:                                               ; preds = %17, %.preheader
  %23 = phi i32 [ %20, %17 ], [ %6, %.preheader ]
  %24 = icmp ugt i32 %23, %9
  br i1 %24, label %29, label %25

25:                                               ; preds = %22, %13
  %26 = getelementptr inbounds i8, i8* %0, i64 16
  %27 = bitcast i8* %26 to i8**
  %28 = load i8*, i8** %27, align 8, !tbaa !345
  br label %38

29:                                               ; preds = %22
  %30 = getelementptr inbounds i8, i8* %0, i64 16
  %31 = bitcast i8* %30 to i8**
  %32 = load i8*, i8** %31, align 8, !tbaa !345
  %33 = zext i32 %23 to i64
  %34 = tail call fastcc i8* @av_realloc_f(i8* %32, i64 %33) #18
  store i8* %34, i8** %31, align 8, !tbaa !345
  %35 = icmp eq i8* %34, null
  br i1 %35, label %49, label %36

36:                                               ; preds = %29
  store i32 %23, i32* %8, align 8, !tbaa !344
  %37 = load i32, i32* %4, align 8, !tbaa !342
  br label %38

38:                                               ; preds = %36, %25
  %39 = phi i32 [ %5, %25 ], [ %37, %36 ]
  %40 = phi i8* [ %28, %25 ], [ %34, %36 ]
  %41 = sext i32 %39 to i64
  %42 = getelementptr inbounds i8, i8* %40, i64 %41
  %43 = sext i32 %2 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %1, i64 %43, i1 false)
  store i32 %6, i32* %4, align 8, !tbaa !342
  %44 = getelementptr inbounds i8, i8* %0, i64 4
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 4, !tbaa !343
  %47 = icmp sgt i32 %6, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %38
  store i32 %6, i32* %45, align 4, !tbaa !343
  br label %49

49:                                               ; preds = %48, %38, %29, %3
  %50 = phi i32 [ -1, %3 ], [ -12, %29 ], [ %2, %48 ], [ %2, %38 ]
  ret i32 %50
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @avio_close_dyn_buf(%struct.AVIOContext.335*, i8** nocapture) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 5
  %4 = load i8*, i8** %3, align 8, !tbaa !306
  %5 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 13
  %6 = load i32, i32* %5, align 4, !tbaa !317
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  tail call fastcc void @avio_write(%struct.AVIOContext.335* nonnull %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @avio_close_dyn_buf.padbuf, i64 0, i64 0), i32 16)
  br label %9

9:                                                ; preds = %8, %2
  %10 = phi i32 [ 0, %2 ], [ 16, %8 ]
  %11 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8, !tbaa !310
  %13 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 1
  %14 = load i8*, i8** %13, align 8, !tbaa !308
  %15 = icmp ugt i8* %12, %14
  %16 = ptrtoint i8* %14 to i64
  br i1 %15, label %17, label %59

17:                                               ; preds = %9
  %18 = ptrtoint i8* %12 to i64
  %19 = sub i64 %18, %16
  %20 = trunc i64 %19 to i32
  %21 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 7
  %22 = load i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)** %21, align 8, !tbaa !312
  %23 = icmp eq i32 (i8*, i8*, i32)* %22, null
  br i1 %23, label %33, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 17
  %26 = load i32, i32* %25, align 8, !tbaa !315
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %24
  %29 = load i8*, i8** %3, align 8, !tbaa !306
  %30 = tail call i32 %22(i8* %29, i8* %14, i32 %20) #18
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %28
  store i32 %30, i32* %25, align 8, !tbaa !315
  br label %33

33:                                               ; preds = %32, %28, %24, %17
  %34 = shl i64 %19, 32
  %35 = ashr exact i64 %34, 32
  %36 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 9
  %37 = load i64, i64* %36, align 8, !tbaa !319
  %38 = add nsw i64 %37, %35
  store i64 %38, i64* %36, align 8, !tbaa !319
  %39 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 16
  %40 = load i64 (i64, i8*, i32)*, i64 (i64, i8*, i32)** %39, align 8, !tbaa !318
  %41 = icmp eq i64 (i64, i8*, i32)* %40, null
  br i1 %41, label %42, label %45

42:                                               ; preds = %33
  %43 = bitcast i8** %13 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !308
  br label %59

45:                                               ; preds = %33
  %46 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 14
  %47 = load i64, i64* %46, align 8, !tbaa !321
  %48 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 15
  %49 = load i8*, i8** %48, align 8, !tbaa !322
  %50 = bitcast i8** %11 to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !310
  %52 = ptrtoint i8* %49 to i64
  %53 = sub i64 %51, %52
  %54 = trunc i64 %53 to i32
  %55 = tail call i64 %40(i64 %47, i8* %49, i32 %54) #18
  store i64 %55, i64* %46, align 8, !tbaa !321
  %56 = bitcast i8** %13 to i64*
  %57 = load i64, i64* %56, align 8, !tbaa !308
  %58 = bitcast i8** %48 to i64*
  store i64 %57, i64* %58, align 8, !tbaa !322
  br label %59

59:                                               ; preds = %45, %42, %9
  %60 = phi i64 [ %44, %42 ], [ %57, %45 ], [ %16, %9 ]
  %61 = bitcast i8** %11 to i64*
  store i64 %60, i64* %61, align 8, !tbaa !310
  %62 = getelementptr inbounds %struct.AVIOContext.335, %struct.AVIOContext.335* %0, i64 0, i32 10
  store i32 0, i32* %62, align 8, !tbaa !323
  %63 = getelementptr inbounds i8, i8* %4, i64 16
  %64 = bitcast i8* %63 to i64*
  %65 = load i64, i64* %64, align 8, !tbaa !345
  %66 = bitcast i8** %1 to i64*
  store i64 %65, i64* %66, align 8, !tbaa !27
  %67 = getelementptr inbounds i8, i8* %4, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !343
  tail call fastcc void @av_free(i8* %4) #18
  %70 = bitcast %struct.AVIOContext.335* %0 to i8*
  tail call fastcc void @av_free(i8* %70) #18
  %71 = sub nsw i32 %69, %10
  ret i32 %71
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i8* @urlcontext_to_name(i8* nocapture readonly) #15 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to %struct.URLProtocol**
  %4 = load %struct.URLProtocol*, %struct.URLProtocol** %3, align 8, !tbaa !333
  %5 = icmp eq %struct.URLProtocol* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %4, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !346
  br label %9

9:                                                ; preds = %6, %1
  %10 = phi i8* [ %8, %6 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.1536, i64 0, i64 0), %1 ]
  ret i8* %10
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i8* @urlcontext_child_next(i8* nocapture readonly, i8* readnone) #15 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %16

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = bitcast i8* %5 to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !347
  %8 = icmp eq i8* %7, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to %struct.URLProtocol**
  %12 = load %struct.URLProtocol*, %struct.URLProtocol** %11, align 8, !tbaa !333
  %13 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %12, i64 0, i32 14
  %14 = load %struct.AVClass*, %struct.AVClass** %13, align 8, !tbaa !348
  %15 = icmp eq %struct.AVClass* %14, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %9, %4, %2
  br label %17

17:                                               ; preds = %16, %9
  %18 = phi i8* [ null, %16 ], [ %7, %9 ]
  ret i8* %18
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal %struct.AVClass* @urlcontext_child_class_next(%struct.AVClass* readnone) #15 {
  %2 = icmp eq %struct.AVClass* %0, null
  br i1 %2, label %.loopexit.preheader, label %.preheader

.preheader:                                       ; preds = %1, %9
  %3 = phi %struct.URLProtocol* [ %7, %9 ], [ null, %1 ]
  %4 = icmp eq %struct.URLProtocol* %3, null
  %5 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %3, i64 0, i32 7
  %6 = select i1 %4, %struct.URLProtocol** @first_protocol, %struct.URLProtocol** %5
  %7 = load %struct.URLProtocol*, %struct.URLProtocol** %6, align 8, !tbaa !27
  %8 = icmp eq %struct.URLProtocol* %7, null
  br i1 %8, label %.loopexit.preheader, label %9

9:                                                ; preds = %.preheader
  %10 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %7, i64 0, i32 14
  %11 = load %struct.AVClass*, %struct.AVClass** %10, align 8, !tbaa !348
  %12 = icmp eq %struct.AVClass* %11, %0
  br i1 %12, label %.loopexit.preheader, label %.preheader

.loopexit.preheader:                              ; preds = %9, %.preheader, %1
  %.ph = phi %struct.URLProtocol* [ null, %1 ], [ %7, %9 ], [ null, %.preheader ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.preheader, %19
  %13 = phi %struct.URLProtocol* [ %17, %19 ], [ %.ph, %.loopexit.preheader ]
  %14 = icmp eq %struct.URLProtocol* %13, null
  %15 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %13, i64 0, i32 7
  %16 = select i1 %14, %struct.URLProtocol** @first_protocol, %struct.URLProtocol** %15
  %17 = load %struct.URLProtocol*, %struct.URLProtocol** %16, align 8, !tbaa !27
  %18 = icmp eq %struct.URLProtocol* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %.loopexit
  %20 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %17, i64 0, i32 14
  %21 = load %struct.AVClass*, %struct.AVClass** %20, align 8, !tbaa !348
  %22 = icmp eq %struct.AVClass* %21, null
  br i1 %22, label %.loopexit, label %23

23:                                               ; preds = %19, %.loopexit
  %24 = phi %struct.AVClass* [ %21, %19 ], [ null, %.loopexit ]
  ret %struct.AVClass* %24
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @ffurl_register_protocol() unnamed_addr #9 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi %struct.URLProtocol** [ @first_protocol, %0 ], [ %5, %1 ]
  %3 = load %struct.URLProtocol*, %struct.URLProtocol** %2, align 8, !tbaa !27
  %4 = icmp eq %struct.URLProtocol* %3, null
  %5 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %3, i64 0, i32 7
  br i1 %4, label %6, label %1

6:                                                ; preds = %1
  store %struct.URLProtocol* bitcast ({ i8*, i32 (%struct.URLContext.358*, i8*, i32)*, i32 (%struct.URLContext.358*, i8*, i32, %struct.AVDictionary**)*, i32 (%struct.URLContext.358*, i8*, i32)*, i32 (%struct.URLContext.358*, i8*, i32)*, i64 (%struct.URLContext.358*, i64, i32)*, i32 (%struct.URLContext.358*)*, %struct.URLProtocol.356*, i32 (%struct.URLContext.358*, i32)*, i64 (%struct.URLContext.358*, i32, i64, i32)*, i32 (%struct.URLContext.358*)*, i32 (%struct.URLContext.358*, i32**, i32*)*, i32 (%struct.URLContext.358*, i32)*, i32, %struct.AVClass*, i32, i32 (%struct.URLContext.358*, i32)* }* @ff_file_protocol to %struct.URLProtocol*), %struct.URLProtocol** %2, align 8, !tbaa !27
  store %struct.URLProtocol* null, %struct.URLProtocol** bitcast (%struct.URLProtocol.356** getelementptr inbounds ({ i8*, i32 (%struct.URLContext.358*, i8*, i32)*, i32 (%struct.URLContext.358*, i8*, i32, %struct.AVDictionary**)*, i32 (%struct.URLContext.358*, i8*, i32)*, i32 (%struct.URLContext.358*, i8*, i32)*, i64 (%struct.URLContext.358*, i64, i32)*, i32 (%struct.URLContext.358*)*, %struct.URLProtocol.356*, i32 (%struct.URLContext.358*, i32)*, i64 (%struct.URLContext.358*, i32, i64, i32)*, i32 (%struct.URLContext.358*)*, i32 (%struct.URLContext.358*, i32**, i32*)*, i32 (%struct.URLContext.358*, i32)*, i32, %struct.AVClass*, i32, i32 (%struct.URLContext.358*, i32)* }, { i8*, i32 (%struct.URLContext.358*, i8*, i32)*, i32 (%struct.URLContext.358*, i8*, i32, %struct.AVDictionary**)*, i32 (%struct.URLContext.358*, i8*, i32)*, i32 (%struct.URLContext.358*, i8*, i32)*, i64 (%struct.URLContext.358*, i64, i32)*, i32 (%struct.URLContext.358*)*, %struct.URLProtocol.356*, i32 (%struct.URLContext.358*, i32)*, i64 (%struct.URLContext.358*, i32, i64, i32)*, i32 (%struct.URLContext.358*)*, i32 (%struct.URLContext.358*, i32**, i32*)*, i32 (%struct.URLContext.358*, i32)*, i32, %struct.AVClass*, i32, i32 (%struct.URLContext.358*, i32)* }* @ff_file_protocol, i64 0, i32 7) to %struct.URLProtocol**), align 8, !tbaa !349
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @ffurl_seek(%struct.URLContext*, i64, i32) #5 {
  %4 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 1
  %5 = load %struct.URLProtocol*, %struct.URLProtocol** %4, align 8, !tbaa !333
  %6 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %5, i64 0, i32 5
  %7 = load i64 (%struct.URLContext*, i64, i32)*, i64 (%struct.URLContext*, i64, i32)** %6, align 8, !tbaa !350
  %8 = icmp eq i64 (%struct.URLContext*, i64, i32)* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %3
  %10 = and i32 %2, -131073
  %11 = tail call i64 %7(%struct.URLContext* nonnull %0, i64 %1, i32 %10) #18
  br label %12

12:                                               ; preds = %9, %3
  %13 = phi i64 [ %11, %9 ], [ -38, %3 ]
  ret i64 %13
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ffurl_alloc(%struct.URLContext** nocapture, i8* nocapture readonly, i32, %struct.AVIOInterruptCB* readonly) unnamed_addr #5 {
  %5 = alloca [128 x i8], align 16
  %6 = alloca [128 x i8], align 16
  %7 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %7) #18
  %8 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #18
  %9 = tail call i64 @strspn(i8* %1, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2.1542, i64 0, i64 0)) #28
  %10 = load %struct.URLProtocol*, %struct.URLProtocol** @first_protocol, align 8, !tbaa !27
  %11 = icmp eq %struct.URLProtocol* %10, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %4
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 24, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.3.1543, i64 0, i64 0)) #18
  br label %13

13:                                               ; preds = %12, %4
  %14 = getelementptr inbounds i8, i8* %1, i64 %9
  %15 = load i8, i8* %14, align 1, !tbaa !33
  switch i8 %15, label %20 [
    i8 58, label %16
    i8 44, label %16
  ]

16:                                               ; preds = %13, %13
  %17 = add i64 %9, 1
  %18 = icmp ult i64 %17, 128
  %19 = select i1 %18, i64 %17, i64 128
  call fastcc void @av_strlcpy(i8* nonnull %7, i8* nonnull %1, i64 %19) #18
  br label %21

20:                                               ; preds = %13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %7, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.1539, i64 0, i64 0), i64 5, i1 false)
  br label %21

21:                                               ; preds = %20, %16
  %22 = call i8* @strchr(i8* nonnull %7, i32 44) #28
  %23 = icmp eq i8* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %21
  store i8 0, i8* %22, align 1, !tbaa !33
  br label %25

25:                                               ; preds = %24, %21
  call fastcc void @av_strlcpy(i8* nonnull %8, i8* nonnull %7, i64 128) #18
  %26 = call i8* @strchr(i8* nonnull %8, i32 43) #28
  %27 = icmp eq i8* %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %25
  store i8 0, i8* %26, align 1, !tbaa !33
  br label %29

29:                                               ; preds = %28, %25
  %30 = load %struct.URLProtocol*, %struct.URLProtocol** @first_protocol, align 8, !tbaa !27
  %31 = icmp eq %struct.URLProtocol* %30, null
  br i1 %31, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %29, %49
  %32 = phi %struct.URLProtocol* [ %51, %49 ], [ %30, %29 ]
  %33 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %32, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8, !tbaa !346
  %35 = call i32 @strcmp(i8* nonnull %7, i8* %34) #28
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %.preheader
  %38 = call fastcc i32 @url_alloc_for_protocol(%struct.URLContext** %0, %struct.URLProtocol* nonnull %32, i8* %1, i32 %2, %struct.AVIOInterruptCB* %3)
  br label %53

39:                                               ; preds = %.preheader
  %40 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %32, i64 0, i32 15
  %41 = load i32, i32* %40, align 8, !tbaa !351
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %39
  %45 = call i32 @strcmp(i8* nonnull %8, i8* %34) #28
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %44
  %48 = call fastcc i32 @url_alloc_for_protocol(%struct.URLContext** %0, %struct.URLProtocol* nonnull %32, i8* %1, i32 %2, %struct.AVIOInterruptCB* %3)
  br label %53

49:                                               ; preds = %44, %39
  %50 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %32, i64 0, i32 7
  %51 = load %struct.URLProtocol*, %struct.URLProtocol** %50, align 8, !tbaa !27
  %52 = icmp eq %struct.URLProtocol* %51, null
  br i1 %52, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %49, %29
  store %struct.URLContext* null, %struct.URLContext** %0, align 8, !tbaa !27
  br label %53

53:                                               ; preds = %.loopexit, %47, %37
  %54 = phi i32 [ %48, %47 ], [ %38, %37 ], [ -1330794744, %.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %7) #18
  ret i32 %54
}

; Function Attrs: nofree nounwind readonly
declare dso_local i64 @strspn(i8* nocapture, i8* nocapture) local_unnamed_addr #10

; Function Attrs: nofree nounwind readonly
declare dso_local i8* @strchr(i8*, i32) local_unnamed_addr #10

; Function Attrs: nounwind uwtable
define internal fastcc i32 @url_alloc_for_protocol(%struct.URLContext** nocapture, %struct.URLProtocol*, i8* nocapture readonly, i32, %struct.AVIOInterruptCB* readonly) unnamed_addr #5 {
  %6 = alloca %struct.URLContext*, align 8
  %7 = bitcast %struct.URLContext** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #18
  %8 = tail call i64 @strlen(i8* %2) #28
  %9 = add i64 %8, 73
  %10 = tail call fastcc noalias i8* @av_mallocz(i64 %9) #18
  %11 = bitcast %struct.URLContext** %6 to i8**
  store i8* %10, i8** %11, align 8, !tbaa !27
  %12 = icmp eq i8* %10, null
  br i1 %12, label %97, label %13

13:                                               ; preds = %5
  %14 = bitcast i8* %10 to %struct.AVClass**
  store %struct.AVClass* @ffurl_context_class, %struct.AVClass** %14, align 8, !tbaa !352
  %15 = getelementptr inbounds i8, i8* %10, i64 72
  %16 = getelementptr inbounds i8, i8* %10, i64 24
  %17 = bitcast i8* %16 to i8**
  store i8* %15, i8** %17, align 8, !tbaa !353
  %18 = tail call i8* @strcpy(i8* nonnull %15, i8* %2) #18
  %19 = getelementptr inbounds i8, i8* %10, i64 8
  %20 = bitcast i8* %19 to %struct.URLProtocol**
  store %struct.URLProtocol* %1, %struct.URLProtocol** %20, align 8, !tbaa !333
  %21 = getelementptr inbounds i8, i8* %10, i64 32
  %22 = bitcast i8* %21 to i32*
  store i32 %3, i32* %22, align 8, !tbaa !331
  %23 = getelementptr inbounds i8, i8* %10, i64 40
  %24 = bitcast i8* %23 to i32*
  store i32 0, i32* %24, align 8, !tbaa !332
  %25 = getelementptr inbounds i8, i8* %10, i64 36
  %26 = bitcast i8* %25 to i32*
  store i32 0, i32* %26, align 4, !tbaa !328
  %27 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %1, i64 0, i32 13
  %28 = load i32, i32* %27, align 8, !tbaa !354
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %83, label %30

30:                                               ; preds = %13
  %31 = sext i32 %28 to i64
  %32 = tail call fastcc noalias i8* @av_mallocz(i64 %31) #18
  %33 = getelementptr inbounds i8, i8* %10, i64 16
  %34 = bitcast i8* %33 to i8**
  store i8* %32, i8** %34, align 8, !tbaa !347
  %35 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %1, i64 0, i32 14
  %36 = load %struct.AVClass*, %struct.AVClass** %35, align 8, !tbaa !348
  %37 = icmp eq %struct.AVClass* %36, null
  br i1 %37, label %83, label %38

38:                                               ; preds = %30
  %39 = bitcast i8* %32 to %struct.AVClass**
  %40 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %1, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8, !tbaa !346
  %42 = tail call i64 @strlen(i8* %41) #28
  %43 = load i8*, i8** %17, align 8, !tbaa !353
  %44 = tail call i8* @strchr(i8* %43, i32 44) #28
  store %struct.AVClass* %36, %struct.AVClass** %39, align 8, !tbaa !27
  tail call fastcc void @av_opt_set_defaults(i8* %32) #18
  %45 = load i8*, i8** %40, align 8, !tbaa !346
  %46 = load i8*, i8** %17, align 8, !tbaa !353
  %47 = shl i64 %42, 32
  %48 = ashr exact i64 %47, 32
  %49 = tail call i32 @strncmp(i8* %45, i8* %46, i64 %48) #28
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds i8, i8* %46, i64 %48
  %52 = icmp eq i8* %51, %44
  %53 = and i1 %50, %52
  br i1 %53, label %54, label %83

54:                                               ; preds = %38
  %55 = getelementptr inbounds i8, i8* %44, i64 1
  %56 = load i8, i8* %55, align 1, !tbaa !33
  %57 = getelementptr inbounds i8, i8* %44, i64 2
  %58 = sext i8 %56 to i32
  %59 = load %struct.URLContext*, %struct.URLContext** %6, align 8
  %60 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %59, i64 0, i32 2
  br label %61

61:                                               ; preds = %75, %54
  %62 = phi i8* [ %57, %54 ], [ %76, %75 ]
  %63 = tail call i8* @strchr(i8* nonnull %62, i32 %58) #28
  %64 = icmp ult i8* %62, %63
  br i1 %64, label %65, label %78

65:                                               ; preds = %61
  %66 = getelementptr inbounds i8, i8* %63, i64 1
  %67 = tail call i8* @strchr(i8* nonnull %66, i32 %58) #28
  %68 = icmp eq i8* %67, null
  br i1 %68, label %78, label %69

69:                                               ; preds = %65
  store i8 0, i8* %63, align 1, !tbaa !33
  store i8 0, i8* %67, align 1, !tbaa !33
  %70 = load i8*, i8** %60, align 8, !tbaa !347
  %71 = tail call fastcc i32 @av_opt_set(i8* %70, i8* nonnull %62, i8* nonnull %66) #18
  %72 = icmp eq i32 %71, -1414549496
  br i1 %72, label %73, label %75

73:                                               ; preds = %69
  %74 = bitcast %struct.URLContext* %59 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %74, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5.1544, i64 0, i64 0), i8* nonnull %62) #18
  store i8 %56, i8* %63, align 1, !tbaa !33
  store i8 %56, i8* %67, align 1, !tbaa !33
  br label %.loopexit

75:                                               ; preds = %69
  store i8 %56, i8* %63, align 1, !tbaa !33
  store i8 %56, i8* %67, align 1, !tbaa !33
  %76 = getelementptr inbounds i8, i8* %67, i64 1
  %77 = icmp sgt i32 %71, -1
  br i1 %77, label %61, label %.loopexit

78:                                               ; preds = %65, %61
  %79 = icmp eq i8* %62, %63
  br i1 %79, label %80, label %.loopexit

80:                                               ; preds = %78
  %81 = getelementptr inbounds i8, i8* %62, i64 1
  %82 = tail call i64 @strlen(i8* nonnull %62) #28
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %44, i8* nonnull align 1 %81, i64 %82, i1 false)
  br label %83

.loopexit:                                        ; preds = %75, %78, %73
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %10, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6.1545, i64 0, i64 0), i8* %44) #18
  tail call fastcc void @av_freep(i8* nonnull %33) #18
  call fastcc void @av_freep(i8* nonnull %7) #18
  br label %97

83:                                               ; preds = %80, %38, %30, %13
  %84 = icmp eq %struct.AVIOInterruptCB* %4, null
  br i1 %84, label %85, label %88

85:                                               ; preds = %83
  %86 = bitcast %struct.URLContext** %6 to i64*
  %87 = load i64, i64* %86, align 8, !tbaa !27
  br label %94

88:                                               ; preds = %83
  %89 = load %struct.URLContext*, %struct.URLContext** %6, align 8, !tbaa !27
  %90 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %89, i64 0, i32 8
  %91 = bitcast %struct.AVIOInterruptCB* %90 to i8*
  %92 = bitcast %struct.AVIOInterruptCB* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %91, i8* nonnull align 8 %92, i64 16, i1 false), !tbaa.struct !355
  %93 = ptrtoint %struct.URLContext* %89 to i64
  br label %94

94:                                               ; preds = %88, %85
  %95 = phi i64 [ %87, %85 ], [ %93, %88 ]
  %96 = bitcast %struct.URLContext** %0 to i64*
  store i64 %95, i64* %96, align 8, !tbaa !27
  br label %99

97:                                               ; preds = %.loopexit, %5
  %98 = phi i32 [ -22, %.loopexit ], [ -12, %5 ]
  store %struct.URLContext* null, %struct.URLContext** %0, align 8, !tbaa !27
  br label %99

99:                                               ; preds = %97, %94
  %100 = phi i32 [ %98, %97 ], [ 0, %94 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #18
  ret i32 %100
}

; Function Attrs: nofree nounwind
declare dso_local i8* @strcpy(i8* returned, i8* nocapture readonly) local_unnamed_addr #16

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ffurl_open(%struct.URLContext** nocapture, i8* nocapture readonly, i32, %struct.AVIOInterruptCB* readonly, %struct.AVDictionary**) unnamed_addr #5 {
  %6 = alloca %struct.URLContext*, align 8
  %7 = tail call fastcc i32 @ffurl_alloc(%struct.URLContext** %0, i8* %1, i32 %2, %struct.AVIOInterruptCB* %3)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %107

9:                                                ; preds = %5
  %10 = icmp eq %struct.AVDictionary** %4, null
  br i1 %10, label %23, label %11

11:                                               ; preds = %9
  %12 = load %struct.URLContext*, %struct.URLContext** %0, align 8, !tbaa !27
  %13 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %12, i64 0, i32 1
  %14 = load %struct.URLProtocol*, %struct.URLProtocol** %13, align 8, !tbaa !333
  %15 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %14, i64 0, i32 14
  %16 = load %struct.AVClass*, %struct.AVClass** %15, align 8, !tbaa !348
  %17 = icmp eq %struct.AVClass* %16, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %12, i64 0, i32 2
  %20 = load i8*, i8** %19, align 8, !tbaa !347
  %21 = tail call fastcc i32 @av_opt_set_dict(i8* %20, %struct.AVDictionary** nonnull %4) #18
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %72, label %23

23:                                               ; preds = %18, %11, %9
  %24 = load %struct.URLContext*, %struct.URLContext** %0, align 8, !tbaa !27
  %25 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %24, i64 0, i32 1
  %26 = load %struct.URLProtocol*, %struct.URLProtocol** %25, align 8, !tbaa !333
  %27 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %26, i64 0, i32 2
  %28 = load i32 (%struct.URLContext*, i8*, i32, %struct.AVDictionary**)*, i32 (%struct.URLContext*, i8*, i32, %struct.AVDictionary**)** %27, align 8, !tbaa !356
  %29 = icmp eq i32 (%struct.URLContext*, i8*, i32, %struct.AVDictionary**)* %28, null
  br i1 %29, label %36, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %24, i64 0, i32 3
  %32 = load i8*, i8** %31, align 8, !tbaa !353
  %33 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %24, i64 0, i32 4
  %34 = load i32, i32* %33, align 8, !tbaa !331
  %35 = tail call i32 %28(%struct.URLContext* nonnull %24, i8* %32, i32 %34, %struct.AVDictionary** %4) #18
  br label %44

36:                                               ; preds = %23
  %37 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %26, i64 0, i32 1
  %38 = load i32 (%struct.URLContext*, i8*, i32)*, i32 (%struct.URLContext*, i8*, i32)** %37, align 8, !tbaa !357
  %39 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %24, i64 0, i32 3
  %40 = load i8*, i8** %39, align 8, !tbaa !353
  %41 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %24, i64 0, i32 4
  %42 = load i32, i32* %41, align 8, !tbaa !331
  %43 = tail call i32 %38(%struct.URLContext* nonnull %24, i8* %40, i32 %42) #18
  br label %44

44:                                               ; preds = %36, %30
  %45 = phi i32 [ %35, %30 ], [ %43, %36 ]
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %72

47:                                               ; preds = %44
  %48 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %24, i64 0, i32 7
  store i32 1, i32* %48, align 4, !tbaa !358
  %49 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %24, i64 0, i32 4
  %50 = load i32, i32* %49, align 8, !tbaa !331
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %59

53:                                               ; preds = %47
  %54 = load %struct.URLProtocol*, %struct.URLProtocol** %25, align 8, !tbaa !333
  %55 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %54, i64 0, i32 0
  %56 = load i8*, i8** %55, align 8, !tbaa !346
  %57 = tail call i32 @strcmp(i8* %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.1539, i64 0, i64 0)) #28
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %107

59:                                               ; preds = %53, %47
  %60 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %24, i64 0, i32 6
  %61 = load i32, i32* %60, align 8, !tbaa !332
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %107

63:                                               ; preds = %59
  %64 = load %struct.URLProtocol*, %struct.URLProtocol** %25, align 8, !tbaa !333
  %65 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %64, i64 0, i32 5
  %66 = load i64 (%struct.URLContext*, i64, i32)*, i64 (%struct.URLContext*, i64, i32)** %65, align 8, !tbaa !350
  %67 = icmp eq i64 (%struct.URLContext*, i64, i32)* %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %63
  %69 = tail call i64 %66(%struct.URLContext* nonnull %24, i64 0, i32 0) #18
  %70 = icmp slt i64 %69, 0
  br i1 %70, label %71, label %107

71:                                               ; preds = %68, %63
  store i32 1, i32* %60, align 8, !tbaa !332
  br label %107

72:                                               ; preds = %44, %18
  %73 = phi i32 [ %21, %18 ], [ %45, %44 ]
  %74 = load %struct.URLContext*, %struct.URLContext** %0, align 8, !tbaa !27
  %75 = bitcast %struct.URLContext** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75)
  store %struct.URLContext* %74, %struct.URLContext** %6, align 8, !tbaa !27
  %76 = icmp eq %struct.URLContext* %74, null
  br i1 %76, label %106, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %74, i64 0, i32 7
  %79 = load i32, i32* %78, align 4, !tbaa !358
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %89, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %74, i64 0, i32 1
  %83 = load %struct.URLProtocol*, %struct.URLProtocol** %82, align 8, !tbaa !333
  %84 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %83, i64 0, i32 6
  %85 = load i32 (%struct.URLContext*)*, i32 (%struct.URLContext*)** %84, align 8, !tbaa !359
  %86 = icmp eq i32 (%struct.URLContext*)* %85, null
  br i1 %86, label %89, label %87

87:                                               ; preds = %81
  %88 = tail call i32 %85(%struct.URLContext* nonnull %74) #18
  br label %89

89:                                               ; preds = %87, %81, %77
  %90 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %74, i64 0, i32 1
  %91 = load %struct.URLProtocol*, %struct.URLProtocol** %90, align 8, !tbaa !333
  %92 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %91, i64 0, i32 13
  %93 = load i32, i32* %92, align 8, !tbaa !354
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %91, i64 0, i32 14
  %97 = load %struct.AVClass*, %struct.AVClass** %96, align 8, !tbaa !348
  %98 = icmp eq %struct.AVClass* %97, null
  br i1 %98, label %102, label %99

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %74, i64 0, i32 2
  %101 = load i8*, i8** %100, align 8, !tbaa !347
  tail call fastcc void @av_opt_free(i8* %101) #18
  br label %102

102:                                              ; preds = %99, %95
  %103 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %74, i64 0, i32 2
  %104 = bitcast i8** %103 to i8*
  tail call fastcc void @av_freep(i8* nonnull %104) #18
  br label %105

105:                                              ; preds = %102, %89
  call fastcc void @av_freep(i8* nonnull %75) #18
  br label %106

106:                                              ; preds = %105, %72
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75)
  store %struct.URLContext* null, %struct.URLContext** %0, align 8, !tbaa !27
  br label %107

107:                                              ; preds = %106, %71, %68, %59, %53, %5
  %108 = phi i32 [ %73, %106 ], [ %7, %5 ], [ 0, %53 ], [ 0, %59 ], [ 0, %68 ], [ 0, %71 ]
  ret i32 %108
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ffurl_close(%struct.URLContext*) unnamed_addr #5 {
  %2 = alloca %struct.URLContext*, align 8
  store %struct.URLContext* %0, %struct.URLContext** %2, align 8, !tbaa !27
  %3 = icmp eq %struct.URLContext* %0, null
  br i1 %3, label %35, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 7
  %6 = load i32, i32* %5, align 4, !tbaa !358
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 1
  %10 = load %struct.URLProtocol*, %struct.URLProtocol** %9, align 8, !tbaa !333
  %11 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %10, i64 0, i32 6
  %12 = load i32 (%struct.URLContext*)*, i32 (%struct.URLContext*)** %11, align 8, !tbaa !359
  %13 = icmp eq i32 (%struct.URLContext*)* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %8
  %15 = tail call i32 %12(%struct.URLContext* nonnull %0) #18
  br label %16

16:                                               ; preds = %14, %8, %4
  %17 = phi i32 [ %15, %14 ], [ 0, %8 ], [ 0, %4 ]
  %18 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 1
  %19 = load %struct.URLProtocol*, %struct.URLProtocol** %18, align 8, !tbaa !333
  %20 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %19, i64 0, i32 13
  %21 = load i32, i32* %20, align 8, !tbaa !354
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %33, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %19, i64 0, i32 14
  %25 = load %struct.AVClass*, %struct.AVClass** %24, align 8, !tbaa !348
  %26 = icmp eq %struct.AVClass* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 2
  %29 = load i8*, i8** %28, align 8, !tbaa !347
  tail call fastcc void @av_opt_free(i8* %29) #18
  br label %30

30:                                               ; preds = %27, %23
  %31 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 2
  %32 = bitcast i8** %31 to i8*
  tail call fastcc void @av_freep(i8* nonnull %32) #18
  br label %33

33:                                               ; preds = %30, %16
  %34 = bitcast %struct.URLContext** %2 to i8*
  call fastcc void @av_freep(i8* nonnull %34) #18
  br label %35

35:                                               ; preds = %33, %1
  %36 = phi i32 [ %17, %33 ], [ 0, %1 ]
  ret i32 %36
}

; Function Attrs: nounwind uwtable
define internal i32 @ffurl_read(%struct.URLContext*, i8*, i32) #5 {
  %4 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8, !tbaa !331
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %.loopexit, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 1
  %10 = load %struct.URLProtocol*, %struct.URLProtocol** %9, align 8, !tbaa !333
  %11 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %10, i64 0, i32 3
  %12 = load i32 (%struct.URLContext*, i8*, i32)*, i32 (%struct.URLContext*, i8*, i32)** %11, align 8, !tbaa !360
  %13 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 9
  %14 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 8, i32 0
  %15 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 8, i32 1
  br label %16

16:                                               ; preds = %68, %8
  %17 = phi i32 [ %2, %8 ], [ %72, %68 ]
  %18 = phi i8* [ %1, %8 ], [ %71, %68 ]
  %19 = phi i64 [ 0, %8 ], [ %56, %68 ]
  %20 = phi i32 [ 5, %8 ], [ %58, %68 ]
  %21 = phi i32 [ 0, %8 ], [ %59, %68 ]
  br label %22

22:                                               ; preds = %22, %16
  %23 = tail call i32 %12(%struct.URLContext* %0, i8* %18, i32 %17) #18
  %24 = icmp eq i32 %23, -4
  br i1 %24, label %22, label %25

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 8, !tbaa !331
  %27 = and i32 %26, 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %.loopexit

29:                                               ; preds = %25
  %30 = icmp eq i32 %23, -11
  br i1 %30, label %31, label %47

31:                                               ; preds = %29
  %32 = icmp eq i32 %20, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %31
  %34 = add nsw i32 %20, -1
  br label %55

35:                                               ; preds = %31
  %36 = load i64, i64* %13, align 8, !tbaa !361
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %45, label %38

38:                                               ; preds = %35
  %39 = icmp eq i64 %19, 0
  %40 = tail call fastcc i64 @av_gettime() #18
  br i1 %39, label %45, label %41

41:                                               ; preds = %38
  %42 = load i64, i64* %13, align 8, !tbaa !361
  %43 = add nsw i64 %42, %19
  %44 = icmp sgt i64 %40, %43
  br i1 %44, label %.loopexit, label %45

45:                                               ; preds = %41, %38, %35
  %46 = phi i64 [ %19, %41 ], [ %19, %35 ], [ %40, %38 ]
  tail call fastcc void @av_usleep() #18
  br label %55

47:                                               ; preds = %29
  %48 = icmp slt i32 %23, 1
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = icmp eq i32 %23, 0
  %51 = select i1 %50, i32 %21, i32 %23
  br label %.loopexit

52:                                               ; preds = %47
  %53 = icmp sgt i32 %20, 2
  %54 = select i1 %53, i32 %20, i32 2
  br label %55

55:                                               ; preds = %52, %45, %33
  %56 = phi i64 [ %19, %52 ], [ %46, %45 ], [ %19, %33 ]
  %57 = phi i32 [ %23, %52 ], [ 0, %45 ], [ 0, %33 ]
  %58 = phi i32 [ %54, %52 ], [ 0, %45 ], [ %34, %33 ]
  %59 = add nsw i32 %57, %21
  %60 = icmp slt i32 %59, %2
  br i1 %60, label %61, label %68

61:                                               ; preds = %55
  %62 = load i32 (i8*)*, i32 (i8*)** %14, align 8, !tbaa !362
  %63 = icmp eq i32 (i8*)* %62, null
  br i1 %63, label %68, label %64

64:                                               ; preds = %61
  %65 = load i8*, i8** %15, align 8, !tbaa !363
  %66 = tail call i32 %62(i8* %65) #18
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %.loopexit

68:                                               ; preds = %64, %61, %55
  %69 = icmp slt i32 %59, 1
  %70 = sext i32 %59 to i64
  %71 = getelementptr inbounds i8, i8* %1, i64 %70
  %72 = sub nsw i32 %2, %59
  br i1 %69, label %16, label %.loopexit

.loopexit:                                        ; preds = %68, %64, %41, %25, %49, %3
  %73 = phi i32 [ -5, %3 ], [ %51, %49 ], [ %59, %68 ], [ %23, %25 ], [ -5, %41 ], [ -1414092869, %64 ]
  ret i32 %73
}

; Function Attrs: nounwind uwtable
define internal i32 @ffurl_write(%struct.URLContext*, i8*, i32) #5 {
  %4 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8, !tbaa !331
  %6 = and i32 %5, 2
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %.loopexit, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 5
  %10 = load i32, i32* %9, align 4, !tbaa !328
  %11 = icmp ne i32 %10, 0
  %12 = icmp slt i32 %10, %2
  %13 = and i1 %11, %12
  br i1 %13, label %.loopexit, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 1
  %16 = load %struct.URLProtocol*, %struct.URLProtocol** %15, align 8, !tbaa !333
  %17 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %16, i64 0, i32 4
  %18 = load i32 (%struct.URLContext*, i8*, i32)*, i32 (%struct.URLContext*, i8*, i32)** %17, align 8, !tbaa !364
  %19 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 9
  %20 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 8, i32 0
  %21 = getelementptr inbounds %struct.URLContext, %struct.URLContext* %0, i64 0, i32 8, i32 1
  %22 = icmp sgt i32 %2, 0
  br i1 %22, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %14, %74
  %23 = phi i32 [ %77, %74 ], [ %2, %14 ]
  %24 = phi i8* [ %76, %74 ], [ %1, %14 ]
  %25 = phi i64 [ %62, %74 ], [ 0, %14 ]
  %26 = phi i32 [ %64, %74 ], [ 5, %14 ]
  %27 = phi i32 [ %65, %74 ], [ 0, %14 ]
  br label %28

28:                                               ; preds = %28, %.preheader
  %29 = tail call i32 %18(%struct.URLContext* %0, i8* %24, i32 %23) #18
  %30 = icmp eq i32 %29, -4
  br i1 %30, label %28, label %31

31:                                               ; preds = %28
  %32 = load i32, i32* %4, align 8, !tbaa !331
  %33 = and i32 %32, 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %.loopexit

35:                                               ; preds = %31
  %36 = icmp eq i32 %29, -11
  br i1 %36, label %37, label %53

37:                                               ; preds = %35
  %38 = icmp eq i32 %26, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %37
  %40 = add nsw i32 %26, -1
  br label %61

41:                                               ; preds = %37
  %42 = load i64, i64* %19, align 8, !tbaa !361
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %51, label %44

44:                                               ; preds = %41
  %45 = icmp eq i64 %25, 0
  %46 = tail call fastcc i64 @av_gettime() #18
  br i1 %45, label %51, label %47

47:                                               ; preds = %44
  %48 = load i64, i64* %19, align 8, !tbaa !361
  %49 = add nsw i64 %48, %25
  %50 = icmp sgt i64 %46, %49
  br i1 %50, label %.loopexit, label %51

51:                                               ; preds = %47, %44, %41
  %52 = phi i64 [ %25, %47 ], [ %25, %41 ], [ %46, %44 ]
  tail call fastcc void @av_usleep() #18
  br label %61

53:                                               ; preds = %35
  %54 = icmp slt i32 %29, 1
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = icmp eq i32 %29, 0
  %57 = select i1 %56, i32 %27, i32 %29
  br label %.loopexit

58:                                               ; preds = %53
  %59 = icmp sgt i32 %26, 2
  %60 = select i1 %59, i32 %26, i32 2
  br label %61

61:                                               ; preds = %58, %51, %39
  %62 = phi i64 [ %25, %58 ], [ %52, %51 ], [ %25, %39 ]
  %63 = phi i32 [ %29, %58 ], [ 0, %51 ], [ 0, %39 ]
  %64 = phi i32 [ %60, %58 ], [ 0, %51 ], [ %40, %39 ]
  %65 = add nsw i32 %63, %27
  %66 = icmp slt i32 %65, %2
  br i1 %66, label %67, label %.loopexit

67:                                               ; preds = %61
  %68 = load i32 (i8*)*, i32 (i8*)** %20, align 8, !tbaa !362
  %69 = icmp eq i32 (i8*)* %68, null
  br i1 %69, label %74, label %70

70:                                               ; preds = %67
  %71 = load i8*, i8** %21, align 8, !tbaa !363
  %72 = tail call i32 %68(i8* %71) #18
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %.loopexit

74:                                               ; preds = %70, %67
  %75 = sext i32 %65 to i64
  %76 = getelementptr inbounds i8, i8* %1, i64 %75
  %77 = sub nsw i32 %2, %65
  br label %.preheader

.loopexit:                                        ; preds = %70, %61, %47, %31, %55, %14, %8, %3
  %78 = phi i32 [ -5, %3 ], [ -5, %8 ], [ %57, %55 ], [ 0, %14 ], [ -1414092869, %70 ], [ -5, %47 ], [ %29, %31 ], [ %65, %61 ]
  ret i32 %78
}

; Function Attrs: nounwind uwtable
define internal i32 @file_open(%struct.URLContext.358* nocapture, i8*, i32) #5 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.stat.359, align 8
  store i8* %1, i8** %4, align 8, !tbaa !27
  %6 = getelementptr inbounds %struct.URLContext.358, %struct.URLContext.358* %0, i64 0, i32 2
  %7 = bitcast i8** %6 to %struct.FileContext**
  %8 = load %struct.FileContext*, %struct.FileContext** %7, align 8, !tbaa !347
  %9 = bitcast %struct.stat.359* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %9) #18
  call fastcc void @av_strstart(i8* %1, i8** nonnull %4) #18
  %10 = and i32 %2, 2
  %11 = icmp ne i32 %10, 0
  %12 = xor i1 %11, true
  %13 = and i32 %2, 1
  %14 = icmp eq i32 %13, 0
  %15 = or i1 %14, %12
  br i1 %15, label %21, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.FileContext, %struct.FileContext* %8, i64 0, i32 2
  %18 = load i32, i32* %17, align 4, !tbaa !365
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 66, i32 578
  br label %27

21:                                               ; preds = %3
  br i1 %11, label %22, label %27

22:                                               ; preds = %21
  %23 = getelementptr inbounds %struct.FileContext, %struct.FileContext* %8, i64 0, i32 2
  %24 = load i32, i32* %23, align 4, !tbaa !365
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, i32 65, i32 577
  br label %27

27:                                               ; preds = %22, %21, %16
  %28 = phi i32 [ %20, %16 ], [ %26, %22 ], [ 0, %21 ]
  %29 = load i8*, i8** %4, align 8, !tbaa !27
  %30 = call i32 (i8*, i32, ...) @open64(i8* %29, i32 %28, i32 438) #18
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = tail call i32* @__errno_location() #29
  %34 = load i32, i32* %33, align 4, !tbaa !28
  %35 = sub nsw i32 0, %34
  br label %49

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.FileContext, %struct.FileContext* %8, i64 0, i32 1
  store i32 %30, i32* %37, align 8, !tbaa !367
  %38 = call i32 @__fxstat64(i32 1, i32 %30, %struct.stat.359* nonnull %5) #18
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %46

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.stat.359, %struct.stat.359* %5, i64 0, i32 3
  %42 = load i32, i32* %41, align 8, !tbaa !368
  %43 = and i32 %42, 61440
  %44 = icmp eq i32 %43, 4096
  %45 = zext i1 %44 to i32
  br label %46

46:                                               ; preds = %40, %36
  %47 = phi i32 [ 0, %36 ], [ %45, %40 ]
  %48 = getelementptr inbounds %struct.URLContext.358, %struct.URLContext.358* %0, i64 0, i32 6
  store i32 %47, i32* %48, align 8, !tbaa !332
  br label %49

49:                                               ; preds = %46, %32
  %50 = phi i32 [ %35, %32 ], [ 0, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %9) #18
  ret i32 %50
}

; Function Attrs: nofree nounwind uwtable
define internal i32 @file_read(%struct.URLContext.358* nocapture readonly, i8* nocapture, i32) #20 {
  %4 = getelementptr inbounds %struct.URLContext.358, %struct.URLContext.358* %0, i64 0, i32 2
  %5 = bitcast i8** %4 to %struct.FileContext**
  %6 = load %struct.FileContext*, %struct.FileContext** %5, align 8, !tbaa !347
  %7 = getelementptr inbounds %struct.FileContext, %struct.FileContext* %6, i64 0, i32 1
  %8 = load i32, i32* %7, align 8, !tbaa !367
  %9 = sext i32 %2 to i64
  %10 = tail call i64 @read(i32 %8, i8* %1, i64 %9) #18
  %11 = trunc i64 %10 to i32
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %13, label %17

13:                                               ; preds = %3
  %14 = tail call i32* @__errno_location() #29
  %15 = load i32, i32* %14, align 4, !tbaa !28
  %16 = sub nsw i32 0, %15
  br label %17

17:                                               ; preds = %13, %3
  %18 = phi i32 [ %16, %13 ], [ %11, %3 ]
  ret i32 %18
}

; Function Attrs: nofree nounwind uwtable
define internal i32 @file_write(%struct.URLContext.358* nocapture readonly, i8* nocapture readonly, i32) #20 {
  %4 = getelementptr inbounds %struct.URLContext.358, %struct.URLContext.358* %0, i64 0, i32 2
  %5 = bitcast i8** %4 to %struct.FileContext**
  %6 = load %struct.FileContext*, %struct.FileContext** %5, align 8, !tbaa !347
  %7 = getelementptr inbounds %struct.FileContext, %struct.FileContext* %6, i64 0, i32 1
  %8 = load i32, i32* %7, align 8, !tbaa !367
  %9 = sext i32 %2 to i64
  %10 = tail call i64 @write(i32 %8, i8* %1, i64 %9) #18
  %11 = trunc i64 %10 to i32
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %13, label %17

13:                                               ; preds = %3
  %14 = tail call i32* @__errno_location() #29
  %15 = load i32, i32* %14, align 4, !tbaa !28
  %16 = sub nsw i32 0, %15
  br label %17

17:                                               ; preds = %13, %3
  %18 = phi i32 [ %16, %13 ], [ %11, %3 ]
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal i64 @file_seek(%struct.URLContext.358* nocapture readonly, i64, i32) #5 {
  %4 = alloca %struct.stat.359, align 8
  %5 = getelementptr inbounds %struct.URLContext.358, %struct.URLContext.358* %0, i64 0, i32 2
  %6 = bitcast i8** %5 to %struct.FileContext**
  %7 = load %struct.FileContext*, %struct.FileContext** %6, align 8, !tbaa !347
  %8 = icmp eq i32 %2, 65536
  br i1 %8, label %9, label %30

9:                                                ; preds = %3
  %10 = bitcast %struct.stat.359* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %10) #18
  %11 = getelementptr inbounds %struct.FileContext, %struct.FileContext* %7, i64 0, i32 1
  %12 = load i32, i32* %11, align 8, !tbaa !367
  %13 = call i32 @__fxstat64(i32 1, i32 %12, %struct.stat.359* nonnull %4) #18
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %9
  %16 = tail call i32* @__errno_location() #29
  %17 = load i32, i32* %16, align 4, !tbaa !28
  %18 = sub nsw i32 0, %17
  %19 = sext i32 %18 to i64
  br label %28

20:                                               ; preds = %9
  %21 = getelementptr inbounds %struct.stat.359, %struct.stat.359* %4, i64 0, i32 3
  %22 = load i32, i32* %21, align 8, !tbaa !368
  %23 = and i32 %22, 61440
  %24 = icmp eq i32 %23, 4096
  %25 = getelementptr inbounds %struct.stat.359, %struct.stat.359* %4, i64 0, i32 8
  %26 = load i64, i64* %25, align 8
  %27 = select i1 %24, i64 0, i64 %26
  br label %28

28:                                               ; preds = %20, %15
  %29 = phi i64 [ %19, %15 ], [ %27, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %10) #18
  br label %40

30:                                               ; preds = %3
  %31 = getelementptr inbounds %struct.FileContext, %struct.FileContext* %7, i64 0, i32 1
  %32 = load i32, i32* %31, align 8, !tbaa !367
  %33 = tail call i64 @lseek64(i32 %32, i64 %1, i32 %2) #18
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %30
  %36 = tail call i32* @__errno_location() #29
  %37 = load i32, i32* %36, align 4, !tbaa !28
  %38 = sub nsw i32 0, %37
  %39 = sext i32 %38 to i64
  br label %40

40:                                               ; preds = %35, %30, %28
  %41 = phi i64 [ %29, %28 ], [ %39, %35 ], [ %33, %30 ]
  ret i64 %41
}

; Function Attrs: nounwind uwtable
define internal i32 @file_close(%struct.URLContext.358* nocapture readonly) #5 {
  %2 = getelementptr inbounds %struct.URLContext.358, %struct.URLContext.358* %0, i64 0, i32 2
  %3 = bitcast i8** %2 to %struct.FileContext**
  %4 = load %struct.FileContext*, %struct.FileContext** %3, align 8, !tbaa !347
  %5 = getelementptr inbounds %struct.FileContext, %struct.FileContext* %4, i64 0, i32 1
  %6 = load i32, i32* %5, align 8, !tbaa !367
  %7 = tail call i32 @close(i32 %6) #18
  ret i32 %7
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i32 @file_get_handle(%struct.URLContext.358* nocapture readonly) #15 {
  %2 = getelementptr inbounds %struct.URLContext.358, %struct.URLContext.358* %0, i64 0, i32 2
  %3 = bitcast i8** %2 to %struct.FileContext**
  %4 = load %struct.FileContext*, %struct.FileContext** %3, align 8, !tbaa !347
  %5 = getelementptr inbounds %struct.FileContext, %struct.FileContext* %4, i64 0, i32 1
  %6 = load i32, i32* %5, align 8, !tbaa !367
  ret i32 %6
}

; Function Attrs: nofree nounwind uwtable
define internal i32 @file_check(%struct.URLContext.358* nocapture readonly, i32) #20 {
  %3 = getelementptr inbounds %struct.URLContext.358, %struct.URLContext.358* %0, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8, !tbaa !353
  %5 = tail call i32 @access(i8* %4, i32 0) #18
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %2
  %8 = tail call i32* @__errno_location() #29
  %9 = load i32, i32* %8, align 4, !tbaa !28
  %10 = sub nsw i32 0, %9
  br label %29

11:                                               ; preds = %2
  %12 = and i32 %1, 1
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %11
  %15 = load i8*, i8** %3, align 8, !tbaa !353
  %16 = tail call i32 @access(i8* %15, i32 4) #18
  %17 = lshr i32 %16, 31
  %18 = xor i32 %17, 1
  br label %19

19:                                               ; preds = %14, %11
  %20 = phi i32 [ 0, %11 ], [ %18, %14 ]
  %21 = and i32 %1, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %19
  %24 = load i8*, i8** %3, align 8, !tbaa !353
  %25 = tail call i32 @access(i8* %24, i32 2) #18
  %26 = icmp sgt i32 %25, -1
  %27 = or i32 %20, 2
  %28 = select i1 %26, i32 %27, i32 %20
  ret i32 %28

29:                                               ; preds = %19, %7
  %30 = phi i32 [ %10, %7 ], [ %20, %19 ]
  ret i32 %30
}

; Function Attrs: nofree nounwind
declare dso_local i32 @access(i8* nocapture readonly, i32) local_unnamed_addr #16

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() local_unnamed_addr #19

declare dso_local i32 @close(i32) local_unnamed_addr #13

; Function Attrs: nounwind
declare dso_local i32 @__fxstat64(i32, i32, %struct.stat.359*) local_unnamed_addr #12

; Function Attrs: nounwind
declare dso_local i64 @lseek64(i32, i64, i32) local_unnamed_addr #12

; Function Attrs: nofree
declare dso_local i64 @write(i32, i8* nocapture readonly, i64) local_unnamed_addr #21

; Function Attrs: nofree
declare dso_local i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #21

; Function Attrs: nounwind readonly uwtable
define internal i32 @gif_probe(%struct.AVProbeData* nocapture readonly) #22 {
  %2 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8, !tbaa !370
  %4 = tail call i32 @bcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gif87a_sig.1564, i64 0, i64 0), i64 6)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @bcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gif89a_sig.1565, i64 0, i64 0), i64 6)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %20

9:                                                ; preds = %6, %1
  %10 = getelementptr inbounds i8, i8* %3, i64 6
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 1, !tbaa !33
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds i8, i8* %3, i64 8
  %16 = bitcast i8* %15 to i16*
  %17 = load i16, i16* %16, align 1, !tbaa !33
  %18 = icmp eq i16 %17, 0
  %19 = select i1 %18, i32 0, i32 100
  ret i32 %19

20:                                               ; preds = %9, %6
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @gif_read_header(%struct.AVFormatContext.396* nocapture) #5 {
  %2 = getelementptr inbounds %struct.AVFormatContext.396, %struct.AVFormatContext.396* %0, i64 0, i32 3
  %3 = bitcast i8** %2 to %struct.GIFDemuxContext**
  %4 = load %struct.GIFDemuxContext*, %struct.GIFDemuxContext** %3, align 8, !tbaa !372
  %5 = getelementptr inbounds %struct.AVFormatContext.396, %struct.AVFormatContext.396* %0, i64 0, i32 4
  %6 = bitcast %struct.AVIOContext** %5 to %struct.AVIOContext.335**
  %7 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %6, align 8, !tbaa !374
  %8 = tail call fastcc i64 @avio_skip(%struct.AVIOContext.335* %7, i64 6) #18
  %9 = trunc i64 %8 to i32
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %34, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.GIFDemuxContext, %struct.GIFDemuxContext* %4, i64 0, i32 3
  %13 = load i32, i32* %12, align 8, !tbaa !375
  %14 = getelementptr inbounds %struct.GIFDemuxContext, %struct.GIFDemuxContext* %4, i64 0, i32 1
  store i32 %13, i32* %14, align 8, !tbaa !377
  %15 = tail call i32 @avio_rl16(%struct.AVIOContext.335* %7) #18
  %16 = tail call i32 @avio_rl16(%struct.AVIOContext.335* %7) #18
  %17 = icmp eq i32 %15, 0
  %18 = icmp eq i32 %16, 0
  %19 = or i1 %17, %18
  br i1 %19, label %34, label %20

20:                                               ; preds = %11
  %21 = bitcast %struct.AVFormatContext.396* %0 to %struct.AVFormatContext.328*
  %22 = tail call fastcc %struct.AVStream* @avformat_new_stream(%struct.AVFormatContext.328* nonnull %21, %struct.AVCodec* null) #18
  %23 = icmp eq %struct.AVStream* %22, null
  br i1 %23, label %34, label %24

24:                                               ; preds = %20
  tail call fastcc void @avpriv_set_pts_info(%struct.AVStream* nonnull %22, i32 64, i32 100) #18
  %25 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %22, i64 0, i32 2
  %26 = load %struct.AVCodecContext*, %struct.AVCodecContext** %25, align 8, !tbaa !378
  %27 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %26, i64 0, i32 2
  store i32 0, i32* %27, align 4, !tbaa !136
  %28 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %26, i64 0, i32 5
  store i32 99, i32* %28, align 8, !tbaa !238
  %29 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %26, i64 0, i32 23
  store i32 %15, i32* %29, align 4, !tbaa !70
  %30 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %26, i64 0, i32 24
  store i32 %16, i32* %30, align 8, !tbaa !71
  %31 = tail call fastcc i64 @avio_seek(%struct.AVIOContext.335* %7, i64 0, i32 0) #18
  %32 = icmp eq i64 %31, 0
  %33 = select i1 %32, i32 0, i32 -5
  br label %34

34:                                               ; preds = %24, %20, %11, %1
  %35 = phi i32 [ %9, %1 ], [ -1094995529, %11 ], [ -12, %20 ], [ %33, %24 ]
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal i32 @gif_read_packet(%struct.AVFormatContext.396*, %struct.AVPacket*) #5 {
  %3 = alloca [6 x i8], align 1
  %4 = getelementptr inbounds %struct.AVFormatContext.396, %struct.AVFormatContext.396* %0, i64 0, i32 3
  %5 = bitcast i8** %4 to %struct.GIFDemuxContext**
  %6 = load %struct.GIFDemuxContext*, %struct.GIFDemuxContext** %5, align 8, !tbaa !372
  %7 = getelementptr inbounds %struct.AVFormatContext.396, %struct.AVFormatContext.396* %0, i64 0, i32 4
  %8 = load %struct.AVIOContext*, %struct.AVIOContext** %7, align 8, !tbaa !374
  %9 = bitcast %struct.AVIOContext* %8 to %struct.AVIOContext.335*
  %10 = tail call fastcc i64 @avio_seek(%struct.AVIOContext.335* %9, i64 0, i32 1) #18
  %11 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %11) #18
  %12 = call fastcc i32 @avio_read(%struct.AVIOContext.335* %9, i8* nonnull %11, i32 6) #18
  %13 = icmp eq i32 %12, 6
  br i1 %13, label %14, label %17

14:                                               ; preds = %2
  %15 = call i32 @bcmp(i8* nonnull %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gif87a_sig.1564, i64 0, i64 0), i64 6)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %19

17:                                               ; preds = %2
  %18 = icmp slt i32 %12, 0
  br i1 %18, label %.loopexit26, label %42

19:                                               ; preds = %14
  %20 = call i32 @bcmp(i8* nonnull %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gif89a_sig.1565, i64 0, i64 0), i64 6)
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %42

22:                                               ; preds = %19, %14
  %23 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %9, i64 4) #18
  %24 = trunc i64 %23 to i32
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %.loopexit26, label %26

26:                                               ; preds = %22
  %27 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %9) #18
  %28 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %9, i64 2) #18
  %29 = trunc i64 %28 to i32
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %.loopexit26, label %31

31:                                               ; preds = %26
  %32 = trunc i32 %27 to i8
  %33 = icmp slt i8 %32, 0
  br i1 %33, label %34, label %46

34:                                               ; preds = %31
  %35 = and i32 %27, 7
  %36 = shl i32 2, %35
  %37 = mul nuw nsw i32 %36, 3
  %38 = zext i32 %37 to i64
  %39 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %9, i64 %38) #18
  %40 = trunc i64 %39 to i32
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %.loopexit26, label %46

42:                                               ; preds = %19, %17
  %43 = sub nsw i32 0, %12
  %44 = sext i32 %43 to i64
  %45 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %9, i64 %44, i32 1) #18
  br label %46

46:                                               ; preds = %42, %34, %31
  %47 = phi i1 [ true, %34 ], [ true, %31 ], [ false, %42 ]
  %48 = phi i32 [ %40, %34 ], [ %29, %31 ], [ -541478725, %42 ]
  %49 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %9) #18
  %50 = icmp eq i32 %49, 59
  br i1 %50, label %.loopexit27, label %51

51:                                               ; preds = %46
  %52 = call fastcc i32 @url_feof(%struct.AVIOContext.335* %9) #18
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %.preheader25, label %.loopexit27

.preheader25:                                     ; preds = %51
  %54 = bitcast %struct.AVIOContext** %7 to %struct.AVIOContext.335**
  br label %58

55:                                               ; preds = %.loopexit24
  %56 = call fastcc i32 @url_feof(%struct.AVIOContext.335* %9) #18
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %.loopexit27

58:                                               ; preds = %.preheader25, %55
  %59 = phi i32 [ %100, %55 ], [ %49, %.preheader25 ]
  switch i32 %59, label %154 [
    i32 33, label %60
    i32 44, label %102
  ]

60:                                               ; preds = %58
  %61 = load %struct.GIFDemuxContext*, %struct.GIFDemuxContext** %5, align 8, !tbaa !372
  %62 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %54, align 8, !tbaa !374
  %63 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %62) #18
  %64 = icmp eq i32 %63, 249
  br i1 %64, label %65, label %89

65:                                               ; preds = %60
  %66 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %62) #18
  %67 = icmp slt i32 %66, 4
  br i1 %67, label %68, label %70

68:                                               ; preds = %65
  %69 = bitcast %struct.AVFormatContext.396* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %69, i32 8, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.9.1566, i64 0, i64 0)) #18
  br label %.loopexit26

70:                                               ; preds = %65
  %71 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %62, i64 1) #18
  %72 = trunc i64 %71 to i32
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %.loopexit26.split.loop.exit, label %74

74:                                               ; preds = %70
  %75 = call i32 @avio_rl16(%struct.AVIOContext.335* %62) #18
  %76 = getelementptr inbounds %struct.GIFDemuxContext, %struct.GIFDemuxContext* %61, i64 0, i32 1
  store i32 %75, i32* %76, align 8, !tbaa !377
  %77 = getelementptr inbounds %struct.GIFDemuxContext, %struct.GIFDemuxContext* %61, i64 0, i32 2
  %78 = load i32, i32* %77, align 4, !tbaa !381
  %79 = icmp slt i32 %75, %78
  br i1 %79, label %80, label %83

80:                                               ; preds = %74
  %81 = getelementptr inbounds %struct.GIFDemuxContext, %struct.GIFDemuxContext* %61, i64 0, i32 3
  %82 = load i32, i32* %81, align 8, !tbaa !375
  store i32 %82, i32* %76, align 8, !tbaa !377
  br label %83

83:                                               ; preds = %80, %74
  %84 = add nsw i32 %66, -3
  %85 = sext i32 %84 to i64
  %86 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %62, i64 %85) #18
  %87 = trunc i64 %86 to i32
  %88 = icmp slt i32 %87, 0
  br i1 %88, label %.loopexit26.split.loop.exit32, label %89

89:                                               ; preds = %83, %60
  %90 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %62) #18
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %.loopexit24, label %.preheader22

92:                                               ; preds = %.preheader22
  %93 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %62) #18
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %.loopexit24, label %.preheader22

.preheader22:                                     ; preds = %89, %92
  %95 = phi i32 [ %93, %92 ], [ %90, %89 ]
  %96 = sext i32 %95 to i64
  %97 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %62, i64 %96) #18
  %98 = trunc i64 %97 to i32
  %99 = icmp slt i32 %98, 0
  br i1 %99, label %.loopexit23, label %92

.loopexit24:                                      ; preds = %92, %89
  %100 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %9) #18
  %101 = icmp eq i32 %100, 59
  br i1 %101, label %.loopexit27, label %55

102:                                              ; preds = %58
  %103 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %9, i64 8) #18
  %104 = trunc i64 %103 to i32
  %105 = icmp slt i32 %104, 0
  br i1 %105, label %.loopexit26, label %106

106:                                              ; preds = %102
  %107 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %9) #18
  %108 = trunc i32 %107 to i8
  %109 = icmp slt i8 %108, 0
  br i1 %109, label %110, label %118

110:                                              ; preds = %106
  %111 = and i32 %107, 7
  %112 = shl i32 2, %111
  %113 = mul nuw nsw i32 %112, 3
  %114 = zext i32 %113 to i64
  %115 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %9, i64 %114) #18
  %116 = trunc i64 %115 to i32
  %117 = icmp slt i32 %116, 0
  br i1 %117, label %.loopexit26, label %118

118:                                              ; preds = %110, %106
  %119 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %9) #18
  %120 = icmp slt i32 %119, 1
  br i1 %120, label %121, label %123

121:                                              ; preds = %118
  %122 = bitcast %struct.AVFormatContext.396* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %122, i32 16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7.1567, i64 0, i64 0)) #18
  br label %.loopexit26

123:                                              ; preds = %118
  %124 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %9) #18
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %.loopexit21, label %.preheader

126:                                              ; preds = %.preheader
  %127 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %9) #18
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %.loopexit21, label %.preheader

.preheader:                                       ; preds = %123, %126
  %129 = phi i32 [ %127, %126 ], [ %124, %123 ]
  %130 = sext i32 %129 to i64
  %131 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %9, i64 %130) #18
  %132 = trunc i64 %131 to i32
  %133 = icmp slt i32 %132, 0
  br i1 %133, label %.loopexit, label %126

.loopexit21:                                      ; preds = %126, %123
  %134 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %9, i64 0, i32 1) #18
  %135 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %9, i64 %10, i32 0) #18
  %136 = icmp eq i64 %135, %10
  br i1 %136, label %137, label %.loopexit26

137:                                              ; preds = %.loopexit21
  %138 = sub nsw i64 %134, %10
  %139 = trunc i64 %138 to i32
  %140 = call fastcc i32 @av_get_packet(%struct.AVIOContext* %8, %struct.AVPacket* %1, i32 %139) #18
  %141 = icmp slt i32 %140, 0
  br i1 %141, label %.loopexit26, label %142

142:                                              ; preds = %137
  br i1 %47, label %143, label %147

143:                                              ; preds = %142
  %144 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 5
  %145 = load i32, i32* %144, align 8, !tbaa !22
  %146 = or i32 %145, 1
  store i32 %146, i32* %144, align 8, !tbaa !22
  br label %147

147:                                              ; preds = %143, %142
  %148 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 4
  store i32 0, i32* %148, align 4, !tbaa !23
  %149 = getelementptr inbounds %struct.GIFDemuxContext, %struct.GIFDemuxContext* %6, i64 0, i32 1
  %150 = load i32, i32* %149, align 8, !tbaa !377
  %151 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 8
  store i32 %150, i32* %151, align 4, !tbaa !83
  %152 = getelementptr inbounds %struct.GIFDemuxContext, %struct.GIFDemuxContext* %6, i64 0, i32 3
  %153 = load i32, i32* %152, align 8, !tbaa !375
  store i32 %153, i32* %149, align 8, !tbaa !377
  br label %.loopexit27

154:                                              ; preds = %58
  %155 = bitcast %struct.AVFormatContext.396* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %155, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8.1568, i64 0, i64 0)) #18
  br label %.loopexit26

.loopexit27:                                      ; preds = %.loopexit24, %55, %147, %51, %46
  %156 = phi i1 [ true, %147 ], [ false, %46 ], [ false, %51 ], [ false, %55 ], [ false, %.loopexit24 ]
  %157 = phi i32 [ %140, %147 ], [ %48, %46 ], [ %48, %51 ], [ 0, %55 ], [ 0, %.loopexit24 ]
  %158 = icmp slt i32 %157, 0
  %159 = or i1 %156, %158
  %160 = select i1 %159, i32 %157, i32 -541478725
  br label %.loopexit26

.loopexit:                                        ; preds = %.preheader
  %161 = trunc i64 %131 to i32
  br label %.loopexit26

.loopexit23:                                      ; preds = %.preheader22
  %162 = trunc i64 %97 to i32
  br label %.loopexit26

.loopexit26.split.loop.exit:                      ; preds = %70
  %163 = trunc i64 %71 to i32
  br label %.loopexit26

.loopexit26.split.loop.exit32:                    ; preds = %83
  %164 = trunc i64 %86 to i32
  br label %.loopexit26

.loopexit26:                                      ; preds = %.loopexit26.split.loop.exit, %.loopexit26.split.loop.exit32, %.loopexit23, %.loopexit, %.loopexit27, %154, %137, %.loopexit21, %121, %110, %102, %68, %34, %26, %22, %17
  %165 = phi i32 [ -1094995529, %121 ], [ -1094995529, %154 ], [ %12, %17 ], [ %24, %22 ], [ %29, %26 ], [ %40, %34 ], [ %104, %102 ], [ %116, %110 ], [ -5, %.loopexit21 ], [ %140, %137 ], [ %160, %.loopexit27 ], [ -1094995529, %68 ], [ %161, %.loopexit ], [ %162, %.loopexit23 ], [ %163, %.loopexit26.split.loop.exit ], [ %164, %.loopexit26.split.loop.exit32 ]
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %11) #18
  ret i32 %165
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc i32 @ff_id3v2_match(i8* nocapture readonly) unnamed_addr #15 {
  %2 = load i8, i8* %0, align 1, !tbaa !33
  %3 = icmp eq i8 %2, 73
  br i1 %3, label %4, label %38

4:                                                ; preds = %1
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1, !tbaa !33
  %7 = icmp eq i8 %6, 68
  br i1 %7, label %8, label %38

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  %10 = load i8, i8* %9, align 1, !tbaa !33
  %11 = icmp eq i8 %10, 51
  br i1 %11, label %12, label %38

12:                                               ; preds = %8
  %13 = getelementptr inbounds i8, i8* %0, i64 3
  %14 = load i8, i8* %13, align 1, !tbaa !33
  %15 = icmp eq i8 %14, -1
  br i1 %15, label %38, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds i8, i8* %0, i64 4
  %18 = load i8, i8* %17, align 1, !tbaa !33
  %19 = icmp eq i8 %18, -1
  br i1 %19, label %38, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, i8* %0, i64 6
  %22 = load i8, i8* %21, align 1, !tbaa !33
  %23 = icmp sgt i8 %22, -1
  br i1 %23, label %24, label %38

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %0, i64 7
  %26 = load i8, i8* %25, align 1, !tbaa !33
  %27 = icmp sgt i8 %26, -1
  br i1 %27, label %28, label %38

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %0, i64 8
  %30 = load i8, i8* %29, align 1, !tbaa !33
  %31 = icmp sgt i8 %30, -1
  br i1 %31, label %32, label %38

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %0, i64 9
  %34 = load i8, i8* %33, align 1, !tbaa !33
  %35 = lshr i8 %34, 7
  %36 = xor i8 %35, 1
  %37 = zext i8 %36 to i32
  br label %38

38:                                               ; preds = %32, %28, %24, %20, %16, %12, %8, %4, %1
  %39 = phi i32 [ 0, %28 ], [ 0, %24 ], [ 0, %20 ], [ 0, %16 ], [ 0, %12 ], [ 0, %8 ], [ 0, %4 ], [ 0, %1 ], [ %37, %32 ]
  ret i32 %39
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc i32 @ff_id3v2_tag_len(i8* nocapture readonly) unnamed_addr #15 {
  %2 = getelementptr inbounds i8, i8* %0, i64 6
  %3 = load i8, i8* %2, align 1, !tbaa !33
  %4 = and i8 %3, 127
  %5 = zext i8 %4 to i32
  %6 = shl nuw nsw i32 %5, 21
  %7 = getelementptr inbounds i8, i8* %0, i64 7
  %8 = load i8, i8* %7, align 1, !tbaa !33
  %9 = and i8 %8, 127
  %10 = zext i8 %9 to i32
  %11 = shl nuw nsw i32 %10, 14
  %12 = or i32 %11, %6
  %13 = getelementptr inbounds i8, i8* %0, i64 8
  %14 = load i8, i8* %13, align 1, !tbaa !33
  %15 = and i8 %14, 127
  %16 = zext i8 %15 to i32
  %17 = shl nuw nsw i32 %16, 7
  %18 = or i32 %12, %17
  %19 = getelementptr inbounds i8, i8* %0, i64 9
  %20 = load i8, i8* %19, align 1, !tbaa !33
  %21 = and i8 %20, 127
  %22 = zext i8 %21 to i32
  %23 = or i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %0, i64 5
  %25 = load i8, i8* %24, align 1, !tbaa !33
  %26 = and i8 %25, 16
  %27 = icmp eq i8 %26, 0
  %28 = select i1 %27, i32 10, i32 20
  %29 = add nuw nsw i32 %23, %28
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_id3v2_read(%struct.AVFormatContext*, i8* nocapture readonly, %struct.ID3v2ExtraMeta**) unnamed_addr #5 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca [5 x i8], align 1
  %9 = alloca %struct.AVIOContext, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca [17 x i8], align 16
  %13 = alloca [10 x i8], align 1
  %14 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %14) #18
  %15 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 4
  %16 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 1
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  %18 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 2
  %19 = getelementptr inbounds i8, i8* %1, i64 2
  %20 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 3
  %21 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 4
  %22 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 6
  %23 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 7
  %24 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 8
  %25 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 9
  %26 = getelementptr inbounds [10 x i8], [10 x i8]* %13, i64 0, i64 5
  %27 = getelementptr inbounds [5 x i8], [5 x i8]* %8, i64 0, i64 0
  %28 = bitcast %struct.AVIOContext* %9 to i8*
  %29 = bitcast i8** %10 to i8*
  %30 = bitcast i32* %11 to i8*
  %31 = bitcast %struct.AVFormatContext* %0 to i8*
  %32 = getelementptr inbounds [5 x i8], [5 x i8]* %8, i64 0, i64 3
  %33 = getelementptr inbounds [5 x i8], [5 x i8]* %8, i64 0, i64 4
  %34 = icmp eq %struct.ID3v2ExtraMeta** %2, null
  %35 = bitcast i8** %10 to i64*
  %36 = bitcast i32* %4 to i8*
  %37 = bitcast i8** %5 to i8*
  %38 = bitcast i8** %6 to i8*
  %39 = bitcast i32* %7 to i8*
  %40 = bitcast i8** %6 to i64*
  %41 = bitcast i8** %5 to i64*
  %42 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 28
  %43 = getelementptr inbounds [5 x i8], [5 x i8]* %8, i64 0, i64 1
  %44 = bitcast %struct.AVIOContext** %15 to %struct.AVIOContext.335**
  %45 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %46 = tail call fastcc i64 @avio_seek(%struct.AVIOContext.335* %45, i64 0, i32 1) #18
  %47 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %48 = call fastcc i32 @avio_read(%struct.AVIOContext.335* %47, i8* nonnull %14, i32 10) #18
  %49 = icmp eq i32 %48, 10
  br i1 %49, label %.preheader29, label %.loopexit30

.preheader29:                                     ; preds = %3
  %50 = load i8, i8* %14, align 1, !tbaa !33
  %51 = zext i8 %50 to i32
  %52 = load i8, i8* %1, align 1, !tbaa !33
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %51, %53
  br i1 %54, label %.lr.ph, label %.loopexit30

.lr.ph:                                           ; preds = %.preheader29
  %55 = bitcast %struct.AVIOContext** %15 to %struct.AVIOContext.335**
  %56 = bitcast %struct.AVIOContext** %15 to %struct.AVIOContext.335**
  %57 = bitcast %struct.AVIOContext** %15 to %struct.AVIOContext.335**
  %58 = bitcast %struct.AVIOContext* %9 to %struct.AVIOContext.335*
  %59 = load i8, i8* %16, align 1, !tbaa !33
  %60 = zext i8 %59 to i32
  %61 = load i8, i8* %17, align 1, !tbaa !33
  %62 = sext i8 %61 to i32
  %63 = icmp eq i32 %60, %62
  br i1 %63, label %.lr.ph67, label %.loopexit30

64:                                               ; preds = %404
  %65 = load i8, i8* %14, align 1, !tbaa !33
  %66 = zext i8 %65 to i32
  %67 = load i8, i8* %1, align 1, !tbaa !33
  %68 = sext i8 %67 to i32
  %69 = icmp eq i32 %66, %68
  br i1 %69, label %70, label %.loopexit30

70:                                               ; preds = %64
  %71 = load i8, i8* %16, align 1, !tbaa !33
  %72 = zext i8 %71 to i32
  %73 = load i8, i8* %17, align 1, !tbaa !33
  %74 = sext i8 %73 to i32
  %75 = icmp eq i32 %72, %74
  br i1 %75, label %.lr.ph67, label %.loopexit30

.lr.ph67:                                         ; preds = %.lr.ph, %70
  %76 = phi i64 [ %410, %70 ], [ %46, %.lr.ph ]
  %77 = load i8, i8* %18, align 1, !tbaa !33
  %78 = zext i8 %77 to i32
  %79 = load i8, i8* %19, align 1, !tbaa !33
  %80 = sext i8 %79 to i32
  %81 = icmp ne i32 %78, %80
  %82 = load i8, i8* %20, align 1
  %83 = icmp eq i8 %82, -1
  %84 = or i1 %81, %83
  %85 = load i8, i8* %21, align 1
  %86 = icmp eq i8 %85, -1
  %87 = or i1 %84, %86
  %88 = xor i1 %87, true
  %89 = load i8, i8* %22, align 1
  %90 = load i8, i8* %23, align 1
  %91 = or i8 %90, %89
  %92 = load i8, i8* %24, align 1
  %93 = or i8 %91, %92
  %94 = icmp sgt i8 %93, -1
  %95 = and i1 %94, %88
  br i1 %95, label %96, label %.loopexit30

96:                                               ; preds = %.lr.ph67
  %97 = load i8, i8* %25, align 1, !tbaa !33
  %98 = icmp sgt i8 %97, -1
  br i1 %98, label %99, label %.loopexit30

99:                                               ; preds = %96
  %100 = and i8 %89, 127
  %101 = zext i8 %100 to i32
  %102 = shl nuw nsw i32 %101, 21
  %103 = and i8 %90, 127
  %104 = zext i8 %103 to i32
  %105 = shl nuw nsw i32 %104, 14
  %106 = or i32 %105, %102
  %107 = and i8 %92, 127
  %108 = zext i8 %107 to i32
  %109 = shl nuw nsw i32 %108, 7
  %110 = or i32 %106, %109
  %111 = and i8 %97, 127
  %112 = zext i8 %111 to i32
  %113 = or i32 %110, %112
  %114 = load i8, i8* %26, align 1, !tbaa !33
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %27) #18
  %115 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %116 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %115, i64 0, i32 1) #18
  %117 = zext i32 %113 to i64
  %118 = add nsw i64 %116, %117
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %28) #18
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #18
  store i8* null, i8** %10, align 8, !tbaa !27
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #18
  store i32 0, i32* %11, align 4, !tbaa !28
  %119 = zext i8 %82 to i32
  %120 = zext i8 %114 to i32
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %31, i32 48, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.62.1791, i64 0, i64 0), i32 %119, i32 %120, i32 %113) #18
  switch i8 %82, label %402 [
    i8 2, label %121
    i8 3, label %124
    i8 4, label %124
  ]

121:                                              ; preds = %99
  %122 = and i32 %120, 64
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %154, label %402

124:                                              ; preds = %99, %99
  %125 = and i32 %120, 64
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %154, label %127

127:                                              ; preds = %124
  %128 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %55, align 8, !tbaa !374
  %129 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %128) #18
  %130 = shl i32 %129, 7
  %131 = and i32 %130, 16256
  %132 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %128) #18
  %133 = and i32 %132, 127
  %134 = or i32 %133, %131
  %135 = shl nuw nsw i32 %134, 7
  %136 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %128) #18
  %137 = and i32 %136, 127
  %138 = or i32 %135, %137
  %139 = shl nuw nsw i32 %138, 7
  %140 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %128) #18
  %141 = and i32 %140, 127
  %142 = or i32 %139, %141
  %143 = icmp eq i8 %82, 4
  %144 = add nsw i32 %142, -4
  %145 = select i1 %143, i32 %144, i32 %142
  %146 = icmp slt i32 %145, 0
  br i1 %146, label %402, label %147

147:                                              ; preds = %127
  %148 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %149 = sext i32 %145 to i64
  %150 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %148, i64 %149) #18
  %151 = add nsw i32 %113, -4
  %152 = sub i32 %151, %145
  %153 = icmp slt i32 %152, 0
  br i1 %153, label %402, label %154

154:                                              ; preds = %147, %124, %121
  %155 = phi i1 [ true, %124 ], [ true, %147 ], [ false, %121 ]
  %156 = phi i32 [ 1, %124 ], [ 1, %147 ], [ 0, %121 ]
  %157 = phi i32 [ 10, %124 ], [ 10, %147 ], [ 6, %121 ]
  %158 = phi i32 [ %113, %124 ], [ %152, %147 ], [ %113, %121 ]
  %159 = icmp slt i32 %158, %157
  br i1 %159, label %.loopexit28, label %160

160:                                              ; preds = %154
  %161 = icmp eq i8 %82, 3
  %162 = icmp slt i8 %114, 0
  br label %163

163:                                              ; preds = %393, %160
  %164 = phi i32 [ %158, %160 ], [ %203, %393 ]
  %165 = phi %struct.ID3v2EMFunc* [ null, %160 ], [ %394, %393 ]
  %166 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %56, align 8, !tbaa !374
  br i1 %155, label %167, label %192

167:                                              ; preds = %163
  %168 = call fastcc i32 @avio_read(%struct.AVIOContext.335* %166, i8* nonnull %27, i32 4) #18
  store i8 0, i8* %33, align 1, !tbaa !33
  %169 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %57, align 8, !tbaa !374
  br i1 %161, label %170, label %172

170:                                              ; preds = %167
  %171 = call fastcc i32 @avio_rb32(%struct.AVIOContext.335* %169) #18
  br label %187

172:                                              ; preds = %167
  %173 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %169) #18
  %174 = shl i32 %173, 7
  %175 = and i32 %174, 16256
  %176 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %169) #18
  %177 = and i32 %176, 127
  %178 = or i32 %177, %175
  %179 = shl nuw nsw i32 %178, 7
  %180 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %169) #18
  %181 = and i32 %180, 127
  %182 = or i32 %179, %181
  %183 = shl nuw nsw i32 %182, 7
  %184 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %169) #18
  %185 = and i32 %184, 127
  %186 = or i32 %183, %185
  br label %187

187:                                              ; preds = %172, %170
  %188 = phi i32 [ %171, %170 ], [ %186, %172 ]
  %189 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %190 = call i32 @avio_rb16(%struct.AVIOContext.335* %189) #18
  %191 = and i32 %190, 2
  br label %196

192:                                              ; preds = %163
  %193 = call fastcc i32 @avio_read(%struct.AVIOContext.335* %166, i8* nonnull %27, i32 3) #18
  store i8 0, i8* %32, align 1, !tbaa !33
  %194 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %195 = call fastcc i32 @avio_rb24(%struct.AVIOContext.335* %194) #18
  br label %196

196:                                              ; preds = %192, %187
  %197 = phi i32 [ %188, %187 ], [ %195, %192 ]
  %198 = phi i32 [ %190, %187 ], [ 0, %192 ]
  %199 = phi i32 [ %191, %187 ], [ 0, %192 ]
  %200 = icmp ugt i32 %197, 268435456
  br i1 %200, label %.loopexit28, label %201

201:                                              ; preds = %196
  %202 = sub i32 %164, %157
  %203 = sub i32 %202, %197
  %204 = icmp slt i32 %203, 0
  br i1 %204, label %.loopexit28, label %205

205:                                              ; preds = %201
  %206 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %207 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %206, i64 0, i32 1) #18
  %208 = zext i32 %197 to i64
  %209 = add nsw i64 %207, %208
  %210 = icmp eq i32 %197, 0
  br i1 %210, label %211, label %215

211:                                              ; preds = %205
  %212 = load i8, i8* %27, align 1, !tbaa !33
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %393, label %214

214:                                              ; preds = %211
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %31, i32 48, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.67.1792, i64 0, i64 0), i8* nonnull %27) #18
  br label %393

215:                                              ; preds = %205
  %216 = and i32 %198, 1
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %224, label %218

218:                                              ; preds = %215
  %219 = icmp ult i32 %197, 4
  br i1 %219, label %.loopexit28, label %220

220:                                              ; preds = %218
  %221 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %222 = call fastcc i32 @avio_rb32(%struct.AVIOContext.335* %221) #18
  %223 = add nsw i32 %197, -4
  br label %224

224:                                              ; preds = %220, %215
  %225 = phi i32 [ %223, %220 ], [ %197, %215 ]
  %226 = and i32 %198, 12
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %238, label %228

228:                                              ; preds = %224
  %229 = and i32 %198, 4
  %230 = icmp eq i32 %229, 0
  %231 = and i32 %198, 8
  %232 = icmp eq i32 %231, 0
  %233 = select i1 %230, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.69.1793, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.70.1794, i64 0, i64 0)
  %234 = select i1 %232, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68.1795, i64 0, i64 0), i8* %233
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %31, i32 24, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.71.1796, i64 0, i64 0), i8* %234, i8* nonnull %27) #18
  %235 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %236 = zext i32 %225 to i64
  %237 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %235, i64 %236) #18
  br label %389

238:                                              ; preds = %224
  %239 = load i8, i8* %27, align 1, !tbaa !33
  %240 = icmp eq i8 %239, 84
  br i1 %240, label %245, label %241

241:                                              ; preds = %238
  br i1 %34, label %378, label %242

242:                                              ; preds = %241
  %243 = call fastcc %struct.ID3v2EMFunc* @get_extra_meta_func(i8* nonnull %27, i32 %156) #18
  %244 = icmp eq %struct.ID3v2EMFunc* %243, null
  br i1 %244, label %378, label %245

245:                                              ; preds = %242, %238
  %246 = phi %struct.ID3v2EMFunc* [ %165, %238 ], [ %243, %242 ]
  %247 = load %struct.AVIOContext*, %struct.AVIOContext** %15, align 8, !tbaa !374
  %248 = icmp ne i32 %199, 0
  %249 = or i1 %162, %248
  br i1 %249, label %250, label %313

250:                                              ; preds = %245
  %251 = zext i32 %225 to i64
  call fastcc void @av_fast_malloc(i8* nonnull %29, i32* nonnull %11, i64 %251) #18
  %252 = load i8*, i8** %10, align 8, !tbaa !27
  %253 = icmp eq i8* %252, null
  br i1 %253, label %254, label %255

254:                                              ; preds = %250
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %31, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.72.1797, i64 0, i64 0), i32 %225) #18
  br label %389

255:                                              ; preds = %250
  %256 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %257 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %256, i64 0, i32 1) #18
  %258 = add nsw i64 %257, %251
  %259 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %260 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %259, i64 0, i32 1) #18
  %261 = icmp slt i64 %260, %258
  br i1 %261, label %262, label %.loopexit

262:                                              ; preds = %255
  %263 = add nsw i64 %258, -1
  br label %264

264:                                              ; preds = %298, %262
  %265 = phi i8* [ %252, %262 ], [ %299, %298 ]
  %266 = load i64, i64* %35, align 8, !tbaa !27
  %267 = ptrtoint i8* %265 to i64
  %268 = sub i64 %267, %266
  %269 = icmp slt i64 %268, %251
  br i1 %269, label %270, label %.loopexit

270:                                              ; preds = %264
  %271 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %272 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %271) #18
  %273 = trunc i32 %272 to i8
  %274 = getelementptr inbounds i8, i8* %265, i64 1
  store i8 %273, i8* %265, align 1, !tbaa !33
  %275 = and i32 %272, 255
  %276 = icmp eq i32 %275, 255
  br i1 %276, label %277, label %298

277:                                              ; preds = %270
  %278 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %279 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %278, i64 0, i32 1) #18
  %280 = icmp slt i64 %279, %263
  br i1 %280, label %281, label %298

281:                                              ; preds = %277
  %282 = load i64, i64* %35, align 8, !tbaa !27
  %283 = ptrtoint i8* %274 to i64
  %284 = sub i64 %283, %282
  %285 = icmp slt i64 %284, %251
  br i1 %285, label %286, label %298

286:                                              ; preds = %281
  %287 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %288 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %287) #18
  %289 = and i32 %288, 255
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %294

291:                                              ; preds = %286
  %292 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %293 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %292) #18
  br label %294

294:                                              ; preds = %291, %286
  %295 = phi i32 [ %293, %291 ], [ %289, %286 ]
  %296 = trunc i32 %295 to i8
  %297 = getelementptr inbounds i8, i8* %265, i64 2
  store i8 %296, i8* %274, align 1, !tbaa !33
  br label %298

298:                                              ; preds = %294, %281, %277, %270
  %299 = phi i8* [ %297, %294 ], [ %274, %281 ], [ %274, %277 ], [ %274, %270 ]
  %300 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %301 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %300, i64 0, i32 1) #18
  %302 = icmp slt i64 %301, %258
  br i1 %302, label %264, label %.loopexit

.loopexit:                                        ; preds = %298, %264, %255
  %303 = phi i8* [ %252, %255 ], [ %299, %298 ], [ %265, %264 ]
  %304 = load i8*, i8** %10, align 8, !tbaa !27
  %305 = ptrtoint i8* %303 to i64
  %306 = ptrtoint i8* %304 to i64
  %307 = sub i64 %305, %306
  %308 = trunc i64 %307 to i32
  %309 = call fastcc i32 @ffio_init_context(%struct.AVIOContext.335* nonnull %58, i8* %304, i32 %308, i32 0, i8* null, i32 (i8*, i8*, i32)* null, i32 (i8*, i8*, i32)* null, i64 (i8*, i64, i32)* null) #18
  %.cast = ptrtoint i8* %304 to i64
  %310 = sub i64 %305, %.cast
  %311 = trunc i64 %310 to i32
  %312 = load i8, i8* %27, align 1, !tbaa !33
  br label %313

313:                                              ; preds = %.loopexit, %245
  %314 = phi i8 [ %312, %.loopexit ], [ %239, %245 ]
  %315 = phi %struct.AVIOContext* [ %9, %.loopexit ], [ %247, %245 ]
  %316 = phi i32 [ %311, %.loopexit ], [ %225, %245 ]
  %317 = icmp eq i8 %314, 84
  br i1 %317, label %318, label %375

318:                                              ; preds = %313
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36) #18
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #18
  store i32 %316, i32* %4, align 4, !tbaa !28
  store i8* %27, i8** %5, align 8, !tbaa !27
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #18
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %39) #18
  %319 = icmp slt i32 %316, 1
  br i1 %319, label %374, label %320

320:                                              ; preds = %318
  %321 = bitcast %struct.AVIOContext* %315 to %struct.AVIOContext.335*
  %322 = call fastcc i32 @avio_r8(%struct.AVIOContext.335* %321) #18
  %323 = add nsw i32 %316, -1
  store i32 %323, i32* %4, align 4, !tbaa !28
  %324 = call fastcc i32 @decode_str(%struct.AVFormatContext* nonnull %0, %struct.AVIOContext* %315, i32 %322, i8** nonnull %6, i32* nonnull %4) #18
  %325 = icmp slt i32 %324, 0
  br i1 %325, label %326, label %327

326:                                              ; preds = %320
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %31, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.75.1798, i64 0, i64 0), i8* nonnull %27) #18
  br label %374

327:                                              ; preds = %320
  %328 = call i32 @bcmp(i8* nonnull %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.1735, i64 0, i64 0), i64 5) #18
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %333, label %330

330:                                              ; preds = %327
  %331 = call i32 @bcmp(i8* nonnull %27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76.1799, i64 0, i64 0), i64 4) #18
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %349

333:                                              ; preds = %330, %327
  %334 = load i8*, i8** %6, align 8, !tbaa !27
  %335 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %334, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77.1800, i64 0, i64 0), i32* nonnull %7) #18
  %336 = icmp eq i32 %335, 1
  br i1 %336, label %340, label %337

337:                                              ; preds = %333
  %338 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %334, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.78.1801, i64 0, i64 0), i32* nonnull %7) #18
  %339 = icmp eq i32 %338, 1
  br i1 %339, label %340, label %349

340:                                              ; preds = %337, %333
  %341 = load i32, i32* %7, align 4, !tbaa !28
  %342 = icmp ult i32 %341, 148
  br i1 %342, label %343, label %349

343:                                              ; preds = %340
  call fastcc void @av_freep(i8* nonnull %38) #18
  %344 = load i32, i32* %7, align 4, !tbaa !28
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds [148 x i8*], [148 x i8*]* @ff_id3v1_genre_str, i64 0, i64 %345
  %347 = load i8*, i8** %346, align 8, !tbaa !27
  %348 = call fastcc noalias i8* @av_strdup(i8* %347) #18
  store i8* %348, i8** %6, align 8, !tbaa !27
  br label %367

349:                                              ; preds = %340, %337, %330
  %bcmp = call i32 @bcmp(i8* nonnull %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.79.1802, i64 0, i64 0), i64 5)
  %350 = icmp eq i32 %bcmp, 0
  br i1 %350, label %353, label %351

351:                                              ; preds = %349
  %bcmp21 = call i32 @bcmp(i8* nonnull %27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.80.1803, i64 0, i64 0), i64 4)
  %352 = icmp eq i32 %bcmp21, 0
  br i1 %352, label %353, label %359

353:                                              ; preds = %351, %349
  %354 = load i64, i64* %40, align 8, !tbaa !27
  store i64 %354, i64* %41, align 8, !tbaa !27
  %355 = call fastcc i32 @decode_str(%struct.AVFormatContext* nonnull %0, %struct.AVIOContext* %315, i32 %322, i8** nonnull %6, i32* nonnull %4) #18
  %356 = icmp slt i32 %355, 0
  br i1 %356, label %357, label %364

357:                                              ; preds = %353
  %358 = inttoptr i64 %354 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %31, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.75.1798, i64 0, i64 0), i8* %358) #18
  call fastcc void @av_freep(i8* nonnull %37) #18
  br label %374

359:                                              ; preds = %351
  %360 = load i8*, i8** %6, align 8, !tbaa !27
  %361 = load i8, i8* %360, align 1, !tbaa !33
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %363, label %367

363:                                              ; preds = %359
  call fastcc void @av_freep(i8* nonnull %38) #18
  br label %364

364:                                              ; preds = %363, %353
  %365 = phi i32 [ 28, %353 ], [ 24, %363 ]
  %366 = load i8*, i8** %6, align 8, !tbaa !27
  br label %367

367:                                              ; preds = %364, %359, %343
  %368 = phi i8* [ %366, %364 ], [ %360, %359 ], [ %348, %343 ]
  %369 = phi i32 [ %365, %364 ], [ 24, %359 ], [ 24, %343 ]
  %370 = icmp eq i8* %368, null
  br i1 %370, label %374, label %371

371:                                              ; preds = %367
  %372 = load i8*, i8** %5, align 8, !tbaa !27
  %373 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %42, i8* %372, i8* nonnull %368, i32 %369) #18
  br label %374

374:                                              ; preds = %371, %367, %357, %326, %318
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %39) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #18
  br label %389

375:                                              ; preds = %313
  %376 = getelementptr inbounds %struct.ID3v2EMFunc, %struct.ID3v2EMFunc* %246, i64 0, i32 2
  %377 = load void (%struct.AVFormatContext*, %struct.AVIOContext*, i32, i8*, %struct.ID3v2ExtraMeta**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*, i32, i8*, %struct.ID3v2ExtraMeta**)** %376, align 8, !tbaa !382
  call void %377(%struct.AVFormatContext* nonnull %0, %struct.AVIOContext* %315, i32 %316, i8* nonnull %27, %struct.ID3v2ExtraMeta** %2) #18
  br label %389

378:                                              ; preds = %242, %241
  %379 = phi %struct.ID3v2EMFunc* [ null, %242 ], [ %165, %241 ]
  %380 = icmp eq i8 %239, 0
  br i1 %380, label %381, label %389

381:                                              ; preds = %378
  %382 = load i8, i8* %43, align 1, !tbaa !33
  %383 = icmp eq i8 %382, 0
  br i1 %383, label %385, label %384

384:                                              ; preds = %381
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %31, i32 24, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.73.1804, i64 0, i64 0)) #18
  br label %385

385:                                              ; preds = %384, %381
  %386 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %387 = zext i32 %225 to i64
  %388 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %386, i64 %387) #18
  br label %.loopexit28

389:                                              ; preds = %378, %375, %374, %254, %228
  %390 = phi %struct.ID3v2EMFunc* [ %165, %228 ], [ %246, %374 ], [ %246, %375 ], [ %246, %254 ], [ %379, %378 ]
  %391 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %392 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %391, i64 %209, i32 0) #18
  br label %393

393:                                              ; preds = %389, %214, %211
  %394 = phi %struct.ID3v2EMFunc* [ %390, %389 ], [ %165, %211 ], [ %165, %214 ]
  %395 = icmp slt i32 %203, %157
  br i1 %395, label %.loopexit28, label %163

.loopexit28:                                      ; preds = %393, %218, %201, %196, %385, %154
  %396 = icmp ne i8 %82, 4
  %397 = and i32 %120, 16
  %398 = icmp eq i32 %397, 0
  %399 = or i1 %396, %398
  %400 = add nsw i64 %118, 10
  %401 = select i1 %399, i64 %118, i64 %400
  br label %404

402:                                              ; preds = %147, %127, %121, %99
  %403 = phi i8* [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.63.1805, i64 0, i64 0), %121 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.64.1806, i64 0, i64 0), %99 ], [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.65.1807, i64 0, i64 0), %127 ], [ getelementptr inbounds ([26 x i8], [26 x i8]* @.str.66.1808, i64 0, i64 0), %147 ]
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %31, i32 32, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.74.1809, i64 0, i64 0), i32 %119, i8* nonnull %403) #18
  br label %404

404:                                              ; preds = %402, %.loopexit28
  %405 = phi i64 [ %118, %402 ], [ %401, %.loopexit28 ]
  %406 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %407 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %406, i64 %405, i32 0) #18
  %408 = load i8*, i8** %10, align 8, !tbaa !27
  call fastcc void @av_free(i8* %408) #18
  call fastcc void @av_free(i8* null) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %28) #18
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %27) #18
  %409 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %410 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %409, i64 0, i32 1) #18
  %411 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %412 = call fastcc i32 @avio_read(%struct.AVIOContext.335* %411, i8* nonnull %14, i32 10) #18
  %413 = icmp eq i32 %412, 10
  br i1 %413, label %64, label %.loopexit30

.loopexit30:                                      ; preds = %404, %96, %.lr.ph67, %70, %64, %.lr.ph, %.preheader29, %3
  %414 = phi i64 [ %46, %3 ], [ %46, %.preheader29 ], [ %46, %.lr.ph ], [ %410, %64 ], [ %410, %70 ], [ %76, %.lr.ph67 ], [ %76, %96 ], [ %410, %404 ]
  %415 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %44, align 8, !tbaa !374
  %416 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %415, i64 %414, i32 0) #18
  call fastcc void @ff_metadata_conv(%struct.AVDictionary** nonnull %42, %struct.AVCodecDefault* getelementptr inbounds ([15 x %struct.AVCodecDefault], [15 x %struct.AVCodecDefault]* @ff_id3v2_34_metadata_conv, i64 0, i64 0)) #18
  call fastcc void @ff_metadata_conv(%struct.AVDictionary** nonnull %42, %struct.AVCodecDefault* getelementptr inbounds ([9 x %struct.AVCodecDefault], [9 x %struct.AVCodecDefault]* @id3v2_2_metadata_conv, i64 0, i64 0)) #18
  call fastcc void @ff_metadata_conv(%struct.AVDictionary** nonnull %42, %struct.AVCodecDefault* getelementptr inbounds ([7 x %struct.AVCodecDefault], [7 x %struct.AVCodecDefault]* @ff_id3v2_4_metadata_conv, i64 0, i64 0)) #18
  %417 = getelementptr inbounds [17 x i8], [17 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %417) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %417, i8 0, i64 17, i1 false) #18
  %418 = load %struct.AVDictionary*, %struct.AVDictionary** %42, align 8, !tbaa !27
  %419 = call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %418, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.92.1810, i64 0, i64 0), %struct.AVCodecDefault* null, i32 1) #18
  %420 = icmp eq %struct.AVCodecDefault* %419, null
  br i1 %420, label %433, label %421

421:                                              ; preds = %.loopexit30
  %422 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %419, i64 0, i32 1
  %423 = load i8*, i8** %422, align 8, !tbaa !384
  %424 = call i64 @strlen(i8* %423) #28
  %425 = icmp eq i64 %424, 4
  br i1 %425, label %.preheader27, label %433

.preheader27:                                     ; preds = %421, %.preheader27
  %426 = phi i8* [ %430, %.preheader27 ], [ %423, %421 ]
  %427 = load i8, i8* %426, align 1, !tbaa !33
  %428 = add i8 %427, -48
  %429 = icmp ult i8 %428, 10
  %430 = getelementptr inbounds i8, i8* %426, i64 1
  br i1 %429, label %.preheader27, label %431

431:                                              ; preds = %.preheader27
  %432 = icmp eq i8 %427, 0
  br i1 %432, label %448, label %433

433:                                              ; preds = %431, %421, %.loopexit30
  %434 = call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %418, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93.1811, i64 0, i64 0), %struct.AVCodecDefault* null, i32 1) #18
  %435 = icmp eq %struct.AVCodecDefault* %434, null
  br i1 %435, label %531, label %436

436:                                              ; preds = %433
  %437 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %434, i64 0, i32 1
  %438 = load i8*, i8** %437, align 8, !tbaa !384
  %439 = call i64 @strlen(i8* %438) #28
  %440 = icmp eq i64 %439, 4
  br i1 %440, label %.preheader26, label %531

.preheader26:                                     ; preds = %436, %.preheader26
  %441 = phi i8* [ %445, %.preheader26 ], [ %438, %436 ]
  %442 = load i8, i8* %441, align 1, !tbaa !33
  %443 = add i8 %442, -48
  %444 = icmp ult i8 %443, 10
  %445 = getelementptr inbounds i8, i8* %441, i64 1
  br i1 %444, label %.preheader26, label %446

446:                                              ; preds = %.preheader26
  %447 = icmp eq i8 %442, 0
  br i1 %447, label %448, label %531

448:                                              ; preds = %446, %431
  %449 = phi i8* [ %423, %431 ], [ %438, %446 ]
  call fastcc void @av_strlcpy(i8* nonnull %417, i8* %449, i64 5) #18
  %450 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.92.1810, i64 0, i64 0), i8* null, i32 0) #18
  %451 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %42, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93.1811, i64 0, i64 0), i8* null, i32 0) #18
  %452 = load %struct.AVDictionary*, %struct.AVDictionary** %42, align 8, !tbaa !27
  %453 = call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %452, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.94.1812, i64 0, i64 0), %struct.AVCodecDefault* null, i32 1) #18
  %454 = icmp eq %struct.AVCodecDefault* %453, null
  br i1 %454, label %467, label %455

455:                                              ; preds = %448
  %456 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %453, i64 0, i32 1
  %457 = load i8*, i8** %456, align 8, !tbaa !384
  %458 = call i64 @strlen(i8* %457) #28
  %459 = icmp eq i64 %458, 4
  br i1 %459, label %.preheader25, label %467

.preheader25:                                     ; preds = %455, %.preheader25
  %460 = phi i8* [ %464, %.preheader25 ], [ %457, %455 ]
  %461 = load i8, i8* %460, align 1, !tbaa !33
  %462 = add i8 %461, -48
  %463 = icmp ult i8 %462, 10
  %464 = getelementptr inbounds i8, i8* %460, i64 1
  br i1 %463, label %.preheader25, label %465

465:                                              ; preds = %.preheader25
  %466 = icmp eq i8 %461, 0
  br i1 %466, label %482, label %467

467:                                              ; preds = %465, %455, %448
  %468 = call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %452, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.95.1813, i64 0, i64 0), %struct.AVCodecDefault* null, i32 1) #18
  %469 = icmp eq %struct.AVCodecDefault* %468, null
  br i1 %469, label %526, label %470

470:                                              ; preds = %467
  %471 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %468, i64 0, i32 1
  %472 = load i8*, i8** %471, align 8, !tbaa !384
  %473 = call i64 @strlen(i8* %472) #28
  %474 = icmp eq i64 %473, 4
  br i1 %474, label %.preheader24, label %526

.preheader24:                                     ; preds = %470, %.preheader24
  %475 = phi i8* [ %479, %.preheader24 ], [ %472, %470 ]
  %476 = load i8, i8* %475, align 1, !tbaa !33
  %477 = add i8 %476, -48
  %478 = icmp ult i8 %477, 10
  %479 = getelementptr inbounds i8, i8* %475, i64 1
  br i1 %478, label %.preheader24, label %480

480:                                              ; preds = %.preheader24
  %481 = icmp eq i8 %476, 0
  br i1 %481, label %482, label %526

482:                                              ; preds = %480, %465
  %483 = phi i8* [ %457, %465 ], [ %472, %480 ]
  %484 = getelementptr inbounds [17 x i8], [17 x i8]* %12, i64 0, i64 4
  %485 = getelementptr inbounds i8, i8* %483, i64 2
  %486 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %484, i64 13, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.96.1814, i64 0, i64 0), i8* nonnull %485, i8* %483) #18
  %487 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.94.1812, i64 0, i64 0), i8* null, i32 0) #18
  %488 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %42, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.95.1813, i64 0, i64 0), i8* null, i32 0) #18
  %489 = load %struct.AVDictionary*, %struct.AVDictionary** %42, align 8, !tbaa !27
  %490 = call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %489, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97.1815, i64 0, i64 0), %struct.AVCodecDefault* null, i32 1) #18
  %491 = icmp eq %struct.AVCodecDefault* %490, null
  br i1 %491, label %504, label %492

492:                                              ; preds = %482
  %493 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %490, i64 0, i32 1
  %494 = load i8*, i8** %493, align 8, !tbaa !384
  %495 = call i64 @strlen(i8* %494) #28
  %496 = icmp eq i64 %495, 4
  br i1 %496, label %.preheader23, label %504

.preheader23:                                     ; preds = %492, %.preheader23
  %497 = phi i8* [ %501, %.preheader23 ], [ %494, %492 ]
  %498 = load i8, i8* %497, align 1, !tbaa !33
  %499 = add i8 %498, -48
  %500 = icmp ult i8 %499, 10
  %501 = getelementptr inbounds i8, i8* %497, i64 1
  br i1 %500, label %.preheader23, label %502

502:                                              ; preds = %.preheader23
  %503 = icmp eq i8 %498, 0
  br i1 %503, label %519, label %504

504:                                              ; preds = %502, %492, %482
  %505 = call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %489, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.98.1816, i64 0, i64 0), %struct.AVCodecDefault* null, i32 1) #18
  %506 = icmp eq %struct.AVCodecDefault* %505, null
  br i1 %506, label %526, label %507

507:                                              ; preds = %504
  %508 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %505, i64 0, i32 1
  %509 = load i8*, i8** %508, align 8, !tbaa !384
  %510 = call i64 @strlen(i8* %509) #28
  %511 = icmp eq i64 %510, 4
  br i1 %511, label %.preheader, label %526

.preheader:                                       ; preds = %507, %.preheader
  %512 = phi i8* [ %516, %.preheader ], [ %509, %507 ]
  %513 = load i8, i8* %512, align 1, !tbaa !33
  %514 = add i8 %513, -48
  %515 = icmp ult i8 %514, 10
  %516 = getelementptr inbounds i8, i8* %512, i64 1
  br i1 %515, label %.preheader, label %517

517:                                              ; preds = %.preheader
  %518 = icmp eq i8 %513, 0
  br i1 %518, label %519, label %526

519:                                              ; preds = %517, %502
  %520 = phi i8* [ %494, %502 ], [ %509, %517 ]
  %521 = getelementptr inbounds [17 x i8], [17 x i8]* %12, i64 0, i64 10
  %522 = getelementptr inbounds i8, i8* %520, i64 2
  %523 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %521, i64 7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.99.1817, i64 0, i64 0), i8* %520, i8* nonnull %522) #18
  %524 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97.1815, i64 0, i64 0), i8* null, i32 0) #18
  %525 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %42, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.98.1816, i64 0, i64 0), i8* null, i32 0) #18
  br label %526

526:                                              ; preds = %519, %517, %507, %504, %480, %470, %467
  %527 = load i8, i8* %417, align 16, !tbaa !33
  %528 = icmp eq i8 %527, 0
  br i1 %528, label %531, label %529

529:                                              ; preds = %526
  %530 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29.1760, i64 0, i64 0), i8* nonnull %417, i32 0) #18
  br label %531

531:                                              ; preds = %529, %526, %446, %436, %433
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %417) #18
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %14) #18
  ret void
}

; Function Attrs: nounwind readonly uwtable
define internal fastcc %struct.ID3v2EMFunc* @get_extra_meta_func(i8* readonly, i32) unnamed_addr #22 {
  %3 = icmp eq i8* %0, null
  %4 = icmp ne i32 %1, 0
  %5 = select i1 %4, i64 4, i64 3
  br i1 %3, label %19, label %6

6:                                                ; preds = %2
  br i1 %4, label %10, label %7

7:                                                ; preds = %6
  %8 = tail call i32 @bcmp(i8* nonnull %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.100.1829, i64 0, i64 0), i64 %5)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %19, label %16

10:                                               ; preds = %6
  %11 = tail call i32 @bcmp(i8* nonnull %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.101.1830, i64 0, i64 0), i64 %5)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %19, label %13

13:                                               ; preds = %10
  %14 = tail call i32 @bcmp(i8* nonnull %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60.1831, i64 0, i64 0), i64 %5)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %21

16:                                               ; preds = %7
  %17 = tail call i32 @bcmp(i8* nonnull %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.102.1832, i64 0, i64 0), i64 %5)
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %25, %16, %13, %10, %7, %2
  %20 = phi %struct.ID3v2EMFunc* [ null, %2 ], [ getelementptr inbounds ([4 x %struct.ID3v2EMFunc], [4 x %struct.ID3v2EMFunc]* @id3v2_extra_meta_funcs, i64 0, i64 0), %10 ], [ getelementptr inbounds ([4 x %struct.ID3v2EMFunc], [4 x %struct.ID3v2EMFunc]* @id3v2_extra_meta_funcs, i64 0, i64 1), %13 ], [ getelementptr inbounds ([4 x %struct.ID3v2EMFunc], [4 x %struct.ID3v2EMFunc]* @id3v2_extra_meta_funcs, i64 0, i64 0), %7 ], [ getelementptr inbounds ([4 x %struct.ID3v2EMFunc], [4 x %struct.ID3v2EMFunc]* @id3v2_extra_meta_funcs, i64 0, i64 1), %16 ], [ %28, %25 ]
  ret %struct.ID3v2EMFunc* %20

21:                                               ; preds = %13
  %22 = tail call i32 @bcmp(i8* nonnull %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.103.1833, i64 0, i64 0), i64 %5)
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, %struct.ID3v2EMFunc* getelementptr inbounds ([4 x %struct.ID3v2EMFunc], [4 x %struct.ID3v2EMFunc]* @id3v2_extra_meta_funcs, i64 0, i64 2), %struct.ID3v2EMFunc* null
  ret %struct.ID3v2EMFunc* %24

25:                                               ; preds = %16
  %26 = tail call i32 @bcmp(i8* nonnull %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.103.1833, i64 0, i64 0), i64 %5)
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %27, %struct.ID3v2EMFunc* getelementptr inbounds ([4 x %struct.ID3v2EMFunc], [4 x %struct.ID3v2EMFunc]* @id3v2_extra_meta_funcs, i64 0, i64 2), %struct.ID3v2EMFunc* null
  br label %19
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @decode_str(%struct.AVFormatContext*, %struct.AVIOContext*, i32, i8** nocapture, i32* nocapture) unnamed_addr #5 {
  %6 = alloca %struct.AVIOContext*, align 8
  %7 = load i32, i32* %4, align 4, !tbaa !28
  %8 = bitcast %struct.AVIOContext** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #18
  %9 = bitcast %struct.AVIOContext** %6 to %struct.AVIOContext.335**
  %10 = call fastcc i32 @avio_open_dyn_buf(%struct.AVIOContext.335** nonnull %9) #18
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %5
  %13 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %13, i32 16, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.81.1825, i64 0, i64 0)) #18
  br label %172

14:                                               ; preds = %5
  switch i32 %2, label %160 [
    i32 0, label %19
    i32 1, label %65
    i32 2, label %82
    i32 3, label %15
  ]

15:                                               ; preds = %14
  %16 = icmp eq i32 %7, 0
  br i1 %16, label %165, label %.preheader21

.preheader21:                                     ; preds = %15
  %17 = bitcast %struct.AVIOContext* %1 to %struct.AVIOContext.335*
  %18 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %9, align 8
  br label %153

19:                                               ; preds = %14
  %20 = icmp eq i32 %7, 0
  br i1 %20, label %165, label %.preheader14

.preheader14:                                     ; preds = %19
  %21 = bitcast %struct.AVIOContext* %1 to %struct.AVIOContext.335*
  %22 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %9, align 8
  br label %23

23:                                               ; preds = %.preheader14, %.loopexit
  %24 = phi i32 [ %61, %.loopexit ], [ %7, %.preheader14 ]
  %25 = tail call fastcc i32 @avio_r8(%struct.AVIOContext.335* %21) #18
  %26 = icmp ult i32 %25, 128
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  %28 = and i32 %25, 255
  tail call fastcc void @avio_w8(%struct.AVIOContext.335* %22, i32 %28) #18
  br label %.loopexit

29:                                               ; preds = %23
  %30 = icmp ugt i32 %25, 65535
  %31 = lshr i32 %25, 16
  %32 = select i1 %30, i32 %31, i32 %25
  %33 = select i1 %30, i32 16, i32 0
  %34 = and i32 %32, 65280
  %35 = icmp eq i32 %34, 0
  %36 = lshr i32 %32, 8
  %37 = or i32 %33, 8
  %38 = select i1 %35, i32 %32, i32 %36
  %39 = select i1 %35, i32 %33, i32 %37
  %40 = zext i32 %38 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_log2_tab, i64 0, i64 %40
  %42 = load i8, i8* %41, align 1, !tbaa !33
  %43 = zext i8 %42 to i32
  %44 = or i32 %39, 4
  %45 = add nuw nsw i32 %44, %43
  %46 = udiv i32 %45, 5
  %47 = mul nuw nsw i32 %46, 6
  %48 = add nsw i32 %47, -6
  %49 = lshr i32 256, %46
  %50 = sub nsw i32 0, %49
  %51 = lshr i32 %25, %48
  %52 = or i32 %51, %50
  %53 = and i32 %52, 255
  tail call fastcc void @avio_w8(%struct.AVIOContext.335* %22, i32 %53) #18
  %54 = icmp sgt i32 %48, 5
  br i1 %54, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %29, %.preheader
  %55 = phi i32 [ %56, %.preheader ], [ %48, %29 ]
  %56 = add nsw i32 %55, -6
  %57 = lshr i32 %25, %56
  %58 = and i32 %57, 63
  %59 = or i32 %58, 128
  tail call fastcc void @avio_w8(%struct.AVIOContext.335* %22, i32 %59) #18
  %60 = icmp sgt i32 %56, 5
  br i1 %60, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %29, %27
  %61 = add nsw i32 %24, -1
  %62 = icmp ne i32 %61, 0
  %63 = icmp ne i32 %25, 0
  %64 = and i1 %62, %63
  br i1 %64, label %23, label %.loopexit15

65:                                               ; preds = %14
  %66 = add nsw i32 %7, -2
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %73

68:                                               ; preds = %65
  %69 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %69, i32 16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.82.1826, i64 0, i64 0)) #18
  %70 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %9, align 8, !tbaa !27
  %71 = tail call fastcc i32 @avio_close_dyn_buf(%struct.AVIOContext.335* %70, i8** %3) #18
  %72 = bitcast i8** %3 to i8*
  tail call fastcc void @av_freep(i8* %72) #18
  br label %172

73:                                               ; preds = %65
  %74 = bitcast %struct.AVIOContext* %1 to %struct.AVIOContext.335*
  %75 = tail call i32 @avio_rb16(%struct.AVIOContext.335* %74) #18
  switch i32 %75, label %77 [
    i32 65534, label %76
    i32 65279, label %82
  ]

76:                                               ; preds = %73
  br label %82

77:                                               ; preds = %73
  %78 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %78, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.83.1827, i64 0, i64 0)) #18
  %79 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %9, align 8, !tbaa !27
  %80 = tail call fastcc i32 @avio_close_dyn_buf(%struct.AVIOContext.335* %79, i8** %3) #18
  %81 = bitcast i8** %3 to i8*
  tail call fastcc void @av_freep(i8* %81) #18
  store i32 %66, i32* %4, align 4, !tbaa !28
  br label %172

82:                                               ; preds = %76, %73, %14
  %83 = phi i32 (%struct.AVIOContext*)* [ bitcast (i32 (%struct.AVIOContext.335*)* @avio_rb16 to i32 (%struct.AVIOContext*)*), %14 ], [ bitcast (i32 (%struct.AVIOContext.335*)* @avio_rb16 to i32 (%struct.AVIOContext*)*), %73 ], [ bitcast (i32 (%struct.AVIOContext.335*)* @avio_rl16 to i32 (%struct.AVIOContext*)*), %76 ]
  %84 = phi i32 [ %7, %14 ], [ %66, %73 ], [ %66, %76 ]
  %85 = icmp sgt i32 %84, 1
  br i1 %85, label %.preheader18, label %.loopexit19

.preheader18:                                     ; preds = %82
  %86 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %9, align 8
  br label %87

87:                                               ; preds = %.preheader18, %.loopexit17
  %88 = phi i32 [ %108, %.loopexit17 ], [ %84, %.preheader18 ]
  %89 = add nsw i32 %88, -2
  %90 = tail call i32 %83(%struct.AVIOContext* %1) #18, !callees !386
  %91 = add i32 %90, -55296
  %92 = icmp ult i32 %91, 2048
  br i1 %92, label %93, label %107

93:                                               ; preds = %87
  %94 = add nsw i32 %88, -4
  %95 = icmp sgt i32 %94, -1
  br i1 %95, label %96, label %98

96:                                               ; preds = %93
  %97 = tail call i32 %83(%struct.AVIOContext* %1) #18, !callees !386
  br label %98

98:                                               ; preds = %96, %93
  %99 = phi i32 [ %97, %96 ], [ 0, %93 ]
  %100 = add i32 %99, -56320
  %101 = or i32 %100, %91
  %102 = icmp ugt i32 %101, 1023
  br i1 %102, label %.loopexit19, label %103

103:                                              ; preds = %98
  %104 = shl i32 %91, 10
  %105 = add nuw nsw i32 %104, 65536
  %106 = add i32 %105, %100
  br label %107

107:                                              ; preds = %103, %87
  %108 = phi i32 [ %89, %87 ], [ %94, %103 ]
  %109 = phi i32 [ %90, %87 ], [ %106, %103 ]
  %110 = icmp ult i32 %109, 128
  br i1 %110, label %111, label %113

111:                                              ; preds = %107
  %112 = and i32 %109, 255
  tail call fastcc void @avio_w8(%struct.AVIOContext.335* %86, i32 %112) #18
  br label %.loopexit17

113:                                              ; preds = %107
  %114 = icmp ugt i32 %109, 65535
  %115 = lshr i32 %109, 16
  %116 = select i1 %114, i32 %115, i32 %109
  %117 = select i1 %114, i32 16, i32 0
  %118 = and i32 %116, 65280
  %119 = icmp eq i32 %118, 0
  %120 = lshr i32 %116, 8
  %121 = or i32 %117, 8
  %122 = select i1 %119, i32 %116, i32 %120
  %123 = select i1 %119, i32 %117, i32 %121
  %124 = zext i32 %122 to i64
  %125 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_log2_tab, i64 0, i64 %124
  %126 = load i8, i8* %125, align 1, !tbaa !33
  %127 = zext i8 %126 to i32
  %128 = or i32 %123, 4
  %129 = add nuw nsw i32 %128, %127
  %130 = udiv i32 %129, 5
  %131 = mul nuw nsw i32 %130, 6
  %132 = add nsw i32 %131, -6
  %133 = lshr i32 256, %130
  %134 = sub nsw i32 0, %133
  %135 = lshr i32 %109, %132
  %136 = or i32 %135, %134
  %137 = and i32 %136, 255
  tail call fastcc void @avio_w8(%struct.AVIOContext.335* %86, i32 %137) #18
  %138 = icmp sgt i32 %132, 5
  br i1 %138, label %.preheader16, label %.loopexit17

.preheader16:                                     ; preds = %113, %.preheader16
  %139 = phi i32 [ %140, %.preheader16 ], [ %132, %113 ]
  %140 = add nsw i32 %139, -6
  %141 = lshr i32 %109, %140
  %142 = and i32 %141, 63
  %143 = or i32 %142, 128
  tail call fastcc void @avio_w8(%struct.AVIOContext.335* %86, i32 %143) #18
  %144 = icmp sgt i32 %140, 5
  br i1 %144, label %.preheader16, label %.loopexit17

.loopexit17:                                      ; preds = %.preheader16, %113, %111
  %145 = icmp sgt i32 %108, 1
  %146 = icmp ne i32 %109, 0
  %147 = and i1 %145, %146
  br i1 %147, label %87, label %.loopexit19

.loopexit19:                                      ; preds = %.loopexit17, %98, %82
  %148 = phi i32 [ %84, %82 ], [ %108, %.loopexit17 ], [ %94, %98 ]
  %149 = phi i32 [ 1, %82 ], [ %109, %.loopexit17 ], [ %100, %98 ]
  %150 = icmp slt i32 %148, 0
  %151 = add nsw i32 %148, 2
  %152 = select i1 %150, i32 %151, i32 %148
  br label %.loopexit15

153:                                              ; preds = %.preheader21, %153
  %154 = phi i32 [ %156, %153 ], [ %7, %.preheader21 ]
  %155 = tail call fastcc i32 @avio_r8(%struct.AVIOContext.335* %17) #18
  tail call fastcc void @avio_w8(%struct.AVIOContext.335* %18, i32 %155) #18
  %156 = add nsw i32 %154, -1
  %157 = icmp ne i32 %156, 0
  %158 = icmp ne i32 %155, 0
  %159 = and i1 %157, %158
  br i1 %159, label %153, label %.loopexit15

160:                                              ; preds = %14
  %161 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %161, i32 24, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.84.1828, i64 0, i64 0)) #18
  br label %165

.loopexit15:                                      ; preds = %153, %.loopexit, %.loopexit19
  %162 = phi i32 [ %152, %.loopexit19 ], [ %61, %.loopexit ], [ %156, %153 ]
  %163 = phi i32 [ %149, %.loopexit19 ], [ %25, %.loopexit ], [ %155, %153 ]
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %168, label %165

165:                                              ; preds = %.loopexit15, %160, %19, %15
  %166 = phi i32 [ %7, %160 ], [ %162, %.loopexit15 ], [ 0, %19 ], [ 0, %15 ]
  %167 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %9, align 8, !tbaa !27
  tail call fastcc void @avio_w8(%struct.AVIOContext.335* %167, i32 0) #18
  br label %168

168:                                              ; preds = %165, %.loopexit15
  %169 = phi i32 [ %162, %.loopexit15 ], [ %166, %165 ]
  %170 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %9, align 8, !tbaa !27
  %171 = tail call fastcc i32 @avio_close_dyn_buf(%struct.AVIOContext.335* %170, i8** %3) #18
  store i32 %169, i32* %4, align 4, !tbaa !28
  br label %172

172:                                              ; preds = %168, %77, %68, %12
  %173 = phi i32 [ %10, %12 ], [ 0, %168 ], [ -1094995529, %68 ], [ -1094995529, %77 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #18
  ret i32 %173
}

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_sscanf(i8* nocapture readonly, i8* nocapture readonly, ...) local_unnamed_addr #16

; Function Attrs: nounwind uwtable
define internal void @read_geobtag(%struct.AVFormatContext*, %struct.AVIOContext*, i32, i8*, %struct.ID3v2ExtraMeta** nocapture) #5 {
  %6 = alloca i32, align 4
  store i32 %2, i32* %6, align 4, !tbaa !28
  %7 = icmp slt i32 %2, 1
  br i1 %7, label %89, label %8

8:                                                ; preds = %5
  %9 = tail call fastcc noalias i8* @av_mallocz(i64 40) #18
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %12, i32 16, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.104.1837, i64 0, i64 0), i64 40) #18
  br label %89

13:                                               ; preds = %8
  %14 = tail call fastcc noalias i8* @av_mallocz(i64 24) #18
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %17, i32 16, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.104.1837, i64 0, i64 0), i64 24) #18
  br label %75

18:                                               ; preds = %13
  %19 = bitcast %struct.AVIOContext* %1 to %struct.AVIOContext.335*
  %20 = tail call fastcc i32 @avio_r8(%struct.AVIOContext.335* %19) #18
  %21 = add nsw i32 %2, -1
  store i32 %21, i32* %6, align 4, !tbaa !28
  %22 = getelementptr inbounds i8, i8* %9, i64 8
  %23 = bitcast i8* %22 to i8**
  %24 = call fastcc i32 @decode_str(%struct.AVFormatContext* %0, %struct.AVIOContext* %1, i32 0, i8** nonnull %23, i32* nonnull %6)
  %25 = icmp slt i32 %24, 0
  %26 = load i32, i32* %6, align 4
  %27 = icmp slt i32 %26, 1
  %28 = or i1 %25, %27
  br i1 %28, label %75, label %29

29:                                               ; preds = %18
  %30 = shl i32 %20, 24
  %31 = ashr exact i32 %30, 24
  %32 = getelementptr inbounds i8, i8* %9, i64 16
  %33 = bitcast i8* %32 to i8**
  %34 = call fastcc i32 @decode_str(%struct.AVFormatContext* %0, %struct.AVIOContext* %1, i32 %31, i8** nonnull %33, i32* nonnull %6)
  %35 = icmp slt i32 %34, 0
  %36 = load i32, i32* %6, align 4
  %37 = icmp slt i32 %36, 1
  %38 = or i1 %35, %37
  br i1 %38, label %75, label %39

39:                                               ; preds = %29
  %40 = getelementptr inbounds i8, i8* %9, i64 24
  %41 = bitcast i8* %40 to i8**
  %42 = call fastcc i32 @decode_str(%struct.AVFormatContext* %0, %struct.AVIOContext* %1, i32 %31, i8** nonnull %41, i32* nonnull %6)
  %43 = load i32, i32* %6, align 4
  %44 = or i32 %43, %42
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %75, label %46

46:                                               ; preds = %39
  %47 = icmp eq i32 %43, 0
  br i1 %47, label %61, label %48

48:                                               ; preds = %46
  %49 = sext i32 %43 to i64
  %50 = tail call fastcc noalias i8* @av_malloc(i64 %49) #18
  %51 = getelementptr inbounds i8, i8* %9, i64 32
  %52 = bitcast i8* %51 to i8**
  store i8* %50, i8** %52, align 8, !tbaa !387
  %53 = icmp eq i8* %50, null
  br i1 %53, label %54, label %56

54:                                               ; preds = %48
  %55 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %55, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.72.1797, i64 0, i64 0), i32 %43) #18
  br label %75

56:                                               ; preds = %48
  %57 = tail call fastcc i32 @avio_read(%struct.AVIOContext.335* %19, i8* nonnull %50, i32 %43) #18
  %58 = icmp ult i32 %57, %43
  br i1 %58, label %59, label %64

59:                                               ; preds = %56
  %60 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %60, i32 24, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.105.1838, i64 0, i64 0)) #18
  br label %64

61:                                               ; preds = %46
  %62 = getelementptr inbounds i8, i8* %9, i64 32
  %63 = bitcast i8* %62 to i8**
  store i8* null, i8** %63, align 8, !tbaa !387
  br label %64

64:                                               ; preds = %61, %59, %56
  %65 = phi i32 [ 0, %61 ], [ %57, %59 ], [ %57, %56 ]
  %66 = bitcast i8* %9 to i32*
  store i32 %65, i32* %66, align 8, !tbaa !389
  %67 = bitcast i8* %14 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.101.1830, i64 0, i64 0), i8** %67, align 8, !tbaa !390
  %68 = getelementptr inbounds i8, i8* %14, i64 8
  %69 = bitcast i8* %68 to i8**
  store i8* %9, i8** %69, align 8, !tbaa !392
  %70 = bitcast %struct.ID3v2ExtraMeta** %4 to i64*
  %71 = load i64, i64* %70, align 8, !tbaa !27
  %72 = getelementptr inbounds i8, i8* %14, i64 16
  %73 = bitcast i8* %72 to i64*
  store i64 %71, i64* %73, align 8, !tbaa !393
  %74 = bitcast %struct.ID3v2ExtraMeta** %4 to i8**
  store i8* %14, i8** %74, align 8, !tbaa !27
  br label %89

75:                                               ; preds = %54, %39, %29, %18, %16
  %76 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %76, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.75.1798, i64 0, i64 0), i8* %3) #18
  %77 = getelementptr inbounds i8, i8* %9, i64 8
  %78 = bitcast i8* %77 to i8**
  %79 = load i8*, i8** %78, align 8, !tbaa !394
  tail call fastcc void @av_free(i8* %79) #18
  %80 = getelementptr inbounds i8, i8* %9, i64 16
  %81 = bitcast i8* %80 to i8**
  %82 = load i8*, i8** %81, align 8, !tbaa !395
  tail call fastcc void @av_free(i8* %82) #18
  %83 = getelementptr inbounds i8, i8* %9, i64 24
  %84 = bitcast i8* %83 to i8**
  %85 = load i8*, i8** %84, align 8, !tbaa !396
  tail call fastcc void @av_free(i8* %85) #18
  %86 = getelementptr inbounds i8, i8* %9, i64 32
  %87 = bitcast i8* %86 to i8**
  %88 = load i8*, i8** %87, align 8, !tbaa !387
  tail call fastcc void @av_free(i8* %88) #18
  tail call fastcc void @av_free(i8* nonnull %9) #18
  tail call fastcc void @av_free(i8* %14) #18
  br label %89

89:                                               ; preds = %75, %64, %11, %5
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @free_geobtag(i8* nocapture) #5 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to i8**
  %4 = load i8*, i8** %3, align 8, !tbaa !394
  tail call fastcc void @av_free(i8* %4) #18
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = bitcast i8* %5 to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !395
  tail call fastcc void @av_free(i8* %7) #18
  %8 = getelementptr inbounds i8, i8* %0, i64 24
  %9 = bitcast i8* %8 to i8**
  %10 = load i8*, i8** %9, align 8, !tbaa !396
  tail call fastcc void @av_free(i8* %10) #18
  %11 = getelementptr inbounds i8, i8* %0, i64 32
  %12 = bitcast i8* %11 to i8**
  %13 = load i8*, i8** %12, align 8, !tbaa !387
  tail call fastcc void @av_free(i8* %13) #18
  tail call fastcc void @av_free(i8* %0) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @read_apic(%struct.AVFormatContext*, %struct.AVIOContext*, i32, i8* nocapture readnone, %struct.ID3v2ExtraMeta** nocapture) #5 {
  %6 = alloca %struct.ID3v2ExtraMetaAPIC*, align 8
  %7 = alloca i32, align 4
  %8 = alloca [64 x i8], align 16
  %9 = alloca %struct.ID3v2ExtraMeta*, align 8
  store i32 %2, i32* %7, align 4, !tbaa !28
  %10 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #18
  %11 = bitcast %struct.ID3v2ExtraMeta** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #18
  store %struct.ID3v2ExtraMeta* null, %struct.ID3v2ExtraMeta** %9, align 8, !tbaa !27
  %12 = bitcast %struct.AVIOContext* %1 to %struct.AVIOContext.335*
  %13 = tail call fastcc i64 @avio_seek(%struct.AVIOContext.335* %12, i64 0, i32 1) #18
  %14 = sext i32 %2 to i64
  %15 = add nsw i64 %13, %14
  %16 = icmp slt i32 %2, 5
  br i1 %16, label %91, label %17

17:                                               ; preds = %5
  %18 = tail call fastcc noalias i8* @av_mallocz(i64 24) #18
  %19 = bitcast %struct.ID3v2ExtraMeta** %9 to i8**
  store i8* %18, i8** %19, align 8, !tbaa !27
  %20 = tail call fastcc noalias i8* @av_mallocz(i64 40) #18
  %21 = icmp ne i8* %18, null
  %22 = icmp ne i8* %20, null
  %23 = and i1 %21, %22
  br i1 %23, label %24, label %85

24:                                               ; preds = %17
  %25 = tail call fastcc i32 @avio_r8(%struct.AVIOContext.335* %12) #18
  %26 = add nsw i32 %2, -1
  %27 = call fastcc i32 @avio_get_str(%struct.AVIOContext.335* %12, i32 %26, i8* nonnull %10, i32 64) #18
  %28 = sub nsw i32 %26, %27
  store i32 %28, i32* %7, align 4, !tbaa !28
  %29 = call fastcc i32 @av_strncasecmp(i8* getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 0, i32 0, i64 0), i8* nonnull %10, i64 64) #18
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %24
  %32 = call fastcc i32 @av_strncasecmp(i8* getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 1, i32 0, i64 0), i8* nonnull %10, i64 64) #18
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %94

34:                                               ; preds = %109, %106, %103, %100, %97, %94, %31, %24
  %35 = phi i32* [ getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 0, i32 1), %24 ], [ getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 1, i32 1), %31 ], [ getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 2, i32 1), %94 ], [ getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 3, i32 1), %97 ], [ getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 4, i32 1), %100 ], [ getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 5, i32 1), %103 ], [ getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 6, i32 1), %106 ], [ getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 7, i32 1), %109 ]
  %36 = load i32, i32* %35, align 4, !tbaa !397
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %109, %34
  %39 = bitcast %struct.AVFormatContext* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %39, i32 24, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.106.1834, i64 0, i64 0), i8* nonnull %10) #18
  br label %87

40:                                               ; preds = %34
  %41 = getelementptr inbounds i8, i8* %20, i64 32
  %42 = bitcast i8* %41 to i32*
  store i32 %36, i32* %42, align 8, !tbaa !399
  %43 = tail call fastcc i32 @avio_r8(%struct.AVIOContext.335* %12) #18
  %44 = add nsw i32 %28, -1
  store i32 %44, i32* %7, align 4, !tbaa !28
  %45 = icmp ugt i32 %43, 20
  br i1 %45, label %46, label %48

46:                                               ; preds = %40
  %47 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %47, i32 24, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.107.1835, i64 0, i64 0), i32 %43) #18
  br label %48

48:                                               ; preds = %46, %40
  %49 = phi i32 [ 0, %46 ], [ %43, %40 ]
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [21 x i8*], [21 x i8*]* @ff_id3v2_picture_types, i64 0, i64 %50
  %52 = bitcast i8** %51 to i64*
  %53 = load i64, i64* %52, align 8, !tbaa !27
  %54 = getelementptr inbounds i8, i8* %20, i64 16
  %55 = bitcast i8* %54 to i64*
  store i64 %53, i64* %55, align 8, !tbaa !401
  %56 = getelementptr inbounds i8, i8* %20, i64 24
  %57 = bitcast i8* %56 to i8**
  %58 = call fastcc i32 @decode_str(%struct.AVFormatContext* %0, %struct.AVIOContext* %1, i32 %25, i8** nonnull %57, i32* nonnull %7)
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %48
  %61 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %61, i32 16, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.108.1836, i64 0, i64 0)) #18
  br label %87

62:                                               ; preds = %48
  %63 = load i32, i32* %7, align 4, !tbaa !28
  %64 = getelementptr inbounds i8, i8* %20, i64 8
  %65 = bitcast i8* %64 to i32*
  store i32 %63, i32* %65, align 8, !tbaa !402
  %66 = sext i32 %63 to i64
  %67 = tail call fastcc noalias i8* @av_malloc(i64 %66) #18
  %68 = bitcast i8* %20 to i8**
  store i8* %67, i8** %68, align 8, !tbaa !403
  %69 = icmp eq i8* %67, null
  br i1 %69, label %87, label %70

70:                                               ; preds = %62
  %71 = load i32, i32* %65, align 8, !tbaa !402
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %87, label %73

73:                                               ; preds = %70
  %74 = tail call fastcc i32 @avio_read(%struct.AVIOContext.335* %12, i8* nonnull %67, i32 %63) #18
  %75 = icmp eq i32 %74, %63
  br i1 %75, label %76, label %87

76:                                               ; preds = %73
  %77 = load %struct.ID3v2ExtraMeta*, %struct.ID3v2ExtraMeta** %9, align 8, !tbaa !27
  %78 = getelementptr inbounds %struct.ID3v2ExtraMeta, %struct.ID3v2ExtraMeta* %77, i64 0, i32 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60.1831, i64 0, i64 0), i8** %78, align 8, !tbaa !390
  %79 = getelementptr inbounds %struct.ID3v2ExtraMeta, %struct.ID3v2ExtraMeta* %77, i64 0, i32 1
  store i8* %20, i8** %79, align 8, !tbaa !392
  %80 = bitcast %struct.ID3v2ExtraMeta** %4 to i64*
  %81 = load i64, i64* %80, align 8, !tbaa !27
  %82 = getelementptr inbounds %struct.ID3v2ExtraMeta, %struct.ID3v2ExtraMeta* %77, i64 0, i32 2
  %83 = bitcast %struct.ID3v2ExtraMeta** %82 to i64*
  store i64 %81, i64* %83, align 8, !tbaa !393
  %84 = ptrtoint %struct.ID3v2ExtraMeta* %77 to i64
  store i64 %84, i64* %80, align 8, !tbaa !27
  br label %93

85:                                               ; preds = %17
  %86 = icmp eq i8* %20, null
  br i1 %86, label %91, label %87

87:                                               ; preds = %85, %73, %70, %62, %60, %38
  %88 = bitcast %struct.ID3v2ExtraMetaAPIC** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #18
  %89 = bitcast %struct.ID3v2ExtraMetaAPIC** %6 to i8**
  store i8* %20, i8** %89, align 8, !tbaa !27
  call fastcc void @av_freep(i8* nonnull %20) #18
  %90 = getelementptr inbounds i8, i8* %20, i64 24
  call fastcc void @av_freep(i8* nonnull %90) #18
  call fastcc void @av_freep(i8* nonnull %88) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #18
  br label %91

91:                                               ; preds = %87, %85, %5
  call fastcc void @av_freep(i8* nonnull %11) #18
  %92 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* %12, i64 %15, i32 0) #18
  br label %93

93:                                               ; preds = %91, %76
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #18
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #18
  ret void

94:                                               ; preds = %31
  %95 = call fastcc i32 @av_strncasecmp(i8* getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 2, i32 0, i64 0), i8* nonnull %10, i64 64) #18
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %34, label %97

97:                                               ; preds = %94
  %98 = call fastcc i32 @av_strncasecmp(i8* getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 3, i32 0, i64 0), i8* nonnull %10, i64 64) #18
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %34, label %100

100:                                              ; preds = %97
  %101 = call fastcc i32 @av_strncasecmp(i8* getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 4, i32 0, i64 0), i8* nonnull %10, i64 64) #18
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %34, label %103

103:                                              ; preds = %100
  %104 = call fastcc i32 @av_strncasecmp(i8* getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 5, i32 0, i64 0), i8* nonnull %10, i64 64) #18
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %34, label %106

106:                                              ; preds = %103
  %107 = call fastcc i32 @av_strncasecmp(i8* getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 6, i32 0, i64 0), i8* nonnull %10, i64 64) #18
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %34, label %109

109:                                              ; preds = %106
  %110 = call fastcc i32 @av_strncasecmp(i8* getelementptr inbounds ([9 x %struct.CodecMime], [9 x %struct.CodecMime]* @ff_id3v2_mime_tags, i64 0, i64 7, i32 0, i64 0), i8* nonnull %10, i64 64) #18
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %34, label %38
}

; Function Attrs: nounwind uwtable
define internal void @free_apic(i8*) #5 {
  %2 = alloca %struct.ID3v2ExtraMetaAPIC*, align 8
  %3 = bitcast %struct.ID3v2ExtraMetaAPIC** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #18
  %4 = bitcast %struct.ID3v2ExtraMetaAPIC** %2 to i8**
  store i8* %0, i8** %4, align 8, !tbaa !27
  tail call fastcc void @av_freep(i8* %0) #18
  %5 = getelementptr inbounds i8, i8* %0, i64 24
  tail call fastcc void @av_freep(i8* nonnull %5) #18
  call fastcc void @av_freep(i8* nonnull %3) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @read_chapter(%struct.AVFormatContext* nocapture, %struct.AVIOContext*, i32, i8* nocapture readnone, %struct.ID3v2ExtraMeta** nocapture readnone) #5 {
  %6 = alloca [1024 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #18
  %9 = bitcast %struct.AVIOContext* %1 to %struct.AVIOContext.335*
  %10 = call fastcc i32 @avio_get_str(%struct.AVIOContext.335* %9, i32 %2, i8* nonnull %8, i32 1024) #18
  %11 = sub nsw i32 %2, %10
  %12 = icmp slt i32 %11, 16
  br i1 %12, label %44, label %13

13:                                               ; preds = %5
  %14 = tail call fastcc i32 @avio_rb32(%struct.AVIOContext.335* %9) #18
  %15 = tail call fastcc i32 @avio_rb32(%struct.AVIOContext.335* %9) #18
  %16 = add nsw i32 %11, -27
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %35

18:                                               ; preds = %13
  %19 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #18
  %20 = tail call fastcc i64 @avio_skip(%struct.AVIOContext.335* %9, i64 8) #18
  %21 = call fastcc i32 @avio_read(%struct.AVIOContext.335* %9, i8* nonnull %19, i32 4) #18
  %22 = call i32 @bcmp(i8* nonnull %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.1741, i64 0, i64 0), i64 4)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %34

24:                                               ; preds = %18
  %25 = call fastcc i32 @avio_rb32(%struct.AVIOContext.335* %9) #18
  %26 = icmp ugt i32 %16, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %24
  %28 = call fastcc i32 @avio_rb32(%struct.AVIOContext.335* %9) #18
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %43, label %30

30:                                               ; preds = %27, %24
  %31 = phi i32 [ %28, %27 ], [ %16, %24 ]
  %32 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %9, i64 3) #18
  %33 = call fastcc i32 @avio_get_str(%struct.AVIOContext.335* %9, i32 %31, i8* nonnull %8, i32 1024) #18
  br label %34

34:                                               ; preds = %30, %18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #18
  br label %35

35:                                               ; preds = %34, %13
  %36 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 26
  %37 = load i32, i32* %36, align 4, !tbaa !404
  %38 = add i32 %37, 1
  %39 = zext i32 %14 to i64
  %40 = zext i32 %15 to i64
  %41 = bitcast %struct.AVFormatContext* %0 to %struct.AVFormatContext.328*
  %42 = call fastcc %struct.AVChapter* @avpriv_new_chapter(%struct.AVFormatContext.328* %41, i32 %38, i64 4294967296001, i64 %39, i64 %40, i8* nonnull %8) #18
  br label %44

43:                                               ; preds = %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #18
  br label %44

44:                                               ; preds = %43, %35, %5
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_id3v2_free_extra_meta(%struct.ID3v2ExtraMeta** nocapture readonly) unnamed_addr #5 {
  %2 = alloca %struct.ID3v2ExtraMeta*, align 8
  %3 = bitcast %struct.ID3v2ExtraMeta** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #18
  %4 = bitcast %struct.ID3v2ExtraMeta** %0 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !27
  %6 = bitcast %struct.ID3v2ExtraMeta** %2 to i64*
  store i64 %5, i64* %6, align 8, !tbaa !27
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %1, %29
  %8 = phi i64 [ %33, %29 ], [ %5, %1 ]
  %9 = inttoptr i64 %8 to %struct.ID3v2ExtraMeta*
  %10 = getelementptr inbounds %struct.ID3v2ExtraMeta, %struct.ID3v2ExtraMeta* %9, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8, !tbaa !390
  %12 = icmp eq i8* %11, null
  br i1 %12, label %29, label %13

13:                                               ; preds = %.preheader
  %14 = tail call i32 @bcmp(i8* nonnull %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.101.1830, i64 0, i64 0), i64 4) #18
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %13
  %17 = tail call i32 @bcmp(i8* nonnull %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60.1831, i64 0, i64 0), i64 4) #18
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = tail call i32 @bcmp(i8* nonnull %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.103.1833, i64 0, i64 0), i64 4) #18
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %19, %16, %13
  %23 = phi %struct.ID3v2EMFunc* [ getelementptr inbounds ([4 x %struct.ID3v2EMFunc], [4 x %struct.ID3v2EMFunc]* @id3v2_extra_meta_funcs, i64 0, i64 1), %16 ], [ getelementptr inbounds ([4 x %struct.ID3v2EMFunc], [4 x %struct.ID3v2EMFunc]* @id3v2_extra_meta_funcs, i64 0, i64 0), %13 ], [ getelementptr inbounds ([4 x %struct.ID3v2EMFunc], [4 x %struct.ID3v2EMFunc]* @id3v2_extra_meta_funcs, i64 0, i64 2), %19 ]
  %24 = getelementptr inbounds %struct.ID3v2EMFunc, %struct.ID3v2EMFunc* %23, i64 0, i32 3
  %25 = load void (i8*)*, void (i8*)** %24, align 8, !tbaa !405
  %26 = getelementptr inbounds %struct.ID3v2ExtraMeta, %struct.ID3v2ExtraMeta* %9, i64 0, i32 1
  %27 = load i8*, i8** %26, align 8, !tbaa !392
  tail call void %25(i8* %27) #18
  %28 = load %struct.ID3v2ExtraMeta*, %struct.ID3v2ExtraMeta** %2, align 8, !tbaa !27
  br label %29

29:                                               ; preds = %22, %19, %.preheader
  %30 = phi %struct.ID3v2ExtraMeta* [ %9, %.preheader ], [ %9, %19 ], [ %28, %22 ]
  %31 = getelementptr inbounds %struct.ID3v2ExtraMeta, %struct.ID3v2ExtraMeta* %30, i64 0, i32 2
  %32 = bitcast %struct.ID3v2ExtraMeta** %31 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !393
  call fastcc void @av_freep(i8* nonnull %3) #18
  store i64 %33, i64* %6, align 8, !tbaa !27
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %29, %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_id3v2_parse_apic(%struct.AVFormatContext* nocapture, %struct.ID3v2ExtraMeta** nocapture readonly) unnamed_addr #5 {
  %3 = load %struct.ID3v2ExtraMeta*, %struct.ID3v2ExtraMeta** %1, align 8, !tbaa !27
  %4 = icmp eq %struct.ID3v2ExtraMeta* %3, null
  br i1 %4, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %2
  %5 = bitcast %struct.AVFormatContext* %0 to %struct.AVFormatContext.328*
  br label %6

6:                                                ; preds = %.preheader, %52
  %7 = phi %struct.ID3v2ExtraMeta* [ %54, %52 ], [ %3, %.preheader ]
  %8 = getelementptr inbounds %struct.ID3v2ExtraMeta, %struct.ID3v2ExtraMeta* %7, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8, !tbaa !390
  %10 = tail call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60.1831, i64 0, i64 0)) #28
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %52

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.ID3v2ExtraMeta, %struct.ID3v2ExtraMeta* %7, i64 0, i32 1
  %14 = bitcast i8** %13 to %struct.ID3v2ExtraMetaAPIC**
  %15 = load %struct.ID3v2ExtraMetaAPIC*, %struct.ID3v2ExtraMetaAPIC** %14, align 8, !tbaa !392
  %16 = tail call fastcc %struct.AVStream* @avformat_new_stream(%struct.AVFormatContext.328* %5, %struct.AVCodec* null) #18
  %17 = icmp eq %struct.AVStream* %16, null
  br i1 %17, label %.loopexit, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 10
  %20 = load i32, i32* %19, align 8, !tbaa !406
  %21 = or i32 %20, 1024
  store i32 %21, i32* %19, align 8, !tbaa !406
  %22 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 2
  %23 = load %struct.AVCodecContext*, %struct.AVCodecContext** %22, align 8, !tbaa !378
  %24 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %23, i64 0, i32 2
  store i32 0, i32* %24, align 4, !tbaa !136
  %25 = getelementptr inbounds %struct.ID3v2ExtraMetaAPIC, %struct.ID3v2ExtraMetaAPIC* %15, i64 0, i32 4
  %26 = load i32, i32* %25, align 8, !tbaa !399
  %27 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %23, i64 0, i32 5
  store i32 %26, i32* %27, align 8, !tbaa !238
  %28 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 13
  %29 = getelementptr inbounds %struct.ID3v2ExtraMetaAPIC, %struct.ID3v2ExtraMetaAPIC* %15, i64 0, i32 3
  %30 = load i8*, i8** %29, align 8, !tbaa !407
  %31 = tail call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %28, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11.1742, i64 0, i64 0), i8* %30, i32 0) #18
  %32 = getelementptr inbounds %struct.ID3v2ExtraMetaAPIC, %struct.ID3v2ExtraMetaAPIC* %15, i64 0, i32 2
  %33 = load i8*, i8** %32, align 8, !tbaa !401
  %34 = tail call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %28, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61.1839, i64 0, i64 0), i8* %33, i32 0) #18
  %35 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 15
  %36 = bitcast %struct.AVPacket* %35 to %struct.AVPacket.21*
  tail call void @av_init_packet(%struct.AVPacket.21* nonnull %36) #18
  %37 = getelementptr inbounds %struct.ID3v2ExtraMetaAPIC, %struct.ID3v2ExtraMetaAPIC* %15, i64 0, i32 0
  %38 = bitcast %struct.ID3v2ExtraMetaAPIC* %15 to i64*
  %39 = load i64, i64* %38, align 8, !tbaa !403
  %40 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 15, i32 2
  %41 = bitcast i8** %40 to i64*
  store i64 %39, i64* %41, align 8, !tbaa !408
  %42 = getelementptr inbounds %struct.ID3v2ExtraMetaAPIC, %struct.ID3v2ExtraMetaAPIC* %15, i64 0, i32 1
  %43 = load i32, i32* %42, align 8, !tbaa !402
  %44 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 15, i32 3
  store i32 %43, i32* %44, align 8, !tbaa !409
  %45 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 15, i32 9
  store void (%struct.AVPacket*)* bitcast (void (%struct.AVPacket.21*)* @av_destruct_packet to void (%struct.AVPacket*)*), void (%struct.AVPacket*)** %45, align 8, !tbaa !410
  %46 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 0
  %47 = load i32, i32* %46, align 8, !tbaa !411
  %48 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 15, i32 4
  store i32 %47, i32* %48, align 4, !tbaa !412
  %49 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %16, i64 0, i32 15, i32 5
  %50 = load i32, i32* %49, align 8, !tbaa !413
  %51 = or i32 %50, 1
  store i32 %51, i32* %49, align 8, !tbaa !413
  store i8* null, i8** %37, align 8, !tbaa !403
  store i32 0, i32* %42, align 8, !tbaa !402
  br label %52

52:                                               ; preds = %18, %6
  %53 = getelementptr inbounds %struct.ID3v2ExtraMeta, %struct.ID3v2ExtraMeta* %7, i64 0, i32 2
  %54 = load %struct.ID3v2ExtraMeta*, %struct.ID3v2ExtraMeta** %53, align 8, !tbaa !27
  %55 = icmp eq %struct.ID3v2ExtraMeta* %54, null
  br i1 %55, label %.loopexit, label %6

.loopexit:                                        ; preds = %52, %12, %2
  %56 = phi i32 [ 0, %2 ], [ 0, %52 ], [ -12, %12 ]
  ret i32 %56
}

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_metadata_conv(%struct.AVDictionary** nocapture, %struct.AVCodecDefault* readonly) unnamed_addr #5 {
  %3 = alloca %struct.AVDictionary*, align 8
  %4 = bitcast %struct.AVDictionary** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #18
  store %struct.AVDictionary* null, %struct.AVDictionary** %3, align 8, !tbaa !27
  %5 = icmp eq %struct.AVCodecDefault* %1, null
  br i1 %5, label %40, label %6

6:                                                ; preds = %2
  %7 = load %struct.AVDictionary*, %struct.AVDictionary** %0, align 8, !tbaa !27
  %8 = tail call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1842, i64 0, i64 0), %struct.AVCodecDefault* null, i32 2) #18
  %9 = icmp eq %struct.AVCodecDefault* %8, null
  br i1 %9, label %.loopexit1, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %1, i64 0, i32 0
  br label %12

12:                                               ; preds = %10, %.loopexit
  %13 = phi %struct.AVCodecDefault* [ %35, %.loopexit ], [ %8, %10 ]
  %14 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %13, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8, !tbaa !414
  %16 = load i8*, i8** %11, align 8, !tbaa !415
  %17 = icmp eq i8* %16, null
  br i1 %17, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %12, %25
  %18 = phi i8* [ %28, %25 ], [ %16, %12 ]
  %19 = phi %struct.AVCodecDefault* [ %26, %25 ], [ %1, %12 ]
  %20 = tail call fastcc i32 @av_strcasecmp(i8* %15, i8* nonnull %18) #18
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %.preheader
  %23 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %19, i64 0, i32 1
  %24 = load i8*, i8** %23, align 8, !tbaa !417
  br label %.loopexit

25:                                               ; preds = %.preheader
  %26 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %19, i64 1
  %27 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %26, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8, !tbaa !415
  %29 = icmp eq i8* %28, null
  br i1 %29, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %25, %12, %22
  %30 = phi i8* [ %24, %22 ], [ %15, %12 ], [ %15, %25 ]
  %31 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %13, i64 0, i32 1
  %32 = load i8*, i8** %31, align 8, !tbaa !384
  %33 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %3, i8* %30, i8* %32, i32 0) #18
  %34 = load %struct.AVDictionary*, %struct.AVDictionary** %0, align 8, !tbaa !27
  %35 = tail call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %34, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1842, i64 0, i64 0), %struct.AVCodecDefault* %13, i32 2) #18
  %36 = icmp eq %struct.AVCodecDefault* %35, null
  br i1 %36, label %.loopexit1, label %12

.loopexit1:                                       ; preds = %.loopexit, %6
  tail call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %0) #18
  %37 = bitcast %struct.AVDictionary** %3 to i64*
  %38 = load i64, i64* %37, align 8, !tbaa !27
  %39 = bitcast %struct.AVDictionary** %0 to i64*
  store i64 %38, i64* %39, align 8, !tbaa !27
  br label %40

40:                                               ; preds = %.loopexit1, %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #18
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal i32 @null_write_packet(%struct.AVFormatContext.579* nocapture readnone, %struct.AVPacket* nocapture readnone) #11 {
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.AVFormatContext* @avformat_alloc_context() unnamed_addr #5 {
  %1 = tail call fastcc noalias i8* @av_malloc(i64 1328) #18
  %2 = bitcast i8* %1 to %struct.AVFormatContext*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %0
  %5 = getelementptr inbounds i8, i8* %1, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 1320, i1 false) #18
  %6 = bitcast i8* %1 to %struct.AVClass**
  store %struct.AVClass* @av_format_context_class, %struct.AVClass** %6, align 8, !tbaa !418
  tail call fastcc void @av_opt_set_defaults(i8* nonnull %1) #18
  br label %7

7:                                                ; preds = %4, %0
  ret %struct.AVFormatContext* %2
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i8* @format_to_name(i8* nocapture readonly) #15 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to %struct.AVInputFormat**
  %4 = load %struct.AVInputFormat*, %struct.AVInputFormat** %3, align 8, !tbaa !419
  %5 = icmp eq %struct.AVInputFormat* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %4, i64 0, i32 0
  br label %15

8:                                                ; preds = %1
  %9 = getelementptr inbounds i8, i8* %0, i64 16
  %10 = bitcast i8* %9 to %struct.AVOutputFormat**
  %11 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %10, align 8, !tbaa !420
  %12 = icmp eq %struct.AVOutputFormat* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %11, i64 0, i32 0
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i8** [ %14, %13 ], [ %7, %6 ]
  %17 = load i8*, i8** %16, align 8, !tbaa !27
  br label %18

18:                                               ; preds = %15, %8
  %19 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.1945, i64 0, i64 0), %8 ], [ %17, %15 ]
  ret i8* %19
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i8* @format_child_next(i8* nocapture readonly, i8* readnone) #15 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %27

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 24
  %6 = bitcast i8* %5 to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !372
  %8 = icmp eq i8* %7, null
  br i1 %8, label %27, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to %struct.AVInputFormat**
  %12 = load %struct.AVInputFormat*, %struct.AVInputFormat** %11, align 8, !tbaa !419
  %13 = icmp eq %struct.AVInputFormat* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %12, i64 0, i32 5
  %16 = load %struct.AVClass*, %struct.AVClass** %15, align 8, !tbaa !421
  %17 = icmp eq %struct.AVClass* %16, null
  br i1 %17, label %18, label %40

18:                                               ; preds = %14, %9
  %19 = getelementptr inbounds i8, i8* %0, i64 16
  %20 = bitcast i8* %19 to %struct.AVOutputFormat**
  %21 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %20, align 8, !tbaa !420
  %22 = icmp eq %struct.AVOutputFormat* %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %21, i64 0, i32 9
  %25 = load %struct.AVClass*, %struct.AVClass** %24, align 8, !tbaa !423
  %26 = icmp eq %struct.AVClass* %25, null
  br i1 %26, label %27, label %40

27:                                               ; preds = %23, %18, %4, %2
  %28 = getelementptr inbounds i8, i8* %0, i64 32
  %29 = bitcast i8* %28 to %struct.AVIOContext**
  %30 = load %struct.AVIOContext*, %struct.AVIOContext** %29, align 8, !tbaa !374
  %31 = icmp eq %struct.AVIOContext* %30, null
  br i1 %31, label %39, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %30, i64 0, i32 0
  %34 = load %struct.AVClass*, %struct.AVClass** %33, align 8, !tbaa !339
  %35 = icmp eq %struct.AVClass* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %32
  %37 = bitcast %struct.AVIOContext* %30 to i8*
  %38 = icmp eq i8* %37, %1
  br i1 %38, label %39, label %40

39:                                               ; preds = %36, %32, %27
  br label %40

40:                                               ; preds = %39, %36, %23, %14
  %41 = phi i8* [ null, %39 ], [ %37, %36 ], [ %7, %14 ], [ %7, %23 ]
  ret i8* %41
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal %struct.AVClass* @format_child_class_next(%struct.AVClass* readnone) #15 {
  %2 = icmp eq %struct.AVClass* %0, null
  br i1 %2, label %.loopexit, label %.preheader10

.preheader10:                                     ; preds = %1, %6
  %3 = phi %struct.AVInputFormat.329* [ %4, %6 ], [ null, %1 ]
  %4 = tail call fastcc %struct.AVInputFormat.329* @av_iformat_next(%struct.AVInputFormat.329* %3) #18
  %5 = icmp eq %struct.AVInputFormat.329* %4, null
  br i1 %5, label %.preheader, label %6

6:                                                ; preds = %.preheader10
  %7 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %4, i64 0, i32 5
  %8 = load %struct.AVClass*, %struct.AVClass** %7, align 8, !tbaa !421
  %9 = icmp eq %struct.AVClass* %8, %0
  br i1 %9, label %.loopexit8.preheader, label %.preheader10

.preheader:                                       ; preds = %.preheader10, %13
  %10 = phi %struct.AVOutputFormat.301* [ %11, %13 ], [ null, %.preheader10 ]
  %11 = tail call fastcc %struct.AVOutputFormat.301* @av_oformat_next(%struct.AVOutputFormat.301* %10) #18
  %12 = icmp eq %struct.AVOutputFormat.301* %11, null
  br i1 %12, label %.loopexit8.preheader, label %13

.loopexit8.preheader:                             ; preds = %6, %.preheader
  %.ph38 = phi %struct.AVInputFormat.329* [ null, %.preheader ], [ %4, %6 ]
  br label %.loopexit8

13:                                               ; preds = %.preheader
  %14 = getelementptr inbounds %struct.AVOutputFormat.301, %struct.AVOutputFormat.301* %11, i64 0, i32 9
  %15 = load %struct.AVClass*, %struct.AVClass** %14, align 8, !tbaa !423
  %16 = icmp eq %struct.AVClass* %15, %0
  br i1 %16, label %.loopexit6.preheader, label %.preheader

.loopexit8:                                       ; preds = %.loopexit8.preheader, %20
  %17 = phi %struct.AVInputFormat.329* [ %18, %20 ], [ %.ph38, %.loopexit8.preheader ]
  %18 = tail call fastcc %struct.AVInputFormat.329* @av_iformat_next(%struct.AVInputFormat.329* %17) #18
  %19 = icmp eq %struct.AVInputFormat.329* %18, null
  br i1 %19, label %.loopexit6.preheader, label %20

.loopexit6.preheader:                             ; preds = %13, %.loopexit8
  %.ph = phi %struct.AVOutputFormat.301* [ null, %.loopexit8 ], [ %11, %13 ]
  br label %.loopexit6

20:                                               ; preds = %.loopexit8
  %21 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %18, i64 0, i32 5
  %22 = load %struct.AVClass*, %struct.AVClass** %21, align 8, !tbaa !421
  %23 = icmp eq %struct.AVClass* %22, null
  br i1 %23, label %.loopexit8, label %.loopexit

.loopexit6:                                       ; preds = %.loopexit6.preheader, %27
  %24 = phi %struct.AVOutputFormat.301* [ %25, %27 ], [ %.ph, %.loopexit6.preheader ]
  %25 = tail call fastcc %struct.AVOutputFormat.301* @av_oformat_next(%struct.AVOutputFormat.301* %24) #18
  %26 = icmp eq %struct.AVOutputFormat.301* %25, null
  br i1 %26, label %.loopexit, label %27

27:                                               ; preds = %.loopexit6
  %28 = getelementptr inbounds %struct.AVOutputFormat.301, %struct.AVOutputFormat.301* %25, i64 0, i32 9
  %29 = load %struct.AVClass*, %struct.AVClass** %28, align 8, !tbaa !423
  %30 = icmp eq %struct.AVClass* %29, null
  br i1 %30, label %.loopexit6, label %.loopexit

.loopexit:                                        ; preds = %20, %27, %.loopexit6, %1
  %31 = phi %struct.AVClass* [ bitcast ({ i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass.334* (%struct.AVClass.334*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }* @ffio_url_class to %struct.AVClass*), %1 ], [ %29, %27 ], [ null, %.loopexit6 ], [ %22, %20 ]
  ret %struct.AVClass* %31
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal i32 @get_category.1869(i8* nocapture readonly) #15 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to %struct.AVInputFormat**
  %4 = load %struct.AVInputFormat*, %struct.AVInputFormat** %3, align 8, !tbaa !419
  %5 = icmp eq %struct.AVInputFormat* %4, null
  %6 = select i1 %5, i32 3, i32 4
  ret i32 %6
}

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() local_unnamed_addr #19

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc %struct.AVInputFormat.329* @av_iformat_next(%struct.AVInputFormat.329* readonly) unnamed_addr #15 {
  %2 = icmp eq %struct.AVInputFormat.329* %0, null
  %3 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %0, i64 0, i32 6
  %4 = select i1 %2, %struct.AVInputFormat.329** @first_iformat, %struct.AVInputFormat.329** %3
  %5 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %4, align 8, !tbaa !27
  ret %struct.AVInputFormat.329* %5
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc %struct.AVOutputFormat.301* @av_oformat_next(%struct.AVOutputFormat.301* readonly) unnamed_addr #15 {
  %2 = icmp eq %struct.AVOutputFormat.301* %0, null
  %3 = getelementptr inbounds %struct.AVOutputFormat.301, %struct.AVOutputFormat.301* %0, i64 0, i32 10
  %4 = select i1 %2, %struct.AVOutputFormat.301** @first_oformat, %struct.AVOutputFormat.301** %3
  %5 = load %struct.AVOutputFormat.301*, %struct.AVOutputFormat.301** %4, align 8, !tbaa !27
  ret %struct.AVOutputFormat.301* %5
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @av_register_input_format() unnamed_addr #9 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi %struct.AVInputFormat.329** [ @first_iformat, %0 ], [ %5, %1 ]
  %3 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %2, align 8, !tbaa !27
  %4 = icmp eq %struct.AVInputFormat.329* %3, null
  %5 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %3, i64 0, i32 6
  br i1 %4, label %6, label %1

6:                                                ; preds = %1
  store %struct.AVInputFormat.329* bitcast (%struct.AVInputFormat.397* @ff_gif_demuxer to %struct.AVInputFormat.329*), %struct.AVInputFormat.329** %2, align 8, !tbaa !27
  store %struct.AVInputFormat.329* null, %struct.AVInputFormat.329** bitcast (%struct.AVInputFormat.397** getelementptr inbounds (%struct.AVInputFormat.397, %struct.AVInputFormat.397* @ff_gif_demuxer, i64 0, i32 6) to %struct.AVInputFormat.329**), align 8, !tbaa !425
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @av_register_output_format() unnamed_addr #9 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi %struct.AVOutputFormat.301** [ @first_oformat, %0 ], [ %5, %1 ]
  %3 = load %struct.AVOutputFormat.301*, %struct.AVOutputFormat.301** %2, align 8, !tbaa !27
  %4 = icmp eq %struct.AVOutputFormat.301* %3, null
  %5 = getelementptr inbounds %struct.AVOutputFormat.301, %struct.AVOutputFormat.301* %3, i64 0, i32 10
  br i1 %4, label %6, label %1

6:                                                ; preds = %1
  store %struct.AVOutputFormat.301* bitcast (%struct.AVOutputFormat.580* @ff_null_muxer to %struct.AVOutputFormat.301*), %struct.AVOutputFormat.301** %2, align 8, !tbaa !27
  store %struct.AVOutputFormat.301* null, %struct.AVOutputFormat.301** bitcast (%struct.AVOutputFormat.580** getelementptr inbounds (%struct.AVOutputFormat.580, %struct.AVOutputFormat.580* @ff_null_muxer, i64 0, i32 10) to %struct.AVOutputFormat.301**), align 8, !tbaa !426
  ret void
}

; Function Attrs: nofree nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) local_unnamed_addr #10

; Function Attrs: nounwind readonly uwtable
define internal fastcc %struct.AVInputFormat.329* @av_find_input_format() unnamed_addr #22 {
  br label %1

1:                                                ; preds = %0, %34
  %2 = phi %struct.AVInputFormat.329* [ %6, %34 ], [ null, %0 ]
  %3 = icmp eq %struct.AVInputFormat.329* %2, null
  %4 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %2, i64 0, i32 6
  %5 = select i1 %3, %struct.AVInputFormat.329** @first_iformat, %struct.AVInputFormat.329** %4
  %6 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %5, align 8, !tbaa !27
  %7 = icmp eq %struct.AVInputFormat.329* %6, null
  br i1 %7, label %.loopexit, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %6, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8, !tbaa !427
  %11 = icmp eq i8* %10, null
  br i1 %11, label %34, label %12

12:                                               ; preds = %8
  %13 = tail call i8* @strchr(i8* nonnull %10, i32 44) #28
  %14 = icmp eq i8* %13, null
  br i1 %14, label %.loopexit1, label %.preheader

.preheader:                                       ; preds = %12, %27
  %15 = phi i8* [ %28, %27 ], [ %13, %12 ]
  %16 = phi i8* [ %26, %27 ], [ %10, %12 ]
  %17 = ptrtoint i8* %15 to i64
  %18 = ptrtoint i8* %16 to i64
  %19 = sub i64 %17, %18
  %20 = icmp sgt i64 %19, 3
  %21 = select i1 %20, i64 %19, i64 3
  %22 = shl i64 %21, 32
  %23 = ashr exact i64 %22, 32
  %24 = tail call fastcc i32 @av_strncasecmp(i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8.1997, i64 0, i64 0), i8* nonnull %16, i64 %23) #18
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds i8, i8* %15, i64 1
  br i1 %25, label %.loopexit, label %27

27:                                               ; preds = %.preheader
  %28 = tail call i8* @strchr(i8* nonnull %26, i32 44) #28
  %29 = icmp eq i8* %28, null
  br i1 %29, label %.loopexit1, label %.preheader

.loopexit1:                                       ; preds = %27, %12
  %30 = phi i8* [ %10, %12 ], [ %26, %27 ]
  %31 = tail call fastcc i32 @av_strcasecmp(i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8.1997, i64 0, i64 0), i8* nonnull %30) #18
  %32 = icmp eq i32 %31, 0
  %33 = zext i1 %32 to i32
  br label %34

34:                                               ; preds = %.loopexit1, %8
  %35 = phi i32 [ %33, %.loopexit1 ], [ 0, %8 ]
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %1, label %.loopexit

.loopexit:                                        ; preds = %34, %1, %.preheader
  ret %struct.AVInputFormat.329* %6
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ffio_limit(%struct.AVIOContext*, i32) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %0, i64 0, i32 21
  %4 = load i64, i64* %3, align 8, !tbaa !428
  %5 = icmp sgt i64 %4, -1
  br i1 %5, label %6, label %39

6:                                                ; preds = %2
  %7 = bitcast %struct.AVIOContext* %0 to %struct.AVIOContext.335*
  %8 = tail call fastcc i64 @avio_seek(%struct.AVIOContext.335* nonnull %7, i64 0, i32 1) #18
  %9 = sub nsw i64 %4, %8
  %10 = sext i32 %1 to i64
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %12, label %28

12:                                               ; preds = %6
  %13 = tail call fastcc i64 @avio_size(%struct.AVIOContext.335* nonnull %7) #18
  %14 = load i64, i64* %3, align 8, !tbaa !428
  %15 = icmp eq i64 %14, 0
  %16 = icmp slt i64 %14, %13
  %17 = or i1 %15, %16
  br i1 %17, label %18, label %22

18:                                               ; preds = %12
  %19 = icmp eq i64 %13, 0
  %20 = zext i1 %19 to i64
  %21 = sub nsw i64 %13, %20
  store i64 %21, i64* %3, align 8, !tbaa !428
  br label %22

22:                                               ; preds = %18, %12
  %23 = phi i64 [ %14, %12 ], [ %21, %18 ]
  %24 = tail call fastcc i64 @avio_seek(%struct.AVIOContext.335* nonnull %7, i64 0, i32 1) #18
  %25 = sub nsw i64 %23, %24
  %26 = icmp sgt i64 %25, 0
  %27 = select i1 %26, i64 %25, i64 0
  br label %28

28:                                               ; preds = %22, %6
  %29 = phi i64 [ %27, %22 ], [ %9, %6 ]
  %30 = load i64, i64* %3, align 8, !tbaa !428
  %31 = icmp sgt i64 %30, -1
  br i1 %31, label %32, label %39

32:                                               ; preds = %28
  %33 = add nsw i64 %29, 1
  %34 = icmp slt i64 %33, %10
  br i1 %34, label %35, label %39

35:                                               ; preds = %32
  %36 = icmp eq i64 %29, 0
  %37 = select i1 %36, i32 48, i32 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %37, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.1988, i64 0, i64 0), i32 %1, i64 %33) #18
  %38 = trunc i64 %33 to i32
  br label %39

39:                                               ; preds = %35, %32, %28, %2
  %40 = phi i32 [ %1, %2 ], [ %38, %35 ], [ %1, %32 ], [ %1, %28 ]
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_get_packet(%struct.AVIOContext*, %struct.AVPacket*, i32) unnamed_addr #5 {
  %4 = tail call fastcc i32 @ffio_limit(%struct.AVIOContext* %0, i32 %2)
  %5 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  %6 = tail call fastcc i32 @av_new_packet(%struct.AVPacket.21* %5, i32 %4) #18
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %26, label %8

8:                                                ; preds = %3
  %9 = bitcast %struct.AVIOContext* %0 to %struct.AVIOContext.335*
  %10 = tail call fastcc i64 @avio_seek(%struct.AVIOContext.335* %9, i64 0, i32 1) #18
  %11 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 11
  store i64 %10, i64* %11, align 8, !tbaa !20
  %12 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 2
  %13 = load i8*, i8** %12, align 8, !tbaa !16
  %14 = tail call fastcc i32 @avio_read(%struct.AVIOContext.335* %9, i8* %13, i32 %4) #18
  %15 = icmp slt i32 %14, 1
  br i1 %15, label %16, label %17

16:                                               ; preds = %8
  tail call void @av_free_packet(%struct.AVPacket.21* nonnull %5) #18
  br label %18

17:                                               ; preds = %8
  tail call fastcc void @av_shrink_packet(%struct.AVPacket.21* nonnull %5, i32 %14) #18
  br label %18

18:                                               ; preds = %17, %16
  %19 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 3
  %20 = load i32, i32* %19, align 8, !tbaa !17
  %21 = icmp slt i32 %20, %2
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 5
  %24 = load i32, i32* %23, align 8, !tbaa !22
  %25 = or i32 %24, 2
  store i32 %25, i32* %23, align 8, !tbaa !22
  br label %26

26:                                               ; preds = %22, %18, %3
  %27 = phi i32 [ %6, %3 ], [ %14, %22 ], [ %14, %18 ]
  ret i32 %27
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_get_frame_filename(i8*, i8* nocapture readonly) unnamed_addr #5 {
  %3 = alloca [20 x i8], align 16
  %4 = getelementptr inbounds [20 x i8], [20 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %4) #18
  %5 = ptrtoint i8* %0 to i64
  br label %6

6:                                                ; preds = %60, %2
  %7 = phi i8* [ %1, %2 ], [ %50, %60 ]
  %8 = phi i8* [ %0, %2 ], [ %61, %60 ]
  %9 = phi i32 [ 0, %2 ], [ 1, %60 ]
  br label %10

10:                                               ; preds = %65, %6
  %11 = phi i8* [ %63, %65 ], [ %7, %6 ]
  %12 = phi i8* [ %66, %65 ], [ %8, %6 ]
  %13 = ptrtoint i8* %12 to i64
  %14 = sub i64 %13, %5
  %15 = icmp slt i64 %14, 1023
  br label %16

16:                                               ; preds = %62, %10
  %17 = phi i8* [ %63, %62 ], [ %11, %10 ]
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  %19 = load i8, i8* %17, align 1, !tbaa !33
  switch i8 %19, label %62 [
    i8 0, label %67
    i8 37, label %20
  ]

20:                                               ; preds = %16
  %21 = tail call i16** @__ctype_b_loc() #29
  %22 = load i16*, i16** %21, align 8, !tbaa !27
  %23 = load i8, i8* %18, align 1, !tbaa !33
  %24 = sext i8 %23 to i32
  %25 = sext i8 %23 to i64
  %26 = getelementptr inbounds i16, i16* %22, i64 %25
  %27 = load i16, i16* %26, align 2, !tbaa !123
  %28 = and i16 %27, 2048
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %45, label %.preheader

.preheader:                                       ; preds = %20, %.preheader
  %30 = phi i32 [ %38, %.preheader ], [ %24, %20 ]
  %31 = phi i32 [ %36, %.preheader ], [ 0, %20 ]
  %32 = phi i8* [ %34, %.preheader ], [ %18, %20 ]
  %33 = mul nsw i32 %31, 10
  %34 = getelementptr inbounds i8, i8* %32, i64 1
  %35 = add nsw i32 %30, -48
  %36 = add i32 %35, %33
  %37 = load i8, i8* %34, align 1, !tbaa !33
  %38 = sext i8 %37 to i32
  %39 = sext i8 %37 to i64
  %40 = getelementptr inbounds i16, i16* %22, i64 %39
  %41 = load i16, i16* %40, align 2, !tbaa !123
  %42 = and i16 %41, 2048
  %43 = icmp eq i16 %42, 0
  br i1 %43, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.preheader
  %44 = sext i8 %37 to i32
  br label %45

45:                                               ; preds = %.loopexit, %20
  %46 = phi i8* [ %17, %20 ], [ %32, %.loopexit ]
  %47 = phi i32 [ 0, %20 ], [ %36, %.loopexit ]
  %48 = phi i8 [ %23, %20 ], [ %37, %.loopexit ]
  %49 = phi i32 [ %24, %20 ], [ %44, %.loopexit ]
  %50 = getelementptr inbounds i8, i8* %46, i64 2
  switch i32 %49, label %.loopexit1 [
    i32 37, label %62
    i32 100, label %51
  ]

51:                                               ; preds = %45
  %52 = icmp eq i32 %9, 0
  br i1 %52, label %53, label %.loopexit1

53:                                               ; preds = %51
  %54 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %4, i64 20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67.1991, i64 0, i64 0), i32 %47, i32 1) #18
  %55 = call i64 @strlen(i8* nonnull %4) #28
  %56 = shl i64 %55, 32
  %57 = ashr exact i64 %56, 32
  %58 = add nsw i64 %57, %14
  %59 = icmp sgt i64 %58, 1023
  br i1 %59, label %.loopexit1, label %60

60:                                               ; preds = %53
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* nonnull align 16 %4, i64 %57, i1 false)
  %61 = getelementptr inbounds i8, i8* %12, i64 %57
  br label %6

62:                                               ; preds = %45, %16
  %63 = phi i8* [ %50, %45 ], [ %18, %16 ]
  %64 = phi i8 [ %48, %45 ], [ %19, %16 ]
  br i1 %15, label %65, label %16

65:                                               ; preds = %62
  %66 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %64, i8* %12, align 1, !tbaa !33
  br label %10

67:                                               ; preds = %16
  %68 = icmp eq i32 %9, 0
  br i1 %68, label %.loopexit1, label %69

.loopexit1:                                       ; preds = %53, %51, %45, %67
  br label %69

69:                                               ; preds = %.loopexit1, %67
  %70 = phi i32 [ -1, %.loopexit1 ], [ 0, %67 ]
  store i8 0, i8* %12, align 1, !tbaa !33
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %4) #18
  ret i32 %70
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.AVInputFormat.329* @av_probe_input_format3(%struct.AVProbeData* nocapture readonly, i32, i32* nocapture) unnamed_addr #5 {
  %4 = alloca [32 x i8], align 16
  %5 = alloca %struct.AVProbeData, align 8
  %6 = bitcast %struct.AVProbeData* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #18
  %7 = bitcast %struct.AVProbeData* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %7, i64 24, i1 false), !tbaa.struct !429
  %8 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %5, i64 0, i32 1
  %9 = load i8*, i8** %8, align 8, !tbaa !370
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @av_probe_input_format3.zerobuffer, i64 0, i64 0), i8** %8, align 8, !tbaa !370
  br label %12

12:                                               ; preds = %11, %3
  %13 = phi i8* [ %9, %3 ], [ getelementptr inbounds ([32 x i8], [32 x i8]* @av_probe_input_format3.zerobuffer, i64 0, i64 0), %11 ]
  %14 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %5, i64 0, i32 2
  %15 = load i32, i32* %14, align 8, !tbaa !430
  %16 = icmp sgt i32 %15, 10
  br i1 %16, label %17, label %28

17:                                               ; preds = %12
  %18 = tail call fastcc i32 @ff_id3v2_match(i8* %13) #18
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %17
  %21 = tail call fastcc i32 @ff_id3v2_tag_len(i8* %13) #18
  %22 = add nsw i32 %21, 16
  %23 = icmp sgt i32 %15, %22
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = sext i32 %21 to i64
  %26 = getelementptr inbounds i8, i8* %13, i64 %25
  store i8* %26, i8** %8, align 8, !tbaa !370
  %27 = sub nsw i32 %15, %21
  store i32 %27, i32* %14, align 8, !tbaa !430
  br label %28

28:                                               ; preds = %24, %20, %17, %12
  %29 = phi i32 [ 1, %17 ], [ 1, %12 ], [ 1, %24 ], [ 24, %20 ]
  %30 = icmp eq i32 %1, 0
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %5, i64 0, i32 0
  %33 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 0
  %34 = ptrtoint [32 x i8]* %4 to i64
  br label %35

35:                                               ; preds = %123, %28
  %36 = phi %struct.AVInputFormat.329* [ %128, %123 ], [ null, %28 ]
  %37 = phi i32 [ %129, %123 ], [ 0, %28 ]
  %38 = phi %struct.AVInputFormat.329* [ %44, %123 ], [ null, %28 ]
  br label %39

39:                                               ; preds = %46, %35
  %40 = phi %struct.AVInputFormat.329* [ %44, %46 ], [ %38, %35 ]
  %41 = icmp eq %struct.AVInputFormat.329* %40, null
  %42 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %40, i64 0, i32 6
  %43 = select i1 %41, %struct.AVInputFormat.329** @first_iformat, %struct.AVInputFormat.329** %42
  %44 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %43, align 8, !tbaa !27
  %45 = icmp eq %struct.AVInputFormat.329* %44, null
  br i1 %45, label %130, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %44, i64 0, i32 2
  %48 = load i32, i32* %47, align 8, !tbaa !431
  %49 = and i32 %48, 1
  %50 = xor i32 %49, 1
  %51 = icmp eq i32 %50, %31
  br i1 %51, label %39, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %44, i64 0, i32 9
  %54 = load i32 (%struct.AVProbeData*)*, i32 (%struct.AVProbeData*)** %53, align 8, !tbaa !432
  %55 = icmp eq i32 (%struct.AVProbeData*)* %54, null
  br i1 %55, label %91, label %56

56:                                               ; preds = %52
  %57 = call i32 %54(%struct.AVProbeData* nonnull %5) #18
  %58 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %44, i64 0, i32 3
  %59 = load i8*, i8** %58, align 8, !tbaa !433
  %60 = icmp eq i8* %59, null
  br i1 %60, label %123, label %61

61:                                               ; preds = %56
  %62 = load i8*, i8** %32, align 8, !tbaa !434
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #18
  %63 = icmp eq i8* %62, null
  br i1 %63, label %.loopexit10, label %64

64:                                               ; preds = %61
  %65 = call i8* @strrchr(i8* nonnull %62, i32 46) #28
  %66 = icmp eq i8* %65, null
  br i1 %66, label %.loopexit10, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds i8, i8* %65, i64 1
  br label %69

69:                                               ; preds = %79, %67
  %70 = phi i8* [ %59, %67 ], [ %81, %79 ]
  %71 = phi i8* [ %33, %67 ], [ %80, %79 ]
  %72 = load i8, i8* %70, align 1, !tbaa !33
  switch i8 %72, label %73 [
    i8 0, label %82
    i8 44, label %82
  ]

73:                                               ; preds = %69
  %74 = ptrtoint i8* %71 to i64
  %75 = sub i64 %74, %34
  %76 = icmp ult i64 %75, 31
  br i1 %76, label %77, label %82

77:                                               ; preds = %73
  %78 = getelementptr inbounds i8, i8* %71, i64 1
  store i8 %72, i8* %71, align 1, !tbaa !33
  br label %79

79:                                               ; preds = %85, %77
  %80 = phi i8* [ %78, %77 ], [ %33, %85 ]
  %81 = getelementptr inbounds i8, i8* %70, i64 1
  br label %69

82:                                               ; preds = %73, %69, %69
  store i8 0, i8* %71, align 1, !tbaa !33
  %83 = call fastcc i32 @av_strcasecmp(i8* nonnull %33, i8* nonnull %68) #18
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %88, label %85

85:                                               ; preds = %82
  %86 = load i8, i8* %70, align 1, !tbaa !33
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %.loopexit10, label %79

.loopexit10:                                      ; preds = %85, %64, %61
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #18
  br label %123

88:                                               ; preds = %82
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #18
  %89 = icmp sgt i32 %57, %29
  %90 = select i1 %89, i32 %57, i32 %29
  br label %123

91:                                               ; preds = %52
  %92 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %44, i64 0, i32 3
  %93 = load i8*, i8** %92, align 8, !tbaa !433
  %94 = icmp eq i8* %93, null
  br i1 %94, label %123, label %95

95:                                               ; preds = %91
  %96 = load i8*, i8** %32, align 8, !tbaa !434
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #18
  %97 = icmp eq i8* %96, null
  br i1 %97, label %.loopexit, label %98

98:                                               ; preds = %95
  %99 = call i8* @strrchr(i8* nonnull %96, i32 46) #28
  %100 = icmp eq i8* %99, null
  br i1 %100, label %.loopexit, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds i8, i8* %99, i64 1
  br label %103

103:                                              ; preds = %113, %101
  %104 = phi i8* [ %93, %101 ], [ %115, %113 ]
  %105 = phi i8* [ %33, %101 ], [ %114, %113 ]
  %106 = load i8, i8* %104, align 1, !tbaa !33
  switch i8 %106, label %107 [
    i8 0, label %116
    i8 44, label %116
  ]

107:                                              ; preds = %103
  %108 = ptrtoint i8* %105 to i64
  %109 = sub i64 %108, %34
  %110 = icmp ult i64 %109, 31
  br i1 %110, label %111, label %116

111:                                              ; preds = %107
  %112 = getelementptr inbounds i8, i8* %105, i64 1
  store i8 %106, i8* %105, align 1, !tbaa !33
  br label %113

113:                                              ; preds = %119, %111
  %114 = phi i8* [ %112, %111 ], [ %33, %119 ]
  %115 = getelementptr inbounds i8, i8* %104, i64 1
  br label %103

116:                                              ; preds = %107, %103, %103
  store i8 0, i8* %105, align 1, !tbaa !33
  %117 = call fastcc i32 @av_strcasecmp(i8* nonnull %33, i8* nonnull %102) #18
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %122, label %119

119:                                              ; preds = %116
  %120 = load i8, i8* %104, align 1, !tbaa !33
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %.loopexit, label %113

122:                                              ; preds = %116
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #18
  br label %123

.loopexit:                                        ; preds = %119, %98, %95
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #18
  br label %123

123:                                              ; preds = %.loopexit, %122, %91, %88, %.loopexit10, %56
  %124 = phi i32 [ %90, %88 ], [ %57, %56 ], [ 0, %91 ], [ %57, %.loopexit10 ], [ 0, %.loopexit ], [ 50, %122 ]
  %125 = icmp sgt i32 %124, %37
  %126 = icmp eq i32 %124, %37
  %127 = select i1 %126, %struct.AVInputFormat.329* null, %struct.AVInputFormat.329* %36
  %128 = select i1 %125, %struct.AVInputFormat.329* %44, %struct.AVInputFormat.329* %127
  %129 = select i1 %125, i32 %124, i32 %37
  br label %35

130:                                              ; preds = %39
  store i32 %37, i32* %2, align 4, !tbaa !28
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #18
  ret %struct.AVInputFormat.329* %36
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_probe_input_buffer(%struct.AVIOContext*, %struct.AVInputFormat.329** nocapture, i8*, i8*, i32) unnamed_addr #5 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.AVProbeData, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = bitcast %struct.AVProbeData* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #18
  %11 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %7, i64 0, i32 0
  %12 = icmp eq i8* %2, null
  %13 = select i1 %12, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4.1993, i64 0, i64 0), i8* %2
  store i8* %13, i8** %11, align 8, !tbaa !434
  %14 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %7, i64 0, i32 1
  store i8* null, i8** %14, align 8, !tbaa !370
  %15 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %7, i64 0, i32 2
  store i32 0, i32* %15, align 8, !tbaa !430
  %16 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #18
  store i8* null, i8** %8, align 8, !tbaa !27
  %17 = bitcast i8** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #18
  %18 = add i32 %4, -1
  %19 = icmp ugt i32 %18, 1048575
  br i1 %19, label %23, label %20

20:                                               ; preds = %5
  %21 = icmp ult i32 %4, 2048
  br i1 %21, label %22, label %23

22:                                               ; preds = %20
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 16, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5.1994, i64 0, i64 0), i32 %4, i32 2048) #18
  br label %105

23:                                               ; preds = %5, %20
  %24 = phi i32 [ %4, %20 ], [ 1048576, %5 ]
  %25 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %1, align 8, !tbaa !27
  %26 = icmp eq %struct.AVInputFormat.329* %25, null
  br i1 %26, label %27, label %44

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %0, i64 0, i32 0
  %29 = load %struct.AVClass*, %struct.AVClass** %28, align 8, !tbaa !339
  %30 = icmp eq %struct.AVClass* %29, null
  br i1 %30, label %44, label %31

31:                                               ; preds = %27
  %32 = bitcast %struct.AVIOContext* %0 to i8*
  %33 = call fastcc i32 @av_opt_get(i8* %32, i8** nonnull %9) #18
  %34 = icmp sgt i32 %33, -1
  %35 = load i8*, i8** %9, align 8
  %36 = icmp ne i8* %35, null
  %37 = and i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %31
  %39 = tail call fastcc i32 @av_strcasecmp(i8* nonnull %35, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7.1996, i64 0, i64 0)) #18
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %38
  %42 = tail call fastcc %struct.AVInputFormat.329* @av_find_input_format()
  store %struct.AVInputFormat.329* %42, %struct.AVInputFormat.329** %1, align 8, !tbaa !27
  br label %43

43:                                               ; preds = %41, %38
  call fastcc void @av_freep(i8* nonnull %17) #18
  br label %44

44:                                               ; preds = %43, %31, %27, %23
  %45 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %1, align 8, !tbaa !27
  %46 = icmp eq %struct.AVInputFormat.329* %45, null
  %47 = bitcast i32* %6 to i8*
  %48 = bitcast %struct.AVIOContext* %0 to %struct.AVIOContext.335*
  %.promoted = load i8*, i8** %8, align 8, !tbaa !27
  br label %49

49:                                               ; preds = %89, %44
  %50 = phi i8* [ %.promoted, %44 ], [ %57, %89 ]
  %51 = phi i32 [ 0, %44 ], [ %74, %89 ]
  %52 = phi i1 [ %46, %44 ], [ %98, %89 ]
  %53 = phi i32 [ 2048, %44 ], [ %95, %89 ]
  br i1 %52, label %54, label %.loopexit

54:                                               ; preds = %49
  %55 = add nsw i32 %53, 32
  %56 = sext i32 %55 to i64
  %57 = tail call fastcc i8* @av_realloc(i8* %50, i64 %56) #18
  %58 = icmp eq i8* %57, null
  br i1 %58, label %59, label %60

59:                                               ; preds = %54
  store i8* %50, i8** %8, align 8, !tbaa !27
  tail call fastcc void @av_free(i8* %50) #18
  br label %105

60:                                               ; preds = %54
  %61 = icmp ult i32 %53, %24
  %62 = select i1 %61, i32 25, i32 0
  %63 = sext i32 %51 to i64
  %64 = getelementptr inbounds i8, i8* %57, i64 %63
  %65 = sub nsw i32 %53, %51
  %66 = tail call fastcc i32 @avio_read(%struct.AVIOContext.335* %48, i8* nonnull %64, i32 %65) #18
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %60
  %69 = icmp eq i32 %66, -541478725
  br i1 %69, label %71, label %70

70:                                               ; preds = %68
  store i8* %57, i8** %8, align 8, !tbaa !27
  tail call fastcc void @av_free(i8* nonnull %57) #18
  br label %105

71:                                               ; preds = %68, %60
  %72 = phi i32 [ %62, %60 ], [ 0, %68 ]
  %73 = phi i32 [ %66, %60 ], [ 0, %68 ]
  %74 = add nsw i32 %73, %51
  store i32 %74, i32* %15, align 8, !tbaa !430
  store i8* %57, i8** %14, align 8, !tbaa !370
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %57, i64 %75
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %76, i8 0, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #18
  %77 = call fastcc %struct.AVInputFormat.329* @av_probe_input_format3(%struct.AVProbeData* nonnull %7, i32 1, i32* nonnull %6) #18
  %78 = load i32, i32* %6, align 4, !tbaa !28
  %79 = icmp sgt i32 %78, %72
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #18
  br i1 %79, label %81, label %80

80:                                               ; preds = %71
  store %struct.AVInputFormat.329* null, %struct.AVInputFormat.329** %1, align 8, !tbaa !27
  br label %89

81:                                               ; preds = %71
  store %struct.AVInputFormat.329* %77, %struct.AVInputFormat.329** %1, align 8, !tbaa !27
  %82 = icmp eq %struct.AVInputFormat.329* %77, null
  br i1 %82, label %89, label %83

83:                                               ; preds = %81
  %84 = icmp slt i32 %78, 26
  %85 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %77, i64 0, i32 0
  %86 = load i8*, i8** %85, align 8, !tbaa !427
  br i1 %84, label %87, label %88

87:                                               ; preds = %83
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 24, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.9.1998, i64 0, i64 0), i8* %86, i32 %78) #18
  br label %89

88:                                               ; preds = %83
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 48, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10.1999, i64 0, i64 0), i8* %86, i32 %53, i32 %78) #18
  br label %89

89:                                               ; preds = %88, %87, %81, %80
  %90 = shl i32 %53, 1
  %91 = add nsw i32 %53, 1
  %92 = icmp ugt i32 %24, %91
  %93 = select i1 %92, i32 %24, i32 %91
  %94 = icmp ugt i32 %90, %93
  %95 = select i1 %94, i32 %93, i32 %90
  %96 = icmp ugt i32 %95, %24
  %97 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %1, align 8, !tbaa !27
  %98 = icmp eq %struct.AVInputFormat.329* %97, null
  br i1 %96, label %99, label %49

99:                                               ; preds = %89
  store i8* %57, i8** %8, align 8, !tbaa !27
  br i1 %98, label %100, label %101

100:                                              ; preds = %99
  tail call fastcc void @av_free(i8* nonnull %57) #18
  br label %105

.loopexit:                                        ; preds = %49
  store i8* %50, i8** %8, align 8, !tbaa !27
  br label %101

101:                                              ; preds = %.loopexit, %99
  %102 = phi i32 [ %74, %99 ], [ %51, %.loopexit ]
  %103 = bitcast %struct.AVIOContext* %0 to %struct.AVIOContext.335*
  %104 = call fastcc i32 @ffio_rewind_with_probe_data(%struct.AVIOContext.335* %103, i8** nonnull %8, i32 %102) #18
  br label %105

105:                                              ; preds = %101, %100, %70, %59, %22
  %106 = phi i32 [ %104, %101 ], [ -1094995529, %100 ], [ -22, %22 ], [ %66, %70 ], [ -12, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #18
  ret i32 %106
}

; Function Attrs: nounwind uwtable
define internal i32 @avformat_open_input(%struct.AVFormatContext.328** nocapture, i8*, %struct.AVInputFormat.329*, %struct.AVDictionary**) unnamed_addr #5 {
  %5 = alloca { i64, i64, i8*, i32, i32, i32, %struct.anon*, i32, i32 }, align 8
  %6 = alloca { i8*, i64, i64 }, align 8
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca %struct.AVProbeData, align 8
  %10 = alloca %struct.AVDictionary*, align 8
  %11 = alloca %struct.ID3v2ExtraMeta*, align 8
  %12 = load %struct.AVFormatContext.328*, %struct.AVFormatContext.328** %0, align 8, !tbaa !27
  %13 = bitcast %struct.AVDictionary** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #18
  store %struct.AVDictionary* null, %struct.AVDictionary** %10, align 8, !tbaa !27
  %14 = bitcast %struct.ID3v2ExtraMeta** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #18
  store %struct.ID3v2ExtraMeta* null, %struct.ID3v2ExtraMeta** %11, align 8, !tbaa !27
  %15 = icmp eq %struct.AVFormatContext.328* %12, null
  br i1 %15, label %16, label %20

16:                                               ; preds = %4
  %17 = tail call fastcc %struct.AVFormatContext* @avformat_alloc_context() #18
  %18 = bitcast %struct.AVFormatContext* %17 to %struct.AVFormatContext.328*
  %19 = icmp eq %struct.AVFormatContext* %17, null
  br i1 %19, label %264, label %20

20:                                               ; preds = %16, %4
  %21 = phi %struct.AVFormatContext.328* [ %12, %4 ], [ %18, %16 ]
  %22 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 0
  %23 = load %struct.AVClass*, %struct.AVClass** %22, align 8, !tbaa !418
  %24 = icmp eq %struct.AVClass* %23, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %20
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.11.2002, i64 0, i64 0)) #18
  br label %264

26:                                               ; preds = %20
  %27 = icmp eq %struct.AVInputFormat.329* %2, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %26
  %29 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 1
  store %struct.AVInputFormat.329* %2, %struct.AVInputFormat.329** %29, align 8, !tbaa !419
  br label %30

30:                                               ; preds = %28, %26
  %31 = icmp ne %struct.AVDictionary** %3, null
  br i1 %31, label %32, label %34

32:                                               ; preds = %30
  %33 = load %struct.AVDictionary*, %struct.AVDictionary** %3, align 8, !tbaa !27
  call fastcc void @av_dict_copy(%struct.AVDictionary** nonnull %10, %struct.AVDictionary* %33) #18
  br label %34

34:                                               ; preds = %32, %30
  %35 = bitcast %struct.AVFormatContext.328* %21 to i8*
  %36 = call fastcc i32 @av_opt_set_dict(i8* %35, %struct.AVDictionary** nonnull %10) #18
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %250, label %38

38:                                               ; preds = %34
  %39 = bitcast %struct.AVProbeData* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %39) #18
  %40 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %9, i64 0, i32 0
  store i8* %1, i8** %40, align 8, !tbaa !434
  %41 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %9, i64 0, i32 1
  store i8* null, i8** %41, align 8, !tbaa !370
  %42 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %9, i64 0, i32 2
  store i32 0, i32* %42, align 8, !tbaa !430
  %43 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 4
  %44 = load %struct.AVIOContext*, %struct.AVIOContext** %43, align 8, !tbaa !374
  %45 = icmp eq %struct.AVIOContext* %44, null
  br i1 %45, label %63, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 14
  %48 = load i32, i32* %47, align 4, !tbaa !435
  %49 = or i32 %48, 128
  store i32 %49, i32* %47, align 4, !tbaa !435
  %50 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 1
  %51 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %50, align 8, !tbaa !419
  %52 = icmp eq %struct.AVInputFormat.329* %51, null
  br i1 %52, label %53, label %57

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 15
  %55 = load i32, i32* %54, align 8, !tbaa !436
  %56 = tail call fastcc i32 @av_probe_input_buffer(%struct.AVIOContext* nonnull %44, %struct.AVInputFormat.329** nonnull %50, i8* %1, i8* nonnull %35, i32 %55) #18
  br label %98

57:                                               ; preds = %46
  %58 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %51, i64 0, i32 2
  %59 = load i32, i32* %58, align 8, !tbaa !431
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %97, label %62

62:                                               ; preds = %57
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %35, i32 24, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.83.2003, i64 0, i64 0)) #18
  br label %97

63:                                               ; preds = %38
  %64 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 1
  %65 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %64, align 8, !tbaa !419
  %66 = icmp eq %struct.AVInputFormat.329* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %65, i64 0, i32 2
  %69 = load i32, i32* %68, align 8, !tbaa !431
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %80, label %97

72:                                               ; preds = %63
  %73 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %73) #18
  %74 = call fastcc %struct.AVInputFormat.329* @av_probe_input_format3(%struct.AVProbeData* nonnull %9, i32 0, i32* nonnull %8) #18
  %75 = load i32, i32* %8, align 4, !tbaa !28
  %76 = icmp sgt i32 %75, 25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %73) #18
  br i1 %76, label %78, label %77

77:                                               ; preds = %72
  store %struct.AVInputFormat.329* null, %struct.AVInputFormat.329** %64, align 8, !tbaa !419
  br label %80

78:                                               ; preds = %72
  store %struct.AVInputFormat.329* %74, %struct.AVInputFormat.329** %64, align 8, !tbaa !419
  %79 = icmp eq %struct.AVInputFormat.329* %74, null
  br i1 %79, label %80, label %97

80:                                               ; preds = %78, %77, %67
  %81 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 40
  %82 = load i32, i32* %81, align 4, !tbaa !437
  %83 = or i32 %82, 1
  %84 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 32
  %85 = bitcast %struct.AVIOContext** %43 to %struct.AVIOContext.335**
  %86 = call fastcc i32 @avio_open2(%struct.AVIOContext.335** nonnull %85, i8* %1, i32 %83, %struct.AVIOInterruptCB* nonnull %84, %struct.AVDictionary** nonnull %10) #18
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %80
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #18
  br label %250

89:                                               ; preds = %80
  %90 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %64, align 8, !tbaa !419
  %91 = icmp eq %struct.AVInputFormat.329* %90, null
  br i1 %91, label %92, label %97

92:                                               ; preds = %89
  %93 = load %struct.AVIOContext*, %struct.AVIOContext** %43, align 8, !tbaa !374
  %94 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 15
  %95 = load i32, i32* %94, align 8, !tbaa !436
  %96 = call fastcc i32 @av_probe_input_buffer(%struct.AVIOContext* %93, %struct.AVInputFormat.329** nonnull %64, i8* %1, i8* nonnull %35, i32 %95) #18
  br label %98

97:                                               ; preds = %89, %78, %67, %62, %57
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #18
  br label %101

98:                                               ; preds = %92, %53
  %99 = phi i32 [ %56, %53 ], [ %96, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #18
  %100 = icmp slt i32 %99, 0
  br i1 %100, label %250, label %101

101:                                              ; preds = %98, %97
  %102 = bitcast %struct.AVIOContext** %43 to %struct.AVIOContext.335**
  %103 = load %struct.AVIOContext.335*, %struct.AVIOContext.335** %102, align 8, !tbaa !374
  %104 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 42
  %105 = load i32, i32* %104, align 4, !tbaa !438
  %106 = zext i32 %105 to i64
  %107 = call fastcc i64 @avio_skip(%struct.AVIOContext.335* %103, i64 %106) #18
  %108 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 1
  %109 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %108, align 8, !tbaa !419
  %110 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %109, i64 0, i32 2
  %111 = load i32, i32* %110, align 8, !tbaa !431
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %121, label %114

114:                                              ; preds = %101
  %115 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %115) #18
  %116 = icmp eq i8* %1, null
  br i1 %116, label %117, label %118

117:                                              ; preds = %114
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %115) #18
  br label %250

118:                                              ; preds = %114
  %119 = call fastcc i32 @av_get_frame_filename(i8* nonnull %115, i8* nonnull %1) #18
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %115) #18
  %120 = icmp slt i32 %119, 0
  br i1 %120, label %250, label %121

121:                                              ; preds = %118, %101
  %122 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 9
  store i64 -9223372036854775808, i64* %122, align 8, !tbaa !439
  %123 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 10
  store i64 -9223372036854775808, i64* %123, align 8, !tbaa !440
  %124 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 8, i64 0
  %125 = icmp eq i8* %1, null
  %126 = select i1 %125, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4.1993, i64 0, i64 0), i8* %1
  call fastcc void @av_strlcpy(i8* nonnull %124, i8* %126, i64 1024) #18
  %127 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %108, align 8, !tbaa !419
  %128 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %127, i64 0, i32 8
  %129 = load i32, i32* %128, align 4, !tbaa !441
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %131, label %147

131:                                              ; preds = %121
  %132 = sext i32 %129 to i64
  %133 = call fastcc noalias i8* @av_mallocz(i64 %132) #18
  %134 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 3
  store i8* %133, i8** %134, align 8, !tbaa !372
  %135 = icmp eq i8* %133, null
  br i1 %135, label %250, label %136

136:                                              ; preds = %131
  %137 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %108, align 8, !tbaa !419
  %138 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %137, i64 0, i32 5
  %139 = load %struct.AVClass*, %struct.AVClass** %138, align 8, !tbaa !421
  %140 = icmp eq %struct.AVClass* %139, null
  br i1 %140, label %147, label %141

141:                                              ; preds = %136
  %142 = bitcast i8* %133 to %struct.AVClass**
  store %struct.AVClass* %139, %struct.AVClass** %142, align 8, !tbaa !27
  %143 = load i8*, i8** %134, align 8, !tbaa !372
  call fastcc void @av_opt_set_defaults(i8* %143) #18
  %144 = load i8*, i8** %134, align 8, !tbaa !372
  %145 = call fastcc i32 @av_opt_set_dict(i8* %144, %struct.AVDictionary** nonnull %10) #18
  %146 = icmp slt i32 %145, 0
  br i1 %146, label %250, label %147

147:                                              ; preds = %141, %136, %121
  %148 = load %struct.AVIOContext*, %struct.AVIOContext** %43, align 8, !tbaa !374
  %149 = icmp eq %struct.AVIOContext* %148, null
  br i1 %149, label %152, label %150

150:                                              ; preds = %147
  %151 = bitcast %struct.AVFormatContext.328* %21 to %struct.AVFormatContext*
  call fastcc void @ff_id3v2_read(%struct.AVFormatContext* nonnull %151, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.1992, i64 0, i64 0), %struct.ID3v2ExtraMeta** nonnull %11) #18
  br label %152

152:                                              ; preds = %150, %147
  %153 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 14
  %154 = load i32, i32* %153, align 4, !tbaa !435
  %155 = and i32 %154, 131072
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %165

157:                                              ; preds = %152
  %158 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %108, align 8, !tbaa !419
  %159 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %158, i64 0, i32 10
  %160 = load i32 (%struct.AVFormatContext.328*)*, i32 (%struct.AVFormatContext.328*)** %159, align 8, !tbaa !442
  %161 = icmp eq i32 (%struct.AVFormatContext.328*)* %160, null
  br i1 %161, label %165, label %162

162:                                              ; preds = %157
  %163 = call i32 %160(%struct.AVFormatContext.328* nonnull %21) #18
  %164 = icmp slt i32 %163, 0
  br i1 %164, label %250, label %165

165:                                              ; preds = %162, %157, %152
  %166 = load %struct.ID3v2ExtraMeta*, %struct.ID3v2ExtraMeta** %11, align 8, !tbaa !27
  %167 = icmp eq %struct.ID3v2ExtraMeta* %166, null
  br i1 %167, label %179, label %168

168:                                              ; preds = %165
  %169 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %108, align 8, !tbaa !419
  %170 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %169, i64 0, i32 0
  %171 = load i8*, i8** %170, align 8, !tbaa !427
  %172 = call i32 @strcmp(i8* %171, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12.2004, i64 0, i64 0)) #28
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %178

174:                                              ; preds = %168
  %175 = bitcast %struct.AVFormatContext.328* %21 to %struct.AVFormatContext*
  %176 = call fastcc i32 @ff_id3v2_parse_apic(%struct.AVFormatContext* nonnull %175, %struct.ID3v2ExtraMeta** nonnull %11) #18
  %177 = icmp slt i32 %176, 0
  br i1 %177, label %250, label %179

178:                                              ; preds = %168
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %35, i32 48, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.13.2005, i64 0, i64 0)) #18
  br label %179

179:                                              ; preds = %178, %174, %165
  call fastcc void @ff_id3v2_free_extra_meta(%struct.ID3v2ExtraMeta** nonnull %11) #18
  %180 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 6
  %181 = load i32, i32* %180, align 4, !tbaa !443
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %.loopexit, label %183

183:                                              ; preds = %179
  %184 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 7
  %185 = bitcast { i64, i64, i8*, i32, i32, i32, %struct.anon*, i32, i32 }* %5 to i8*
  %186 = bitcast { i8*, i64, i64 }* %6 to i8*
  %187 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 47
  %188 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 48
  %189 = bitcast %struct.AVPacketList** %188 to i8**
  br label %190

190:                                              ; preds = %225, %183
  %191 = phi i32 [ %181, %183 ], [ %226, %225 ]
  %192 = phi i64 [ 0, %183 ], [ %227, %225 ]
  %193 = load %struct.AVStream**, %struct.AVStream*** %184, align 8, !tbaa !444
  %194 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %193, i64 %192
  %195 = load %struct.AVStream*, %struct.AVStream** %194, align 8, !tbaa !27
  %196 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %195, i64 0, i32 10
  %197 = load i32, i32* %196, align 8, !tbaa !406
  %198 = and i32 %197, 1024
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %225, label %200

200:                                              ; preds = %190
  %201 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %195, i64 0, i32 11
  %202 = load i32, i32* %201, align 4, !tbaa !445
  %203 = icmp slt i32 %202, 48
  br i1 %203, label %204, label %225

204:                                              ; preds = %200
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %185)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %186)
  %205 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %195, i64 0, i32 15
  %206 = bitcast %struct.AVPacket* %205 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %185, i8* nonnull align 8 %206, i64 56, i1 false) #18
  %207 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %195, i64 0, i32 15, i32 10
  %208 = bitcast i8** %207 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %186, i8* nonnull align 8 %208, i64 24, i1 false) #18
  %209 = call fastcc noalias i8* @av_mallocz(i64 96) #18
  %210 = icmp eq i8* %209, null
  br i1 %210, label %223, label %211

211:                                              ; preds = %204
  %212 = load %struct.AVPacketList*, %struct.AVPacketList** %187, align 8, !tbaa !27
  %213 = icmp eq %struct.AVPacketList* %212, null
  br i1 %213, label %217, label %214

214:                                              ; preds = %211
  %215 = load %struct.AVPacketList*, %struct.AVPacketList** %188, align 8, !tbaa !27
  %216 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %215, i64 0, i32 1
  br label %217

217:                                              ; preds = %214, %211
  %218 = phi %struct.AVPacketList** [ %216, %214 ], [ %187, %211 ]
  %219 = bitcast %struct.AVPacketList** %218 to i8**
  store i8* %209, i8** %219, align 8, !tbaa !27
  store i8* %209, i8** %189, align 8, !tbaa !27
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %209, i8* nonnull align 8 %185, i64 56, i1 false) #18
  %220 = getelementptr inbounds i8, i8* %209, i64 56
  %221 = bitcast i8* %220 to void (%struct.AVPacket*)**
  store void (%struct.AVPacket*)* null, void (%struct.AVPacket*)** %221, align 8
  %222 = getelementptr inbounds i8, i8* %209, i64 64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %222, i8* nonnull align 8 %186, i64 24, i1 false) #18
  br label %223

223:                                              ; preds = %217, %204
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %185)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %186)
  %224 = load i32, i32* %180, align 4, !tbaa !443
  br label %225

225:                                              ; preds = %223, %200, %190
  %226 = phi i32 [ %191, %190 ], [ %191, %200 ], [ %224, %223 ]
  %227 = add nuw nsw i64 %192, 1
  %228 = zext i32 %226 to i64
  %229 = icmp ult i64 %227, %228
  br i1 %229, label %190, label %.loopexit

.loopexit:                                        ; preds = %225, %179
  %230 = load i32, i32* %153, align 4, !tbaa !435
  %231 = and i32 %230, 131072
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %243

233:                                              ; preds = %.loopexit
  %234 = load %struct.AVIOContext*, %struct.AVIOContext** %43, align 8, !tbaa !374
  %235 = icmp eq %struct.AVIOContext* %234, null
  br i1 %235, label %243, label %236

236:                                              ; preds = %233
  %237 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 46
  %238 = load i64, i64* %237, align 8, !tbaa !446
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %243

240:                                              ; preds = %236
  %241 = bitcast %struct.AVIOContext* %234 to %struct.AVIOContext.335*
  %242 = call fastcc i64 @avio_seek(%struct.AVIOContext.335* nonnull %241, i64 0, i32 1) #18
  store i64 %242, i64* %237, align 8, !tbaa !446
  br label %243

243:                                              ; preds = %240, %236, %233, %.loopexit
  %244 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 51
  store i32 2500000, i32* %244, align 8, !tbaa !447
  br i1 %31, label %245, label %249

245:                                              ; preds = %243
  call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %3) #18
  %246 = bitcast %struct.AVDictionary** %10 to i64*
  %247 = load i64, i64* %246, align 8, !tbaa !27
  %248 = bitcast %struct.AVDictionary** %3 to i64*
  store i64 %247, i64* %248, align 8, !tbaa !27
  br label %249

249:                                              ; preds = %245, %243
  store %struct.AVFormatContext.328* %21, %struct.AVFormatContext.328** %0, align 8, !tbaa !27
  br label %264

250:                                              ; preds = %174, %162, %141, %131, %118, %117, %98, %88, %34
  %251 = phi i32 [ %36, %34 ], [ %99, %98 ], [ %145, %141 ], [ %176, %174 ], [ %163, %162 ], [ -22, %118 ], [ -12, %131 ], [ %86, %88 ], [ -22, %117 ]
  call fastcc void @ff_id3v2_free_extra_meta(%struct.ID3v2ExtraMeta** nonnull %11) #18
  call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %10) #18
  %252 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 4
  %253 = load %struct.AVIOContext*, %struct.AVIOContext** %252, align 8, !tbaa !374
  %254 = icmp eq %struct.AVIOContext* %253, null
  br i1 %254, label %263, label %255

255:                                              ; preds = %250
  %256 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %21, i64 0, i32 14
  %257 = load i32, i32* %256, align 4, !tbaa !435
  %258 = trunc i32 %257 to i8
  %259 = icmp slt i8 %258, 0
  br i1 %259, label %263, label %260

260:                                              ; preds = %255
  %261 = bitcast %struct.AVIOContext* %253 to %struct.AVIOContext.335*
  %262 = call fastcc i32 @avio_close(%struct.AVIOContext.335* nonnull %261) #18
  br label %263

263:                                              ; preds = %260, %255, %250
  call fastcc void @avformat_free_context(%struct.AVFormatContext.328* nonnull %21)
  store %struct.AVFormatContext.328* null, %struct.AVFormatContext.328** %0, align 8, !tbaa !27
  br label %264

264:                                              ; preds = %263, %249, %25, %16
  %265 = phi i32 [ %251, %263 ], [ 0, %249 ], [ -22, %25 ], [ -12, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #18
  ret i32 %265
}

; Function Attrs: nounwind uwtable
define internal fastcc void @avformat_free_context(%struct.AVFormatContext.328*) unnamed_addr #5 {
  %2 = icmp eq %struct.AVFormatContext.328* %0, null
  br i1 %2, label %85, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.AVFormatContext.328* %0 to i8*
  tail call fastcc void @av_opt_free(i8* nonnull %4) #18
  %5 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 1
  %6 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %5, align 8, !tbaa !419
  %7 = icmp eq %struct.AVInputFormat.329* %6, null
  br i1 %7, label %17, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %6, i64 0, i32 5
  %10 = load %struct.AVClass*, %struct.AVClass** %9, align 8, !tbaa !421
  %11 = icmp eq %struct.AVClass* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 3
  %14 = load i8*, i8** %13, align 8, !tbaa !372
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call fastcc void @av_opt_free(i8* nonnull %14) #18
  br label %17

17:                                               ; preds = %16, %12, %8, %3
  %18 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 6
  %19 = load i32, i32* %18, align 4, !tbaa !443
  %20 = add i32 %19, -1
  %21 = icmp sgt i32 %20, -1
  br i1 %21, label %22, label %.loopexit6

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %24 = sext i32 %20 to i64
  br label %25

25:                                               ; preds = %25, %22
  %26 = phi i64 [ %24, %22 ], [ %33, %25 ]
  %27 = phi i32 [ %20, %22 ], [ %31, %25 ]
  %28 = load %struct.AVStream**, %struct.AVStream*** %23, align 8, !tbaa !444
  %29 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %28, i64 %26
  %30 = load %struct.AVStream*, %struct.AVStream** %29, align 8, !tbaa !27
  tail call fastcc void @ff_free_stream(%struct.AVFormatContext.328* nonnull %0, %struct.AVStream* %30)
  %31 = add nsw i32 %27, -1
  %32 = icmp sgt i32 %27, 0
  %33 = add nsw i64 %26, -1
  br i1 %32, label %25, label %.loopexit6

.loopexit6:                                       ; preds = %25, %17
  %34 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 19
  %35 = load i32, i32* %34, align 4, !tbaa !448
  %36 = add i32 %35, -1
  %37 = icmp sgt i32 %36, -1
  %38 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 20
  br i1 %37, label %39, label %.loopexit5

39:                                               ; preds = %.loopexit6
  %40 = sext i32 %36 to i64
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ %40, %39 ], [ %58, %41 ]
  %43 = phi i32 [ %36, %39 ], [ %56, %41 ]
  %44 = load %struct.AVProgram**, %struct.AVProgram*** %38, align 8, !tbaa !449
  %45 = getelementptr inbounds %struct.AVProgram*, %struct.AVProgram** %44, i64 %42
  %46 = load %struct.AVProgram*, %struct.AVProgram** %45, align 8, !tbaa !27
  %47 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %46, i64 0, i32 5
  tail call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %47) #18
  %48 = load %struct.AVProgram**, %struct.AVProgram*** %38, align 8, !tbaa !449
  %49 = getelementptr inbounds %struct.AVProgram*, %struct.AVProgram** %48, i64 %42
  %50 = load %struct.AVProgram*, %struct.AVProgram** %49, align 8, !tbaa !27
  %51 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %50, i64 0, i32 3
  %52 = bitcast i32** %51 to i8*
  tail call fastcc void @av_freep(i8* nonnull %52) #18
  %53 = load %struct.AVProgram**, %struct.AVProgram*** %38, align 8, !tbaa !449
  %54 = getelementptr inbounds %struct.AVProgram*, %struct.AVProgram** %53, i64 %42
  %55 = bitcast %struct.AVProgram** %54 to i8*
  tail call fastcc void @av_freep(i8* %55) #18
  %56 = add nsw i32 %43, -1
  %57 = icmp sgt i32 %43, 0
  %58 = add nsw i64 %42, -1
  br i1 %57, label %41, label %.loopexit5

.loopexit5:                                       ; preds = %41, %.loopexit6
  %59 = bitcast %struct.AVProgram*** %38 to i8*
  tail call fastcc void @av_freep(i8* nonnull %59) #18
  %60 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 3
  %61 = bitcast i8** %60 to i8*
  tail call fastcc void @av_freep(i8* nonnull %61) #18
  %62 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 26
  %63 = load i32, i32* %62, align 4, !tbaa !404
  %64 = add i32 %63, -1
  store i32 %64, i32* %62, align 4, !tbaa !404
  %65 = icmp eq i32 %63, 0
  %66 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 27
  br i1 %65, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %.loopexit5, %.preheader
  %67 = phi i32 [ %79, %.preheader ], [ %64, %.loopexit5 ]
  %68 = load %struct.AVChapter**, %struct.AVChapter*** %66, align 8, !tbaa !450
  %69 = zext i32 %67 to i64
  %70 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %68, i64 %69
  %71 = load %struct.AVChapter*, %struct.AVChapter** %70, align 8, !tbaa !27
  %72 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %71, i64 0, i32 4
  tail call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %72) #18
  %73 = load %struct.AVChapter**, %struct.AVChapter*** %66, align 8, !tbaa !450
  %74 = load i32, i32* %62, align 4, !tbaa !404
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %73, i64 %75
  %77 = bitcast %struct.AVChapter** %76 to i8*
  tail call fastcc void @av_freep(i8* %77) #18
  %78 = load i32, i32* %62, align 4, !tbaa !404
  %79 = add i32 %78, -1
  store i32 %79, i32* %62, align 4, !tbaa !404
  %80 = icmp eq i32 %78, 0
  br i1 %80, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.preheader, %.loopexit5
  %81 = bitcast %struct.AVChapter*** %66 to i8*
  tail call fastcc void @av_freep(i8* nonnull %81) #18
  %82 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 28
  tail call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %82) #18
  %83 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %84 = bitcast %struct.AVStream*** %83 to i8*
  tail call fastcc void @av_freep(i8* nonnull %84) #18
  tail call fastcc void @av_free(i8* nonnull %4) #18
  br label %85

85:                                               ; preds = %.loopexit, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_free_stream(%struct.AVFormatContext.328* nocapture, %struct.AVStream*) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 4, !tbaa !443
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.14.2008, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42.2009, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.2010, i64 0, i64 0), i32 3189) #18
  tail call void @abort() #27
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %9 = load %struct.AVStream**, %struct.AVStream*** %8, align 8, !tbaa !444
  %10 = add i32 %4, -1
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %9, i64 %11
  %13 = load %struct.AVStream*, %struct.AVStream** %12, align 8, !tbaa !27
  %14 = icmp eq %struct.AVStream* %13, %1
  br i1 %14, label %16, label %15

15:                                               ; preds = %7
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.14.2008, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.43.2011, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.2010, i64 0, i64 0), i32 3190) #18
  tail call void @abort() #27
  unreachable

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 29
  %18 = load %struct.AVCodecParserContext*, %struct.AVCodecParserContext** %17, align 8, !tbaa !451
  %19 = icmp eq %struct.AVCodecParserContext* %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %16
  tail call fastcc void @av_parser_close(%struct.AVCodecParserContext* nonnull %18) #18
  br label %21

21:                                               ; preds = %20, %16
  %22 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 15, i32 2
  %23 = load i8*, i8** %22, align 8, !tbaa !408
  %24 = icmp eq i8* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 15
  %27 = bitcast %struct.AVPacket* %26 to %struct.AVPacket.21*
  tail call void @av_free_packet(%struct.AVPacket.21* nonnull %27) #18
  br label %28

28:                                               ; preds = %25, %21
  %29 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 13
  tail call fastcc void @av_dict_free(%struct.AVDictionary** nonnull %29) #18
  %30 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 33
  %31 = bitcast %struct.AVIndexEntry** %30 to i8*
  tail call fastcc void @av_freep(i8* nonnull %31) #18
  %32 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 2
  %33 = load %struct.AVCodecContext*, %struct.AVCodecContext** %32, align 8, !tbaa !378
  %34 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %33, i64 0, i32 18
  %35 = bitcast i8** %34 to i8*
  tail call fastcc void @av_freep(i8* nonnull %35) #18
  %36 = load %struct.AVCodecContext*, %struct.AVCodecContext** %32, align 8, !tbaa !378
  %37 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %36, i64 0, i32 189
  %38 = bitcast i8** %37 to i8*
  tail call fastcc void @av_freep(i8* nonnull %38) #18
  %39 = bitcast %struct.AVCodecContext** %32 to i8*
  tail call fastcc void @av_freep(i8* nonnull %39) #18
  %40 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 4
  %41 = bitcast i8** %40 to i8*
  tail call fastcc void @av_freep(i8* nonnull %41) #18
  %42 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 16
  %43 = bitcast %struct.anon.0** %42 to i8*
  tail call fastcc void @av_freep(i8* nonnull %43) #18
  %44 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 31, i32 1
  %45 = bitcast i8** %44 to i8*
  tail call fastcc void @av_freep(i8* nonnull %45) #18
  %46 = load %struct.AVStream**, %struct.AVStream*** %8, align 8, !tbaa !444
  %47 = load i32, i32* %3, align 4, !tbaa !443
  %48 = add i32 %47, -1
  store i32 %48, i32* %3, align 4, !tbaa !443
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %46, i64 %49
  %51 = bitcast %struct.AVStream** %50 to i8*
  tail call fastcc void @av_freep(i8* %51) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @ff_read_packet(%struct.AVFormatContext.328*, %struct.AVPacket*) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 47
  %4 = bitcast %struct.AVPacket* %1 to i8*
  %5 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %6 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 4
  %7 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 2
  %8 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 3
  %9 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 14
  %11 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 5
  %12 = bitcast %struct.AVFormatContext.328* %0 to i8*
  %13 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 6
  %14 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 1
  %15 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 0
  %16 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 23
  %17 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 22
  %18 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 21
  %19 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 38
  %20 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 48
  %21 = bitcast %struct.AVPacketList** %20 to i8**
  %22 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 51
  %23 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.backedge, %2
  %24 = load %struct.AVPacketList*, %struct.AVPacketList** %3, align 8, !tbaa !452
  %25 = icmp ne %struct.AVPacketList* %24, null
  br i1 %25, label %26, label %45

26:                                               ; preds = %.loopexit
  %27 = bitcast %struct.AVPacketList* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* nonnull align 8 %27, i64 88, i1 false), !tbaa.struct !25
  %28 = load %struct.AVStream**, %struct.AVStream*** %5, align 8, !tbaa !444
  %29 = load i32, i32* %6, align 4, !tbaa !23
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %28, i64 %30
  %32 = load %struct.AVStream*, %struct.AVStream** %31, align 8, !tbaa !27
  %33 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %32, i64 0, i32 36
  %34 = load i32, i32* %33, align 8, !tbaa !453
  %35 = icmp slt i32 %34, 1
  br i1 %35, label %36, label %45

36:                                               ; preds = %26
  %37 = bitcast %struct.AVPacketList* %24 to i8*
  %38 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %24, i64 0, i32 1
  %39 = bitcast %struct.AVPacketList** %38 to i64*
  %40 = load i64, i64* %39, align 8, !tbaa !454
  %41 = bitcast %struct.AVPacketList** %3 to i64*
  store i64 %40, i64* %41, align 8, !tbaa !452
  %42 = load i32, i32* %8, align 8, !tbaa !17
  %43 = load i32, i32* %22, align 8, !tbaa !447
  %44 = add nsw i32 %43, %42
  store i32 %44, i32* %22, align 8, !tbaa !447
  tail call fastcc void @av_free(i8* nonnull %37) #18
  br label %.loopexit14

45:                                               ; preds = %26, %.loopexit
  store i8* null, i8** %7, align 8, !tbaa !16
  store i32 0, i32* %8, align 8, !tbaa !17
  tail call void @av_init_packet(%struct.AVPacket.21* %23) #18
  %46 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %9, align 8, !tbaa !419
  %47 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %46, i64 0, i32 11
  %48 = load i32 (%struct.AVFormatContext.328*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext.328*, %struct.AVPacket*)** %47, align 8, !tbaa !456
  %49 = tail call i32 %48(%struct.AVFormatContext.328* nonnull %0, %struct.AVPacket* %1) #18
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %76

51:                                               ; preds = %45
  %52 = icmp eq %struct.AVPacketList* %24, null
  %53 = icmp eq i32 %49, -11
  %54 = or i1 %52, %53
  br i1 %54, label %.loopexit14, label %55

55:                                               ; preds = %51
  %56 = load i32, i32* %13, align 4, !tbaa !443
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %.loopexit.backedge, label %.preheader

58:                                               ; preds = %70
  %59 = load i32, i32* %13, align 4, !tbaa !443
  %60 = zext i32 %59 to i64
  %61 = icmp ult i64 %74, %60
  br i1 %61, label %.preheader, label %.loopexit.backedge

.preheader:                                       ; preds = %55, %58
  %62 = phi i64 [ %74, %58 ], [ 0, %55 ]
  %63 = load %struct.AVStream**, %struct.AVStream*** %5, align 8, !tbaa !444
  %64 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %63, i64 %62
  %65 = load %struct.AVStream*, %struct.AVStream** %64, align 8, !tbaa !27
  %66 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %65, i64 0, i32 23
  %67 = load i32, i32* %66, align 4, !tbaa !457
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %70, label %69

69:                                               ; preds = %.preheader
  tail call fastcc void @probe_codec(%struct.AVFormatContext.328* nonnull %0, %struct.AVStream* %65, %struct.AVPacket* null)
  br label %70

70:                                               ; preds = %69, %.preheader
  %71 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %65, i64 0, i32 36
  %72 = load i32, i32* %71, align 8, !tbaa !453
  %73 = icmp slt i32 %72, 1
  %74 = add nuw nsw i64 %62, 1
  br i1 %73, label %58, label %75

75:                                               ; preds = %70
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.14.2008, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15.2012, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.2010, i64 0, i64 0), i32 755) #18
  tail call void @abort() #27
  unreachable

76:                                               ; preds = %45
  %77 = load i32, i32* %10, align 4, !tbaa !435
  %78 = and i32 %77, 256
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %86, label %80

80:                                               ; preds = %76
  %81 = load i32, i32* %11, align 8, !tbaa !22
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  %85 = load i32, i32* %6, align 4, !tbaa !23
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %12, i32 24, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.17.2013, i64 0, i64 0), i32 %85) #18
  tail call void @av_free_packet(%struct.AVPacket.21* nonnull %23) #18
  br label %.loopexit.backedge

86:                                               ; preds = %80, %76
  %87 = and i32 %77, 262144
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %86
  %90 = tail call fastcc i32 @av_packet_merge_side_data(%struct.AVPacket.21* nonnull %23) #18
  br label %91

91:                                               ; preds = %89, %86
  %92 = load i32, i32* %6, align 4, !tbaa !23
  %93 = load i32, i32* %13, align 4, !tbaa !443
  %94 = icmp ult i32 %92, %93
  br i1 %94, label %96, label %95

95:                                               ; preds = %91
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %12, i32 16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.18.2014, i64 0, i64 0), i32 %92) #18
  br label %.loopexit.backedge

96:                                               ; preds = %91
  %97 = load %struct.AVStream**, %struct.AVStream*** %5, align 8, !tbaa !444
  %98 = sext i32 %92 to i64
  %99 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %97, i64 %98
  %100 = load %struct.AVStream*, %struct.AVStream** %99, align 8, !tbaa !27
  %101 = load i64, i64* %14, align 8, !tbaa !19
  %102 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %100, i64 0, i32 42
  %103 = load i32, i32* %102, align 8, !tbaa !458
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %130, label %105

105:                                              ; preds = %96
  %106 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %100, i64 0, i32 41
  %107 = load i64, i64* %106, align 8, !tbaa !459
  %108 = icmp ne i64 %107, -9223372036854775808
  %109 = icmp ne i64 %101, -9223372036854775808
  %110 = and i1 %109, %108
  br i1 %110, label %111, label %132

111:                                              ; preds = %105
  %112 = icmp eq i32 %103, 1
  %113 = icmp sgt i64 %107, %101
  %114 = and i1 %112, %113
  br i1 %114, label %115, label %121

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %100, i64 0, i32 17
  %117 = load i32, i32* %116, align 8, !tbaa !460
  %118 = zext i32 %117 to i64
  %119 = shl i64 1, %118
  %120 = add i64 %119, %101
  br label %132

121:                                              ; preds = %111
  %122 = icmp ne i32 %103, -1
  %123 = or i1 %122, %113
  br i1 %123, label %132, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %100, i64 0, i32 17
  %126 = load i32, i32* %125, align 8, !tbaa !460
  %127 = zext i32 %126 to i64
  %128 = shl i64 1, %127
  %129 = sub i64 %101, %128
  br label %132

130:                                              ; preds = %96
  %131 = load i64, i64* %15, align 8, !tbaa !18
  br label %156

132:                                              ; preds = %124, %121, %115, %105
  %133 = phi i64 [ %101, %105 ], [ %101, %121 ], [ %129, %124 ], [ %120, %115 ]
  store i64 %133, i64* %14, align 8, !tbaa !19
  %134 = load i64, i64* %15, align 8, !tbaa !18
  %135 = icmp ne i64 %134, -9223372036854775808
  %136 = and i1 %108, %135
  br i1 %136, label %137, label %156

137:                                              ; preds = %132
  %138 = icmp eq i32 %103, 1
  %139 = icmp sgt i64 %107, %134
  %140 = and i1 %138, %139
  br i1 %140, label %141, label %147

141:                                              ; preds = %137
  %142 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %100, i64 0, i32 17
  %143 = load i32, i32* %142, align 8, !tbaa !460
  %144 = zext i32 %143 to i64
  %145 = shl i64 1, %144
  %146 = add i64 %145, %134
  br label %156

147:                                              ; preds = %137
  %148 = icmp ne i32 %103, -1
  %149 = or i1 %148, %139
  br i1 %149, label %156, label %150

150:                                              ; preds = %147
  %151 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %100, i64 0, i32 17
  %152 = load i32, i32* %151, align 8, !tbaa !460
  %153 = zext i32 %152 to i64
  %154 = shl i64 1, %153
  %155 = sub i64 %134, %154
  br label %156

156:                                              ; preds = %150, %147, %141, %132, %130
  %157 = phi i64 [ %146, %141 ], [ %155, %150 ], [ %131, %130 ], [ %134, %147 ], [ %134, %132 ]
  store i64 %157, i64* %15, align 8, !tbaa !18
  %158 = getelementptr %struct.AVStream, %struct.AVStream* %100, i64 0, i32 2
  %159 = load %struct.AVCodecContext*, %struct.AVCodecContext** %158, align 8, !tbaa !378
  %160 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %159, i64 0, i32 2
  %161 = load i32, i32* %160, align 4, !tbaa !136
  switch i32 %161, label %177 [
    i32 0, label %162
    i32 1, label %167
    i32 3, label %172
  ]

162:                                              ; preds = %156
  %163 = load i32, i32* %18, align 8, !tbaa !461
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %177, label %165

165:                                              ; preds = %162
  %166 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %159, i64 0, i32 5
  store i32 %163, i32* %166, align 8, !tbaa !238
  br label %177

167:                                              ; preds = %156
  %168 = load i32, i32* %17, align 4, !tbaa !462
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %177, label %170

170:                                              ; preds = %167
  %171 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %159, i64 0, i32 5
  store i32 %168, i32* %171, align 8, !tbaa !238
  br label %177

172:                                              ; preds = %156
  %173 = load i32, i32* %16, align 8, !tbaa !463
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %177, label %175

175:                                              ; preds = %172
  %176 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %159, i64 0, i32 5
  store i32 %173, i32* %176, align 8, !tbaa !238
  br label %177

177:                                              ; preds = %175, %172, %170, %167, %165, %162, %156
  %178 = load i32, i32* %19, align 4, !tbaa !464
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %186, label %180

180:                                              ; preds = %177
  %181 = tail call fastcc i64 @av_gettime() #18
  %182 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %100, i64 0, i32 6
  %183 = bitcast %struct.AVRational* %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = tail call fastcc i64 @av_rescale_q(i64 %181, i64 4294967296000001, i64 %184) #29
  store i64 %185, i64* %15, align 8, !tbaa !18
  store i64 %185, i64* %14, align 8, !tbaa !19
  br label %186

186:                                              ; preds = %180, %177
  br i1 %25, label %191, label %187

187:                                              ; preds = %186
  %188 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %100, i64 0, i32 36
  %189 = load i32, i32* %188, align 8, !tbaa !453
  %190 = icmp slt i32 %189, 1
  br i1 %190, label %.loopexit14, label %191

191:                                              ; preds = %187, %186
  %192 = tail call fastcc noalias i8* @av_mallocz(i64 96) #18
  %193 = icmp eq i8* %192, null
  br i1 %193, label %203, label %194

194:                                              ; preds = %191
  %195 = load %struct.AVPacketList*, %struct.AVPacketList** %3, align 8, !tbaa !27
  %196 = icmp eq %struct.AVPacketList* %195, null
  br i1 %196, label %200, label %197

197:                                              ; preds = %194
  %198 = load %struct.AVPacketList*, %struct.AVPacketList** %20, align 8, !tbaa !27
  %199 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %198, i64 0, i32 1
  br label %200

200:                                              ; preds = %197, %194
  %201 = phi %struct.AVPacketList** [ %199, %197 ], [ %3, %194 ]
  %202 = bitcast %struct.AVPacketList** %201 to i8**
  store i8* %192, i8** %202, align 8, !tbaa !27
  store i8* %192, i8** %21, align 8, !tbaa !27
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %192, i8* nonnull align 8 %4, i64 88, i1 false) #18, !tbaa.struct !25
  br label %203

203:                                              ; preds = %200, %191
  %204 = load i32, i32* %8, align 8, !tbaa !17
  %205 = load i32, i32* %22, align 8, !tbaa !447
  %206 = sub nsw i32 %205, %204
  store i32 %206, i32* %22, align 8, !tbaa !447
  tail call fastcc void @probe_codec(%struct.AVFormatContext.328* nonnull %0, %struct.AVStream* nonnull %100, %struct.AVPacket* nonnull %1)
  br label %.loopexit.backedge

.loopexit.backedge:                               ; preds = %58, %203, %95, %84, %55
  br label %.loopexit

.loopexit14:                                      ; preds = %187, %51, %36
  %207 = phi i32 [ 0, %36 ], [ %49, %51 ], [ %49, %187 ]
  ret i32 %207
}

; Function Attrs: nounwind uwtable
define internal fastcc void @probe_codec(%struct.AVFormatContext.328*, %struct.AVStream* nocapture, %struct.AVPacket* readonly) unnamed_addr #5 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 36
  %6 = load i32, i32* %5, align 8, !tbaa !453
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %189

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 31
  %10 = bitcast %struct.AVFormatContext.328* %0 to i8*
  %11 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 8, !tbaa !411
  %13 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 23
  %14 = load i32, i32* %13, align 4, !tbaa !457
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %10, i32 48, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.84.2015, i64 0, i64 0), i32 %12, i32 %14) #18
  %15 = load i32, i32* %13, align 4, !tbaa !457
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %13, align 4, !tbaa !457
  %17 = icmp eq %struct.AVPacket* %2, null
  br i1 %17, label %41, label %18

18:                                               ; preds = %8
  %19 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 31, i32 1
  %20 = load i8*, i8** %19, align 8, !tbaa !370
  %21 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 31, i32 2
  %22 = load i32, i32* %21, align 8, !tbaa !430
  %23 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %2, i64 0, i32 3
  %24 = load i32, i32* %23, align 8, !tbaa !17
  %25 = add i32 %22, 32
  %26 = add i32 %25, %24
  %27 = sext i32 %26 to i64
  %28 = tail call fastcc i8* @av_realloc(i8* %20, i64 %27) #18
  %29 = icmp eq i8* %28, null
  br i1 %29, label %41, label %30

30:                                               ; preds = %18
  store i8* %28, i8** %19, align 8, !tbaa !370
  %31 = load i32, i32* %21, align 8, !tbaa !430
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %28, i64 %32
  %34 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %2, i64 0, i32 2
  %35 = load i8*, i8** %34, align 8, !tbaa !16
  %36 = load i32, i32* %23, align 8, !tbaa !17
  %37 = sext i32 %36 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %33, i8* align 1 %35, i64 %37, i1 false)
  %38 = add nsw i32 %36, %31
  store i32 %38, i32* %21, align 8, !tbaa !430
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %28, i64 %39
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %40, i8 0, i64 32, i1 false)
  br label %47

41:                                               ; preds = %18, %8
  store i32 0, i32* %13, align 4, !tbaa !457
  %42 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 31, i32 2
  %43 = load i32, i32* %42, align 8, !tbaa !430
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %41
  %46 = load i32, i32* %11, align 8, !tbaa !411
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %10, i32 24, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.85.2016, i64 0, i64 0), i32 %46) #18
  br label %47

47:                                               ; preds = %45, %41, %30
  %48 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 51
  %49 = load i32, i32* %48, align 8, !tbaa !447
  %50 = icmp slt i32 %49, 1
  br i1 %50, label %91, label %51

51:                                               ; preds = %47
  %52 = load i32, i32* %13, align 4, !tbaa !457
  %53 = icmp slt i32 %52, 1
  br i1 %53, label %91, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 31, i32 2
  %56 = load i32, i32* %55, align 8, !tbaa !430
  %57 = icmp ugt i32 %56, 65535
  %58 = lshr i32 %56, 16
  %59 = select i1 %57, i32 %58, i32 %56
  %60 = select i1 %57, i32 16, i32 0
  %61 = and i32 %59, 65280
  %62 = icmp eq i32 %61, 0
  %63 = lshr i32 %59, 8
  %64 = or i32 %60, 8
  %65 = select i1 %62, i32 %59, i32 %63
  %66 = select i1 %62, i32 %60, i32 %64
  %67 = zext i32 %65 to i64
  %68 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_log2_tab, i64 0, i64 %67
  %69 = load i8, i8* %68, align 1, !tbaa !33
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %66, %70
  %72 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %2, i64 0, i32 3
  %73 = load i32, i32* %72, align 8, !tbaa !17
  %74 = sub nsw i32 %56, %73
  %75 = icmp ugt i32 %74, 65535
  %76 = lshr i32 %74, 16
  %77 = select i1 %75, i32 %76, i32 %74
  %78 = select i1 %75, i32 16, i32 0
  %79 = and i32 %77, 65280
  %80 = icmp eq i32 %79, 0
  %81 = lshr i32 %77, 8
  %82 = or i32 %78, 8
  %83 = select i1 %80, i32 %77, i32 %81
  %84 = select i1 %80, i32 %78, i32 %82
  %85 = zext i32 %83 to i64
  %86 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_log2_tab, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1, !tbaa !33
  %88 = zext i8 %87 to i32
  %89 = add nuw nsw i32 %84, %88
  %90 = icmp eq i32 %71, %89
  br i1 %90, label %189, label %91

91:                                               ; preds = %54, %51, %47
  %92 = phi i1 [ false, %54 ], [ true, %51 ], [ true, %47 ]
  %93 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93) #18
  %94 = call fastcc %struct.AVInputFormat.329* @av_probe_input_format3(%struct.AVProbeData* nonnull %9, i32 1, i32* nonnull %4) #18
  %95 = icmp eq %struct.AVInputFormat.329* %94, null
  br i1 %95, label %96, label %98

96:                                               ; preds = %91
  %97 = load i32, i32* %4, align 4, !tbaa !28
  br label %146

98:                                               ; preds = %91
  %99 = load i32, i32* %5, align 8, !tbaa !453
  %100 = load i32, i32* %4, align 4, !tbaa !28
  %101 = icmp sgt i32 %99, %100
  br i1 %101, label %146, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 31, i32 2
  %104 = load i32, i32* %103, align 8, !tbaa !430
  %105 = load i32, i32* %13, align 4, !tbaa !457
  %106 = sub nsw i32 2500, %105
  %107 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %94, i64 0, i32 0
  %108 = load i8*, i8** %107, align 8, !tbaa !427
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %10, i32 48, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.95.2017, i64 0, i64 0), i32 %104, i32 %106, i8* %108, i32 %100) #18
  %109 = load i8*, i8** %107, align 8, !tbaa !427
  %110 = tail call i32 @strcmp(i8* %109, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8.1997, i64 0, i64 0)) #28
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %115, label %112

112:                                              ; preds = %102
  %113 = tail call i32 @strcmp(i8* %109, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88.2018, i64 0, i64 0)) #28
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %125

115:                                              ; preds = %143, %140, %137, %134, %131, %128, %125, %112, %102
  %116 = phi i64 [ 0, %102 ], [ 1, %112 ], [ 2, %125 ], [ 3, %128 ], [ 4, %131 ], [ 5, %134 ], [ 6, %137 ], [ 7, %140 ], [ 8, %143 ]
  %117 = getelementptr inbounds [10 x %struct.anon], [10 x %struct.anon]* @set_codec_from_probe_data.fmt_id_type, i64 0, i64 %116, i32 1
  %118 = load i32, i32* %117, align 8, !tbaa !465
  %119 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 2
  %120 = load %struct.AVCodecContext*, %struct.AVCodecContext** %119, align 8, !tbaa !378
  %121 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %120, i64 0, i32 5
  store i32 %118, i32* %121, align 8, !tbaa !238
  %122 = getelementptr inbounds [10 x %struct.anon], [10 x %struct.anon]* @set_codec_from_probe_data.fmt_id_type, i64 0, i64 %116, i32 2
  %123 = load i32, i32* %122, align 4, !tbaa !467
  %124 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %120, i64 0, i32 2
  store i32 %123, i32* %124, align 4, !tbaa !136
  br label %146

125:                                              ; preds = %112
  %126 = tail call i32 @strcmp(i8* %109, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.89.2019, i64 0, i64 0)) #28
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %115, label %128

128:                                              ; preds = %125
  %129 = tail call i32 @strcmp(i8* %109, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.90.2020, i64 0, i64 0)) #28
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %115, label %131

131:                                              ; preds = %128
  %132 = tail call i32 @strcmp(i8* %109, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.91.2021, i64 0, i64 0)) #28
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %115, label %134

134:                                              ; preds = %131
  %135 = tail call i32 @strcmp(i8* %109, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.92.2022, i64 0, i64 0)) #28
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %115, label %137

137:                                              ; preds = %134
  %138 = tail call i32 @strcmp(i8* %109, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93.2023, i64 0, i64 0)) #28
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %115, label %140

140:                                              ; preds = %137
  %141 = tail call i32 @strcmp(i8* %109, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12.2004, i64 0, i64 0)) #28
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %115, label %143

143:                                              ; preds = %140
  %144 = tail call i32 @strcmp(i8* %109, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.2024, i64 0, i64 0)) #28
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %115, label %146

146:                                              ; preds = %143, %115, %98, %96
  %147 = phi i32 [ %97, %96 ], [ %100, %115 ], [ %100, %98 ], [ %100, %143 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93) #18
  %148 = getelementptr %struct.AVStream, %struct.AVStream* %1, i64 0, i32 2
  %149 = load %struct.AVCodecContext*, %struct.AVCodecContext** %148, align 8, !tbaa !378
  %150 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %149, i64 0, i32 5
  %151 = load i32, i32* %150, align 8, !tbaa !238
  %152 = icmp ne i32 %151, 0
  %153 = icmp sgt i32 %147, 25
  %154 = and i1 %153, %152
  %155 = or i1 %92, %154
  br i1 %155, label %156, label %167

156:                                              ; preds = %146
  %157 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 31, i32 2
  store i32 0, i32* %157, align 8, !tbaa !430
  %158 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 31, i32 1
  %159 = bitcast i8** %158 to i8*
  tail call fastcc void @av_freep(i8* nonnull %159) #18
  store i32 -1, i32* %5, align 8, !tbaa !453
  %160 = load %struct.AVCodecContext*, %struct.AVCodecContext** %148, align 8, !tbaa !378
  %161 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %160, i64 0, i32 5
  %162 = load i32, i32* %161, align 8, !tbaa !238
  %163 = icmp eq i32 %162, 0
  %164 = load i32, i32* %11, align 8, !tbaa !411
  br i1 %163, label %166, label %165

165:                                              ; preds = %156
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %10, i32 48, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.86.2025, i64 0, i64 0), i32 %164) #18
  br label %167

166:                                              ; preds = %156
  tail call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %10, i32 24, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.87.2026, i64 0, i64 0), i32 %164) #18
  br label %167

167:                                              ; preds = %166, %165, %146
  %168 = load %struct.AVCodecContext*, %struct.AVCodecContext** %148, align 8, !tbaa !378
  %169 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %168, i64 0, i32 2
  %170 = load i32, i32* %169, align 4, !tbaa !136
  switch i32 %170, label %189 [
    i32 0, label %171
    i32 1, label %177
    i32 3, label %183
  ]

171:                                              ; preds = %167
  %172 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 21
  %173 = load i32, i32* %172, align 8, !tbaa !461
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %189, label %175

175:                                              ; preds = %171
  %176 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %168, i64 0, i32 5
  store i32 %173, i32* %176, align 8, !tbaa !238
  br label %189

177:                                              ; preds = %167
  %178 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 22
  %179 = load i32, i32* %178, align 4, !tbaa !462
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %189, label %181

181:                                              ; preds = %177
  %182 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %168, i64 0, i32 5
  store i32 %179, i32* %182, align 8, !tbaa !238
  br label %189

183:                                              ; preds = %167
  %184 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 23
  %185 = load i32, i32* %184, align 8, !tbaa !463
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %189, label %187

187:                                              ; preds = %183
  %188 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %168, i64 0, i32 5
  store i32 %185, i32* %188, align 8, !tbaa !238
  br label %189

189:                                              ; preds = %187, %183, %181, %177, %175, %171, %167, %54, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @ff_compute_frame_duration(i32* nocapture, i32* nocapture, %struct.AVStream* nocapture readonly, %struct.AVCodecParserContext* readonly, %struct.AVPacket* nocapture readonly) unnamed_addr #9 {
  store i32 0, i32* %0, align 4, !tbaa !28
  store i32 0, i32* %1, align 4, !tbaa !28
  %6 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 2
  %7 = load %struct.AVCodecContext*, %struct.AVCodecContext** %6, align 8, !tbaa !378
  %8 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 4, !tbaa !136
  switch i32 %9, label %105 [
    i32 0, label %10
    i32 1, label %60
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 3, i32 0
  %12 = load i32, i32* %11, align 8, !tbaa !468
  %13 = icmp eq i32 %12, 0
  %14 = icmp ne %struct.AVCodecParserContext* %3, null
  %15 = or i1 %14, %13
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 3, i32 1
  %18 = load i32, i32* %17, align 4, !tbaa !469
  store i32 %18, i32* %0, align 4, !tbaa !28
  %19 = load i32, i32* %11, align 8, !tbaa !468
  store i32 %19, i32* %1, align 4, !tbaa !28
  br label %105

20:                                               ; preds = %10
  %21 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 6, i32 0
  %22 = load i32, i32* %21, align 8, !tbaa !470
  %23 = sext i32 %22 to i64
  %24 = mul nsw i64 %23, 1000
  %25 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 6, i32 1
  %26 = load i32, i32* %25, align 4, !tbaa !471
  %27 = sext i32 %26 to i64
  %28 = icmp sgt i64 %24, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %20
  store i32 %22, i32* %0, align 4, !tbaa !28
  %30 = load i32, i32* %25, align 4, !tbaa !471
  store i32 %30, i32* %1, align 4, !tbaa !28
  br label %105

31:                                               ; preds = %20
  %32 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 20, i32 0
  %33 = load i32, i32* %32, align 4, !tbaa !284
  %34 = sext i32 %33 to i64
  %35 = mul nsw i64 %34, 1000
  %36 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 20, i32 1
  %37 = load i32, i32* %36, align 4, !tbaa !285
  %38 = sext i32 %37 to i64
  %39 = icmp sgt i64 %35, %38
  br i1 %39, label %40, label %105

40:                                               ; preds = %31
  store i32 %33, i32* %0, align 4, !tbaa !28
  %41 = load i32, i32* %36, align 4, !tbaa !285
  store i32 %41, i32* %1, align 4, !tbaa !28
  br i1 %14, label %42, label %55

42:                                               ; preds = %40
  %43 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %3, i64 0, i32 6
  %44 = load i32, i32* %43, align 4, !tbaa !472
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %105, label %46

46:                                               ; preds = %42
  %47 = load i32, i32* %0, align 4, !tbaa !28
  %48 = add nsw i32 %44, 1
  %49 = sdiv i32 2147483647, %48
  %50 = icmp sgt i32 %47, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = sdiv i32 %41, %48
  store i32 %52, i32* %1, align 4, !tbaa !28
  br label %105

53:                                               ; preds = %46
  %54 = mul nsw i32 %47, %48
  store i32 %54, i32* %0, align 4, !tbaa !28
  br label %105

55:                                               ; preds = %40
  %56 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 21
  %57 = load i32, i32* %56, align 4, !tbaa !204
  %58 = icmp slt i32 %57, 2
  br i1 %58, label %105, label %59

59:                                               ; preds = %55
  store i32 0, i32* %1, align 4, !tbaa !28
  store i32 0, i32* %0, align 4, !tbaa !28
  br label %105

60:                                               ; preds = %5
  %61 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 3
  %62 = load i32, i32* %61, align 8, !tbaa !17
  %63 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 103
  %64 = load i32, i32* %63, align 4, !tbaa !473
  %65 = icmp sgt i32 %64, 1
  br i1 %65, label %98, label %66

66:                                               ; preds = %60
  %67 = bitcast %struct.AVCodecContext* %7 to %struct.AVCodecContext.129*
  %68 = tail call fastcc i32 @av_get_audio_frame_duration(%struct.AVCodecContext.129* nonnull %67, i32 %62) #18
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %98, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 12
  %72 = load i32, i32* %71, align 8, !tbaa !291
  %73 = icmp sgt i32 %72, 0
  %74 = icmp sgt i32 %62, 0
  %75 = and i1 %74, %73
  br i1 %75, label %76, label %105

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 100
  %78 = load i32, i32* %77, align 8, !tbaa !262
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %80, label %105

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 105
  %82 = load i32, i32* %81, align 4, !tbaa !305
  %83 = icmp sgt i32 %82, 1
  br i1 %83, label %84, label %105

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 5
  %86 = load i32, i32* %85, align 8, !tbaa !238
  %87 = add i32 %86, -86023
  %88 = icmp ult i32 %87, 2
  br i1 %88, label %89, label %105

89:                                               ; preds = %84
  %90 = sext i32 %62 to i64
  %91 = shl nsw i64 %90, 3
  %92 = sext i32 %78 to i64
  %93 = mul nsw i64 %91, %92
  %94 = sext i32 %72 to i64
  %95 = sdiv i64 %93, %94
  %96 = trunc i64 %95 to i32
  %97 = icmp slt i32 %96, 1
  br i1 %97, label %105, label %98

98:                                               ; preds = %89, %66, %60
  %99 = phi i32 [ %96, %89 ], [ %68, %66 ], [ %64, %60 ]
  %100 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i64 0, i32 100
  %101 = load i32, i32* %100, align 8, !tbaa !262
  %102 = icmp slt i32 %101, 1
  br i1 %102, label %105, label %103

103:                                              ; preds = %98
  store i32 %99, i32* %0, align 4, !tbaa !28
  %104 = load i32, i32* %100, align 8, !tbaa !262
  store i32 %104, i32* %1, align 4, !tbaa !28
  br label %105

105:                                              ; preds = %103, %98, %89, %84, %80, %76, %70, %59, %55, %53, %51, %42, %31, %29, %16, %5
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @av_read_frame(%struct.AVFormatContext.328*, %struct.AVPacket* nocapture) unnamed_addr #5 {
  %3 = alloca %struct.AVPacketList*, align 8
  %4 = alloca %struct.AVPacketList*, align 8
  %5 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 14
  %6 = load i32, i32* %5, align 4, !tbaa !435
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 44
  br i1 %8, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %12 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 45
  %13 = bitcast %struct.AVPacketList** %12 to i8**
  %14 = bitcast %struct.AVPacket* %1 to i8*
  br label %113

15:                                               ; preds = %2
  %16 = load %struct.AVPacketList*, %struct.AVPacketList** %9, align 8, !tbaa !474
  %17 = icmp eq %struct.AVPacketList* %16, null
  br i1 %17, label %30, label %18

18:                                               ; preds = %15
  %19 = bitcast %struct.AVPacketList** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #18
  store %struct.AVPacketList* %16, %struct.AVPacketList** %4, align 8, !tbaa !27
  %20 = bitcast %struct.AVPacket* %1 to i8*
  %21 = bitcast %struct.AVPacketList* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* nonnull align 8 %21, i64 88, i1 false) #18, !tbaa.struct !25
  %22 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %16, i64 0, i32 1
  %23 = bitcast %struct.AVPacketList** %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !454
  %25 = bitcast %struct.AVPacketList** %9 to i64*
  store i64 %24, i64* %25, align 8, !tbaa !27
  %26 = load %struct.AVPacketList*, %struct.AVPacketList** %22, align 8, !tbaa !454
  %27 = icmp eq %struct.AVPacketList* %26, null
  br i1 %27, label %28, label %135

28:                                               ; preds = %18
  %29 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 45
  store %struct.AVPacketList* null, %struct.AVPacketList** %29, align 8, !tbaa !27
  br label %135

30:                                               ; preds = %15
  %31 = tail call fastcc i32 @read_frame_internal(%struct.AVFormatContext.328* nonnull %0, %struct.AVPacket* %1)
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %.loopexit, label %137

33:                                               ; preds = %130, %113
  %34 = load %struct.AVPacketList*, %struct.AVPacketList** %9, align 8, !tbaa !474
  %35 = icmp eq %struct.AVPacketList* %34, null
  br i1 %35, label %106, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %34, i64 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8, !tbaa !19
  %39 = icmp eq i64 %38, -9223372036854775808
  br i1 %39, label %.thread, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %34, i64 0, i32 0, i32 4
  %42 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %34, i64 0, i32 0, i32 0
  %43 = load %struct.AVStream**, %struct.AVStream*** %11, align 8, !tbaa !444
  %44 = load i32, i32* %41, align 4, !tbaa !23
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %43, i64 %45
  %47 = load %struct.AVStream*, %struct.AVStream** %46, align 8, !tbaa !27
  %48 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %47, i64 0, i32 17
  %49 = load i32, i32* %48, align 8, !tbaa !460
  %50 = add nsw i32 %49, -1
  %51 = zext i32 %50 to i64
  %52 = shl i64 2, %51
  br label %53

53:                                               ; preds = %75, %40
  %54 = phi i64 [ %38, %40 ], [ %76, %75 ]
  %55 = phi %struct.AVPacketList* [ %34, %40 ], [ %78, %75 ]
  %56 = load i64, i64* %42, align 8, !tbaa !18
  %57 = icmp eq i64 %56, -9223372036854775808
  br i1 %57, label %58, label %80

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %55, i64 0, i32 0, i32 4
  %60 = load i32, i32* %59, align 4, !tbaa !475
  %61 = icmp eq i32 %60, %44
  br i1 %61, label %62, label %75

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %55, i64 0, i32 0, i32 1
  %64 = load i64, i64* %63, align 8, !tbaa !476
  %65 = tail call fastcc i64 @av_compare_mod(i64 %38, i64 %64, i64 %52) #18
  %66 = icmp slt i64 %65, 0
  br i1 %66, label %67, label %75

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %55, i64 0, i32 0, i32 0
  %69 = load i64, i64* %68, align 8, !tbaa !477
  %70 = tail call fastcc i64 @av_compare_mod(i64 %69, i64 %64, i64 %52) #18
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %73, label %72

72:                                               ; preds = %67
  store i64 %64, i64* %42, align 8, !tbaa !18
  br label %73

73:                                               ; preds = %72, %67
  %74 = icmp eq i64 %54, -9223372036854775808
  %spec.select = select i1 %74, i64 -9223372036854775808, i64 %64
  br label %75

75:                                               ; preds = %73, %62, %58
  %76 = phi i64 [ %54, %62 ], [ %54, %58 ], [ %spec.select, %73 ]
  %77 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %55, i64 0, i32 1
  %78 = load %struct.AVPacketList*, %struct.AVPacketList** %77, align 8, !tbaa !454
  %79 = icmp eq %struct.AVPacketList* %78, null
  br i1 %79, label %80, label %53

80:                                               ; preds = %75, %53
  %81 = phi i64 [ %54, %53 ], [ %76, %75 ]
  br i1 %115, label %92, label %82

82:                                               ; preds = %80
  %83 = load i64, i64* %42, align 8, !tbaa !18
  %84 = icmp eq i64 %83, -9223372036854775808
  %85 = icmp ne i64 %81, -9223372036854775808
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %92

87:                                               ; preds = %82
  %88 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %34, i64 0, i32 0, i32 8
  %89 = load i32, i32* %88, align 4, !tbaa !83
  %90 = sext i32 %89 to i64
  %91 = add nsw i64 %81, %90
  store i64 %91, i64* %42, align 8, !tbaa !18
  br label %92

92:                                               ; preds = %80, %82, %87
  %93 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %34, i64 0, i32 0, i32 0
  %94 = load i64, i64* %93, align 8, !tbaa !18
  %95 = icmp ne i64 %94, -9223372036854775808
  %96 = or i1 %116, %39
  %or.cond = or i1 %96, %95
  br i1 %or.cond, label %.thread, label %106

.thread:                                          ; preds = %36, %92
  %97 = bitcast %struct.AVPacketList** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #18
  store %struct.AVPacketList* %34, %struct.AVPacketList** %3, align 8, !tbaa !27
  %98 = bitcast %struct.AVPacketList* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* nonnull align 8 %98, i64 88, i1 false) #18, !tbaa.struct !25
  %99 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %34, i64 0, i32 1
  %100 = bitcast %struct.AVPacketList** %99 to i64*
  %101 = load i64, i64* %100, align 8, !tbaa !454
  %102 = bitcast %struct.AVPacketList** %9 to i64*
  store i64 %101, i64* %102, align 8, !tbaa !27
  %103 = load %struct.AVPacketList*, %struct.AVPacketList** %99, align 8, !tbaa !454
  %104 = icmp eq %struct.AVPacketList* %103, null
  br i1 %104, label %105, label %135

105:                                              ; preds = %.thread
  store %struct.AVPacketList* null, %struct.AVPacketList** %12, align 8, !tbaa !27
  br label %135

106:                                              ; preds = %92, %33
  %107 = tail call fastcc i32 @read_frame_internal(%struct.AVFormatContext.328* nonnull %0, %struct.AVPacket* %1)
  %108 = icmp slt i32 %107, 0
  br i1 %108, label %109, label %117

109:                                              ; preds = %106
  %110 = icmp ne %struct.AVPacketList* %34, null
  %111 = icmp ne i32 %107, -11
  %112 = and i1 %110, %111
  br i1 %112, label %113, label %.loopexit

113:                                              ; preds = %109, %10
  %114 = phi i32 [ 1, %109 ], [ 0, %10 ]
  %115 = icmp eq i32 %114, 0
  %116 = icmp ne i32 %114, 0
  br label %33

117:                                              ; preds = %106
  %118 = tail call fastcc noalias i8* @av_mallocz(i64 96) #18
  %119 = icmp eq i8* %118, null
  br i1 %119, label %130, label %120

120:                                              ; preds = %117
  %121 = load %struct.AVPacketList*, %struct.AVPacketList** %9, align 8, !tbaa !27
  %122 = icmp eq %struct.AVPacketList* %121, null
  br i1 %122, label %126, label %123

123:                                              ; preds = %120
  %124 = load %struct.AVPacketList*, %struct.AVPacketList** %12, align 8, !tbaa !27
  %125 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %124, i64 0, i32 1
  br label %126

126:                                              ; preds = %123, %120
  %127 = phi %struct.AVPacketList** [ %125, %123 ], [ %9, %120 ]
  %128 = bitcast %struct.AVPacketList** %127 to i8**
  store i8* %118, i8** %128, align 8, !tbaa !27
  store i8* %118, i8** %13, align 8, !tbaa !27
  %129 = bitcast i8* %118 to %struct.AVPacket*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %118, i8* align 8 %14, i64 88, i1 false) #18, !tbaa.struct !25
  br label %130

130:                                              ; preds = %126, %117
  %131 = phi %struct.AVPacket* [ %129, %126 ], [ null, %117 ]
  %132 = bitcast %struct.AVPacket* %131 to %struct.AVPacket.21*
  %133 = tail call fastcc i32 @av_dup_packet(%struct.AVPacket.21* %132) #18
  %134 = icmp slt i32 %133, 0
  br i1 %134, label %.loopexit, label %33

135:                                              ; preds = %105, %.thread, %28, %18
  %136 = phi i8* [ %19, %28 ], [ %19, %18 ], [ %97, %.thread ], [ %97, %105 ]
  call fastcc void @av_freep(i8* nonnull %136) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %136) #18
  br label %137

137:                                              ; preds = %135, %30
  %138 = phi i32 [ %31, %30 ], [ 0, %135 ]
  %139 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %140 = load %struct.AVStream**, %struct.AVStream*** %139, align 8, !tbaa !444
  %141 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 4
  %142 = load i32, i32* %141, align 4, !tbaa !23
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %140, i64 %143
  %145 = load %struct.AVStream*, %struct.AVStream** %144, align 8, !tbaa !27
  %146 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %145, i64 0, i32 38
  %147 = load i32, i32* %146, align 8, !tbaa !478
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %156, label %149

149:                                              ; preds = %137
  %150 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  %151 = tail call fastcc i8* @av_packet_new_side_data(%struct.AVPacket.21* nonnull %150, i32 70, i32 10) #18
  %152 = load i32, i32* %146, align 8, !tbaa !478
  %153 = bitcast i8* %151 to i32*
  store i32 %152, i32* %153, align 1, !tbaa !33
  %154 = bitcast %struct.AVFormatContext.328* %0 to i8*
  %155 = load i32, i32* %146, align 8, !tbaa !478
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %154, i32 48, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.19.2034, i64 0, i64 0), i32 %155) #18
  store i32 0, i32* %146, align 8, !tbaa !478
  br label %156

156:                                              ; preds = %149, %137
  %157 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 1
  %158 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %157, align 8, !tbaa !419
  %159 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %158, i64 0, i32 2
  %160 = load i32, i32* %159, align 8, !tbaa !431
  %161 = and i32 %160, 256
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %241, label %163

163:                                              ; preds = %156
  %164 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 5
  %165 = load i32, i32* %164, align 8, !tbaa !22
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %241, label %168

168:                                              ; preds = %163
  %169 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %145, i64 0, i32 0
  %170 = load i32, i32* %169, align 8, !tbaa !411
  %171 = load %struct.AVStream**, %struct.AVStream*** %139, align 8, !tbaa !444
  %172 = sext i32 %170 to i64
  %173 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %171, i64 %172
  %174 = load %struct.AVStream*, %struct.AVStream** %173, align 8, !tbaa !27
  %175 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 24
  %176 = load i32, i32* %175, align 4, !tbaa !479
  %177 = udiv i32 %176, 24
  %178 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %174, i64 0, i32 34
  %179 = load i32, i32* %178, align 8, !tbaa !480
  %180 = icmp ult i32 %179, %177
  br i1 %180, label %203, label %181

181:                                              ; preds = %168
  %182 = icmp sgt i32 %179, 0
  br i1 %182, label %183, label %201

183:                                              ; preds = %181
  %184 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %174, i64 0, i32 33
  br label %185

185:                                              ; preds = %185, %183
  %186 = phi i64 [ 0, %183 ], [ %194, %185 ]
  %187 = phi i64 [ 0, %183 ], [ %195, %185 ]
  %188 = load %struct.AVIndexEntry*, %struct.AVIndexEntry** %184, align 8, !tbaa !481
  %189 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %188, i64 %186
  %190 = and i64 %187, 4294967294
  %191 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %188, i64 %190
  %192 = bitcast %struct.AVIndexEntry* %189 to i8*
  %193 = bitcast %struct.AVIndexEntry* %191 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %192, i8* align 8 %193, i64 24, i1 false) #18, !tbaa.struct !482
  %194 = add nuw i64 %186, 1
  %195 = shl nuw nsw i64 %194, 1
  %196 = load i32, i32* %178, align 8, !tbaa !480
  %197 = trunc i64 %195 to i32
  %198 = icmp sgt i32 %196, %197
  br i1 %198, label %185, label %199

199:                                              ; preds = %185
  %200 = trunc i64 %194 to i32
  br label %201

201:                                              ; preds = %199, %181
  %202 = phi i32 [ 0, %181 ], [ %200, %199 ]
  store i32 %202, i32* %178, align 8, !tbaa !480
  br label %203

203:                                              ; preds = %201, %168
  %204 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 11
  %205 = load i64, i64* %204, align 8, !tbaa !20
  %206 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 1
  %207 = load i64, i64* %206, align 8, !tbaa !19
  %208 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %145, i64 0, i32 42
  %209 = load i32, i32* %208, align 8, !tbaa !458
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %236, label %211

211:                                              ; preds = %203
  %212 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %145, i64 0, i32 41
  %213 = load i64, i64* %212, align 8, !tbaa !459
  %214 = icmp ne i64 %213, -9223372036854775808
  %215 = icmp ne i64 %207, -9223372036854775808
  %216 = and i1 %215, %214
  br i1 %216, label %217, label %236

217:                                              ; preds = %211
  %218 = icmp eq i32 %209, 1
  %219 = icmp sgt i64 %213, %207
  %220 = and i1 %218, %219
  br i1 %220, label %221, label %227

221:                                              ; preds = %217
  %222 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %145, i64 0, i32 17
  %223 = load i32, i32* %222, align 8, !tbaa !460
  %224 = zext i32 %223 to i64
  %225 = shl i64 1, %224
  %226 = add i64 %225, %207
  br label %236

227:                                              ; preds = %217
  %228 = icmp ne i32 %209, -1
  %229 = or i1 %228, %219
  br i1 %229, label %236, label %230

230:                                              ; preds = %227
  %231 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %145, i64 0, i32 17
  %232 = load i32, i32* %231, align 8, !tbaa !460
  %233 = zext i32 %232 to i64
  %234 = shl i64 1, %233
  %235 = sub i64 %207, %234
  br label %236

236:                                              ; preds = %230, %227, %221, %211, %203
  %237 = phi i64 [ %226, %221 ], [ %235, %230 ], [ %207, %203 ], [ %207, %227 ], [ %207, %211 ]
  %238 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %145, i64 0, i32 33
  %239 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %145, i64 0, i32 34
  %240 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %145, i64 0, i32 35
  tail call fastcc void @ff_add_index_entry(%struct.AVIndexEntry** nonnull %238, i32* nonnull %239, i32* nonnull %240, i64 %205, i64 %237) #18
  br label %241

241:                                              ; preds = %236, %163, %156
  %242 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 1
  %243 = load i64, i64* %242, align 8, !tbaa !19
  %244 = icmp slt i64 %243, 9222809086901354496
  br i1 %244, label %247, label %245

245:                                              ; preds = %241
  %246 = add nsw i64 %243, -9223090561878065151
  store i64 %246, i64* %242, align 8, !tbaa !19
  br label %247

247:                                              ; preds = %245, %241
  %248 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 0
  %249 = load i64, i64* %248, align 8, !tbaa !18
  %250 = icmp slt i64 %249, 9222809086901354496
  br i1 %250, label %.loopexit, label %251

251:                                              ; preds = %247
  %252 = add nsw i64 %249, -9223090561878065151
  store i64 %252, i64* %248, align 8, !tbaa !18
  br label %.loopexit

.loopexit:                                        ; preds = %109, %130, %251, %247, %30
  %253 = phi i32 [ %31, %30 ], [ %138, %247 ], [ %138, %251 ], [ -12, %130 ], [ %107, %109 ]
  ret i32 %253
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @read_frame_internal(%struct.AVFormatContext.328*, %struct.AVPacket* nocapture) unnamed_addr #5 {
  %3 = alloca %struct.AVPacketList*, align 8
  %4 = alloca %struct.AVPacket, align 8
  %5 = alloca [32 x i8], align 1
  %6 = alloca [32 x i8], align 1
  %7 = alloca [32 x i8], align 1
  %8 = alloca [32 x i8], align 1
  %9 = alloca [32 x i8], align 1
  %10 = alloca [32 x i8], align 1
  %11 = bitcast %struct.AVPacket* %1 to %struct.AVPacket.21*
  tail call void @av_init_packet(%struct.AVPacket.21* %11) #18
  %12 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 49
  %13 = bitcast %struct.AVPacket* %4 to i8*
  %14 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %15 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 4
  %16 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 0
  %17 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 1
  %18 = bitcast %struct.AVFormatContext.328* %0 to i8*
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %20 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0
  %21 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 3
  %22 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 33
  %23 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 0
  %24 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %25 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 8
  %26 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 5
  %27 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 14
  %28 = bitcast %struct.AVPacket* %1 to i8*
  %29 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 1
  %30 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 5
  %31 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 1
  %32 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 24
  %33 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 11
  %34 = bitcast %struct.AVPacket* %4 to %struct.AVPacket.21*
  %35 = bitcast %struct.AVPacket* %4 to %struct.AVPacket.21*
  br label %36

36:                                               ; preds = %254, %2
  %37 = load %struct.AVPacketList*, %struct.AVPacketList** %12, align 8, !tbaa !483
  %38 = icmp eq %struct.AVPacketList* %37, null
  br i1 %38, label %39, label %.loopexit18

39:                                               ; preds = %36
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %13) #18
  %40 = call fastcc i32 @ff_read_packet(%struct.AVFormatContext.328* nonnull %0, %struct.AVPacket* nonnull %4)
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %70

42:                                               ; preds = %39
  %43 = icmp eq i32 %40, -11
  br i1 %43, label %.loopexit19, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 6
  %46 = load i32, i32* %45, align 4, !tbaa !443
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %44, %65
  %48 = phi i32 [ %66, %65 ], [ %46, %44 ]
  %49 = phi i64 [ %67, %65 ], [ 0, %44 ]
  %50 = load %struct.AVStream**, %struct.AVStream*** %14, align 8, !tbaa !444
  %51 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %50, i64 %49
  %52 = load %struct.AVStream*, %struct.AVStream** %51, align 8, !tbaa !27
  %53 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %52, i64 0, i32 29
  %54 = load %struct.AVCodecParserContext*, %struct.AVCodecParserContext** %53, align 8, !tbaa !451
  %55 = icmp eq %struct.AVCodecParserContext* %54, null
  br i1 %55, label %65, label %56

56:                                               ; preds = %.preheader
  %57 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %52, i64 0, i32 28
  %58 = load i32, i32* %57, align 8, !tbaa !484
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %52, i64 0, i32 0
  %62 = load i32, i32* %61, align 8, !tbaa !411
  %63 = call fastcc i32 @parse_packet(%struct.AVFormatContext.328* nonnull %0, %struct.AVPacket* null, i32 %62)
  %64 = load i32, i32* %45, align 4, !tbaa !443
  br label %65

65:                                               ; preds = %60, %56, %.preheader
  %66 = phi i32 [ %48, %56 ], [ %48, %.preheader ], [ %64, %60 ]
  %67 = add nuw nsw i64 %49, 1
  %68 = zext i32 %66 to i64
  %69 = icmp ult i64 %67, %68
  br i1 %69, label %.preheader, label %.loopexit

70:                                               ; preds = %39
  %71 = load %struct.AVStream**, %struct.AVStream*** %14, align 8, !tbaa !444
  %72 = load i32, i32* %15, align 4, !tbaa !23
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %71, i64 %73
  %75 = load %struct.AVStream*, %struct.AVStream** %74, align 8, !tbaa !27
  %76 = load i64, i64* %16, align 8, !tbaa !18
  %77 = icmp eq i64 %76, -9223372036854775808
  br i1 %77, label %92, label %78

78:                                               ; preds = %70
  %79 = load i64, i64* %17, align 8, !tbaa !19
  %80 = icmp ne i64 %79, -9223372036854775808
  %81 = icmp slt i64 %76, %79
  %82 = and i1 %80, %81
  br i1 %82, label %83, label %92

83:                                               ; preds = %78
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %19, i8 0, i64 32, i1 false)
  %84 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %19, i64 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.2036, i64 0, i64 0), i64 %76) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %20, i8 0, i64 32, i1 false)
  %85 = load i64, i64* %17, align 8, !tbaa !19
  %86 = icmp eq i64 %85, -9223372036854775808
  br i1 %86, label %87, label %88

87:                                               ; preds = %83
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %20, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100.2037, i64 0, i64 0), i64 6, i1 false) #18
  br label %90

88:                                               ; preds = %83
  %89 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %20, i64 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.2036, i64 0, i64 0), i64 %85) #18
  br label %90

90:                                               ; preds = %88, %87
  %91 = load i32, i32* %21, align 8, !tbaa !17
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %18, i32 24, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.97.2038, i64 0, i64 0), i32 %72, i8* nonnull %19, i8* nonnull %20, i32 %91) #18
  br label %92

92:                                               ; preds = %90, %78, %70
  %93 = load i32, i32* %22, align 8, !tbaa !485
  %94 = and i32 %93, 1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %113, label %96

96:                                               ; preds = %92
  %97 = load i32, i32* %15, align 4, !tbaa !23
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %23, i8 0, i64 32, i1 false)
  %98 = load i64, i64* %16, align 8, !tbaa !18
  %99 = icmp eq i64 %98, -9223372036854775808
  br i1 %99, label %100, label %101

100:                                              ; preds = %96
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %23, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100.2037, i64 0, i64 0), i64 6, i1 false) #18
  br label %103

101:                                              ; preds = %96
  %102 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %23, i64 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.2036, i64 0, i64 0), i64 %98) #18
  br label %103

103:                                              ; preds = %101, %100
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %24, i8 0, i64 32, i1 false)
  %104 = load i64, i64* %17, align 8, !tbaa !19
  %105 = icmp eq i64 %104, -9223372036854775808
  br i1 %105, label %106, label %107

106:                                              ; preds = %103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %24, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100.2037, i64 0, i64 0), i64 6, i1 false) #18
  br label %109

107:                                              ; preds = %103
  %108 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %24, i64 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.2036, i64 0, i64 0), i64 %104) #18
  br label %109

109:                                              ; preds = %107, %106
  %110 = load i32, i32* %21, align 8, !tbaa !17
  %111 = load i32, i32* %25, align 4, !tbaa !83
  %112 = load i32, i32* %26, align 8, !tbaa !22
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %18, i32 48, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.98.2039, i64 0, i64 0), i32 %97, i8* nonnull %23, i8* nonnull %24, i32 %110, i32 %111, i32 %112) #18
  br label %113

113:                                              ; preds = %109, %92
  %114 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 28
  %115 = load i32, i32* %114, align 8, !tbaa !484
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %147, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 29
  %119 = load %struct.AVCodecParserContext*, %struct.AVCodecParserContext** %118, align 8, !tbaa !451
  %120 = icmp eq %struct.AVCodecParserContext* %119, null
  br i1 %120, label %121, label %232

121:                                              ; preds = %117
  %122 = load i32, i32* %27, align 4, !tbaa !435
  %123 = and i32 %122, 32
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %147

125:                                              ; preds = %121
  %126 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 2
  %127 = load %struct.AVCodecContext*, %struct.AVCodecContext** %126, align 8, !tbaa !378
  %128 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %127, i64 0, i32 5
  %129 = load i32, i32* %128, align 8, !tbaa !238
  %130 = call fastcc %struct.AVCodecParserContext* @av_parser_init(i32 %129) #18
  store %struct.AVCodecParserContext* %130, %struct.AVCodecParserContext** %118, align 8, !tbaa !451
  %131 = icmp eq %struct.AVCodecParserContext* %130, null
  br i1 %131, label %132, label %134

132:                                              ; preds = %125
  %133 = call fastcc i8* @avcodec_get_name(i32 %129) #18
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %18, i32 40, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.28.2040, i64 0, i64 0), i8* %133) #18
  store i32 0, i32* %114, align 8, !tbaa !484
  br label %147

134:                                              ; preds = %125
  switch i32 %115, label %232 [
    i32 2, label %135
    i32 4, label %139
    i32 1463898624, label %143
  ]

135:                                              ; preds = %134
  %136 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %130, i64 0, i32 16
  %137 = load i32, i32* %136, align 8, !tbaa !160
  %138 = or i32 %137, 1
  store i32 %138, i32* %136, align 8, !tbaa !160
  br label %232

139:                                              ; preds = %134
  %140 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %130, i64 0, i32 16
  %141 = load i32, i32* %140, align 8, !tbaa !160
  %142 = or i32 %141, 2
  store i32 %142, i32* %140, align 8, !tbaa !160
  br label %232

143:                                              ; preds = %134
  %144 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %130, i64 0, i32 16
  %145 = load i32, i32* %144, align 8, !tbaa !160
  %146 = or i32 %145, 4096
  store i32 %146, i32* %144, align 8, !tbaa !160
  br label %232

147:                                              ; preds = %132, %121, %113
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* nonnull align 8 %13, i64 88, i1 false), !tbaa.struct !25
  call fastcc void @compute_pkt_fields(%struct.AVFormatContext.328* nonnull %0, %struct.AVStream* nonnull %75, %struct.AVCodecParserContext* null, %struct.AVPacket* %1)
  %148 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %29, align 8, !tbaa !419
  %149 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %148, i64 0, i32 2
  %150 = load i32, i32* %149, align 8, !tbaa !431
  %151 = and i32 %150, 256
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %241, label %153

153:                                              ; preds = %147
  %154 = load i32, i32* %30, align 8, !tbaa !22
  %155 = and i32 %154, 1
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %241, label %157

157:                                              ; preds = %153
  %158 = load i64, i64* %31, align 8, !tbaa !19
  %159 = icmp eq i64 %158, -9223372036854775808
  br i1 %159, label %241, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 0
  %162 = load i32, i32* %161, align 8, !tbaa !411
  %163 = load %struct.AVStream**, %struct.AVStream*** %14, align 8, !tbaa !444
  %164 = sext i32 %162 to i64
  %165 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %163, i64 %164
  %166 = load %struct.AVStream*, %struct.AVStream** %165, align 8, !tbaa !27
  %167 = load i32, i32* %32, align 4, !tbaa !479
  %168 = udiv i32 %167, 24
  %169 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %166, i64 0, i32 34
  %170 = load i32, i32* %169, align 8, !tbaa !480
  %171 = icmp ult i32 %170, %168
  br i1 %171, label %196, label %172

172:                                              ; preds = %160
  %173 = icmp sgt i32 %170, 0
  br i1 %173, label %174, label %193

174:                                              ; preds = %172
  %175 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %166, i64 0, i32 33
  br label %176

176:                                              ; preds = %176, %174
  %177 = phi i64 [ 0, %174 ], [ %185, %176 ]
  %178 = phi i64 [ 0, %174 ], [ %186, %176 ]
  %179 = load %struct.AVIndexEntry*, %struct.AVIndexEntry** %175, align 8, !tbaa !481
  %180 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %179, i64 %177
  %181 = and i64 %178, 4294967294
  %182 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %179, i64 %181
  %183 = bitcast %struct.AVIndexEntry* %180 to i8*
  %184 = bitcast %struct.AVIndexEntry* %182 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %183, i8* align 8 %184, i64 24, i1 false) #18, !tbaa.struct !482
  %185 = add nuw i64 %177, 1
  %186 = shl nuw nsw i64 %185, 1
  %187 = load i32, i32* %169, align 8, !tbaa !480
  %188 = trunc i64 %186 to i32
  %189 = icmp sgt i32 %187, %188
  br i1 %189, label %176, label %190

190:                                              ; preds = %176
  %191 = trunc i64 %185 to i32
  %192 = load i64, i64* %31, align 8, !tbaa !19
  br label %193

193:                                              ; preds = %190, %172
  %194 = phi i64 [ %158, %172 ], [ %192, %190 ]
  %195 = phi i32 [ 0, %172 ], [ %191, %190 ]
  store i32 %195, i32* %169, align 8, !tbaa !480
  br label %196

196:                                              ; preds = %193, %160
  %197 = phi i64 [ %158, %160 ], [ %194, %193 ]
  %198 = load i64, i64* %33, align 8, !tbaa !20
  %199 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 42
  %200 = load i32, i32* %199, align 8, !tbaa !458
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %227, label %202

202:                                              ; preds = %196
  %203 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 41
  %204 = load i64, i64* %203, align 8, !tbaa !459
  %205 = icmp ne i64 %204, -9223372036854775808
  %206 = icmp ne i64 %197, -9223372036854775808
  %207 = and i1 %206, %205
  br i1 %207, label %208, label %227

208:                                              ; preds = %202
  %209 = icmp eq i32 %200, 1
  %210 = icmp sgt i64 %204, %197
  %211 = and i1 %209, %210
  br i1 %211, label %212, label %218

212:                                              ; preds = %208
  %213 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 17
  %214 = load i32, i32* %213, align 8, !tbaa !460
  %215 = zext i32 %214 to i64
  %216 = shl i64 1, %215
  %217 = add i64 %216, %197
  br label %227

218:                                              ; preds = %208
  %219 = icmp ne i32 %200, -1
  %220 = or i1 %219, %210
  br i1 %220, label %227, label %221

221:                                              ; preds = %218
  %222 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 17
  %223 = load i32, i32* %222, align 8, !tbaa !460
  %224 = zext i32 %223 to i64
  %225 = shl i64 1, %224
  %226 = sub i64 %197, %225
  br label %227

227:                                              ; preds = %221, %218, %212, %202, %196
  %228 = phi i64 [ %217, %212 ], [ %226, %221 ], [ %197, %196 ], [ %197, %218 ], [ %197, %202 ]
  %229 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 33
  %230 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 34
  %231 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 35
  call fastcc void @ff_add_index_entry(%struct.AVIndexEntry** nonnull %229, i32* nonnull %230, i32* nonnull %231, i64 %198, i64 %228) #18
  br label %241

232:                                              ; preds = %143, %139, %135, %134, %117
  %233 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 11
  %234 = load i32, i32* %233, align 4, !tbaa !445
  %235 = icmp slt i32 %234, 48
  br i1 %235, label %236, label %240

236:                                              ; preds = %232
  %237 = load i32, i32* %15, align 4, !tbaa !23
  %238 = call fastcc i32 @parse_packet(%struct.AVFormatContext.328* nonnull %0, %struct.AVPacket* nonnull %4, i32 %237)
  %239 = icmp slt i32 %238, 0
  br i1 %239, label %.loopexit19, label %241

240:                                              ; preds = %232
  call void @av_free_packet(%struct.AVPacket.21* nonnull %34) #18
  br label %241

241:                                              ; preds = %240, %236, %227, %157, %153, %147
  %242 = phi i32 [ %238, %236 ], [ 0, %240 ], [ 0, %157 ], [ 0, %153 ], [ 0, %147 ], [ 0, %227 ]
  %243 = phi i32 [ 0, %236 ], [ 0, %240 ], [ 1, %157 ], [ 1, %153 ], [ 1, %147 ], [ 1, %227 ]
  %244 = load i32, i32* %30, align 8, !tbaa !22
  %245 = and i32 %244, 1
  %246 = icmp eq i32 %245, 0
  %247 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %75, i64 0, i32 37
  br i1 %246, label %249, label %248

248:                                              ; preds = %241
  store i32 0, i32* %247, align 4, !tbaa !486
  br label %254

249:                                              ; preds = %241
  %250 = load i32, i32* %247, align 4, !tbaa !486
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %254, label %252

252:                                              ; preds = %249
  call void @av_free_packet(%struct.AVPacket.21* nonnull %35) #18
  br label %254

.loopexit19:                                      ; preds = %236, %42
  %253 = phi i32 [ -11, %42 ], [ %238, %236 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %13) #18
  br label %298

254:                                              ; preds = %252, %249, %248
  %255 = phi i32 [ 0, %252 ], [ %243, %249 ], [ %243, %248 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %13) #18
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %36, label %.loopexit20

.loopexit:                                        ; preds = %65, %44
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %13) #18
  %257 = load %struct.AVPacketList*, %struct.AVPacketList** %12, align 8, !tbaa !483
  %258 = icmp eq %struct.AVPacketList* %257, null
  br i1 %258, label %.loopexit20, label %.loopexit18

.loopexit18:                                      ; preds = %36, %.loopexit
  %259 = phi %struct.AVPacketList* [ %257, %.loopexit ], [ %37, %36 ]
  %260 = bitcast %struct.AVPacketList** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %260) #18
  store %struct.AVPacketList* %259, %struct.AVPacketList** %3, align 8, !tbaa !27
  %261 = bitcast %struct.AVPacketList* %259 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* nonnull align 8 %261, i64 88, i1 false) #18, !tbaa.struct !25
  %262 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %259, i64 0, i32 1
  %263 = bitcast %struct.AVPacketList** %262 to i64*
  %264 = load i64, i64* %263, align 8, !tbaa !454
  %265 = bitcast %struct.AVPacketList** %12 to i64*
  store i64 %264, i64* %265, align 8, !tbaa !27
  %266 = load %struct.AVPacketList*, %struct.AVPacketList** %262, align 8, !tbaa !454
  %267 = icmp eq %struct.AVPacketList* %266, null
  br i1 %267, label %268, label %270

268:                                              ; preds = %.loopexit18
  %269 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 50
  store %struct.AVPacketList* null, %struct.AVPacketList** %269, align 8, !tbaa !27
  br label %270

270:                                              ; preds = %268, %.loopexit18
  call fastcc void @av_freep(i8* nonnull %260) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %260) #18
  br label %.loopexit20

.loopexit20:                                      ; preds = %254, %270, %.loopexit
  %271 = phi i32 [ 0, %270 ], [ %40, %.loopexit ], [ %242, %254 ]
  %272 = load i32, i32* %22, align 8, !tbaa !485
  %273 = and i32 %272, 1
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %298, label %275

275:                                              ; preds = %.loopexit20
  %276 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 4
  %277 = load i32, i32* %276, align 4, !tbaa !23
  %278 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 0
  %279 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %278, i8 0, i64 32, i1 false)
  %280 = load i64, i64* %279, align 8, !tbaa !18
  %281 = icmp eq i64 %280, -9223372036854775808
  br i1 %281, label %282, label %283

282:                                              ; preds = %275
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %278, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100.2037, i64 0, i64 0), i64 6, i1 false) #18
  br label %285

283:                                              ; preds = %275
  %284 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %278, i64 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.2036, i64 0, i64 0), i64 %280) #18
  br label %285

285:                                              ; preds = %283, %282
  %286 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %286, i8 0, i64 32, i1 false)
  %287 = load i64, i64* %31, align 8, !tbaa !19
  %288 = icmp eq i64 %287, -9223372036854775808
  br i1 %288, label %289, label %290

289:                                              ; preds = %285
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %286, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100.2037, i64 0, i64 0), i64 6, i1 false) #18
  br label %292

290:                                              ; preds = %285
  %291 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %286, i64 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.2036, i64 0, i64 0), i64 %287) #18
  br label %292

292:                                              ; preds = %290, %289
  %293 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 3
  %294 = load i32, i32* %293, align 8, !tbaa !17
  %295 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 8
  %296 = load i32, i32* %295, align 4, !tbaa !83
  %297 = load i32, i32* %30, align 8, !tbaa !22
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %18, i32 48, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.99.2041, i64 0, i64 0), i32 %277, i8* nonnull %278, i8* nonnull %286, i32 %294, i32 %296, i32 %297) #18
  br label %298

298:                                              ; preds = %292, %.loopexit20, %.loopexit19
  %299 = phi i32 [ %271, %.loopexit20 ], [ %271, %292 ], [ %253, %.loopexit19 ]
  ret i32 %299
}

; Function Attrs: nounwind uwtable
define internal fastcc void @ff_add_index_entry(%struct.AVIndexEntry** nocapture, i32* nocapture, i32* nocapture, i64, i64) unnamed_addr #5 {
  %6 = load i32, i32* %1, align 4, !tbaa !28
  %7 = add i32 %6, 1
  %8 = icmp ugt i32 %7, 178956969
  %9 = icmp eq i64 %4, -9223372036854775808
  %or.cond = or i1 %9, %8
  br i1 %or.cond, label %95, label %10

10:                                               ; preds = %5
  %11 = icmp slt i64 %4, 9222809086901354496
  %12 = add nsw i64 %4, -9223090561878065151
  %13 = select i1 %11, i64 %4, i64 %12
  %14 = bitcast %struct.AVIndexEntry** %0 to i8**
  %15 = load i8*, i8** %14, align 8, !tbaa !27
  %16 = sext i32 %7 to i64
  %17 = mul nsw i64 %16, 24
  %18 = tail call fastcc i8* @av_fast_realloc(i8* %15, i32* %2, i64 %17) #18
  %19 = bitcast i8* %18 to %struct.AVIndexEntry*
  %20 = icmp eq i8* %18, null
  br i1 %20, label %95, label %21

21:                                               ; preds = %10
  store i8* %18, i8** %14, align 8, !tbaa !27
  %22 = load i32, i32* %1, align 4, !tbaa !28
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %21
  %25 = add nsw i32 %22, -1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %19, i64 %26, i32 1
  %28 = load i64, i64* %27, align 8, !tbaa !487
  %29 = icmp slt i64 %28, %13
  %30 = select i1 %29, i32 %25, i32 -1
  br label %31

31:                                               ; preds = %24, %21
  %32 = phi i32 [ -1, %21 ], [ %30, %24 ]
  %33 = sub nsw i32 %22, %32
  %34 = icmp sgt i32 %33, 1
  br i1 %34, label %.preheader, label %52

.preheader:                                       ; preds = %31, %.preheader
  %35 = phi i32 [ %43, %.preheader ], [ %22, %31 ]
  %36 = phi i32 [ %45, %.preheader ], [ %32, %31 ]
  %37 = add nsw i32 %36, %35
  %38 = ashr i32 %37, 1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %19, i64 %39, i32 1
  %41 = load i64, i64* %40, align 8, !tbaa !487
  %42 = icmp slt i64 %41, %13
  %43 = select i1 %42, i32 %35, i32 %38
  %44 = icmp sgt i64 %41, %13
  %45 = select i1 %44, i32 %36, i32 %38
  %46 = sub nsw i32 %43, %45
  %47 = icmp sgt i32 %46, 1
  br i1 %47, label %.preheader, label %48

48:                                               ; preds = %.preheader
  %49 = icmp eq i32 %43, %22
  %50 = select i1 %49, i32 -1, i32 %43
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %62

52:                                               ; preds = %48, %31
  %53 = add nsw i32 %22, 1
  store i32 %53, i32* %1, align 4, !tbaa !28
  %54 = sext i32 %22 to i64
  %55 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %19, i64 %54
  br i1 %23, label %88, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %55, i64 -1
  %58 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %57, i64 0, i32 1
  %59 = load i64, i64* %58, align 8, !tbaa !487
  %60 = icmp slt i64 %59, %13
  br i1 %60, label %88, label %61

61:                                               ; preds = %56
  tail call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.20.2035, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.2010, i64 0, i64 0), i32 1696, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @__PRETTY_FUNCTION__.ff_add_index_entry, i64 0, i64 0)) #27
  unreachable

62:                                               ; preds = %48
  %63 = sext i32 %50 to i64
  %64 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %19, i64 %63
  %65 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %19, i64 %63, i32 1
  %66 = load i64, i64* %65, align 8, !tbaa !487
  %67 = icmp eq i64 %66, %13
  br i1 %67, label %79, label %68

68:                                               ; preds = %62
  %69 = icmp sgt i64 %66, %13
  br i1 %69, label %70, label %95

70:                                               ; preds = %68
  %71 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %64, i64 1
  %72 = bitcast %struct.AVIndexEntry* %71 to i8*
  %73 = bitcast %struct.AVIndexEntry* %64 to i8*
  %74 = sub nsw i32 %22, %50
  %75 = sext i32 %74 to i64
  %76 = mul nsw i64 %75, 24
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 8 %72, i8* nonnull align 8 %73, i64 %76, i1 false)
  %77 = load i32, i32* %1, align 4, !tbaa !28
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %1, align 4, !tbaa !28
  br label %88

79:                                               ; preds = %62
  %80 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %64, i64 0, i32 0
  %81 = load i64, i64* %80, align 8, !tbaa !489
  %82 = icmp eq i64 %81, %3
  br i1 %82, label %83, label %88

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %19, i64 %63, i32 3
  %85 = load i32, i32* %84, align 4, !tbaa !490
  %86 = icmp sgt i32 %85, 0
  %87 = select i1 %86, i32 %85, i32 0
  br label %88

88:                                               ; preds = %83, %79, %70, %56, %52
  %89 = phi i32 [ 0, %52 ], [ 0, %56 ], [ 0, %70 ], [ 0, %79 ], [ %87, %83 ]
  %90 = phi %struct.AVIndexEntry* [ %55, %52 ], [ %55, %56 ], [ %64, %70 ], [ %64, %79 ], [ %64, %83 ]
  %91 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %90, i64 0, i32 0
  store i64 %3, i64* %91, align 8, !tbaa !489
  %92 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %90, i64 0, i32 1
  store i64 %13, i64* %92, align 8, !tbaa !487
  %93 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %90, i64 0, i32 3
  store i32 %89, i32* %93, align 4, !tbaa !490
  %94 = getelementptr inbounds %struct.AVIndexEntry, %struct.AVIndexEntry* %90, i64 0, i32 2
  store i32 1, i32* %94, align 8
  br label %95

95:                                               ; preds = %88, %68, %10, %5
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #8

; Function Attrs: nounwind uwtable
define internal fastcc i32 @parse_packet(%struct.AVFormatContext.328*, %struct.AVPacket*, i32) unnamed_addr #5 {
  %4 = alloca %struct.AVPacket, align 8
  %5 = alloca %struct.AVPacket, align 8
  %6 = bitcast %struct.AVPacket* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 88, i1 false)
  %7 = bitcast %struct.AVPacket* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %7) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 88, i1 false)
  %8 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %9 = load %struct.AVStream**, %struct.AVStream*** %8, align 8, !tbaa !444
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %9, i64 %10
  %12 = load %struct.AVStream*, %struct.AVStream** %11, align 8, !tbaa !27
  %13 = icmp eq %struct.AVPacket* %1, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %3
  %15 = bitcast %struct.AVPacket* %5 to %struct.AVPacket.21*
  call void @av_init_packet(%struct.AVPacket.21* nonnull %15) #18
  br label %30

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8, !tbaa !16
  %19 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 3
  %20 = load i32, i32* %19, align 8, !tbaa !17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %30

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 29
  %24 = load %struct.AVCodecParserContext*, %struct.AVCodecParserContext** %23, align 8, !tbaa !451
  %25 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %24, i64 0, i32 16
  %26 = load i32, i32* %25, align 8, !tbaa !160
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %22
  tail call fastcc void @compute_pkt_fields(%struct.AVFormatContext.328* nonnull %0, %struct.AVStream* nonnull %12, %struct.AVCodecParserContext* %24, %struct.AVPacket* nonnull %1)
  br label %30

30:                                               ; preds = %29, %22, %16, %14
  %31 = phi i32 [ %20, %16 ], [ 0, %29 ], [ 0, %22 ], [ 0, %14 ]
  %32 = phi i8* [ %18, %16 ], [ %18, %29 ], [ %18, %22 ], [ null, %14 ]
  %33 = phi i1 [ false, %16 ], [ false, %29 ], [ false, %22 ], [ true, %14 ]
  %34 = phi %struct.AVPacket* [ %1, %16 ], [ %1, %29 ], [ %1, %22 ], [ %5, %14 ]
  %35 = icmp eq %struct.AVPacket* %34, %5
  %36 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 29
  %37 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 2
  %38 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 2
  %39 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 3
  %40 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %34, i64 0, i32 0
  %41 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %34, i64 0, i32 1
  %42 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %34, i64 0, i32 11
  %43 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 8
  %44 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 6
  %45 = bitcast %struct.AVRational* %44 to i64*
  %46 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 0
  %47 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 4
  %48 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 0
  %49 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 1
  %50 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 11
  %51 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 28
  %52 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 5
  %53 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %34, i64 0, i32 5
  %54 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %34, i64 0, i32 2
  %55 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %34, i64 0, i32 3
  %56 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %34, i64 0, i32 9
  %57 = bitcast void (%struct.AVPacket*)** %56 to i64*
  %58 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 9
  %59 = bitcast void (%struct.AVPacket*)** %58 to i64*
  %60 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 49
  %61 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 50
  %62 = bitcast %struct.AVPacketList** %61 to i8**
  %63 = icmp sgt i32 %31, 0
  %64 = and i1 %33, %35
  %65 = or i1 %63, %64
  br i1 %65, label %.preheader, label %.loopexit5

.preheader:                                       ; preds = %30
  %66 = bitcast %struct.AVPacket* %4 to %struct.AVPacket.21*
  br label %67

67:                                               ; preds = %.preheader, %181
  %68 = phi i8* [ %78, %181 ], [ %32, %.preheader ]
  %69 = phi i32 [ %182, %181 ], [ 0, %.preheader ]
  %70 = phi i32 [ %79, %181 ], [ %31, %.preheader ]
  call void @av_init_packet(%struct.AVPacket.21* nonnull %66) #18
  %71 = load %struct.AVCodecParserContext*, %struct.AVCodecParserContext** %36, align 8, !tbaa !451
  %72 = load %struct.AVCodecContext*, %struct.AVCodecContext** %37, align 8, !tbaa !378
  %73 = load i64, i64* %40, align 8, !tbaa !18
  %74 = load i64, i64* %41, align 8, !tbaa !19
  %75 = load i64, i64* %42, align 8, !tbaa !20
  %76 = call fastcc i32 @av_parser_parse2(%struct.AVCodecParserContext* %71, %struct.AVCodecContext* %72, i8** nonnull %38, i32* nonnull %39, i8* %68, i32 %70, i64 %73, i64 %74, i64 %75) #18
  store i64 -9223372036854775808, i64* %41, align 8, !tbaa !19
  store i64 -9223372036854775808, i64* %40, align 8, !tbaa !18
  store i64 -1, i64* %42, align 8, !tbaa !20
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %68, i64 %77
  %79 = sub nsw i32 %70, %76
  %80 = load i32, i32* %39, align 8, !tbaa !17
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %82, label %181

82:                                               ; preds = %67
  store i32 0, i32* %43, align 4, !tbaa !83
  %83 = load %struct.AVCodecContext*, %struct.AVCodecContext** %37, align 8, !tbaa !378
  %84 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %83, i64 0, i32 2
  %85 = load i32, i32* %84, align 4, !tbaa !136
  %86 = icmp eq i32 %85, 1
  br i1 %86, label %87, label %102

87:                                               ; preds = %82
  %88 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %83, i64 0, i32 100
  %89 = load i32, i32* %88, align 8, !tbaa !262
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %91, label %121

91:                                               ; preds = %87
  %92 = load %struct.AVCodecParserContext*, %struct.AVCodecParserContext** %36, align 8, !tbaa !451
  %93 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %92, i64 0, i32 27
  %94 = load i32, i32* %93, align 8, !tbaa !491
  %95 = sext i32 %94 to i64
  %96 = zext i32 %89 to i64
  %97 = shl nuw i64 %96, 32
  %98 = or i64 %97, 1
  %99 = load i64, i64* %45, align 8
  %100 = call fastcc i64 @av_rescale_q_rnd(i64 %95, i64 %98, i64 %99) #29
  %101 = trunc i64 %100 to i32
  store i32 %101, i32* %43, align 4, !tbaa !83
  br label %121

102:                                              ; preds = %82
  %103 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %83, i64 0, i32 20
  %104 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %103, i64 0, i32 0
  %105 = load i32, i32* %104, align 4, !tbaa !284
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %121, label %107

107:                                              ; preds = %102
  %108 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %83, i64 0, i32 20, i32 1
  %109 = load i32, i32* %108, align 4, !tbaa !285
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %121, label %111

111:                                              ; preds = %107
  %112 = load %struct.AVCodecParserContext*, %struct.AVCodecParserContext** %36, align 8, !tbaa !451
  %113 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %112, i64 0, i32 27
  %114 = load i32, i32* %113, align 8, !tbaa !491
  %115 = sext i32 %114 to i64
  %116 = bitcast %struct.AVRational* %103 to i64*
  %117 = load i64, i64* %116, align 4
  %118 = load i64, i64* %45, align 8
  %119 = call fastcc i64 @av_rescale_q_rnd(i64 %115, i64 %117, i64 %118) #29
  %120 = trunc i64 %119 to i32
  store i32 %120, i32* %43, align 4, !tbaa !83
  br label %121

121:                                              ; preds = %111, %107, %102, %91, %87
  %122 = load i32, i32* %46, align 8, !tbaa !411
  store i32 %122, i32* %47, align 4, !tbaa !23
  %123 = load %struct.AVCodecParserContext*, %struct.AVCodecParserContext** %36, align 8, !tbaa !451
  %124 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %123, i64 0, i32 7
  %125 = load i64, i64* %124, align 8, !tbaa !152
  store i64 %125, i64* %48, align 8, !tbaa !18
  %126 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %123, i64 0, i32 8
  %127 = load i64, i64* %126, align 8, !tbaa !154
  store i64 %127, i64* %49, align 8, !tbaa !19
  %128 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %123, i64 0, i32 25
  %129 = load i64, i64* %128, align 8, !tbaa !155
  store i64 %129, i64* %50, align 8, !tbaa !20
  %130 = load i32, i32* %51, align 8, !tbaa !484
  %131 = icmp eq i32 %130, 1463898624
  br i1 %131, label %132, label %135

132:                                              ; preds = %121
  %133 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %123, i64 0, i32 2
  %134 = load i64, i64* %133, align 8, !tbaa !158
  store i64 %134, i64* %50, align 8, !tbaa !20
  br label %135

135:                                              ; preds = %132, %121
  %136 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %123, i64 0, i32 19
  %137 = load i32, i32* %136, align 8, !tbaa !492
  switch i32 %137, label %154 [
    i32 1, label %144
    i32 -1, label %138
  ]

138:                                              ; preds = %135
  %139 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %123, i64 0, i32 5
  %140 = load i32, i32* %139, align 8, !tbaa !493
  switch i32 %140, label %154 [
    i32 1, label %141
    i32 0, label %147
  ]

141:                                              ; preds = %138
  %142 = load i32, i32* %52, align 8, !tbaa !22
  %143 = or i32 %142, 1
  store i32 %143, i32* %52, align 8, !tbaa !22
  br label %154

144:                                              ; preds = %135
  %145 = load i32, i32* %52, align 8, !tbaa !22
  %146 = or i32 %145, 1
  store i32 %146, i32* %52, align 8, !tbaa !22
  br label %154

147:                                              ; preds = %138
  %148 = load i32, i32* %53, align 8, !tbaa !22
  %149 = and i32 %148, 1
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %154, label %151

151:                                              ; preds = %147
  %152 = load i32, i32* %52, align 8, !tbaa !22
  %153 = or i32 %152, 1
  store i32 %153, i32* %52, align 8, !tbaa !22
  br label %154

154:                                              ; preds = %151, %147, %144, %141, %138, %135
  call fastcc void @compute_pkt_fields(%struct.AVFormatContext.328* %0, %struct.AVStream* nonnull %12, %struct.AVCodecParserContext* nonnull %123, %struct.AVPacket* nonnull %4)
  %155 = load i8*, i8** %38, align 8, !tbaa !16
  %156 = load i8*, i8** %54, align 8, !tbaa !16
  %157 = icmp eq i8* %155, %156
  br i1 %157, label %158, label %164

158:                                              ; preds = %154
  %159 = load i32, i32* %39, align 8, !tbaa !17
  %160 = load i32, i32* %55, align 8, !tbaa !17
  %161 = icmp eq i32 %159, %160
  br i1 %161, label %162, label %164

162:                                              ; preds = %158
  %163 = load i64, i64* %57, align 8, !tbaa !24
  store i64 %163, i64* %59, align 8, !tbaa !24
  store void (%struct.AVPacket*)* null, void (%struct.AVPacket*)** %56, align 8, !tbaa !24
  br label %164

164:                                              ; preds = %162, %158, %154
  %165 = call fastcc i32 @av_dup_packet(%struct.AVPacket.21* nonnull %66) #18
  %166 = icmp slt i32 %165, 0
  br i1 %166, label %.loopexit, label %167

167:                                              ; preds = %164
  %168 = call fastcc noalias i8* @av_mallocz(i64 96) #18
  %169 = icmp eq i8* %168, null
  br i1 %169, label %179, label %170

170:                                              ; preds = %167
  %171 = load %struct.AVPacketList*, %struct.AVPacketList** %60, align 8, !tbaa !27
  %172 = icmp eq %struct.AVPacketList* %171, null
  br i1 %172, label %176, label %173

173:                                              ; preds = %170
  %174 = load %struct.AVPacketList*, %struct.AVPacketList** %61, align 8, !tbaa !27
  %175 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %174, i64 0, i32 1
  br label %176

176:                                              ; preds = %173, %170
  %177 = phi %struct.AVPacketList** [ %175, %173 ], [ %60, %170 ]
  %178 = bitcast %struct.AVPacketList** %177 to i8**
  store i8* %168, i8** %178, align 8, !tbaa !27
  store i8* %168, i8** %62, align 8, !tbaa !27
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %168, i8* nonnull align 8 %6, i64 88, i1 false) #18, !tbaa.struct !25
  br label %181

179:                                              ; preds = %167
  %180 = bitcast %struct.AVPacket* %4 to %struct.AVPacket.21*
  call void @av_free_packet(%struct.AVPacket.21* nonnull %180) #18
  br label %.loopexit

181:                                              ; preds = %176, %67
  %182 = phi i32 [ %69, %67 ], [ %165, %176 ]
  %183 = icmp sgt i32 %79, 0
  %184 = and i1 %35, %81
  %185 = or i1 %183, %184
  br i1 %185, label %67, label %.loopexit5

.loopexit5:                                       ; preds = %181, %30
  %186 = phi i32 [ 0, %30 ], [ %182, %181 ]
  br i1 %35, label %187, label %.loopexit

187:                                              ; preds = %.loopexit5
  %188 = load %struct.AVCodecParserContext*, %struct.AVCodecParserContext** %36, align 8, !tbaa !451
  call fastcc void @av_parser_close(%struct.AVCodecParserContext* %188) #18
  store %struct.AVCodecParserContext* null, %struct.AVCodecParserContext** %36, align 8, !tbaa !451
  br label %.loopexit

.loopexit:                                        ; preds = %164, %187, %.loopexit5, %179
  %189 = phi i32 [ %186, %187 ], [ %186, %.loopexit5 ], [ -12, %179 ], [ %165, %164 ]
  %190 = bitcast %struct.AVPacket* %34 to %struct.AVPacket.21*
  call void @av_free_packet(%struct.AVPacket.21* %190) #18
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %7) #18
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #18
  ret i32 %189
}

; Function Attrs: nounwind uwtable
define internal fastcc void @compute_pkt_fields(%struct.AVFormatContext.328*, %struct.AVStream*, %struct.AVCodecParserContext* readonly, %struct.AVPacket* nocapture) unnamed_addr #5 {
  %5 = alloca [32 x i8], align 1
  %6 = alloca [32 x i8], align 1
  %7 = alloca [32 x i8], align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #18
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #18
  %12 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 14
  %13 = load i32, i32* %12, align 4, !tbaa !435
  %14 = and i32 %13, 16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %504

16:                                               ; preds = %4
  %17 = and i32 %13, 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !18
  %22 = icmp eq i64 %21, -9223372036854775808
  br i1 %22, label %25, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  store i64 -9223372036854775808, i64* %24, align 8, !tbaa !19
  br label %25

25:                                               ; preds = %23, %19, %16
  %26 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 2
  %27 = load %struct.AVCodecContext*, %struct.AVCodecContext** %26, align 8, !tbaa !378
  %28 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %27, i64 0, i32 5
  %29 = load i32, i32* %28, align 8, !tbaa !238
  %30 = icmp ne i32 %29, 28
  %31 = icmp ne %struct.AVCodecParserContext* %2, null
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %39

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %2, i64 0, i32 5
  %35 = load i32, i32* %34, align 8, !tbaa !493
  %36 = icmp eq i32 %35, 3
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %27, i64 0, i32 39
  store i32 1, i32* %38, align 4, !tbaa !197
  br label %39

39:                                               ; preds = %37, %33, %25
  %40 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %27, i64 0, i32 39
  %41 = load i32, i32* %40, align 4, !tbaa !197
  %42 = icmp ne i32 %41, 0
  %43 = and i1 %31, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %2, i64 0, i32 5
  %46 = load i32, i32* %45, align 8, !tbaa !493
  %47 = icmp ne i32 %46, 3
  %48 = zext i1 %47 to i32
  br label %49

49:                                               ; preds = %44, %39
  %50 = phi i32 [ 0, %39 ], [ %48, %44 ]
  %51 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !18
  %53 = icmp eq i64 %52, -9223372036854775808
  br i1 %53, label %80, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %56 = load i64, i64* %55, align 8, !tbaa !19
  %57 = icmp eq i64 %56, -9223372036854775808
  br i1 %57, label %80, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 17
  %60 = load i32, i32* %59, align 8, !tbaa !460
  %61 = icmp slt i32 %60, 63
  br i1 %61, label %62, label %80

62:                                               ; preds = %58
  %63 = add nsw i32 %60, -1
  %64 = zext i32 %63 to i64
  %65 = shl i64 1, %64
  %66 = sub nsw i64 %56, %65
  %67 = icmp sgt i64 %66, %52
  br i1 %67, label %68, label %80

68:                                               ; preds = %62
  %69 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 20
  %70 = load i64, i64* %69, align 8, !tbaa !494
  %71 = icmp sgt i64 %70, 9222809086901354495
  %72 = icmp sgt i64 %66, %70
  %73 = or i1 %71, %72
  %74 = zext i32 %60 to i64
  %75 = shl i64 1, %74
  br i1 %73, label %76, label %78

76:                                               ; preds = %68
  %77 = sub nsw i64 %56, %75
  store i64 %77, i64* %55, align 8, !tbaa !19
  br label %80

78:                                               ; preds = %68
  %79 = add nsw i64 %75, %52
  store i64 %79, i64* %51, align 8, !tbaa !18
  br label %80

80:                                               ; preds = %78, %76, %62, %58, %54, %49
  %81 = phi i64 [ %52, %54 ], [ -9223372036854775808, %49 ], [ %52, %76 ], [ %79, %78 ], [ %52, %62 ], [ %52, %58 ]
  %82 = icmp eq i32 %41, 1
  br i1 %82, label %83, label %100

83:                                               ; preds = %80
  %84 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %85 = load i64, i64* %84, align 8, !tbaa !19
  %86 = icmp eq i64 %85, %81
  br i1 %86, label %87, label %100

87:                                               ; preds = %83
  %88 = icmp ne i64 %81, -9223372036854775808
  %89 = icmp ne i32 %50, 0
  %90 = and i1 %89, %88
  br i1 %90, label %91, label %100

91:                                               ; preds = %87
  %92 = bitcast %struct.AVFormatContext.328* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %92, i32 48, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.102.2042, i64 0, i64 0), i64 %81) #18
  %93 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 1
  %94 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %93, align 8, !tbaa !419
  %95 = getelementptr inbounds %struct.AVInputFormat.329, %struct.AVInputFormat.329* %94, i64 0, i32 0
  %96 = load i8*, i8** %95, align 8, !tbaa !427
  %97 = tail call i32 @strcmp(i8* %96, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.103.2043, i64 0, i64 0)) #28
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %91
  store i64 -9223372036854775808, i64* %84, align 8, !tbaa !19
  br label %100

100:                                              ; preds = %99, %91, %87, %83, %80
  %101 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 8
  %102 = load i32, i32* %101, align 4, !tbaa !83
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %128

104:                                              ; preds = %100
  call fastcc void @ff_compute_frame_duration(i32* nonnull %8, i32* nonnull %9, %struct.AVStream* nonnull %1, %struct.AVCodecParserContext* %2, %struct.AVPacket* nonnull %3)
  %105 = load i32, i32* %9, align 4, !tbaa !28
  %106 = icmp ne i32 %105, 0
  %107 = load i32, i32* %8, align 4
  %108 = icmp ne i32 %107, 0
  %109 = and i1 %106, %108
  br i1 %109, label %110, label %123

110:                                              ; preds = %104
  %111 = sext i32 %107 to i64
  %112 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 6, i32 1
  %113 = load i32, i32* %112, align 4, !tbaa !471
  %114 = sext i32 %113 to i64
  %115 = mul nsw i64 %114, %111
  %116 = sext i32 %105 to i64
  %117 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 6, i32 0
  %118 = load i32, i32* %117, align 8, !tbaa !470
  %119 = sext i32 %118 to i64
  %120 = mul nsw i64 %119, %116
  %121 = tail call fastcc i64 @av_rescale_rnd(i64 1, i64 %115, i64 %120, i32 2) #29
  %122 = trunc i64 %121 to i32
  store i32 %122, i32* %101, align 4, !tbaa !83
  br label %125

123:                                              ; preds = %104
  %124 = load i32, i32* %101, align 4, !tbaa !83
  br label %125

125:                                              ; preds = %123, %110
  %126 = phi i32 [ %124, %123 ], [ %122, %110 ]
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %250, label %128

128:                                              ; preds = %125, %100
  %129 = phi i32 [ %126, %125 ], [ %102, %100 ]
  %130 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 44
  %131 = load %struct.AVPacketList*, %struct.AVPacketList** %130, align 8, !tbaa !474
  %132 = icmp eq %struct.AVPacketList* %131, null
  %133 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 49
  %134 = load %struct.AVPacketList*, %struct.AVPacketList** %133, align 8, !tbaa !483
  %135 = icmp eq %struct.AVPacketList* %134, null
  %136 = and i1 %132, %135
  br i1 %136, label %250, label %137

137:                                              ; preds = %128
  %138 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %139 = load i32, i32* %138, align 4, !tbaa !23
  %140 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %140)
  %141 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %141)
  %142 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %142)
  %143 = select i1 %135, %struct.AVPacketList* %131, %struct.AVPacketList* %134
  %144 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 19
  %145 = load i64, i64* %144, align 8, !tbaa !495
  %146 = icmp eq i64 %145, -9223372036854775808
  br i1 %146, label %198, label %147

147:                                              ; preds = %137
  %148 = icmp eq %struct.AVPacketList* %143, null
  br i1 %148, label %.loopexit45, label %149

149:                                              ; preds = %147
  %150 = sext i32 %129 to i64
  %151 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 50
  br label %152

152:                                              ; preds = %180, %149
  %153 = phi i64 [ %145, %149 ], [ %173, %180 ]
  %154 = phi %struct.AVPacketList* [ %143, %149 ], [ %181, %180 ]
  %155 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %154, i64 0, i32 0, i32 4
  %156 = load i32, i32* %155, align 4, !tbaa !475
  %157 = icmp eq i32 %156, %139
  br i1 %157, label %158, label %172

158:                                              ; preds = %152
  %159 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %154, i64 0, i32 0, i32 0
  %160 = load i64, i64* %159, align 8, !tbaa !477
  %161 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %154, i64 0, i32 0, i32 1
  %162 = load i64, i64* %161, align 8, !tbaa !476
  %163 = icmp eq i64 %160, %162
  %164 = icmp eq i64 %162, -9223372036854775808
  %165 = and i1 %163, %164
  br i1 %165, label %166, label %183

166:                                              ; preds = %158
  %167 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %154, i64 0, i32 0, i32 8
  %168 = load i32, i32* %167, align 4, !tbaa !496
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %183

170:                                              ; preds = %166
  %171 = sub nsw i64 %153, %150
  br label %172

172:                                              ; preds = %170, %152
  %173 = phi i64 [ %171, %170 ], [ %153, %152 ]
  %174 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %154, i64 0, i32 1
  %175 = load %struct.AVPacketList*, %struct.AVPacketList** %174, align 8, !tbaa !454
  %176 = icmp eq %struct.AVPacketList* %175, null
  br i1 %176, label %177, label %180

177:                                              ; preds = %172
  %178 = load %struct.AVPacketList*, %struct.AVPacketList** %151, align 8, !tbaa !497
  %179 = icmp eq %struct.AVPacketList* %178, %154
  br i1 %179, label %180, label %.loopexit45

180:                                              ; preds = %177, %172
  %181 = phi %struct.AVPacketList* [ %175, %172 ], [ %131, %177 ]
  %182 = icmp eq %struct.AVPacketList* %181, null
  br i1 %182, label %.loopexit45, label %152

183:                                              ; preds = %166, %158
  %184 = icmp eq i64 %162, %145
  br i1 %184, label %197, label %185

185:                                              ; preds = %183
  %186 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %154, i64 0, i32 0, i32 1
  %187 = bitcast %struct.AVFormatContext.328* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %140, i8 0, i64 32, i1 false) #18
  %188 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %140, i64 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.2036, i64 0, i64 0), i64 %145) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %141, i8 0, i64 32, i1 false) #18
  %189 = load i64, i64* %186, align 8, !tbaa !476
  %190 = icmp eq i64 %189, -9223372036854775808
  br i1 %190, label %191, label %192

191:                                              ; preds = %185
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %141, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100.2037, i64 0, i64 0), i64 6, i1 false) #18
  br label %194

192:                                              ; preds = %185
  %193 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %141, i64 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.2036, i64 0, i64 0), i64 %189) #18
  br label %194

194:                                              ; preds = %192, %191
  call void (i8*, i32, i8*, ...) @av_log(i8* %187, i32 48, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.104.2044, i64 0, i64 0), i8* nonnull %140, i8* nonnull %141) #18
  br label %.loopexit43

.loopexit45:                                      ; preds = %180, %177, %147
  %195 = bitcast %struct.AVFormatContext.328* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %142, i8 0, i64 32, i1 false) #18
  %196 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %142, i64 32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101.2036, i64 0, i64 0), i64 %145) #18
  call void (i8*, i32, i8*, ...) @av_log(i8* %195, i32 48, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.105.2045, i64 0, i64 0), i8* nonnull %142) #18
  br label %.loopexit43

197:                                              ; preds = %183
  store i64 %153, i64* %144, align 8, !tbaa !495
  br label %202

198:                                              ; preds = %137
  %199 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 20
  %200 = load i64, i64* %199, align 8, !tbaa !494
  %201 = icmp eq i64 %200, 9223090561878065151
  br i1 %201, label %202, label %.loopexit43

202:                                              ; preds = %198, %197
  %203 = phi i64 [ %153, %197 ], [ -9223372036854775808, %198 ]
  %204 = phi i64 [ %153, %197 ], [ 9223090561878065151, %198 ]
  %205 = icmp eq %struct.AVPacketList* %143, null
  br i1 %205, label %.loopexit44, label %206

206:                                              ; preds = %202
  %207 = sext i32 %129 to i64
  %208 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 50
  br label %209

209:                                              ; preds = %245, %206
  %210 = phi i64 [ %204, %206 ], [ %238, %245 ]
  %211 = phi %struct.AVPacketList* [ %143, %206 ], [ %246, %245 ]
  %212 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %211, i64 0, i32 0, i32 4
  %213 = load i32, i32* %212, align 4, !tbaa !475
  %214 = icmp eq i32 %213, %139
  br i1 %214, label %215, label %237

215:                                              ; preds = %209
  %216 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %211, i64 0, i32 0, i32 0
  %217 = load i64, i64* %216, align 8, !tbaa !477
  %218 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %211, i64 0, i32 0, i32 1
  %219 = load i64, i64* %218, align 8, !tbaa !476
  %220 = icmp eq i64 %217, %219
  br i1 %220, label %221, label %.loopexit43

221:                                              ; preds = %215
  %222 = icmp eq i64 %217, -9223372036854775808
  %223 = icmp eq i64 %217, %203
  %224 = or i1 %222, %223
  br i1 %224, label %225, label %.loopexit43

225:                                              ; preds = %221
  %226 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %211, i64 0, i32 0, i32 8
  %227 = load i32, i32* %226, align 4, !tbaa !496
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %.loopexit43

229:                                              ; preds = %225
  store i64 %210, i64* %218, align 8, !tbaa !476
  %230 = load %struct.AVCodecContext*, %struct.AVCodecContext** %26, align 8, !tbaa !378
  %231 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %230, i64 0, i32 39
  %232 = load i32, i32* %231, align 4, !tbaa !197
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %234, label %235

234:                                              ; preds = %229
  store i64 %210, i64* %216, align 8, !tbaa !477
  br label %235

235:                                              ; preds = %234, %229
  store i32 %129, i32* %226, align 4, !tbaa !496
  %236 = add nsw i64 %210, %207
  br label %237

237:                                              ; preds = %235, %209
  %238 = phi i64 [ %210, %209 ], [ %236, %235 ]
  %239 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %211, i64 0, i32 1
  %240 = load %struct.AVPacketList*, %struct.AVPacketList** %239, align 8, !tbaa !454
  %241 = icmp eq %struct.AVPacketList* %240, null
  br i1 %241, label %242, label %245

242:                                              ; preds = %237
  %243 = load %struct.AVPacketList*, %struct.AVPacketList** %208, align 8, !tbaa !497
  %244 = icmp eq %struct.AVPacketList* %243, %211
  br i1 %244, label %245, label %.loopexit44

245:                                              ; preds = %242, %237
  %246 = phi %struct.AVPacketList* [ %240, %237 ], [ %131, %242 ]
  %247 = icmp eq %struct.AVPacketList* %246, null
  br i1 %247, label %.loopexit44, label %209

.loopexit44:                                      ; preds = %245, %242, %202
  %248 = phi i64 [ %204, %202 ], [ %238, %242 ], [ %238, %245 ]
  %249 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 20
  store i64 %248, i64* %249, align 8, !tbaa !494
  br label %.loopexit43

.loopexit43:                                      ; preds = %225, %221, %215, %.loopexit44, %198, %.loopexit45, %194
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %140)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %141)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %142)
  br label %250

250:                                              ; preds = %.loopexit43, %128, %125
  br i1 %31, label %251, label %333

251:                                              ; preds = %250
  %252 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 28
  %253 = load i32, i32* %252, align 8, !tbaa !484
  %254 = icmp eq i32 %253, 3
  br i1 %254, label %255, label %276

255:                                              ; preds = %251
  %256 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %257 = load i32, i32* %256, align 8, !tbaa !17
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %276, label %259

259:                                              ; preds = %255
  %260 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %2, i64 0, i32 17
  %261 = load i64, i64* %260, align 8, !tbaa !156
  %262 = load i32, i32* %101, align 4, !tbaa !83
  %263 = sext i32 %262 to i64
  %264 = sext i32 %257 to i64
  %265 = call fastcc i64 @av_rescale(i64 %261, i64 %263, i64 %264) #29
  %266 = load i64, i64* %51, align 8, !tbaa !18
  %267 = icmp eq i64 %266, -9223372036854775808
  br i1 %267, label %270, label %268

268:                                              ; preds = %259
  %269 = add nsw i64 %266, %265
  store i64 %269, i64* %51, align 8, !tbaa !18
  br label %270

270:                                              ; preds = %268, %259
  %271 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %272 = load i64, i64* %271, align 8, !tbaa !19
  %273 = icmp eq i64 %272, -9223372036854775808
  br i1 %273, label %276, label %274

274:                                              ; preds = %270
  %275 = add nsw i64 %272, %265
  store i64 %275, i64* %271, align 8, !tbaa !19
  br label %276

276:                                              ; preds = %274, %270, %255, %251
  %277 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %2, i64 0, i32 21
  %278 = load i32, i32* %277, align 8, !tbaa !498
  %279 = icmp sgt i32 %278, -1
  br i1 %279, label %280, label %333

280:                                              ; preds = %276
  %281 = load %struct.AVCodecContext*, %struct.AVCodecContext** %26, align 8, !tbaa !378
  %282 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %281, i64 0, i32 20, i32 1
  %283 = load i32, i32* %282, align 4, !tbaa !285
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 6, i32 0
  %286 = load i32, i32* %285, align 8, !tbaa !470
  %287 = sext i32 %286 to i64
  %288 = mul nsw i64 %287, %284
  %289 = icmp sgt i64 %288, 0
  br i1 %289, label %290, label %333

290:                                              ; preds = %280
  %291 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %281, i64 0, i32 20, i32 0
  %292 = load i32, i32* %291, align 4, !tbaa !284
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 6, i32 1
  %295 = load i32, i32* %294, align 4, !tbaa !471
  %296 = sext i32 %295 to i64
  %297 = mul nsw i64 %296, %293
  %298 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %299 = load i64, i64* %298, align 8, !tbaa !19
  %300 = icmp eq i64 %299, -9223372036854775808
  br i1 %300, label %309, label %301

301:                                              ; preds = %290
  %302 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %2, i64 0, i32 22
  %303 = load i32, i32* %302, align 4, !tbaa !499
  %304 = sext i32 %303 to i64
  %305 = mul nsw i64 %297, %304
  %306 = sdiv i64 %305, %288
  %307 = sub nsw i64 %299, %306
  %308 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 18
  store i64 %307, i64* %308, align 8, !tbaa !500
  br label %320

309:                                              ; preds = %290
  %310 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 18
  %311 = load i64, i64* %310, align 8, !tbaa !500
  %312 = icmp eq i64 %311, -9223372036854775808
  br i1 %312, label %328, label %313

313:                                              ; preds = %309
  %314 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %2, i64 0, i32 22
  %315 = load i32, i32* %314, align 4, !tbaa !499
  %316 = sext i32 %315 to i64
  %317 = mul nsw i64 %297, %316
  %318 = sdiv i64 %317, %288
  %319 = add nsw i64 %318, %311
  store i64 %319, i64* %298, align 8, !tbaa !19
  br label %320

320:                                              ; preds = %313, %301
  %321 = phi i64 [ %319, %313 ], [ %299, %301 ]
  %322 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %2, i64 0, i32 23
  %323 = load i32, i32* %322, align 8, !tbaa !501
  %324 = sext i32 %323 to i64
  %325 = mul nsw i64 %297, %324
  %326 = sdiv i64 %325, %288
  %327 = add nsw i64 %326, %321
  store i64 %327, i64* %51, align 8, !tbaa !18
  br label %328

328:                                              ; preds = %320, %309
  %329 = phi i64 [ -9223372036854775808, %309 ], [ %321, %320 ]
  %330 = icmp sgt i32 %278, 0
  br i1 %330, label %331, label %333

331:                                              ; preds = %328
  %332 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 18
  store i64 %329, i64* %332, align 8, !tbaa !500
  br label %333

333:                                              ; preds = %331, %328, %280, %276, %250
  %334 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %335 = load i64, i64* %334, align 8, !tbaa !19
  %336 = icmp eq i64 %335, -9223372036854775808
  br i1 %336, label %343, label %337

337:                                              ; preds = %333
  %338 = load i64, i64* %51, align 8, !tbaa !18
  %339 = icmp ne i64 %338, -9223372036854775808
  %340 = icmp sgt i64 %338, %335
  %341 = and i1 %339, %340
  %342 = select i1 %341, i32 1, i32 %50
  br label %343

343:                                              ; preds = %337, %333
  %344 = phi i32 [ %50, %333 ], [ %342, %337 ]
  %345 = icmp eq i32 %41, 0
  %346 = and i1 %31, %82
  %347 = or i1 %345, %346
  br i1 %347, label %348, label %411

348:                                              ; preds = %343
  %349 = load %struct.AVCodecContext*, %struct.AVCodecContext** %26, align 8, !tbaa !378
  %350 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %349, i64 0, i32 5
  %351 = load i32, i32* %350, align 8, !tbaa !238
  %352 = icmp eq i32 %351, 28
  br i1 %352, label %411, label %353

353:                                              ; preds = %348
  %354 = icmp eq i32 %344, 0
  br i1 %354, label %387, label %355

355:                                              ; preds = %353
  br i1 %336, label %356, label %359

356:                                              ; preds = %355
  %357 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 21
  %358 = load i64, i64* %357, align 8, !tbaa !502
  store i64 %358, i64* %334, align 8, !tbaa !19
  br label %359

359:                                              ; preds = %356, %355
  %360 = phi i64 [ %358, %356 ], [ %335, %355 ]
  %361 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %362 = load i32, i32* %361, align 4, !tbaa !23
  %363 = load i64, i64* %51, align 8, !tbaa !18
  call fastcc void @update_initial_timestamps(%struct.AVFormatContext.328* %0, i32 %362, i64 %360, i64 %363, %struct.AVPacket* nonnull %3)
  %364 = load i64, i64* %334, align 8, !tbaa !19
  %365 = icmp eq i64 %364, -9223372036854775808
  br i1 %365, label %366, label %369

366:                                              ; preds = %359
  %367 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 20
  %368 = load i64, i64* %367, align 8, !tbaa !494
  store i64 %368, i64* %334, align 8, !tbaa !19
  br label %369

369:                                              ; preds = %366, %359
  %370 = phi i64 [ %368, %366 ], [ %364, %359 ]
  %371 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 22
  %372 = load i32, i32* %371, align 8, !tbaa !503
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %369
  %375 = load i32, i32* %101, align 4, !tbaa !83
  store i32 %375, i32* %371, align 8, !tbaa !503
  br label %376

376:                                              ; preds = %374, %369
  %377 = phi i32 [ %375, %374 ], [ %372, %369 ]
  %378 = icmp eq i64 %370, -9223372036854775808
  br i1 %378, label %383, label %379

379:                                              ; preds = %376
  %380 = sext i32 %377 to i64
  %381 = add nsw i64 %370, %380
  %382 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 20
  store i64 %381, i64* %382, align 8, !tbaa !494
  br label %383

383:                                              ; preds = %379, %376
  %384 = load i32, i32* %101, align 4, !tbaa !83
  store i32 %384, i32* %371, align 8, !tbaa !503
  %385 = load i64, i64* %51, align 8, !tbaa !18
  %386 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 21
  store i64 %385, i64* %386, align 8, !tbaa !502
  br label %411

387:                                              ; preds = %353
  %388 = load i64, i64* %51, align 8, !tbaa !18
  %389 = icmp eq i64 %388, -9223372036854775808
  %390 = load i32, i32* %101, align 4, !tbaa !83
  br i1 %389, label %391, label %395

391:                                              ; preds = %387
  %392 = icmp eq i32 %390, 0
  %393 = and i1 %336, %392
  br i1 %393, label %411, label %394

394:                                              ; preds = %391
  store i64 %335, i64* %51, align 8, !tbaa !18
  br label %395

395:                                              ; preds = %394, %387
  %396 = phi i64 [ %335, %394 ], [ %388, %387 ]
  %397 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %398 = load i32, i32* %397, align 4, !tbaa !23
  call fastcc void @update_initial_timestamps(%struct.AVFormatContext.328* %0, i32 %398, i64 %396, i64 %396, %struct.AVPacket* nonnull %3)
  %399 = load i64, i64* %51, align 8, !tbaa !18
  %400 = icmp eq i64 %399, -9223372036854775808
  br i1 %400, label %402, label %401

401:                                              ; preds = %395
  store i64 %399, i64* %334, align 8, !tbaa !19
  br label %406

402:                                              ; preds = %395
  %403 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 20
  %404 = load i64, i64* %403, align 8, !tbaa !494
  store i64 %404, i64* %51, align 8, !tbaa !18
  store i64 %404, i64* %334, align 8, !tbaa !19
  %405 = icmp eq i64 %404, -9223372036854775808
  br i1 %405, label %411, label %406

406:                                              ; preds = %402, %401
  %407 = phi i64 [ %399, %401 ], [ %404, %402 ]
  %408 = sext i32 %390 to i64
  %409 = add nsw i64 %407, %408
  %410 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 20
  store i64 %409, i64* %410, align 8, !tbaa !494
  br label %411

411:                                              ; preds = %406, %402, %391, %383, %348, %343
  %412 = phi i64 [ %407, %406 ], [ -9223372036854775808, %402 ], [ %335, %343 ], [ %335, %348 ], [ %370, %383 ], [ -9223372036854775808, %391 ]
  %413 = load i64, i64* %51, align 8, !tbaa !18
  %414 = icmp ne i64 %413, -9223372036854775808
  %415 = icmp slt i32 %41, 17
  %416 = and i1 %415, %414
  %417 = load %struct.AVCodecContext*, %struct.AVCodecContext** %26, align 8, !tbaa !378
  %418 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %417, i64 0, i32 5
  %419 = load i32, i32* %418, align 8, !tbaa !238
  br i1 %416, label %420, label %460

420:                                              ; preds = %411
  %421 = icmp eq i32 %419, 28
  br i1 %421, label %422, label %442

422:                                              ; preds = %420
  %423 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 16
  %424 = load %struct.anon.0*, %struct.anon.0** %423, align 8, !tbaa !504
  %425 = icmp eq %struct.anon.0* %424, null
  br i1 %425, label %442, label %426

426:                                              ; preds = %422
  %427 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %417, i64 0, i32 39
  %428 = load i32, i32* %427, align 4, !tbaa !197
  %429 = icmp slt i32 %428, 3
  br i1 %429, label %430, label %434

430:                                              ; preds = %426
  %431 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 39
  %432 = load i32, i32* %431, align 4, !tbaa !505
  %433 = icmp sgt i32 %432, 6
  br i1 %433, label %442, label %463

434:                                              ; preds = %426
  %435 = icmp eq i32 %428, 3
  %436 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 39
  %437 = load i32, i32* %436, align 4, !tbaa !505
  br i1 %435, label %438, label %440

438:                                              ; preds = %434
  %439 = icmp sgt i32 %437, 17
  br i1 %439, label %442, label %463

440:                                              ; preds = %434
  %441 = icmp sgt i32 %437, 19
  br i1 %441, label %442, label %463

442:                                              ; preds = %440, %438, %430, %422, %420
  %443 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 32, i64 0
  store i64 %413, i64* %443, align 8, !tbaa !26
  %444 = icmp sgt i32 %41, 0
  br i1 %444, label %445, label %.loopexit

445:                                              ; preds = %442
  %446 = zext i32 %41 to i64
  br label %447

447:                                              ; preds = %453, %445
  %448 = phi i64 [ 0, %445 ], [ %449, %453 ]
  %449 = add nuw nsw i64 %448, 1
  %450 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 32, i64 %449
  %451 = load i64, i64* %450, align 8, !tbaa !26
  %452 = icmp sgt i64 %413, %451
  br i1 %452, label %453, label %.loopexit

453:                                              ; preds = %447
  %454 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 32, i64 %448
  store i64 %413, i64* %450, align 8, !tbaa !26
  store i64 %451, i64* %454, align 8, !tbaa !26
  %455 = icmp eq i64 %449, %446
  br i1 %455, label %.loopexit, label %447

.loopexit:                                        ; preds = %453, %447, %442
  %456 = load i64, i64* %334, align 8, !tbaa !19
  %457 = icmp eq i64 %456, -9223372036854775808
  br i1 %457, label %458, label %460

458:                                              ; preds = %.loopexit
  %459 = load i64, i64* %443, align 8, !tbaa !26
  store i64 %459, i64* %334, align 8, !tbaa !19
  br label %460

460:                                              ; preds = %458, %.loopexit, %411
  %461 = phi i64 [ %456, %.loopexit ], [ %459, %458 ], [ %412, %411 ]
  %462 = icmp eq i32 %419, 28
  br i1 %462, label %463, label %469

463:                                              ; preds = %460, %440, %438, %430
  %464 = phi i64 [ %461, %460 ], [ %412, %440 ], [ %412, %430 ], [ %412, %438 ]
  %465 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %466 = load i32, i32* %465, align 4, !tbaa !23
  %467 = load i64, i64* %51, align 8, !tbaa !18
  call fastcc void @update_initial_timestamps(%struct.AVFormatContext.328* %0, i32 %466, i64 %464, i64 %467, %struct.AVPacket* nonnull %3)
  %468 = load i64, i64* %334, align 8, !tbaa !19
  br label %469

469:                                              ; preds = %463, %460
  %470 = phi i64 [ %468, %463 ], [ %461, %460 ]
  %471 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 20
  %472 = load i64, i64* %471, align 8, !tbaa !494
  %473 = icmp sgt i64 %470, %472
  br i1 %473, label %474, label %475

474:                                              ; preds = %469
  store i64 %470, i64* %471, align 8, !tbaa !494
  br label %475

475:                                              ; preds = %474, %469
  %476 = load %struct.AVCodecContext*, %struct.AVCodecContext** %26, align 8, !tbaa !378
  %477 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %476, i64 0, i32 2
  %478 = load i32, i32* %477, align 4, !tbaa !136
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %480, label %495

480:                                              ; preds = %475
  %481 = bitcast %struct.AVCodecContext* %476 to %struct.AVCodecContext.129*
  %482 = call fastcc %struct.AVCodecDescriptor* @av_codec_get_codec_descriptor(%struct.AVCodecContext.129* nonnull %481) #18
  %483 = icmp eq %struct.AVCodecDescriptor* %482, null
  br i1 %483, label %484, label %489

484:                                              ; preds = %480
  %485 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %476, i64 0, i32 5
  %486 = load i32, i32* %485, align 8, !tbaa !238
  %487 = call fastcc %struct.AVCodecDescriptor* @avcodec_descriptor_get(i32 %486) #18
  call fastcc void @av_codec_set_codec_descriptor(%struct.AVCodecContext.129* nonnull %481, %struct.AVCodecDescriptor* %487) #18
  %488 = icmp eq %struct.AVCodecDescriptor* %487, null
  br i1 %488, label %499, label %489

489:                                              ; preds = %484, %480
  %490 = phi %struct.AVCodecDescriptor* [ %487, %484 ], [ %482, %480 ]
  %491 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %490, i64 0, i32 4
  %492 = load i32, i32* %491, align 8, !tbaa !506
  %493 = and i32 %492, 1
  %494 = icmp eq i32 %493, 0
  br i1 %494, label %499, label %495

495:                                              ; preds = %489, %475
  %496 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 5
  %497 = load i32, i32* %496, align 8, !tbaa !22
  %498 = or i32 %497, 1
  store i32 %498, i32* %496, align 8, !tbaa !22
  br label %499

499:                                              ; preds = %495, %489, %484
  br i1 %31, label %500, label %504

500:                                              ; preds = %499
  %501 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %2, i64 0, i32 20
  %502 = load i64, i64* %501, align 8, !tbaa !507
  %503 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 12
  store i64 %502, i64* %503, align 8, !tbaa !21
  br label %504

504:                                              ; preds = %500, %499, %4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @update_initial_timestamps(%struct.AVFormatContext.328* nocapture readonly, i32, i64, i64, %struct.AVPacket* nocapture) unnamed_addr #5 {
  %6 = alloca [17 x i64], align 16
  %7 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %8 = load %struct.AVStream**, %struct.AVStream*** %7, align 8, !tbaa !444
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %9
  %11 = load %struct.AVStream*, %struct.AVStream** %10, align 8, !tbaa !27
  %12 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 49
  %13 = load %struct.AVPacketList*, %struct.AVPacketList** %12, align 8, !tbaa !483
  %14 = icmp eq %struct.AVPacketList* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 44
  %17 = load %struct.AVPacketList*, %struct.AVPacketList** %16, align 8, !tbaa !474
  br label %18

18:                                               ; preds = %15, %5
  %19 = phi %struct.AVPacketList* [ %17, %15 ], [ %13, %5 ]
  %20 = bitcast [17 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %20) #18
  %21 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 19
  %22 = load i64, i64* %21, align 8, !tbaa !495
  %23 = icmp ne i64 %22, -9223372036854775808
  %24 = icmp eq i64 %2, -9223372036854775808
  %25 = or i1 %24, %23
  br i1 %25, label %504, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 20
  %28 = load i64, i64* %27, align 8, !tbaa !494
  %29 = icmp ne i64 %28, -9223372036854775808
  %30 = icmp slt i64 %2, 9222809086901354496
  %31 = and i1 %30, %29
  br i1 %31, label %32, label %504

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 2
  %34 = load %struct.AVCodecContext*, %struct.AVCodecContext** %33, align 8, !tbaa !378
  %35 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %34, i64 0, i32 39
  %36 = load i32, i32* %35, align 4, !tbaa !197
  %37 = add i64 %2, 9223090561878065151
  %38 = sub i64 %37, %28
  store i64 %38, i64* %21, align 8, !tbaa !495
  store i64 %2, i64* %27, align 8, !tbaa !494
  %39 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 0
  store i64 -9223372036854775808, i64* %39, align 16, !tbaa !26
  %40 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 1
  store i64 -9223372036854775808, i64* %40, align 8, !tbaa !26
  %41 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 2
  store i64 -9223372036854775808, i64* %41, align 16, !tbaa !26
  %42 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 3
  store i64 -9223372036854775808, i64* %42, align 8, !tbaa !26
  %43 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 4
  store i64 -9223372036854775808, i64* %43, align 16, !tbaa !26
  %44 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 5
  store i64 -9223372036854775808, i64* %44, align 8, !tbaa !26
  %45 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 6
  store i64 -9223372036854775808, i64* %45, align 16, !tbaa !26
  %46 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 7
  store i64 -9223372036854775808, i64* %46, align 8, !tbaa !26
  %47 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 8
  store i64 -9223372036854775808, i64* %47, align 16, !tbaa !26
  %48 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 9
  store i64 -9223372036854775808, i64* %48, align 8, !tbaa !26
  %49 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 10
  store i64 -9223372036854775808, i64* %49, align 16, !tbaa !26
  %50 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 11
  store i64 -9223372036854775808, i64* %50, align 8, !tbaa !26
  %51 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 12
  store i64 -9223372036854775808, i64* %51, align 16, !tbaa !26
  %52 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 13
  store i64 -9223372036854775808, i64* %52, align 8, !tbaa !26
  %53 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 14
  store i64 -9223372036854775808, i64* %53, align 16, !tbaa !26
  %54 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 15
  store i64 -9223372036854775808, i64* %54, align 8, !tbaa !26
  %55 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 16
  store i64 -9223372036854775808, i64* %55, align 16, !tbaa !26
  %56 = add nsw i64 %38, -9223090561878065151
  %57 = icmp slt i64 %3, 9222809086901354496
  %58 = select i1 %57, i64 0, i64 %56
  %59 = add nsw i64 %58, %3
  %60 = icmp eq %struct.AVPacketList* %19, null
  br i1 %60, label %.loopexit62, label %61

61:                                               ; preds = %32
  %62 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 7
  %63 = icmp slt i32 %36, 17
  %64 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %34, i64 0, i32 5
  %65 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 16
  %66 = icmp slt i32 %36, 3
  %67 = icmp eq i32 %36, 3
  %68 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 39
  %69 = icmp sgt i32 %36, 0
  %70 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 50
  %71 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 44
  br i1 %63, label %72, label %.preheader63

72:                                               ; preds = %61
  %73 = zext i32 %36 to i64
  br label %74

74:                                               ; preds = %133, %72
  %75 = phi %struct.AVPacketList* [ %134, %133 ], [ %19, %72 ]
  %76 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %75, i64 0, i32 0, i32 4
  %77 = load i32, i32* %76, align 4, !tbaa !475
  %78 = icmp eq i32 %77, %1
  br i1 %78, label %79, label %124

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %75, i64 0, i32 0, i32 0
  %81 = load i64, i64* %80, align 8, !tbaa !477
  %82 = icmp slt i64 %81, 9222809086901354496
  br i1 %82, label %85, label %83

83:                                               ; preds = %79
  %84 = add nsw i64 %81, %56
  store i64 %84, i64* %80, align 8, !tbaa !477
  br label %85

85:                                               ; preds = %83, %79
  %86 = phi i64 [ %84, %83 ], [ %81, %79 ]
  %87 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %75, i64 0, i32 0, i32 1
  %88 = load i64, i64* %87, align 8, !tbaa !476
  %89 = icmp slt i64 %88, 9222809086901354496
  br i1 %89, label %92, label %90

90:                                               ; preds = %85
  %91 = add nsw i64 %88, %56
  store i64 %91, i64* %87, align 8, !tbaa !476
  br label %92

92:                                               ; preds = %90, %85
  %93 = phi i64 [ %91, %90 ], [ %88, %85 ]
  %94 = load i64, i64* %62, align 8, !tbaa !508
  %95 = icmp eq i64 %94, -9223372036854775808
  %96 = icmp eq i64 %86, -9223372036854775808
  br i1 %95, label %97, label %99

97:                                               ; preds = %92
  br i1 %96, label %124, label %98

98:                                               ; preds = %97
  store i64 %86, i64* %62, align 8, !tbaa !508
  br label %100

99:                                               ; preds = %92
  br i1 %96, label %124, label %100

100:                                              ; preds = %99, %98
  %101 = load i32, i32* %64, align 8, !tbaa !238
  %102 = icmp eq i32 %101, 28
  br i1 %102, label %103, label %115

103:                                              ; preds = %100
  %104 = load %struct.anon.0*, %struct.anon.0** %65, align 8, !tbaa !504
  %105 = icmp eq %struct.anon.0* %104, null
  br i1 %105, label %115, label %106

106:                                              ; preds = %103
  %107 = load i32, i32* %68, align 4, !tbaa !505
  br i1 %66, label %111, label %108

108:                                              ; preds = %106
  br i1 %67, label %109, label %113

109:                                              ; preds = %108
  %110 = icmp sgt i32 %107, 17
  br i1 %110, label %115, label %124

111:                                              ; preds = %106
  %112 = icmp sgt i32 %107, 6
  br i1 %112, label %115, label %124

113:                                              ; preds = %108
  %114 = icmp sgt i32 %107, 19
  br i1 %114, label %115, label %124

115:                                              ; preds = %113, %111, %109, %103, %100
  store i64 %86, i64* %39, align 16, !tbaa !26
  br i1 %69, label %.preheader60, label %.loopexit61

.preheader60:                                     ; preds = %115, %136
  %116 = phi i64 [ %117, %136 ], [ 0, %115 ]
  %117 = add nuw nsw i64 %116, 1
  %118 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 %117
  %119 = load i64, i64* %118, align 8, !tbaa !26
  %120 = icmp sgt i64 %86, %119
  br i1 %120, label %136, label %.loopexit61

.loopexit61:                                      ; preds = %136, %.preheader60, %115
  %121 = icmp eq i64 %93, -9223372036854775808
  br i1 %121, label %122, label %124

122:                                              ; preds = %.loopexit61
  %123 = load i64, i64* %39, align 16, !tbaa !26
  store i64 %123, i64* %87, align 8, !tbaa !476
  br label %124

124:                                              ; preds = %122, %.loopexit61, %113, %111, %109, %99, %97, %74
  %125 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %75, i64 0, i32 1
  %126 = load %struct.AVPacketList*, %struct.AVPacketList** %125, align 8, !tbaa !454
  %127 = icmp eq %struct.AVPacketList* %126, null
  br i1 %127, label %128, label %133

128:                                              ; preds = %124
  %129 = load %struct.AVPacketList*, %struct.AVPacketList** %70, align 8, !tbaa !497
  %130 = icmp eq %struct.AVPacketList* %129, %75
  br i1 %130, label %131, label %.loopexit62

131:                                              ; preds = %128
  %132 = load %struct.AVPacketList*, %struct.AVPacketList** %71, align 8, !tbaa !474
  br label %133

133:                                              ; preds = %131, %124
  %134 = phi %struct.AVPacketList* [ %132, %131 ], [ %126, %124 ]
  %135 = icmp eq %struct.AVPacketList* %134, null
  br i1 %135, label %.loopexit62, label %74

136:                                              ; preds = %.preheader60
  %137 = getelementptr inbounds [17 x i64], [17 x i64]* %6, i64 0, i64 %116
  store i64 %86, i64* %118, align 8, !tbaa !26
  store i64 %119, i64* %137, align 8, !tbaa !26
  %138 = icmp eq i64 %117, %73
  br i1 %138, label %.loopexit61, label %.preheader60

.preheader63:                                     ; preds = %61, %171
  %139 = phi %struct.AVPacketList* [ %172, %171 ], [ %19, %61 ]
  %140 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %139, i64 0, i32 0, i32 4
  %141 = load i32, i32* %140, align 4, !tbaa !475
  %142 = icmp eq i32 %141, %1
  br i1 %142, label %143, label %162

143:                                              ; preds = %.preheader63
  %144 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %139, i64 0, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !477
  %146 = icmp slt i64 %145, 9222809086901354496
  br i1 %146, label %149, label %147

147:                                              ; preds = %143
  %148 = add nsw i64 %145, %56
  store i64 %148, i64* %144, align 8, !tbaa !477
  br label %149

149:                                              ; preds = %147, %143
  %150 = phi i64 [ %145, %143 ], [ %148, %147 ]
  %151 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %139, i64 0, i32 0, i32 1
  %152 = load i64, i64* %151, align 8, !tbaa !476
  %153 = icmp slt i64 %152, 9222809086901354496
  br i1 %153, label %156, label %154

154:                                              ; preds = %149
  %155 = add nsw i64 %152, %56
  store i64 %155, i64* %151, align 8, !tbaa !476
  br label %156

156:                                              ; preds = %154, %149
  %157 = load i64, i64* %62, align 8, !tbaa !508
  %158 = icmp ne i64 %157, -9223372036854775808
  %159 = icmp eq i64 %150, -9223372036854775808
  %160 = or i1 %159, %158
  br i1 %160, label %162, label %161

161:                                              ; preds = %156
  store i64 %150, i64* %62, align 8, !tbaa !508
  br label %162

162:                                              ; preds = %161, %156, %.preheader63
  %163 = getelementptr inbounds %struct.AVPacketList, %struct.AVPacketList* %139, i64 0, i32 1
  %164 = load %struct.AVPacketList*, %struct.AVPacketList** %163, align 8, !tbaa !454
  %165 = icmp eq %struct.AVPacketList* %164, null
  br i1 %165, label %166, label %171

166:                                              ; preds = %162
  %167 = load %struct.AVPacketList*, %struct.AVPacketList** %70, align 8, !tbaa !497
  %168 = icmp eq %struct.AVPacketList* %167, %139
  br i1 %168, label %169, label %.loopexit62

169:                                              ; preds = %166
  %170 = load %struct.AVPacketList*, %struct.AVPacketList** %71, align 8, !tbaa !474
  br label %171

171:                                              ; preds = %169, %162
  %172 = phi %struct.AVPacketList* [ %170, %169 ], [ %164, %162 ]
  %173 = icmp eq %struct.AVPacketList* %172, null
  br i1 %173, label %.loopexit62, label %.preheader63

.loopexit62:                                      ; preds = %171, %166, %133, %128, %32
  %174 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 43
  %175 = load i32, i32* %174, align 8, !tbaa !509
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %498, label %177

177:                                              ; preds = %.loopexit62
  %178 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 17
  %179 = load i32, i32* %178, align 8, !tbaa !460
  %180 = icmp slt i32 %179, 63
  br i1 %180, label %181, label %498

181:                                              ; preds = %177
  %182 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 41
  %183 = load i64, i64* %182, align 8, !tbaa !459
  %184 = icmp ne i64 %183, -9223372036854775808
  %185 = icmp eq i64 %38, -9223372036854775808
  %186 = or i1 %185, %184
  br i1 %186, label %498, label %187

187:                                              ; preds = %181
  %188 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 6, i32 1
  %189 = load i32, i32* %188, align 4, !tbaa !471
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 6, i32 0
  %192 = load i32, i32* %191, align 8, !tbaa !470
  %193 = sext i32 %192 to i64
  %194 = tail call fastcc i64 @av_rescale(i64 60, i64 %190, i64 %193) #29
  %195 = sub nsw i64 %38, %194
  %196 = zext i32 %179 to i64
  %197 = shl i64 1, %196
  %198 = add nsw i32 %179, -3
  %199 = zext i32 %198 to i64
  %200 = shl i64 1, %199
  %201 = sub nsw i64 %197, %200
  %202 = icmp slt i64 %38, %201
  br i1 %202, label %207, label %203

203:                                              ; preds = %187
  %204 = sub nsw i64 %197, %194
  %205 = icmp slt i64 %38, %204
  %206 = select i1 %205, i32 1, i32 -1
  br label %207

207:                                              ; preds = %203, %187
  %208 = phi i32 [ 1, %187 ], [ %206, %203 ]
  %209 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 19
  %210 = load i32, i32* %209, align 4, !tbaa !448
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %.loopexit59, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 20
  %214 = load %struct.AVProgram**, %struct.AVProgram*** %213, align 8, !tbaa !449
  %215 = zext i32 %210 to i64
  br label %216

216:                                              ; preds = %.loopexit58, %212
  %217 = phi i64 [ 0, %212 ], [ %237, %.loopexit58 ]
  %218 = getelementptr inbounds %struct.AVProgram*, %struct.AVProgram** %214, i64 %217
  %219 = load %struct.AVProgram*, %struct.AVProgram** %218, align 8, !tbaa !27
  %220 = icmp eq %struct.AVProgram* %219, null
  br i1 %220, label %.loopexit58, label %221

221:                                              ; preds = %216
  %222 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %219, i64 0, i32 4
  %223 = load i32, i32* %222, align 8, !tbaa !510
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %.loopexit58, label %225

225:                                              ; preds = %221
  %226 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %219, i64 0, i32 3
  %227 = load i32*, i32** %226, align 8, !tbaa !512
  %228 = zext i32 %223 to i64
  br label %231

229:                                              ; preds = %231
  %230 = icmp eq i64 %236, %228
  br i1 %230, label %.loopexit58, label %231

231:                                              ; preds = %229, %225
  %232 = phi i64 [ 0, %225 ], [ %236, %229 ]
  %233 = getelementptr inbounds i32, i32* %227, i64 %232
  %234 = load i32, i32* %233, align 4, !tbaa !28
  %235 = icmp eq i32 %234, %1
  %236 = add nuw nsw i64 %232, 1
  br i1 %235, label %.preheader56, label %229

.loopexit58:                                      ; preds = %229, %221, %216
  %237 = add nuw nsw i64 %217, 1
  %238 = icmp eq i64 %237, %215
  br i1 %238, label %.loopexit59, label %216

.loopexit59:                                      ; preds = %.loopexit58, %207
  %239 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 6
  %240 = load i32, i32* %239, align 4, !tbaa !443
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %272, label %242

242:                                              ; preds = %.loopexit59
  %243 = zext i32 %240 to i64
  br label %244

244:                                              ; preds = %259, %242
  %245 = phi i64 [ 0, %242 ], [ %265, %259 ]
  %246 = phi i32 [ -1, %242 ], [ %264, %259 ]
  %247 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %245
  %248 = load %struct.AVStream*, %struct.AVStream** %247, align 8, !tbaa !27
  %249 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %248, i64 0, i32 2
  %250 = load %struct.AVCodecContext*, %struct.AVCodecContext** %249, align 8, !tbaa !378
  %251 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %250, i64 0, i32 2
  %252 = load i32, i32* %251, align 4, !tbaa !136
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %259

254:                                              ; preds = %244
  %255 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %248, i64 0, i32 10
  %256 = load i32, i32* %255, align 8, !tbaa !406
  %257 = and i32 %256, 1024
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %270, label %259

259:                                              ; preds = %254, %244
  %260 = icmp slt i32 %246, 0
  %261 = icmp eq i32 %252, 1
  %262 = and i1 %260, %261
  %263 = trunc i64 %245 to i32
  %264 = select i1 %262, i32 %263, i32 %246
  %265 = add nuw nsw i64 %245, 1
  %266 = icmp eq i64 %265, %243
  br i1 %266, label %267, label %244

267:                                              ; preds = %259
  %268 = icmp sgt i32 %264, 0
  %269 = select i1 %268, i32 %264, i32 0
  br label %272

270:                                              ; preds = %254
  %271 = trunc i64 %245 to i32
  br label %272

272:                                              ; preds = %270, %267, %.loopexit59
  %273 = phi i32 [ %269, %267 ], [ -1, %.loopexit59 ], [ %271, %270 ]
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %274
  %276 = load %struct.AVStream*, %struct.AVStream** %275, align 8, !tbaa !27
  %277 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %276, i64 0, i32 41
  %278 = load i64, i64* %277, align 8, !tbaa !459
  %279 = icmp eq i64 %278, -9223372036854775808
  br i1 %279, label %280, label %313

280:                                              ; preds = %272
  br i1 %241, label %.loopexit, label %281

281:                                              ; preds = %280
  %282 = zext i32 %240 to i64
  %283 = add nsw i64 %282, -1
  %284 = and i64 %282, 3
  %285 = icmp ult i64 %283, 3
  br i1 %285, label %.loopexit46, label %286

286:                                              ; preds = %281
  %287 = sub nuw nsw i64 %282, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %310, %288 ]
  %290 = phi i64 [ %287, %286 ], [ %311, %288 ]
  %291 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %289
  %292 = load %struct.AVStream*, %struct.AVStream** %291, align 8, !tbaa !27
  %293 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %292, i64 0, i32 41
  store i64 %195, i64* %293, align 8, !tbaa !459
  %294 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %292, i64 0, i32 42
  store i32 %208, i32* %294, align 8, !tbaa !458
  %295 = or i64 %289, 1
  %296 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %295
  %297 = load %struct.AVStream*, %struct.AVStream** %296, align 8, !tbaa !27
  %298 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %297, i64 0, i32 41
  store i64 %195, i64* %298, align 8, !tbaa !459
  %299 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %297, i64 0, i32 42
  store i32 %208, i32* %299, align 8, !tbaa !458
  %300 = or i64 %289, 2
  %301 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %300
  %302 = load %struct.AVStream*, %struct.AVStream** %301, align 8, !tbaa !27
  %303 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %302, i64 0, i32 41
  store i64 %195, i64* %303, align 8, !tbaa !459
  %304 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %302, i64 0, i32 42
  store i32 %208, i32* %304, align 8, !tbaa !458
  %305 = or i64 %289, 3
  %306 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %305
  %307 = load %struct.AVStream*, %struct.AVStream** %306, align 8, !tbaa !27
  %308 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %307, i64 0, i32 41
  store i64 %195, i64* %308, align 8, !tbaa !459
  %309 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %307, i64 0, i32 42
  store i32 %208, i32* %309, align 8, !tbaa !458
  %310 = add nuw nsw i64 %289, 4
  %311 = add i64 %290, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %.loopexit46, label %288

313:                                              ; preds = %272
  store i64 %278, i64* %182, align 8, !tbaa !459
  %314 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %276, i64 0, i32 42
  %315 = load i32, i32* %314, align 8, !tbaa !458
  %316 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 42
  store i32 %315, i32* %316, align 8, !tbaa !458
  br label %.loopexit

.preheader56:                                     ; preds = %231, %350
  %317 = phi %struct.AVProgram* [ %327, %350 ], [ %219, %231 ]
  %318 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %317, i64 0, i32 11
  %319 = load i64, i64* %318, align 8, !tbaa !513
  %320 = icmp eq i64 %319, -9223372036854775808
  br i1 %320, label %.preheader54, label %321

321:                                              ; preds = %.preheader56
  %322 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %317, i64 0, i32 12
  %323 = load i32, i32* %322, align 8, !tbaa !514
  br label %.loopexit55

.preheader54:                                     ; preds = %.preheader56, %.loopexit53
  %324 = phi i64 [ %348, %.loopexit53 ], [ 0, %.preheader56 ]
  %325 = phi %struct.AVProgram* [ %347, %.loopexit53 ], [ %317, %.preheader56 ]
  %326 = getelementptr inbounds %struct.AVProgram*, %struct.AVProgram** %214, i64 %324
  %327 = load %struct.AVProgram*, %struct.AVProgram** %326, align 8, !tbaa !27
  %328 = icmp eq %struct.AVProgram* %327, %325
  br i1 %328, label %.loopexit53, label %329

329:                                              ; preds = %.preheader54
  %330 = icmp eq %struct.AVProgram* %325, null
  br i1 %330, label %331, label %.loopexit53

331:                                              ; preds = %329
  %332 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %327, i64 0, i32 4
  %333 = load i32, i32* %332, align 8, !tbaa !510
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %.loopexit53, label %335

335:                                              ; preds = %331
  %336 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %327, i64 0, i32 3
  %337 = load i32*, i32** %336, align 8, !tbaa !512
  %338 = zext i32 %333 to i64
  br label %341

339:                                              ; preds = %341
  %340 = icmp eq i64 %346, %338
  br i1 %340, label %.loopexit53, label %341

341:                                              ; preds = %339, %335
  %342 = phi i64 [ 0, %335 ], [ %346, %339 ]
  %343 = getelementptr inbounds i32, i32* %337, i64 %342
  %344 = load i32, i32* %343, align 4, !tbaa !28
  %345 = icmp eq i32 %344, %1
  %346 = add nuw nsw i64 %342, 1
  br i1 %345, label %350, label %339

.loopexit53:                                      ; preds = %339, %331, %329, %.preheader54
  %347 = phi %struct.AVProgram* [ %325, %329 ], [ null, %.preheader54 ], [ null, %331 ], [ null, %339 ]
  %348 = add nuw nsw i64 %324, 1
  %349 = icmp eq i64 %348, %215
  br i1 %349, label %.loopexit55, label %.preheader54

350:                                              ; preds = %341
  %351 = icmp eq %struct.AVProgram* %327, null
  br i1 %351, label %.loopexit55, label %.preheader56

.loopexit55:                                      ; preds = %350, %.loopexit53, %321
  %352 = phi i64 [ %319, %321 ], [ %195, %.loopexit53 ], [ %195, %350 ]
  %353 = phi i32 [ %323, %321 ], [ %208, %.loopexit53 ], [ %208, %350 ]
  br label %354

354:                                              ; preds = %449, %.loopexit55
  %355 = phi i32* [ %436, %449 ], [ %227, %.loopexit55 ]
  %356 = phi i32 [ %432, %449 ], [ %223, %.loopexit55 ]
  %357 = phi %struct.AVProgram* [ %426, %449 ], [ %219, %.loopexit55 ]
  %358 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %357, i64 0, i32 11
  %359 = load i64, i64* %358, align 8, !tbaa !513
  %360 = icmp eq i64 %359, %352
  br i1 %360, label %.preheader157, label %361

361:                                              ; preds = %354
  %362 = icmp eq i32 %356, 0
  br i1 %362, label %.loopexit50, label %363

363:                                              ; preds = %361
  %364 = zext i32 %356 to i64
  %365 = add nsw i64 %364, -1
  %366 = and i64 %364, 3
  %367 = icmp ult i64 %365, 3
  br i1 %367, label %.loopexit51, label %368

368:                                              ; preds = %363
  %369 = sub nuw nsw i64 %364, %366
  br label %370

370:                                              ; preds = %370, %368
  %371 = phi i64 [ 0, %368 ], [ %404, %370 ]
  %372 = phi i64 [ %369, %368 ], [ %405, %370 ]
  %373 = getelementptr inbounds i32, i32* %355, i64 %371
  %374 = load i32, i32* %373, align 4, !tbaa !28
  %375 = zext i32 %374 to i64
  %376 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %375
  %377 = load %struct.AVStream*, %struct.AVStream** %376, align 8, !tbaa !27
  %378 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %377, i64 0, i32 41
  store i64 %352, i64* %378, align 8, !tbaa !459
  %379 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %377, i64 0, i32 42
  store i32 %353, i32* %379, align 8, !tbaa !458
  %380 = or i64 %371, 1
  %381 = getelementptr inbounds i32, i32* %355, i64 %380
  %382 = load i32, i32* %381, align 4, !tbaa !28
  %383 = zext i32 %382 to i64
  %384 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %383
  %385 = load %struct.AVStream*, %struct.AVStream** %384, align 8, !tbaa !27
  %386 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %385, i64 0, i32 41
  store i64 %352, i64* %386, align 8, !tbaa !459
  %387 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %385, i64 0, i32 42
  store i32 %353, i32* %387, align 8, !tbaa !458
  %388 = or i64 %371, 2
  %389 = getelementptr inbounds i32, i32* %355, i64 %388
  %390 = load i32, i32* %389, align 4, !tbaa !28
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %391
  %393 = load %struct.AVStream*, %struct.AVStream** %392, align 8, !tbaa !27
  %394 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %393, i64 0, i32 41
  store i64 %352, i64* %394, align 8, !tbaa !459
  %395 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %393, i64 0, i32 42
  store i32 %353, i32* %395, align 8, !tbaa !458
  %396 = or i64 %371, 3
  %397 = getelementptr inbounds i32, i32* %355, i64 %396
  %398 = load i32, i32* %397, align 4, !tbaa !28
  %399 = zext i32 %398 to i64
  %400 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %399
  %401 = load %struct.AVStream*, %struct.AVStream** %400, align 8, !tbaa !27
  %402 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %401, i64 0, i32 41
  store i64 %352, i64* %402, align 8, !tbaa !459
  %403 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %401, i64 0, i32 42
  store i32 %353, i32* %403, align 8, !tbaa !458
  %404 = add nuw nsw i64 %371, 4
  %405 = add i64 %372, -4
  %406 = icmp eq i64 %405, 0
  br i1 %406, label %.loopexit51, label %370

.loopexit51:                                      ; preds = %370, %363
  %407 = phi i64 [ 0, %363 ], [ %404, %370 ]
  %408 = icmp eq i64 %366, 0
  br i1 %408, label %.loopexit50, label %.preheader49

.preheader49:                                     ; preds = %.loopexit51, %.preheader49
  %409 = phi i64 [ %418, %.preheader49 ], [ %407, %.loopexit51 ]
  %410 = phi i64 [ %419, %.preheader49 ], [ %366, %.loopexit51 ]
  %411 = getelementptr inbounds i32, i32* %355, i64 %409
  %412 = load i32, i32* %411, align 4, !tbaa !28
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %413
  %415 = load %struct.AVStream*, %struct.AVStream** %414, align 8, !tbaa !27
  %416 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %415, i64 0, i32 41
  store i64 %352, i64* %416, align 8, !tbaa !459
  %417 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %415, i64 0, i32 42
  store i32 %353, i32* %417, align 8, !tbaa !458
  %418 = add nuw nsw i64 %409, 1
  %419 = add nsw i64 %410, -1
  %420 = icmp eq i64 %419, 0
  br i1 %420, label %.loopexit50, label %.preheader49, !llvm.loop !515

.loopexit50:                                      ; preds = %.preheader49, %.loopexit51, %361
  store i64 %352, i64* %358, align 8, !tbaa !513
  %421 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %357, i64 0, i32 12
  store i32 %353, i32* %421, align 8, !tbaa !514
  br label %.preheader157

.preheader157:                                    ; preds = %.loopexit50, %354
  br label %422

422:                                              ; preds = %.preheader157, %.loopexit47
  %423 = phi i64 [ %447, %.loopexit47 ], [ 0, %.preheader157 ]
  %424 = phi %struct.AVProgram* [ %446, %.loopexit47 ], [ %357, %.preheader157 ]
  %425 = getelementptr inbounds %struct.AVProgram*, %struct.AVProgram** %214, i64 %423
  %426 = load %struct.AVProgram*, %struct.AVProgram** %425, align 8, !tbaa !27
  %427 = icmp eq %struct.AVProgram* %426, %424
  br i1 %427, label %.loopexit47, label %428

428:                                              ; preds = %422
  %429 = icmp eq %struct.AVProgram* %424, null
  br i1 %429, label %430, label %.loopexit47

430:                                              ; preds = %428
  %431 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %426, i64 0, i32 4
  %432 = load i32, i32* %431, align 8, !tbaa !510
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %.loopexit47, label %434

434:                                              ; preds = %430
  %435 = getelementptr inbounds %struct.AVProgram, %struct.AVProgram* %426, i64 0, i32 3
  %436 = load i32*, i32** %435, align 8, !tbaa !512
  %437 = zext i32 %432 to i64
  br label %440

438:                                              ; preds = %440
  %439 = icmp eq i64 %445, %437
  br i1 %439, label %.loopexit47, label %440

440:                                              ; preds = %438, %434
  %441 = phi i64 [ 0, %434 ], [ %445, %438 ]
  %442 = getelementptr inbounds i32, i32* %436, i64 %441
  %443 = load i32, i32* %442, align 4, !tbaa !28
  %444 = icmp eq i32 %443, %1
  %445 = add nuw nsw i64 %441, 1
  br i1 %444, label %449, label %438

.loopexit47:                                      ; preds = %438, %430, %428, %422
  %446 = phi %struct.AVProgram* [ %424, %428 ], [ null, %422 ], [ null, %430 ], [ null, %438 ]
  %447 = add nuw nsw i64 %423, 1
  %448 = icmp eq i64 %447, %215
  br i1 %448, label %.loopexit, label %422

449:                                              ; preds = %440
  %450 = icmp eq %struct.AVProgram* %426, null
  br i1 %450, label %.loopexit, label %354

.loopexit46:                                      ; preds = %288, %281
  %451 = phi i64 [ 0, %281 ], [ %310, %288 ]
  %452 = icmp eq i64 %284, 0
  br i1 %452, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %.loopexit46, %.preheader
  %453 = phi i64 [ %459, %.preheader ], [ %451, %.loopexit46 ]
  %454 = phi i64 [ %460, %.preheader ], [ %284, %.loopexit46 ]
  %455 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %8, i64 %453
  %456 = load %struct.AVStream*, %struct.AVStream** %455, align 8, !tbaa !27
  %457 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %456, i64 0, i32 41
  store i64 %195, i64* %457, align 8, !tbaa !459
  %458 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %456, i64 0, i32 42
  store i32 %208, i32* %458, align 8, !tbaa !458
  %459 = add nuw nsw i64 %453, 1
  %460 = add nsw i64 %454, -1
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %.loopexit, label %.preheader, !llvm.loop !516

.loopexit:                                        ; preds = %449, %.loopexit47, %.preheader, %.loopexit46, %313, %280
  %462 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 42
  %463 = load i32, i32* %462, align 8, !tbaa !458
  %464 = icmp eq i32 %463, -1
  br i1 %464, label %465, label %498

465:                                              ; preds = %.loopexit
  %466 = load i64, i64* %182, align 8, !tbaa !459
  %467 = icmp eq i64 %466, -9223372036854775808
  %468 = icmp sgt i64 %466, %38
  %469 = or i1 %468, %467
  %470 = select i1 %469, i64 0, i64 %197
  %471 = sub i64 %38, %470
  store i64 %471, i64* %21, align 8, !tbaa !495
  %472 = icmp sgt i64 %466, %2
  %473 = or i1 %472, %467
  %474 = select i1 %473, i64 0, i64 %197
  %475 = sub i64 %2, %474
  store i64 %475, i64* %27, align 8, !tbaa !494
  %476 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 1
  %477 = load i64, i64* %476, align 8, !tbaa !19
  %478 = icmp eq i64 %477, -9223372036854775808
  %479 = or i1 %467, %478
  %480 = icmp sgt i64 %466, %477
  %481 = or i1 %480, %479
  %482 = select i1 %481, i64 0, i64 %197
  %483 = sub i64 %477, %482
  store i64 %483, i64* %476, align 8, !tbaa !19
  %484 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i64 0, i32 0
  %485 = load i64, i64* %484, align 8, !tbaa !18
  %486 = icmp eq i64 %485, -9223372036854775808
  %487 = or i1 %467, %486
  %488 = icmp sgt i64 %466, %485
  %489 = or i1 %488, %487
  %490 = select i1 %489, i64 0, i64 %197
  %491 = sub i64 %485, %490
  store i64 %491, i64* %484, align 8, !tbaa !18
  %492 = icmp eq i64 %59, -9223372036854775808
  %493 = or i1 %492, %467
  %494 = icmp sgt i64 %466, %59
  %495 = or i1 %494, %493
  %496 = select i1 %495, i64 0, i64 %197
  %497 = sub i64 %59, %496
  br label %498

498:                                              ; preds = %465, %.loopexit, %181, %177, %.loopexit62
  %499 = phi i64 [ %59, %.loopexit ], [ %59, %.loopexit62 ], [ %59, %177 ], [ %59, %181 ], [ %497, %465 ]
  %500 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %11, i64 0, i32 7
  %501 = load i64, i64* %500, align 8, !tbaa !508
  %502 = icmp eq i64 %501, -9223372036854775808
  br i1 %502, label %503, label %504

503:                                              ; preds = %498
  store i64 %499, i64* %500, align 8, !tbaa !508
  br label %504

504:                                              ; preds = %503, %498, %26, %18
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %20) #18
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

; Function Attrs: nounwind uwtable
define internal fastcc %struct.AVStream* @avformat_new_stream(%struct.AVFormatContext.328* nocapture, %struct.AVCodec*) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 4, !tbaa !443
  %5 = icmp ugt i32 %4, 268435454
  br i1 %5, label %106, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 7
  %8 = bitcast %struct.AVStream*** %7 to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !444
  %10 = add nuw nsw i32 %4, 1
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 3
  %13 = tail call fastcc i8* @av_realloc(i8* %9, i64 %12) #18
  %14 = icmp eq i8* %13, null
  br i1 %14, label %106, label %15

15:                                               ; preds = %6
  store i8* %13, i8** %8, align 8, !tbaa !444
  %16 = tail call fastcc noalias i8* @av_mallocz(i64 528) #18
  %17 = bitcast i8* %16 to %struct.AVStream*
  %18 = icmp eq i8* %16, null
  br i1 %18, label %106, label %19

19:                                               ; preds = %15
  %20 = tail call fastcc noalias i8* @av_mallocz(i64 23312) #18
  %21 = getelementptr inbounds i8, i8* %16, i64 208
  %22 = bitcast i8* %21 to %struct.anon.0**
  %23 = bitcast i8* %21 to i8**
  store i8* %20, i8** %23, align 8, !tbaa !504
  %24 = icmp eq i8* %20, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %19
  tail call fastcc void @av_free(i8* nonnull %16) #18
  br label %106

26:                                               ; preds = %19
  %27 = bitcast i8* %20 to i64*
  store i64 -9223372036854775808, i64* %27, align 8, !tbaa !517
  %28 = tail call fastcc %struct.AVCodecContext* @avcodec_alloc_context3(%struct.AVCodec* %1) #18
  %29 = getelementptr inbounds i8, i8* %16, i64 8
  %30 = bitcast i8* %29 to %struct.AVCodecContext**
  store %struct.AVCodecContext* %28, %struct.AVCodecContext** %30, align 8, !tbaa !378
  %31 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 1
  %32 = load %struct.AVInputFormat.329*, %struct.AVInputFormat.329** %31, align 8, !tbaa !419
  %33 = icmp eq %struct.AVInputFormat.329* %32, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %26
  %35 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %28, i64 0, i32 12
  store i32 0, i32* %35, align 8, !tbaa !291
  br label %36

36:                                               ; preds = %34, %26
  %37 = load i32, i32* %3, align 4, !tbaa !443
  %38 = bitcast i8* %16 to i32*
  store i32 %37, i32* %38, align 8, !tbaa !411
  %39 = getelementptr inbounds i8, i8* %16, i64 64
  %40 = bitcast i8* %39 to i64*
  store i64 -9223372036854775808, i64* %40, align 8, !tbaa !508
  %41 = getelementptr inbounds i8, i8* %16, i64 72
  %42 = bitcast i8* %41 to i64*
  store i64 -9223372036854775808, i64* %42, align 8, !tbaa !519
  %43 = select i1 %33, i64 0, i64 9223090561878065151
  %44 = getelementptr inbounds i8, i8* %16, i64 240
  %45 = bitcast i8* %44 to i64*
  store i64 %43, i64* %45, align 8, !tbaa !494
  %46 = getelementptr inbounds i8, i8* %16, i64 232
  %47 = bitcast i8* %46 to i64*
  store i64 -9223372036854775808, i64* %47, align 8, !tbaa !495
  %48 = getelementptr inbounds i8, i8* %16, i64 260
  %49 = bitcast i8* %48 to i32*
  store i32 2500, i32* %49, align 4, !tbaa !457
  %50 = getelementptr inbounds i8, i8* %16, i64 512
  %51 = bitcast i8* %50 to i64*
  store i64 -9223372036854775808, i64* %51, align 8, !tbaa !459
  %52 = getelementptr inbounds i8, i8* %16, i64 520
  %53 = bitcast i8* %52 to i32*
  store i32 0, i32* %53, align 8, !tbaa !458
  tail call fastcc void @avpriv_set_pts_info(%struct.AVStream* nonnull %17, i32 33, i32 90000)
  %54 = getelementptr inbounds i8, i8* %16, i64 248
  %55 = bitcast i8* %54 to i64*
  store i64 -9223372036854775808, i64* %55, align 8, !tbaa !502
  %56 = getelementptr inbounds i8, i8* %16, i64 336
  %57 = bitcast i8* %56 to i64*
  store i64 -9223372036854775808, i64* %57, align 8, !tbaa !26
  %58 = getelementptr inbounds i8, i8* %16, i64 344
  %59 = bitcast i8* %58 to i64*
  store i64 -9223372036854775808, i64* %59, align 8, !tbaa !26
  %60 = getelementptr inbounds i8, i8* %16, i64 352
  %61 = bitcast i8* %60 to i64*
  store i64 -9223372036854775808, i64* %61, align 8, !tbaa !26
  %62 = getelementptr inbounds i8, i8* %16, i64 360
  %63 = bitcast i8* %62 to i64*
  store i64 -9223372036854775808, i64* %63, align 8, !tbaa !26
  %64 = getelementptr inbounds i8, i8* %16, i64 368
  %65 = bitcast i8* %64 to i64*
  store i64 -9223372036854775808, i64* %65, align 8, !tbaa !26
  %66 = getelementptr inbounds i8, i8* %16, i64 376
  %67 = bitcast i8* %66 to i64*
  store i64 -9223372036854775808, i64* %67, align 8, !tbaa !26
  %68 = getelementptr inbounds i8, i8* %16, i64 384
  %69 = bitcast i8* %68 to i64*
  store i64 -9223372036854775808, i64* %69, align 8, !tbaa !26
  %70 = getelementptr inbounds i8, i8* %16, i64 392
  %71 = bitcast i8* %70 to i64*
  store i64 -9223372036854775808, i64* %71, align 8, !tbaa !26
  %72 = getelementptr inbounds i8, i8* %16, i64 400
  %73 = bitcast i8* %72 to i64*
  store i64 -9223372036854775808, i64* %73, align 8, !tbaa !26
  %74 = getelementptr inbounds i8, i8* %16, i64 408
  %75 = bitcast i8* %74 to i64*
  store i64 -9223372036854775808, i64* %75, align 8, !tbaa !26
  %76 = getelementptr inbounds i8, i8* %16, i64 416
  %77 = bitcast i8* %76 to i64*
  store i64 -9223372036854775808, i64* %77, align 8, !tbaa !26
  %78 = getelementptr inbounds i8, i8* %16, i64 424
  %79 = bitcast i8* %78 to i64*
  store i64 -9223372036854775808, i64* %79, align 8, !tbaa !26
  %80 = getelementptr inbounds i8, i8* %16, i64 432
  %81 = bitcast i8* %80 to i64*
  store i64 -9223372036854775808, i64* %81, align 8, !tbaa !26
  %82 = getelementptr inbounds i8, i8* %16, i64 440
  %83 = bitcast i8* %82 to i64*
  store i64 -9223372036854775808, i64* %83, align 8, !tbaa !26
  %84 = getelementptr inbounds i8, i8* %16, i64 448
  %85 = bitcast i8* %84 to i64*
  store i64 -9223372036854775808, i64* %85, align 8, !tbaa !26
  %86 = getelementptr inbounds i8, i8* %16, i64 456
  %87 = bitcast i8* %86 to i64*
  store i64 -9223372036854775808, i64* %87, align 8, !tbaa !26
  %88 = getelementptr inbounds i8, i8* %16, i64 464
  %89 = bitcast i8* %88 to i64*
  store i64 -9223372036854775808, i64* %89, align 8, !tbaa !26
  %90 = getelementptr inbounds i8, i8* %16, i64 224
  %91 = bitcast i8* %90 to i64*
  store i64 -9223372036854775808, i64* %91, align 8, !tbaa !500
  %92 = getelementptr inbounds i8, i8* %16, i64 96
  %93 = bitcast i8* %92 to i32*
  store i32 0, i32* %93, align 8
  %94 = getelementptr inbounds i8, i8* %16, i64 100
  %95 = bitcast i8* %94 to i32*
  store i32 1, i32* %95, align 4
  %96 = load %struct.anon.0*, %struct.anon.0** %22, align 8, !tbaa !504
  %97 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %96, i64 0, i32 0
  store i64 -9223372036854775808, i64* %97, align 8, !tbaa !517
  %98 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %96, i64 0, i32 7
  store i64 -9223372036854775808, i64* %98, align 8, !tbaa !520
  %99 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %96, i64 0, i32 9
  store i64 -9223372036854775808, i64* %99, align 8, !tbaa !521
  %100 = load %struct.AVStream**, %struct.AVStream*** %7, align 8, !tbaa !444
  %101 = load i32, i32* %3, align 4, !tbaa !443
  %102 = add i32 %101, 1
  store i32 %102, i32* %3, align 4, !tbaa !443
  %103 = zext i32 %101 to i64
  %104 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %100, i64 %103
  %105 = bitcast %struct.AVStream** %104 to i8**
  store i8* %16, i8** %105, align 8, !tbaa !27
  br label %106

106:                                              ; preds = %36, %25, %15, %6, %2
  %107 = phi %struct.AVStream* [ %17, %36 ], [ null, %25 ], [ null, %2 ], [ null, %6 ], [ null, %15 ]
  ret %struct.AVStream* %107
}

; Function Attrs: nounwind uwtable
define internal fastcc void @avpriv_set_pts_info(%struct.AVStream* nocapture, i32, i32) unnamed_addr #5 {
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to %struct.AVRational*
  %6 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #18
  %7 = bitcast i64* %4 to i32*
  %8 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %5, i64 0, i32 1
  %9 = zext i32 %2 to i64
  %10 = call fastcc i32 @av_reduce(i32* nonnull %7, i32* nonnull %8, i64 1, i64 %9, i64 2147483647) #18
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %3
  %13 = load i32, i32* %7, align 8, !tbaa !522
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %21, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %0, i64 0, i32 0
  %17 = load i32, i32* %16, align 8, !tbaa !411
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.69.2092, i64 0, i64 0), i32 %17, i32 0) #18
  br label %21

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %0, i64 0, i32 0
  %20 = load i32, i32* %19, align 8, !tbaa !411
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 24, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.70.2093, i64 0, i64 0), i32 %20) #18
  br label %21

21:                                               ; preds = %18, %15, %12
  %22 = load i32, i32* %7, align 8, !tbaa !522
  %23 = icmp slt i32 %22, 1
  %24 = load i32, i32* %8, align 4
  %25 = icmp slt i32 %24, 1
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %0, i64 0, i32 0
  %29 = load i32, i32* %28, align 8, !tbaa !411
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.71.2094, i64 0, i64 0), i32 %22, i32 %24, i32 %29) #18
  br label %38

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %0, i64 0, i32 6
  %32 = bitcast %struct.AVRational* %31 to i64*
  %33 = load i64, i64* %4, align 8
  store i64 %33, i64* %32, align 8
  %34 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %0, i64 0, i32 2
  %35 = bitcast %struct.AVCodecContext** %34 to %struct.AVCodecContext.129**
  %36 = load %struct.AVCodecContext.129*, %struct.AVCodecContext.129** %35, align 8, !tbaa !378
  tail call fastcc void @av_codec_set_pkt_timebase(%struct.AVCodecContext.129* %36, i64 %33) #18
  %37 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %0, i64 0, i32 17
  store i32 %1, i32* %37, align 8, !tbaa !460
  br label %38

38:                                               ; preds = %30, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.AVChapter* @avpriv_new_chapter(%struct.AVFormatContext.328* nocapture, i32, i64, i64, i64, i8*) unnamed_addr #5 {
  %7 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 26
  %8 = load i32, i32* %7, align 4, !tbaa !404
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %71, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 27
  %12 = load %struct.AVChapter**, %struct.AVChapter*** %11, align 8, !tbaa !450
  %13 = zext i32 %8 to i64
  %14 = add nsw i64 %13, -1
  %15 = and i64 %13, 3
  %16 = icmp ult i64 %14, 3
  br i1 %16, label %.loopexit4, label %17

17:                                               ; preds = %10
  %18 = sub nuw nsw i64 %13, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %50, %19 ]
  %21 = phi %struct.AVChapter* [ null, %17 ], [ %49, %19 ]
  %22 = phi i64 [ %18, %17 ], [ %51, %19 ]
  %23 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %12, i64 %20
  %24 = load %struct.AVChapter*, %struct.AVChapter** %23, align 8, !tbaa !27
  %25 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %24, i64 0, i32 0
  %26 = load i32, i32* %25, align 8, !tbaa !523
  %27 = icmp eq i32 %26, %1
  %28 = select i1 %27, %struct.AVChapter* %24, %struct.AVChapter* %21
  %29 = or i64 %20, 1
  %30 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %12, i64 %29
  %31 = load %struct.AVChapter*, %struct.AVChapter** %30, align 8, !tbaa !27
  %32 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %31, i64 0, i32 0
  %33 = load i32, i32* %32, align 8, !tbaa !523
  %34 = icmp eq i32 %33, %1
  %35 = select i1 %34, %struct.AVChapter* %31, %struct.AVChapter* %28
  %36 = or i64 %20, 2
  %37 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %12, i64 %36
  %38 = load %struct.AVChapter*, %struct.AVChapter** %37, align 8, !tbaa !27
  %39 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 8, !tbaa !523
  %41 = icmp eq i32 %40, %1
  %42 = select i1 %41, %struct.AVChapter* %38, %struct.AVChapter* %35
  %43 = or i64 %20, 3
  %44 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %12, i64 %43
  %45 = load %struct.AVChapter*, %struct.AVChapter** %44, align 8, !tbaa !27
  %46 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %45, i64 0, i32 0
  %47 = load i32, i32* %46, align 8, !tbaa !523
  %48 = icmp eq i32 %47, %1
  %49 = select i1 %48, %struct.AVChapter* %45, %struct.AVChapter* %42
  %50 = add nuw nsw i64 %20, 4
  %51 = add i64 %22, -4
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %.loopexit4, label %19

.loopexit4:                                       ; preds = %19, %10
  %53 = phi %struct.AVChapter* [ undef, %10 ], [ %49, %19 ]
  %54 = phi i64 [ 0, %10 ], [ %50, %19 ]
  %55 = phi %struct.AVChapter* [ null, %10 ], [ %49, %19 ]
  %56 = icmp eq i64 %15, 0
  br i1 %56, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %.loopexit4, %.preheader
  %57 = phi i64 [ %66, %.preheader ], [ %54, %.loopexit4 ]
  %58 = phi %struct.AVChapter* [ %65, %.preheader ], [ %55, %.loopexit4 ]
  %59 = phi i64 [ %67, %.preheader ], [ %15, %.loopexit4 ]
  %60 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %12, i64 %57
  %61 = load %struct.AVChapter*, %struct.AVChapter** %60, align 8, !tbaa !27
  %62 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %61, i64 0, i32 0
  %63 = load i32, i32* %62, align 8, !tbaa !523
  %64 = icmp eq i32 %63, %1
  %65 = select i1 %64, %struct.AVChapter* %61, %struct.AVChapter* %58
  %66 = add nuw nsw i64 %57, 1
  %67 = add nsw i64 %59, -1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %.loopexit, label %.preheader, !llvm.loop !525

.loopexit:                                        ; preds = %.preheader, %.loopexit4
  %69 = phi %struct.AVChapter* [ %53, %.loopexit4 ], [ %65, %.preheader ]
  %70 = icmp eq %struct.AVChapter* %69, null
  br i1 %70, label %71, label %78

71:                                               ; preds = %.loopexit, %6
  %72 = tail call fastcc noalias i8* @av_mallocz(i64 40) #18
  %73 = icmp eq i8* %72, null
  br i1 %73, label %87, label %74

74:                                               ; preds = %71
  %75 = bitcast i8* %72 to %struct.AVChapter*
  %76 = getelementptr inbounds %struct.AVFormatContext.328, %struct.AVFormatContext.328* %0, i64 0, i32 27
  %77 = bitcast %struct.AVChapter*** %76 to i8*
  tail call fastcc void @av_dynarray_add(i8* nonnull %77, i32* nonnull %7, i8* nonnull %72) #18
  br label %78

78:                                               ; preds = %74, %.loopexit
  %79 = phi %struct.AVChapter* [ %69, %.loopexit ], [ %75, %74 ]
  %80 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %79, i64 0, i32 4
  %81 = tail call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %80, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44.2097, i64 0, i64 0), i8* %5, i32 0) #18
  %82 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %79, i64 0, i32 0
  store i32 %1, i32* %82, align 8, !tbaa !523
  %83 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %79, i64 0, i32 1
  %84 = bitcast %struct.AVRational* %83 to i64*
  store i64 %2, i64* %84, align 4
  %85 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %79, i64 0, i32 2
  store i64 %3, i64* %85, align 8, !tbaa !526
  %86 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %79, i64 0, i32 3
  store i64 %4, i64* %86, align 8, !tbaa !527
  br label %87

87:                                               ; preds = %78, %71
  %88 = phi %struct.AVChapter* [ %79, %78 ], [ null, %71 ]
  ret %struct.AVChapter* %88
}

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #23

; Function Attrs: nofree nounwind
declare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #16

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @av_strstart(i8*, i8**) unnamed_addr #9 {
  %3 = load i8, i8* %0, align 1, !tbaa !33
  %4 = icmp eq i8 %3, 102
  br i1 %4, label %5, label %.loopexit

5:                                                ; preds = %2
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  %7 = load i8, i8* %6, align 1, !tbaa !33
  %8 = icmp eq i8 %7, 105
  br i1 %8, label %11, label %.loopexit

9:                                                ; preds = %19
  %10 = getelementptr inbounds i8, i8* %0, i64 5
  store i8* %10, i8** %1, align 8, !tbaa !27
  br label %.loopexit

.loopexit:                                        ; preds = %19, %2, %5, %11, %15, %9
  ret void

11:                                               ; preds = %5
  %12 = getelementptr inbounds i8, i8* %0, i64 2
  %13 = load i8, i8* %12, align 1, !tbaa !33
  %14 = icmp eq i8 %13, 108
  br i1 %14, label %15, label %.loopexit

15:                                               ; preds = %11
  %16 = getelementptr inbounds i8, i8* %0, i64 3
  %17 = load i8, i8* %16, align 1, !tbaa !33
  %18 = icmp eq i8 %17, 101
  br i1 %18, label %19, label %.loopexit

19:                                               ; preds = %15
  %20 = getelementptr inbounds i8, i8* %0, i64 4
  %21 = load i8, i8* %20, align 1, !tbaa !33
  %22 = icmp ne i8 %21, 58
  %23 = icmp eq i8** %1, null
  %or.cond = or i1 %22, %23
  br i1 %or.cond, label %.loopexit, label %9
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @av_strlcpy(i8* nocapture, i8* nocapture readonly, i64) unnamed_addr #9 {
  %4 = icmp ugt i64 %2, 1
  br i1 %4, label %5, label %.loopexit1

5:                                                ; preds = %3
  %6 = load i8, i8* %1, align 1, !tbaa !33
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %.loopexit1, label %.preheader

8:                                                ; preds = %.preheader
  %9 = load i8, i8* %15, align 1, !tbaa !33
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %.loopexit1, label %.preheader

.preheader:                                       ; preds = %5, %8
  %11 = phi i8 [ %9, %8 ], [ %6, %5 ]
  %12 = phi i8* [ %15, %8 ], [ %1, %5 ]
  %13 = phi i8* [ %16, %8 ], [ %0, %5 ]
  %14 = phi i64 [ %17, %8 ], [ 1, %5 ]
  %15 = getelementptr inbounds i8, i8* %12, i64 1
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 %11, i8* %13, align 1, !tbaa !33
  %17 = add nuw i64 %14, 1
  %18 = icmp eq i64 %17, %2
  br i1 %18, label %.loopexit, label %8

.loopexit1:                                       ; preds = %8, %5, %3
  %19 = phi i8* [ %0, %3 ], [ %0, %5 ], [ %16, %8 ]
  %20 = phi i64 [ 1, %3 ], [ 1, %5 ], [ %17, %8 ]
  %21 = icmp ugt i64 %20, %2
  br i1 %21, label %23, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %.loopexit1
  %22 = phi i8* [ %19, %.loopexit1 ], [ %16, %.preheader ]
  store i8 0, i8* %22, align 1, !tbaa !33
  br label %23

23:                                               ; preds = %.loopexit, %.loopexit1
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal fastcc void @av_strlcat(i8* nocapture, i8* nocapture readonly, i64) unnamed_addr #20 {
  %4 = tail call i64 @strlen(i8* %0) #28
  %5 = add i64 %4, 1
  %6 = icmp ult i64 %5, %2
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = getelementptr inbounds i8, i8* %0, i64 %4
  %9 = sub i64 %2, %4
  %10 = icmp ugt i64 %9, 1
  br i1 %10, label %11, label %.loopexit1

11:                                               ; preds = %7
  %12 = load i8, i8* %1, align 1, !tbaa !33
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %.loopexit1, label %.preheader

14:                                               ; preds = %.preheader
  %15 = load i8, i8* %21, align 1, !tbaa !33
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %.loopexit1, label %.preheader

.preheader:                                       ; preds = %11, %14
  %17 = phi i8 [ %15, %14 ], [ %12, %11 ]
  %18 = phi i8* [ %21, %14 ], [ %1, %11 ]
  %19 = phi i8* [ %22, %14 ], [ %8, %11 ]
  %20 = phi i64 [ %23, %14 ], [ 1, %11 ]
  %21 = getelementptr inbounds i8, i8* %18, i64 1
  %22 = getelementptr inbounds i8, i8* %19, i64 1
  store i8 %17, i8* %19, align 1, !tbaa !33
  %23 = add nuw i64 %20, 1
  %24 = icmp eq i64 %23, %9
  br i1 %24, label %.loopexit, label %14

.loopexit1:                                       ; preds = %14, %11, %7
  %25 = phi i8* [ %8, %7 ], [ %8, %11 ], [ %22, %14 ]
  %26 = phi i64 [ 1, %7 ], [ 1, %11 ], [ %23, %14 ]
  %27 = icmp ugt i64 %26, %9
  br i1 %27, label %29, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %.loopexit1
  %28 = phi i8* [ %25, %.loopexit1 ], [ %22, %.preheader ]
  store i8 0, i8* %28, align 1, !tbaa !33
  br label %29

29:                                               ; preds = %.loopexit1, %.loopexit, %3
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc i32 @av_strcasecmp(i8* nocapture readonly, i8* nocapture readonly) unnamed_addr #15 {
  br label %3

3:                                                ; preds = %22, %2
  %4 = phi i8* [ %1, %2 ], [ %23, %22 ]
  %5 = phi i8* [ %0, %2 ], [ %24, %22 ]
  %6 = load i8, i8* %5, align 1, !tbaa !33
  %7 = sext i8 %6 to i32
  %8 = add nsw i32 %7, -65
  %9 = icmp ult i32 %8, 26
  %10 = xor i32 %7, 32
  %11 = select i1 %9, i32 %10, i32 %7
  %12 = load i8, i8* %4, align 1, !tbaa !33
  %13 = sext i8 %12 to i32
  %14 = add nsw i32 %13, -65
  %15 = icmp ult i32 %14, 26
  %16 = xor i32 %13, 32
  %17 = select i1 %15, i32 %16, i32 %13
  %18 = and i32 %11, 255
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %3
  %21 = and i32 %17, 255
  br label %.loopexit

22:                                               ; preds = %3
  %23 = getelementptr inbounds i8, i8* %4, i64 1
  %24 = getelementptr inbounds i8, i8* %5, i64 1
  %25 = and i32 %17, 255
  %26 = icmp eq i32 %18, %25
  br i1 %26, label %3, label %.loopexit

.loopexit:                                        ; preds = %22, %20
  %27 = phi i32 [ %21, %20 ], [ %25, %22 ]
  %28 = sub nsw i32 %18, %27
  ret i32 %28
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc i32 @av_strncasecmp(i8* readonly, i8* nocapture readonly, i64) unnamed_addr #15 {
  %4 = getelementptr inbounds i8, i8* %0, i64 %2
  br label %5

5:                                                ; preds = %25, %3
  %6 = phi i8* [ %1, %3 ], [ %26, %25 ]
  %7 = phi i8* [ %0, %3 ], [ %8, %25 ]
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  %9 = load i8, i8* %7, align 1, !tbaa !33
  %10 = sext i8 %9 to i32
  %11 = add nsw i32 %10, -65
  %12 = icmp ult i32 %11, 26
  %13 = xor i32 %10, 32
  %14 = select i1 %12, i32 %13, i32 %10
  %15 = load i8, i8* %6, align 1, !tbaa !33
  %16 = sext i8 %15 to i32
  %17 = add nsw i32 %16, -65
  %18 = icmp ult i32 %17, 26
  %19 = xor i32 %16, 32
  %20 = select i1 %18, i32 %19, i32 %16
  %21 = icmp ult i8* %8, %4
  br i1 %21, label %25, label %22

22:                                               ; preds = %5
  %23 = and i32 %14, 255
  %24 = and i32 %20, 255
  br label %.loopexit

25:                                               ; preds = %5
  %26 = getelementptr inbounds i8, i8* %6, i64 1
  %27 = and i32 %14, 255
  %28 = icmp ne i32 %27, 0
  %29 = and i32 %20, 255
  %30 = icmp eq i32 %27, %29
  %31 = and i1 %28, %30
  br i1 %31, label %5, label %.loopexit

.loopexit:                                        ; preds = %25, %22
  %32 = phi i32 [ %24, %22 ], [ %29, %25 ]
  %33 = phi i32 [ %23, %22 ], [ %27, %25 ]
  %34 = sub nsw i32 %33, %32
  ret i32 %34
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define internal fastcc void @av_bprint_init_for_buffer(%struct.AVBPrint* nocapture, i8*, i32) unnamed_addr #7 {
  %4 = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %0, i64 0, i32 0
  store i8* %1, i8** %4, align 8, !tbaa !528
  %5 = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %0, i64 0, i32 1
  store i32 0, i32* %5, align 8, !tbaa !530
  %6 = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %0, i64 0, i32 2
  store i32 %2, i32* %6, align 4, !tbaa !531
  %7 = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %0, i64 0, i32 3
  store i32 %2, i32* %7, align 8, !tbaa !532
  store i8 0, i8* %1, align 1, !tbaa !33
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @av_bprintf(%struct.AVBPrint*, i8* nocapture readonly, ...) unnamed_addr #5 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #18
  %5 = getelementptr %struct.AVBPrint, %struct.AVBPrint* %0, i64 0, i32 2
  %6 = getelementptr %struct.AVBPrint, %struct.AVBPrint* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %0, i64 0, i32 0
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %9 = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %0, i64 0, i32 3
  %10 = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %0, i64 0, i32 4, i64 0
  %11 = load i32, i32* %5, align 4, !tbaa !531
  br label %12

12:                                               ; preds = %64, %2
  %13 = phi i32 [ %50, %64 ], [ %11, %2 ]
  %14 = load i32, i32* %6, align 8, !tbaa !530
  %15 = icmp ugt i32 %14, %13
  %16 = select i1 %15, i32 %13, i32 %14
  %17 = sub i32 %13, %16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = load i8*, i8** %7, align 8, !tbaa !528
  %21 = zext i32 %14 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  br label %23

23:                                               ; preds = %19, %12
  %24 = phi i8* [ %22, %19 ], [ null, %12 ]
  call void @llvm.va_start(i8* nonnull %4)
  %25 = zext i32 %17 to i64
  %26 = call i32 @vsnprintf(i8* %24, i64 %25, i8* %1, %struct.__va_list_tag* nonnull %8) #18
  call void @llvm.va_end(i8* nonnull %4)
  %27 = icmp slt i32 %26, 1
  br i1 %27, label %.loopexit, label %28

28:                                               ; preds = %23
  %29 = icmp ult i32 %26, %17
  br i1 %29, label %65, label %30

30:                                               ; preds = %28
  %31 = load i32, i32* %5, align 4, !tbaa !531
  %32 = load i32, i32* %9, align 8, !tbaa !532
  %33 = icmp eq i32 %31, %32
  br i1 %33, label %.loopexit6, label %34

34:                                               ; preds = %30
  %35 = load i32, i32* %6, align 8, !tbaa !530
  %36 = icmp ult i32 %35, %31
  br i1 %36, label %37, label %65

37:                                               ; preds = %34
  %38 = add nuw i32 %35, 1
  %39 = sub nuw i32 -2, %35
  %40 = icmp ugt i32 %39, %26
  %41 = select i1 %40, i32 %26, i32 %39
  %42 = add i32 %38, %41
  %43 = lshr i32 %32, 1
  %44 = icmp ugt i32 %31, %43
  %45 = shl i32 %31, 1
  %46 = select i1 %44, i32 %32, i32 %45
  %47 = icmp ult i32 %46, %42
  %48 = icmp ugt i32 %32, %42
  %49 = select i1 %48, i32 %42, i32 %32
  %50 = select i1 %47, i32 %49, i32 %46
  %51 = load i8*, i8** %7, align 8, !tbaa !528
  %52 = icmp eq i8* %51, %10
  %53 = select i1 %52, i8* null, i8* %51
  %54 = zext i32 %50 to i64
  %55 = call fastcc i8* @av_realloc(i8* %53, i64 %54) #18
  %56 = icmp eq i8* %55, null
  br i1 %56, label %65, label %57

57:                                               ; preds = %37
  %58 = icmp eq i8* %53, null
  br i1 %58, label %59, label %64

59:                                               ; preds = %57
  %60 = load i8*, i8** %7, align 8, !tbaa !528
  %61 = load i32, i32* %6, align 8, !tbaa !530
  %62 = add i32 %61, 1
  %63 = zext i32 %62 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %55, i8* align 1 %60, i64 %63, i1 false) #18
  br label %64

64:                                               ; preds = %59, %57
  store i8* %55, i8** %7, align 8, !tbaa !528
  store i32 %50, i32* %5, align 4, !tbaa !531
  br label %12

65:                                               ; preds = %37, %34, %28
  %66 = load i32, i32* %5, align 4, !tbaa !531
  br label %.loopexit6

.loopexit6:                                       ; preds = %30, %65
  %67 = phi i32 [ %66, %65 ], [ %31, %30 ]
  %68 = load i32, i32* %6, align 8, !tbaa !530
  %69 = sub i32 -6, %68
  %70 = icmp ult i32 %69, %26
  %71 = select i1 %70, i32 %69, i32 %26
  %72 = add i32 %71, %68
  store i32 %72, i32* %6, align 8, !tbaa !530
  %73 = icmp eq i32 %67, 0
  br i1 %73, label %.loopexit, label %74

74:                                               ; preds = %.loopexit6
  %75 = load i8*, i8** %7, align 8, !tbaa !528
  %76 = add i32 %67, -1
  %77 = icmp ugt i32 %72, %76
  %78 = select i1 %77, i32 %76, i32 %72
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %75, i64 %79
  store i8 0, i8* %80, align 1, !tbaa !33
  br label %.loopexit

.loopexit:                                        ; preds = %23, %74, %.loopexit6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_bprint_channel_layout(%struct.AVBPrint*, i32, i64) unnamed_addr #5 {
  %4 = icmp slt i32 %1, 1
  br i1 %4, label %5, label %41

5:                                                ; preds = %3
  %6 = trunc i64 %2 to i32
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 1431655765
  %9 = sub i32 %6, %8
  %10 = and i32 %9, 858993459
  %11 = lshr i32 %9, 2
  %12 = and i32 %11, 858993459
  %13 = add nuw nsw i32 %12, %10
  %14 = lshr i32 %13, 4
  %15 = add nuw nsw i32 %14, %13
  %16 = and i32 %15, 252645135
  %17 = lshr i32 %16, 8
  %18 = add nuw nsw i32 %17, %16
  %19 = lshr i32 %18, 16
  %20 = add nuw nsw i32 %19, %18
  %21 = and i32 %20, 63
  %22 = lshr i64 %2, 32
  %23 = trunc i64 %22 to i32
  %24 = lshr i64 %2, 33
  %25 = trunc i64 %24 to i32
  %26 = and i32 %25, 1431655765
  %27 = sub i32 %23, %26
  %28 = and i32 %27, 858993459
  %29 = lshr i32 %27, 2
  %30 = and i32 %29, 858993459
  %31 = add nuw nsw i32 %30, %28
  %32 = lshr i32 %31, 4
  %33 = add nuw nsw i32 %32, %31
  %34 = and i32 %33, 252645135
  %35 = lshr i32 %34, 8
  %36 = add nuw nsw i32 %35, %34
  %37 = lshr i32 %36, 16
  %38 = add nuw nsw i32 %37, %36
  %39 = and i32 %38, 63
  %40 = add nuw nsw i32 %21, %39
  br label %41

41:                                               ; preds = %5, %3
  %42 = phi i32 [ %40, %5 ], [ %1, %3 ]
  switch i32 %42, label %100 [
    i32 1, label %43
    i32 2, label %93
    i32 3, label %94
    i32 4, label %95
    i32 5, label %96
    i32 6, label %97
    i32 7, label %98
    i32 8, label %99
  ]

43:                                               ; preds = %41
  %44 = icmp eq i64 %2, 4
  br i1 %44, label %63, label %100

45:                                               ; preds = %94
  br label %63

46:                                               ; preds = %94
  br label %63

47:                                               ; preds = %95
  br label %63

48:                                               ; preds = %95
  br label %63

49:                                               ; preds = %95
  br label %63

50:                                               ; preds = %96
  br label %63

51:                                               ; preds = %96
  br label %63

52:                                               ; preds = %97
  br label %63

53:                                               ; preds = %97
  br label %63

54:                                               ; preds = %97
  br label %63

55:                                               ; preds = %97
  br label %63

56:                                               ; preds = %98
  br label %63

57:                                               ; preds = %98
  br label %63

58:                                               ; preds = %98
  br label %63

59:                                               ; preds = %98
  br label %63

60:                                               ; preds = %99
  br label %63

61:                                               ; preds = %99
  br label %63

62:                                               ; preds = %93
  br label %63

63:                                               ; preds = %99, %98, %97, %96, %95, %94, %93, %62, %61, %60, %59, %58, %57, %56, %55, %54, %53, %52, %51, %50, %49, %48, %47, %46, %45, %43
  %64 = phi i64 [ 0, %43 ], [ 1, %93 ], [ 2, %94 ], [ 5, %95 ], [ 9, %96 ], [ 12, %97 ], [ 17, %98 ], [ 22, %99 ], [ 3, %45 ], [ 4, %46 ], [ 6, %47 ], [ 7, %48 ], [ 8, %49 ], [ 10, %50 ], [ 11, %51 ], [ 13, %52 ], [ 14, %53 ], [ 15, %54 ], [ 16, %55 ], [ 18, %56 ], [ 19, %57 ], [ 20, %58 ], [ 21, %59 ], [ 23, %60 ], [ 24, %61 ], [ 25, %62 ]
  %65 = getelementptr inbounds [26 x %struct.anon.817], [26 x %struct.anon.817]* @channel_layout_map, i64 0, i64 %64, i32 0
  %66 = load i8*, i8** %65, align 8, !tbaa !533
  tail call void (%struct.AVBPrint*, i8*, ...) @av_bprintf(%struct.AVBPrint* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2272, i64 0, i64 0), i8* %66) #18
  br label %92

67:                                               ; preds = %100
  tail call void (%struct.AVBPrint*, i8*, ...) @av_bprintf(%struct.AVBPrint* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.2273, i64 0, i64 0)) #18
  br label %68

68:                                               ; preds = %87, %67
  %69 = phi i64 [ 0, %67 ], [ %89, %87 ]
  %70 = phi i32 [ 0, %67 ], [ %88, %87 ]
  %71 = shl i64 1, %69
  %72 = and i64 %71, %2
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %87, label %74

74:                                               ; preds = %68
  %75 = icmp ugt i64 %69, 35
  br i1 %75, label %85, label %76

76:                                               ; preds = %74
  %77 = getelementptr inbounds [36 x %struct.AVCodecDefault], [36 x %struct.AVCodecDefault]* @channel_names, i64 0, i64 %69, i32 0
  %78 = load i8*, i8** %77, align 16, !tbaa !535
  %79 = add nsw i64 %69, -18
  %80 = icmp ult i64 %79, 11
  br i1 %80, label %85, label %81

81:                                               ; preds = %76
  %82 = icmp sgt i32 %70, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %81
  tail call void (%struct.AVBPrint*, i8*, ...) @av_bprintf(%struct.AVBPrint* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.2274, i64 0, i64 0)) #18
  br label %84

84:                                               ; preds = %83, %81
  tail call void (%struct.AVBPrint*, i8*, ...) @av_bprintf(%struct.AVBPrint* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2272, i64 0, i64 0), i8* nonnull %78) #18
  br label %85

85:                                               ; preds = %84, %76, %74
  %86 = add nsw i32 %70, 1
  br label %87

87:                                               ; preds = %85, %68
  %88 = phi i32 [ %86, %85 ], [ %70, %68 ]
  %89 = add nuw nsw i64 %69, 1
  %90 = icmp eq i64 %89, 64
  br i1 %90, label %91, label %68

91:                                               ; preds = %87
  tail call void (%struct.AVBPrint*, i8*, ...) @av_bprintf(%struct.AVBPrint* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.2275, i64 0, i64 0)) #18
  br label %92

92:                                               ; preds = %100, %91, %63
  ret void

93:                                               ; preds = %41
  switch i64 %2, label %100 [
    i64 3, label %63
    i64 1610612736, label %62
  ]

94:                                               ; preds = %41
  switch i64 %2, label %100 [
    i64 11, label %63
    i64 7, label %45
    i64 259, label %46
  ]

95:                                               ; preds = %41
  switch i64 %2, label %100 [
    i64 263, label %63
    i64 51, label %47
    i64 1539, label %48
    i64 15, label %49
  ]

96:                                               ; preds = %41
  switch i64 %2, label %100 [
    i64 55, label %63
    i64 1543, label %50
    i64 271, label %51
  ]

97:                                               ; preds = %41
  switch i64 %2, label %100 [
    i64 63, label %63
    i64 1551, label %52
    i64 1799, label %53
    i64 1731, label %54
    i64 311, label %55
  ]

98:                                               ; preds = %41
  switch i64 %2, label %100 [
    i64 1807, label %63
    i64 319, label %56
    i64 1739, label %57
    i64 1591, label %58
    i64 1735, label %59
  ]

99:                                               ; preds = %41
  switch i64 %2, label %100 [
    i64 1599, label %63
    i64 1743, label %60
    i64 1847, label %61
  ]

100:                                              ; preds = %99, %98, %97, %96, %95, %94, %93, %43, %41
  tail call void (%struct.AVBPrint*, i8*, ...) @av_bprintf(%struct.AVBPrint* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.2276, i64 0, i64 0), i32 %42) #18
  %101 = icmp eq i64 %2, 0
  br i1 %101, label %92, label %67
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc i32 @av_get_channel_layout_nb_channels(i64) unnamed_addr #11 {
  %2 = trunc i64 %0 to i32
  %3 = lshr i32 %2, 1
  %4 = and i32 %3, 1431655765
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = lshr i64 %0, 33
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 1431655765
  %.i0 = sub i32 %2, %4
  %.i1 = sub i32 %6, %9
  %.i01 = and i32 %.i0, 858993459
  %.i12 = and i32 %.i1, 858993459
  %.i03 = lshr i32 %.i0, 2
  %.i14 = lshr i32 %.i1, 2
  %.i05 = and i32 %.i03, 858993459
  %.i16 = and i32 %.i14, 858993459
  %.i07 = add nuw nsw i32 %.i05, %.i01
  %.i18 = add nuw nsw i32 %.i16, %.i12
  %.i09 = lshr i32 %.i07, 4
  %.i110 = lshr i32 %.i18, 4
  %.i011 = add nuw nsw i32 %.i09, %.i07
  %.i112 = add nuw nsw i32 %.i110, %.i18
  %.i013 = and i32 %.i011, 252645135
  %.i114 = and i32 %.i112, 252645135
  %.i015 = lshr i32 %.i013, 8
  %.i116 = lshr i32 %.i114, 8
  %.i017 = add nuw nsw i32 %.i015, %.i013
  %.i118 = add nuw nsw i32 %.i116, %.i114
  %.i019 = lshr i32 %.i017, 16
  %.i120 = lshr i32 %.i118, 16
  %.i021 = add nuw nsw i32 %.i019, %.i017
  %.i122 = add nuw nsw i32 %.i120, %.i118
  %.i023 = and i32 %.i021, 63
  %.i124 = and i32 %.i122, 63
  %10 = add nuw nsw i32 %.i023, %.i124
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_get_channel_layout_string(i8*, i32, i32, i64) unnamed_addr #5 {
  %5 = alloca %struct.AVBPrint, align 8
  %6 = bitcast %struct.AVBPrint* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %6) #18
  call fastcc void @av_bprint_init_for_buffer(%struct.AVBPrint* nonnull %5, i8* %0, i32 %1) #18
  call fastcc void @av_bprint_channel_layout(%struct.AVBPrint* nonnull %5, i32 %2, i64 %3)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %6) #18
  ret void
}

; Function Attrs: nounwind readonly uwtable
define internal fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* readonly, i8* nocapture readonly, %struct.AVCodecDefault*, i32) unnamed_addr #22 {
  %5 = icmp eq %struct.AVDictionary* %0, null
  br i1 %5, label %.loopexit7, label %6

6:                                                ; preds = %4
  %7 = icmp eq %struct.AVCodecDefault* %2, null
  br i1 %7, label %17, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %0, i64 0, i32 1
  %10 = bitcast %struct.AVCodecDefault** %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !537
  %12 = ptrtoint %struct.AVCodecDefault* %2 to i64
  %13 = sub i64 %12, %11
  %14 = lshr exact i64 %13, 4
  %15 = trunc i64 %14 to i32
  %16 = add i32 %15, 1
  br label %17

17:                                               ; preds = %8, %6
  %18 = phi i32 [ %16, %8 ], [ 0, %6 ]
  %19 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %0, i64 0, i32 0
  %20 = load i32, i32* %19, align 8, !tbaa !539
  %21 = icmp ult i32 %18, %20
  br i1 %21, label %22, label %.loopexit7

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %0, i64 0, i32 1
  %24 = load %struct.AVCodecDefault*, %struct.AVCodecDefault** %23, align 8, !tbaa !537
  %25 = and i32 %3, 1
  %26 = icmp eq i32 %25, 0
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = zext i32 %18 to i64
  br i1 %26, label %30, label %62

30:                                               ; preds = %22
  %31 = tail call i32** @__ctype_toupper_loc() #29
  %32 = load i32*, i32** %31, align 8, !tbaa !27
  %33 = zext i32 %20 to i64
  br label %34

34:                                               ; preds = %55, %30
  %35 = phi i64 [ %29, %30 ], [ %56, %55 ]
  %36 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %24, i64 %35, i32 0
  %37 = load i8*, i8** %36, align 8, !tbaa !414
  br label %38

38:                                               ; preds = %38, %34
  %39 = phi i32 [ %54, %38 ], [ 0, %34 ]
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %37, i64 %40
  %42 = load i8, i8* %41, align 1, !tbaa !33
  %43 = sext i8 %42 to i64
  %44 = getelementptr inbounds i32, i32* %32, i64 %43
  %45 = load i32, i32* %44, align 4, !tbaa !28
  %46 = getelementptr inbounds i8, i8* %1, i64 %40
  %47 = load i8, i8* %46, align 1, !tbaa !33
  %48 = sext i8 %47 to i64
  %49 = getelementptr inbounds i32, i32* %32, i64 %48
  %50 = load i32, i32* %49, align 4, !tbaa !28
  %51 = icmp ne i32 %45, %50
  %52 = icmp eq i8 %47, 0
  %53 = or i1 %52, %51
  %54 = add i32 %39, 1
  br i1 %53, label %57, label %38

55:                                               ; preds = %57
  %56 = add nuw nsw i64 %35, 1
  %exitcond = icmp eq i64 %56, %33
  br i1 %exitcond, label %.loopexit7, label %34

57:                                               ; preds = %38
  %58 = xor i1 %52, true
  %59 = icmp ne i8 %42, 0
  %60 = and i1 %28, %59
  %61 = or i1 %60, %58
  br i1 %61, label %55, label %.loopexit

62:                                               ; preds = %22
  %63 = zext i32 %20 to i64
  br i1 %28, label %.preheader, label %.preheader10

.preheader:                                       ; preds = %62, %78
  %64 = phi i64 [ %79, %78 ], [ %29, %62 ]
  %65 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %24, i64 %64, i32 0
  %66 = load i8*, i8** %65, align 8, !tbaa !414
  br label %67

67:                                               ; preds = %67, %.preheader
  %68 = phi i32 [ %77, %67 ], [ 0, %.preheader ]
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %66, i64 %69
  %71 = load i8, i8* %70, align 1, !tbaa !33
  %72 = getelementptr inbounds i8, i8* %1, i64 %69
  %73 = load i8, i8* %72, align 1, !tbaa !33
  %74 = icmp ne i8 %71, %73
  %75 = icmp eq i8 %73, 0
  %76 = or i1 %74, %75
  %77 = add i32 %68, 1
  br i1 %76, label %80, label %67

78:                                               ; preds = %80
  %79 = add nuw nsw i64 %64, 1
  %exitcond37 = icmp eq i64 %79, %63
  br i1 %exitcond37, label %.loopexit7, label %.preheader

80:                                               ; preds = %67
  %81 = or i8 %73, %71
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %.loopexit, label %78

.preheader10:                                     ; preds = %62, %101
  %83 = phi i64 [ %102, %101 ], [ %29, %62 ]
  %84 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %24, i64 %83, i32 0
  %85 = load i8*, i8** %84, align 8, !tbaa !414
  br label %86

86:                                               ; preds = %86, %.preheader10
  %87 = phi i32 [ %96, %86 ], [ 0, %.preheader10 ]
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %85, i64 %88
  %90 = load i8, i8* %89, align 1, !tbaa !33
  %91 = getelementptr inbounds i8, i8* %1, i64 %88
  %92 = load i8, i8* %91, align 1, !tbaa !33
  %93 = icmp ne i8 %90, %92
  %94 = icmp eq i8 %92, 0
  %95 = or i1 %93, %94
  %96 = add i32 %87, 1
  br i1 %95, label %97, label %86

97:                                               ; preds = %86
  br i1 %94, label %.loopexit, label %101

.loopexit:                                        ; preds = %97, %80, %57
  %98 = phi i64 [ %35, %57 ], [ %64, %80 ], [ %83, %97 ]
  %99 = and i64 %98, 4294967295
  %100 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %24, i64 %99
  br label %.loopexit7

101:                                              ; preds = %97
  %102 = add nuw nsw i64 %83, 1
  %exitcond38 = icmp eq i64 %102, %63
  br i1 %exitcond38, label %.loopexit7, label %.preheader10

.loopexit7:                                       ; preds = %101, %78, %55, %.loopexit, %17, %4
  %103 = phi %struct.AVCodecDefault* [ %100, %.loopexit ], [ null, %4 ], [ null, %17 ], [ null, %55 ], [ null, %78 ], [ null, %101 ]
  ret %struct.AVCodecDefault* %103
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_dict_set(%struct.AVDictionary** nocapture, i8*, i8*, i32) unnamed_addr #5 {
  %5 = load %struct.AVDictionary*, %struct.AVDictionary** %0, align 8, !tbaa !27
  %6 = tail call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %5, i8* %1, %struct.AVCodecDefault* null, i32 %3)
  %7 = icmp eq %struct.AVDictionary* %5, null
  br i1 %7, label %8, label %12

8:                                                ; preds = %4
  %9 = tail call fastcc noalias i8* @av_mallocz(i64 16) #18
  %10 = bitcast i8* %9 to %struct.AVDictionary*
  %11 = bitcast %struct.AVDictionary** %0 to i8**
  store i8* %9, i8** %11, align 8, !tbaa !27
  br label %12

12:                                               ; preds = %8, %4
  %13 = phi %struct.AVDictionary* [ %5, %4 ], [ %10, %8 ]
  %14 = icmp eq %struct.AVCodecDefault* %6, null
  br i1 %14, label %37, label %15

15:                                               ; preds = %12
  %16 = and i32 %3, 16
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %106

18:                                               ; preds = %15
  %19 = and i32 %3, 32
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %6, i64 0, i32 1
  %22 = load i8*, i8** %21, align 8, !tbaa !384
  br i1 %20, label %23, label %24

23:                                               ; preds = %18
  tail call fastcc void @av_free(i8* %22) #18
  br label %24

24:                                               ; preds = %23, %18
  %25 = phi i8* [ null, %23 ], [ %22, %18 ]
  %26 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %6, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8, !tbaa !414
  tail call fastcc void @av_free(i8* %27) #18
  %28 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %13, i64 0, i32 1
  %29 = load %struct.AVCodecDefault*, %struct.AVCodecDefault** %28, align 8, !tbaa !537
  %30 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %13, i64 0, i32 0
  %31 = load i32, i32* %30, align 8, !tbaa !539
  %32 = add nsw i32 %31, -1
  store i32 %32, i32* %30, align 8, !tbaa !539
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %29, i64 %33
  %35 = bitcast %struct.AVCodecDefault* %6 to i8*
  %36 = bitcast %struct.AVCodecDefault* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %35, i8* align 8 %36, i64 16, i1 false), !tbaa.struct !355
  br label %49

37:                                               ; preds = %12
  %38 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %13, i64 0, i32 1
  %39 = bitcast %struct.AVCodecDefault** %38 to i8**
  %40 = load i8*, i8** %39, align 8, !tbaa !537
  %41 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %13, i64 0, i32 0
  %42 = load i32, i32* %41, align 8, !tbaa !539
  %43 = add nsw i32 %42, 1
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 4
  %46 = tail call fastcc i8* @av_realloc(i8* %40, i64 %45) #18
  %47 = icmp eq i8* %46, null
  br i1 %47, label %106, label %48

48:                                               ; preds = %37
  store i8* %46, i8** %39, align 8, !tbaa !537
  br label %49

49:                                               ; preds = %48, %24
  %50 = phi i8* [ %25, %24 ], [ null, %48 ]
  %51 = icmp eq i8* %2, null
  br i1 %51, label %52, label %55

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %13, i64 0, i32 0
  %54 = load i32, i32* %53, align 8, !tbaa !539
  br label %98

55:                                               ; preds = %49
  %56 = and i32 %3, 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %55
  %59 = tail call fastcc noalias i8* @av_strdup(i8* %1) #18
  br label %60

60:                                               ; preds = %58, %55
  %61 = phi i8* [ %59, %58 ], [ %1, %55 ]
  %62 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %13, i64 0, i32 1
  %63 = load %struct.AVCodecDefault*, %struct.AVCodecDefault** %62, align 8, !tbaa !537
  %64 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %13, i64 0, i32 0
  %65 = load i32, i32* %64, align 8, !tbaa !539
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %63, i64 %66, i32 0
  store i8* %61, i8** %67, align 8, !tbaa !414
  %68 = and i32 %3, 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %91

70:                                               ; preds = %60
  %71 = icmp eq i8* %50, null
  %72 = and i32 %3, 32
  %73 = icmp eq i32 %72, 0
  %74 = or i1 %73, %71
  br i1 %74, label %85, label %75

75:                                               ; preds = %70
  %76 = tail call i64 @strlen(i8* nonnull %50) #28
  %77 = tail call i64 @strlen(i8* nonnull %2) #28
  %78 = add i64 %77, %76
  %79 = shl i64 %78, 32
  %80 = add i64 %79, 4294967296
  %81 = ashr exact i64 %80, 32
  %82 = tail call fastcc i8* @av_realloc(i8* nonnull %50, i64 %81) #18
  %83 = icmp eq i8* %82, null
  br i1 %83, label %106, label %84

84:                                               ; preds = %75
  tail call fastcc void @av_strlcat(i8* nonnull %82, i8* nonnull %2, i64 %81) #18
  br label %87

85:                                               ; preds = %70
  %86 = tail call fastcc noalias i8* @av_strdup(i8* nonnull %2) #18
  br label %87

87:                                               ; preds = %85, %84
  %88 = phi i8* [ %86, %85 ], [ %82, %84 ]
  %89 = load %struct.AVCodecDefault*, %struct.AVCodecDefault** %62, align 8, !tbaa !537
  %90 = load i32, i32* %64, align 8, !tbaa !539
  br label %91

91:                                               ; preds = %87, %60
  %92 = phi i32 [ %65, %60 ], [ %90, %87 ]
  %93 = phi %struct.AVCodecDefault* [ %63, %60 ], [ %89, %87 ]
  %94 = phi i8* [ %2, %60 ], [ %88, %87 ]
  %95 = sext i32 %92 to i64
  %96 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %93, i64 %95, i32 1
  store i8* %94, i8** %96, align 8, !tbaa !384
  %97 = add nsw i32 %92, 1
  store i32 %97, i32* %64, align 8, !tbaa !539
  br label %98

98:                                               ; preds = %91, %52
  %99 = phi i32 [ %54, %52 ], [ %97, %91 ]
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %106

101:                                              ; preds = %98
  %102 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %13, i64 0, i32 1
  %103 = bitcast %struct.AVCodecDefault** %102 to i8**
  %104 = load i8*, i8** %103, align 8, !tbaa !537
  tail call fastcc void @av_free(i8* %104) #18
  %105 = bitcast %struct.AVDictionary** %0 to i8*
  tail call fastcc void @av_freep(i8* %105) #18
  br label %106

106:                                              ; preds = %101, %98, %75, %37, %15
  %107 = phi i32 [ 0, %15 ], [ -12, %37 ], [ -12, %75 ], [ 0, %98 ], [ 0, %101 ]
  ret i32 %107
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_dict_free(%struct.AVDictionary** nocapture) unnamed_addr #5 {
  %2 = load %struct.AVDictionary*, %struct.AVDictionary** %0, align 8, !tbaa !27
  %3 = icmp eq %struct.AVDictionary* %2, null
  br i1 %3, label %27, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %2, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !539
  %7 = add nsw i32 %6, -1
  store i32 %7, i32* %5, align 8, !tbaa !539
  %8 = icmp eq i32 %6, 0
  %9 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %2, i64 0, i32 1
  %10 = load %struct.AVCodecDefault*, %struct.AVCodecDefault** %9, align 8, !tbaa !537
  br i1 %8, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %4, %.preheader
  %11 = phi %struct.AVCodecDefault* [ %24, %.preheader ], [ %10, %4 ]
  %12 = phi i32 [ %22, %.preheader ], [ %7, %4 ]
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %11, i64 %13, i32 0
  %15 = load i8*, i8** %14, align 8, !tbaa !414
  tail call fastcc void @av_free(i8* %15) #18
  %16 = load %struct.AVCodecDefault*, %struct.AVCodecDefault** %9, align 8, !tbaa !537
  %17 = load i32, i32* %5, align 8, !tbaa !539
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %16, i64 %18, i32 1
  %20 = load i8*, i8** %19, align 8, !tbaa !384
  tail call fastcc void @av_free(i8* %20) #18
  %21 = load i32, i32* %5, align 8, !tbaa !539
  %22 = add nsw i32 %21, -1
  store i32 %22, i32* %5, align 8, !tbaa !539
  %23 = icmp eq i32 %21, 0
  %24 = load %struct.AVCodecDefault*, %struct.AVCodecDefault** %9, align 8, !tbaa !537
  br i1 %23, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.preheader, %4
  %25 = phi %struct.AVCodecDefault* [ %10, %4 ], [ %24, %.preheader ]
  %26 = bitcast %struct.AVCodecDefault* %25 to i8*
  tail call fastcc void @av_free(i8* %26) #18
  br label %27

27:                                               ; preds = %.loopexit, %1
  %28 = bitcast %struct.AVDictionary** %0 to i8*
  tail call fastcc void @av_freep(i8* %28) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_dict_copy(%struct.AVDictionary** nocapture, %struct.AVDictionary* readonly) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %1, i64 0, i32 1
  %4 = icmp eq %struct.AVDictionary* %1, null
  br i1 %4, label %.loopexit, label %5

5:                                                ; preds = %2
  %6 = bitcast %struct.AVCodecDefault** %3 to i64*
  %7 = getelementptr inbounds %struct.AVDictionary, %struct.AVDictionary* %1, i64 0, i32 0
  br label %8

8:                                                ; preds = %27, %5
  %9 = phi %struct.AVCodecDefault* [ null, %5 ], [ %25, %27 ]
  %10 = icmp eq %struct.AVCodecDefault* %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %8
  %12 = load i64, i64* %6, align 8, !tbaa !537
  %13 = ptrtoint %struct.AVCodecDefault* %9 to i64
  %14 = sub i64 %13, %12
  %15 = lshr exact i64 %14, 4
  %16 = trunc i64 %15 to i32
  %17 = add i32 %16, 1
  br label %18

18:                                               ; preds = %11, %8
  %19 = phi i32 [ %17, %11 ], [ 0, %8 ]
  %20 = load i32, i32* %7, align 8, !tbaa !539
  %21 = icmp ult i32 %19, %20
  br i1 %21, label %22, label %.loopexit

22:                                               ; preds = %18
  %23 = load %struct.AVCodecDefault*, %struct.AVCodecDefault** %3, align 8, !tbaa !537
  %24 = zext i32 %19 to i64
  %25 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %23, i64 %24
  %26 = icmp eq %struct.AVCodecDefault* %25, null
  br i1 %26, label %.loopexit, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %25, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8, !tbaa !414
  %30 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %23, i64 %24, i32 1
  %31 = load i8*, i8** %30, align 8, !tbaa !384
  %32 = tail call fastcc i32 @av_dict_set(%struct.AVDictionary** %0, i8* %29, i8* %31, i32 0)
  br label %8

.loopexit:                                        ; preds = %22, %18, %2
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc double @av_strtod(i8*, i8**) unnamed_addr #5 {
  %3 = alloca i8*, align 8
  %4 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #18
  %5 = load i8, i8* %0, align 1, !tbaa !33
  %6 = icmp eq i8 %5, 48
  br i1 %6, label %7, label %15

7:                                                ; preds = %2
  %8 = getelementptr inbounds i8, i8* %0, i64 1
  %9 = load i8, i8* %8, align 1, !tbaa !33
  %10 = or i8 %9, 32
  %11 = icmp eq i8 %10, 120
  br i1 %11, label %12, label %15

12:                                               ; preds = %7
  %13 = call i64 @strtoul(i8* nonnull %0, i8** nonnull %3, i32 16) #18
  %14 = uitofp i64 %13 to double
  br label %17

15:                                               ; preds = %7, %2
  %16 = call nsz double @strtod(i8* nonnull %0, i8** nonnull %3) #18
  br label %17

17:                                               ; preds = %15, %12
  %18 = phi double [ %14, %12 ], [ %16, %15 ]
  %19 = load i8*, i8** %3, align 8, !tbaa !27
  %20 = icmp eq i8* %19, %0
  %21 = ptrtoint i8* %19 to i64
  br i1 %20, label %75, label %22

22:                                               ; preds = %17
  %23 = load i8, i8* %19, align 1, !tbaa !33
  %24 = icmp eq i8 %23, 100
  br i1 %24, label %25, label %34

25:                                               ; preds = %22
  %26 = getelementptr inbounds i8, i8* %19, i64 1
  %27 = load i8, i8* %26, align 1, !tbaa !33
  %28 = icmp eq i8 %27, 66
  br i1 %28, label %29, label %37

29:                                               ; preds = %25
  %30 = fdiv nsz double %18, 2.000000e+01
  %31 = tail call nsz double @llvm.pow.f64(double 1.000000e+01, double %30)
  %32 = getelementptr inbounds i8, i8* %19, i64 2
  store i8* %32, i8** %3, align 8, !tbaa !27
  %33 = ptrtoint i8* %32 to i64
  br label %60

34:                                               ; preds = %22
  %35 = add i8 %23, -69
  %36 = icmp ult i8 %35, 54
  br i1 %36, label %37, label %65

37:                                               ; preds = %34, %25
  %38 = sext i8 %23 to i64
  %39 = add nsw i64 %38, -69
  %40 = lshr i64 13804689807149381, %39
  %41 = and i64 %40, 1
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %60, label %43

43:                                               ; preds = %37
  %44 = getelementptr inbounds [54 x i8], [54 x i8]* @si_prefixes, i64 0, i64 %39
  %45 = load i8, i8* %44, align 1, !tbaa !33
  %46 = getelementptr inbounds i8, i8* %19, i64 1
  %47 = load i8, i8* %46, align 1, !tbaa !33
  %48 = icmp eq i8 %47, 105
  %49 = sitofp i8 %45 to double
  br i1 %48, label %50, label %56

50:                                               ; preds = %43
  %51 = fdiv nsz double %49, 3.000000e-01
  %52 = tail call nsz double @llvm.exp2.f64(double %51)
  %53 = fmul nsz double %18, %52
  %54 = getelementptr inbounds i8, i8* %19, i64 2
  store i8* %54, i8** %3, align 8, !tbaa !27
  %55 = ptrtoint i8* %54 to i64
  br label %60

56:                                               ; preds = %43
  %57 = tail call nsz double @llvm.pow.f64(double 1.000000e+01, double %49)
  %58 = fmul nsz double %18, %57
  store i8* %46, i8** %3, align 8, !tbaa !27
  %59 = ptrtoint i8* %46 to i64
  br label %60

60:                                               ; preds = %56, %50, %37, %29
  %61 = phi i64 [ %21, %37 ], [ %59, %56 ], [ %55, %50 ], [ %33, %29 ]
  %62 = phi i8* [ %19, %37 ], [ %46, %56 ], [ %54, %50 ], [ %32, %29 ]
  %63 = phi double [ %18, %37 ], [ %58, %56 ], [ %53, %50 ], [ %31, %29 ]
  %64 = load i8, i8* %62, align 1, !tbaa !33
  br label %65

65:                                               ; preds = %60, %34
  %66 = phi i8 [ %64, %60 ], [ %23, %34 ]
  %67 = phi i64 [ %61, %60 ], [ %21, %34 ]
  %68 = phi i8* [ %62, %60 ], [ %19, %34 ]
  %69 = phi double [ %63, %60 ], [ %18, %34 ]
  %70 = icmp eq i8 %66, 66
  br i1 %70, label %71, label %75

71:                                               ; preds = %65
  %72 = fmul nsz double %69, 8.000000e+00
  %73 = getelementptr inbounds i8, i8* %68, i64 1
  store i8* %73, i8** %3, align 8, !tbaa !27
  %74 = ptrtoint i8* %73 to i64
  br label %75

75:                                               ; preds = %71, %65, %17
  %76 = phi i64 [ %74, %71 ], [ %67, %65 ], [ %21, %17 ]
  %77 = phi double [ %72, %71 ], [ %69, %65 ], [ %18, %17 ]
  %78 = icmp eq i8** %1, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %75
  %80 = bitcast i8** %1 to i64*
  store i64 %76, i64* %80, align 8, !tbaa !27
  br label %81

81:                                               ; preds = %79, %75
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #18
  ret double %77
}

; Function Attrs: nofree nounwind
declare dso_local i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #16

; Function Attrs: nofree nounwind
declare dso_local double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr #16

; Function Attrs: nounwind readnone speculatable
declare double @llvm.pow.f64(double, double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp2.f64(double) #6

; Function Attrs: nounwind uwtable
define internal fastcc void @av_expr_free(%struct.AVExpr*) unnamed_addr #5 {
  %2 = alloca %struct.AVExpr*, align 8
  store %struct.AVExpr* %0, %struct.AVExpr** %2, align 8, !tbaa !27
  %3 = icmp eq %struct.AVExpr* %0, null
  br i1 %3, label %14, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 0
  %6 = load %struct.AVExpr*, %struct.AVExpr** %5, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %6)
  %7 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 1
  %8 = load %struct.AVExpr*, %struct.AVExpr** %7, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %8)
  %9 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 2
  %10 = load %struct.AVExpr*, %struct.AVExpr** %9, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %10)
  %11 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4
  %12 = bitcast double** %11 to i8*
  tail call fastcc void @av_freep(i8* nonnull %12) #18
  %13 = bitcast %struct.AVExpr** %2 to i8*
  call fastcc void @av_freep(i8* nonnull %13) #18
  br label %14

14:                                               ; preds = %4, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_expr_parse(%struct.AVExpr** nocapture, i8*, i8*) unnamed_addr #5 {
  %4 = alloca %struct.Parser, align 8
  %5 = alloca %struct.AVExpr*, align 8
  %6 = bitcast %struct.Parser* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %6) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 104, i1 false)
  %7 = bitcast %struct.AVExpr** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #18
  store %struct.AVExpr* null, %struct.AVExpr** %5, align 8, !tbaa !27
  %8 = tail call i64 @strlen(i8* %1) #28
  %9 = add i64 %8, 1
  %10 = tail call fastcc noalias i8* @av_malloc(i64 %9) #18
  %11 = icmp eq i8* %10, null
  br i1 %11, label %64, label %12

12:                                               ; preds = %3
  %13 = load i8, i8* %1, align 1, !tbaa !33
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %.loopexit, label %15

15:                                               ; preds = %12
  %16 = tail call i16** @__ctype_b_loc() #29
  br label %17

17:                                               ; preds = %30, %15
  %18 = phi i8 [ %13, %15 ], [ %32, %30 ]
  %19 = phi i8* [ %10, %15 ], [ %31, %30 ]
  %20 = phi i8* [ %1, %15 ], [ %22, %30 ]
  %21 = load i16*, i16** %16, align 8, !tbaa !27
  %22 = getelementptr inbounds i8, i8* %20, i64 1
  %23 = sext i8 %18 to i64
  %24 = getelementptr inbounds i16, i16* %21, i64 %23
  %25 = load i16, i16* %24, align 2, !tbaa !123
  %26 = and i16 %25, 8192
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %17
  %29 = getelementptr inbounds i8, i8* %19, i64 1
  store i8 %18, i8* %19, align 1, !tbaa !33
  br label %30

30:                                               ; preds = %28, %17
  %31 = phi i8* [ %19, %17 ], [ %29, %28 ]
  %32 = load i8, i8* %22, align 1, !tbaa !33
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %.loopexit, label %17

.loopexit:                                        ; preds = %30, %12
  %34 = phi i8* [ %10, %12 ], [ %31, %30 ]
  store i8 0, i8* %34, align 1, !tbaa !33
  %35 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 0
  store %struct.AVClass* @class.2335, %struct.AVClass** %35, align 8, !tbaa !540
  %36 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 1
  store i32 100, i32* %36, align 8, !tbaa !542
  %37 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 2
  store i8* %10, i8** %37, align 8, !tbaa !543
  %38 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 4
  store i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @const_names, i64 0, i64 0), i8*** %38, align 8, !tbaa !544
  %39 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 5
  %40 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 10
  store i32 0, i32* %40, align 8, !tbaa !545
  %41 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 11
  %42 = bitcast double (i8*, double)*** %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 32, i1 false)
  store i8* %2, i8** %41, align 8, !tbaa !546
  %43 = call fastcc i32 @parse_expr(%struct.AVExpr** nonnull %5, %struct.Parser* nonnull %4)
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %62, label %45

45:                                               ; preds = %.loopexit
  %46 = load i8*, i8** %37, align 8, !tbaa !543
  %47 = load i8, i8* %46, align 1, !tbaa !33
  %48 = icmp eq i8 %47, 0
  %49 = load %struct.AVExpr*, %struct.AVExpr** %5, align 8, !tbaa !27
  br i1 %48, label %52, label %50

50:                                               ; preds = %45
  call fastcc void @av_expr_free(%struct.AVExpr* %49)
  %51 = load i8*, i8** %37, align 8, !tbaa !543
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %6, i32 16, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2336, i64 0, i64 0), i8* %51, i8* %1) #18
  br label %62

52:                                               ; preds = %45
  %53 = call fastcc i32 @verify_expr(%struct.AVExpr* %49)
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  call fastcc void @av_expr_free(%struct.AVExpr* %49)
  br label %62

56:                                               ; preds = %52
  %57 = call fastcc noalias i8* @av_mallocz(i64 80) #18
  %58 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %49, i64 0, i32 4
  %59 = bitcast double** %58 to i8**
  store i8* %57, i8** %59, align 8, !tbaa !547
  %60 = ptrtoint %struct.AVExpr* %49 to i64
  %61 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %60, i64* %61, align 8, !tbaa !27
  br label %62

62:                                               ; preds = %56, %55, %50, %.loopexit
  %63 = phi i32 [ %43, %.loopexit ], [ -22, %50 ], [ %43, %56 ], [ -22, %55 ]
  call fastcc void @av_free(i8* nonnull %10) #18
  br label %64

64:                                               ; preds = %62, %3
  %65 = phi i32 [ %63, %62 ], [ -12, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #18
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %6) #18
  ret i32 %65
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @parse_expr(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #5 {
  %3 = alloca %struct.AVExpr*, align 8
  %4 = alloca %struct.AVExpr*, align 8
  %5 = bitcast %struct.AVExpr** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #18
  %6 = bitcast %struct.AVExpr** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #18
  %7 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 8, !tbaa !542
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %58, label %10

10:                                               ; preds = %2
  %11 = add nsw i32 %8, -1
  store i32 %11, i32* %7, align 8, !tbaa !542
  %12 = call fastcc i32 @parse_subexpr(%struct.AVExpr** nonnull %3, %struct.Parser* nonnull %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %58, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8, !tbaa !543
  %17 = load i8, i8* %16, align 1, !tbaa !33
  %18 = icmp eq i8 %17, 59
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = bitcast %struct.AVExpr** %3 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !27
  br label %53

22:                                               ; preds = %14
  %23 = bitcast %struct.AVExpr** %3 to i8**
  %24 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8, !tbaa !27
  %25 = bitcast %struct.AVExpr* %24 to i8*
  %26 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %26, i8** %15, align 8, !tbaa !543
  %27 = call fastcc i32 @parse_subexpr(%struct.AVExpr** nonnull %4, %struct.Parser* nonnull %1)
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %._crit_edge, label %.lr.ph

29:                                               ; preds = %39
  %30 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %30, i8** %15, align 8, !tbaa !543
  %31 = call fastcc i32 @parse_subexpr(%struct.AVExpr** nonnull %4, %struct.Parser* nonnull %1)
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %29
  %33 = bitcast i8* %36 to %struct.AVExpr*
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %22
  %.lcssa45 = phi i8* [ %25, %22 ], [ %36, %._crit_edge.loopexit ]
  %.lcssa42 = phi %struct.AVExpr* [ %24, %22 ], [ %33, %._crit_edge.loopexit ]
  %.lcssa = phi i32 [ %27, %22 ], [ %31, %._crit_edge.loopexit ]
  store i8* %.lcssa45, i8** %23, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %.lcssa42)
  br label %58

.lr.ph:                                           ; preds = %22, %29
  %34 = phi %struct.AVExpr* [ %50, %29 ], [ %24, %22 ]
  %35 = load %struct.AVExpr*, %struct.AVExpr** %4, align 8, !tbaa !27
  %36 = tail call fastcc noalias i8* @av_mallocz(i64 56) #18
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %39

38:                                               ; preds = %.lr.ph
  store %struct.AVExpr* null, %struct.AVExpr** %3, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %34)
  tail call fastcc void @av_expr_free(%struct.AVExpr* %35)
  br label %58

39:                                               ; preds = %.lr.ph
  %40 = bitcast i8* %36 to i32*
  store i32 20, i32* %40, align 8, !tbaa !550
  %41 = getelementptr inbounds i8, i8* %36, i64 8
  %42 = bitcast i8* %41 to double*
  store double 1.000000e+00, double* %42, align 8, !tbaa !551
  %43 = getelementptr inbounds i8, i8* %36, i64 24
  %44 = bitcast i8* %43 to %struct.AVExpr**
  store %struct.AVExpr* %34, %struct.AVExpr** %44, align 8, !tbaa !27
  %45 = getelementptr inbounds i8, i8* %36, i64 32
  %46 = bitcast i8* %45 to %struct.AVExpr**
  store %struct.AVExpr* %35, %struct.AVExpr** %46, align 8, !tbaa !27
  %47 = load i8*, i8** %15, align 8, !tbaa !543
  %48 = load i8, i8* %47, align 1, !tbaa !33
  %49 = icmp eq i8 %48, 59
  %50 = bitcast i8* %36 to %struct.AVExpr*
  br i1 %49, label %29, label %51

51:                                               ; preds = %39
  store i8* %36, i8** %23, align 8, !tbaa !27
  %52 = ptrtoint i8* %36 to i64
  br label %53

53:                                               ; preds = %51, %19
  %54 = phi i64 [ %21, %19 ], [ %52, %51 ]
  %55 = load i32, i32* %7, align 8, !tbaa !542
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %7, align 8, !tbaa !542
  %57 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %54, i64* %57, align 8, !tbaa !27
  br label %58

58:                                               ; preds = %53, %38, %._crit_edge, %10, %2
  %59 = phi i32 [ %.lcssa, %._crit_edge ], [ -12, %38 ], [ 0, %53 ], [ -22, %2 ], [ %12, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #18
  ret i32 %59
}

; Function Attrs: nounwind readonly uwtable
define internal fastcc i32 @verify_expr(%struct.AVExpr* readonly) unnamed_addr #22 {
  %2 = icmp eq %struct.AVExpr* %0, null
  br i1 %2, label %46, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8, !tbaa !550
  switch i32 %5, label %32 [
    i32 0, label %46
    i32 1, label %46
    i32 2, label %6
    i32 3, label %6
    i32 5, label %6
    i32 7, label %6
    i32 6, label %6
    i32 8, label %6
    i32 9, label %6
    i32 25, label %6
    i32 26, label %6
    i32 27, label %6
    i32 28, label %6
    i32 29, label %6
    i32 30, label %6
    i32 33, label %15
    i32 34, label %15
    i32 23, label %15
  ]

6:                                                ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  %7 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 0
  %8 = load %struct.AVExpr*, %struct.AVExpr** %7, align 8, !tbaa !27
  %9 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %8)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %46, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 1
  %13 = load %struct.AVExpr*, %struct.AVExpr** %12, align 8, !tbaa !27
  %14 = icmp eq %struct.AVExpr* %13, null
  br label %46

15:                                               ; preds = %3, %3, %3
  %16 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 0
  %17 = load %struct.AVExpr*, %struct.AVExpr** %16, align 8, !tbaa !27
  %18 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %17)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %46, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 1
  %22 = load %struct.AVExpr*, %struct.AVExpr** %21, align 8, !tbaa !27
  %23 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %22)
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %46, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 2
  %27 = load %struct.AVExpr*, %struct.AVExpr** %26, align 8, !tbaa !27
  %28 = icmp eq %struct.AVExpr* %27, null
  br i1 %28, label %46, label %29

29:                                               ; preds = %25
  %30 = tail call fastcc i32 @verify_expr(%struct.AVExpr* nonnull %27)
  %31 = icmp ne i32 %30, 0
  br label %46

32:                                               ; preds = %3
  %33 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 0
  %34 = load %struct.AVExpr*, %struct.AVExpr** %33, align 8, !tbaa !27
  %35 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %34)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %46, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 1
  %39 = load %struct.AVExpr*, %struct.AVExpr** %38, align 8, !tbaa !27
  %40 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %39)
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 3, i64 2
  %44 = load %struct.AVExpr*, %struct.AVExpr** %43, align 8, !tbaa !27
  %45 = icmp eq %struct.AVExpr* %44, null
  br label %46

46:                                               ; preds = %42, %37, %32, %29, %25, %20, %15, %11, %6, %3, %3, %1
  %47 = phi i1 [ false, %1 ], [ true, %3 ], [ true, %3 ], [ false, %6 ], [ %14, %11 ], [ false, %20 ], [ false, %15 ], [ true, %25 ], [ %31, %29 ], [ false, %37 ], [ false, %32 ], [ %45, %42 ]
  %48 = zext i1 %47 to i32
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @parse_subexpr(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #5 {
  %3 = alloca %struct.AVExpr*, align 8
  %4 = alloca %struct.AVExpr*, align 8
  %5 = bitcast %struct.AVExpr** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #18
  %6 = bitcast %struct.AVExpr** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #18
  %7 = call fastcc i32 @parse_term(%struct.AVExpr** nonnull %3, %struct.Parser* %1)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %38, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %11 = bitcast %struct.AVExpr** %3 to i8**
  %12 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8, !tbaa !27
  %13 = bitcast %struct.AVExpr* %12 to i8*
  br label %14

14:                                               ; preds = %28, %9
  %15 = phi i8* [ %13, %9 ], [ %25, %28 ]
  %16 = phi %struct.AVExpr* [ %12, %9 ], [ %36, %28 ]
  %17 = load i8*, i8** %10, align 8, !tbaa !543
  %18 = load i8, i8* %17, align 1, !tbaa !33
  switch i8 %18, label %37 [
    i8 45, label %19
    i8 43, label %19
  ]

19:                                               ; preds = %14, %14
  %20 = call fastcc i32 @parse_term(%struct.AVExpr** nonnull %4, %struct.Parser* nonnull %1)
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  store i8* %15, i8** %11, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %16)
  br label %38

23:                                               ; preds = %19
  %24 = load %struct.AVExpr*, %struct.AVExpr** %4, align 8, !tbaa !27
  %25 = tail call fastcc noalias i8* @av_mallocz(i64 56) #18
  %26 = icmp eq i8* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  store %struct.AVExpr* null, %struct.AVExpr** %3, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %16)
  tail call fastcc void @av_expr_free(%struct.AVExpr* %24)
  br label %38

28:                                               ; preds = %23
  %29 = bitcast i8* %25 to i32*
  store i32 19, i32* %29, align 8, !tbaa !550
  %30 = getelementptr inbounds i8, i8* %25, i64 8
  %31 = bitcast i8* %30 to double*
  store double 1.000000e+00, double* %31, align 8, !tbaa !551
  %32 = getelementptr inbounds i8, i8* %25, i64 24
  %33 = bitcast i8* %32 to %struct.AVExpr**
  store %struct.AVExpr* %16, %struct.AVExpr** %33, align 8, !tbaa !27
  %34 = getelementptr inbounds i8, i8* %25, i64 32
  %35 = bitcast i8* %34 to %struct.AVExpr**
  store %struct.AVExpr* %24, %struct.AVExpr** %35, align 8, !tbaa !27
  %36 = bitcast i8* %25 to %struct.AVExpr*
  br label %14

37:                                               ; preds = %14
  store i8* %15, i8** %11, align 8, !tbaa !27
  store %struct.AVExpr* %16, %struct.AVExpr** %0, align 8, !tbaa !27
  br label %38

38:                                               ; preds = %37, %27, %22, %2
  %39 = phi i32 [ %20, %22 ], [ -12, %27 ], [ 0, %37 ], [ %7, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #18
  ret i32 %39
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @parse_term(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #5 {
  %3 = alloca %struct.AVExpr*, align 8
  %4 = alloca %struct.AVExpr*, align 8
  %5 = bitcast %struct.AVExpr** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #18
  %6 = bitcast %struct.AVExpr** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #18
  %7 = call fastcc i32 @parse_factor(%struct.AVExpr** nonnull %3, %struct.Parser* %1)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %41, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %11 = bitcast %struct.AVExpr** %3 to i8**
  br label %12

12:                                               ; preds = %27, %9
  %13 = load i8*, i8** %10, align 8, !tbaa !543
  %14 = load i8, i8* %13, align 1, !tbaa !33
  switch i8 %14, label %37 [
    i8 42, label %15
    i8 47, label %15
  ]

15:                                               ; preds = %12, %12
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %16, i8** %10, align 8, !tbaa !543
  %17 = load i8, i8* %13, align 1, !tbaa !33
  %18 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8, !tbaa !27
  %19 = call fastcc i32 @parse_factor(%struct.AVExpr** nonnull %4, %struct.Parser* nonnull %1)
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %15
  tail call fastcc void @av_expr_free(%struct.AVExpr* %18)
  br label %41

22:                                               ; preds = %15
  %23 = load %struct.AVExpr*, %struct.AVExpr** %4, align 8, !tbaa !27
  %24 = tail call fastcc noalias i8* @av_mallocz(i64 56) #18
  %25 = icmp eq i8* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  store %struct.AVExpr* null, %struct.AVExpr** %3, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %18)
  tail call fastcc void @av_expr_free(%struct.AVExpr* %23)
  br label %41

27:                                               ; preds = %22
  %28 = icmp eq i8 %17, 42
  %29 = select i1 %28, i32 17, i32 18
  %30 = bitcast i8* %24 to i32*
  store i32 %29, i32* %30, align 8, !tbaa !550
  %31 = getelementptr inbounds i8, i8* %24, i64 8
  %32 = bitcast i8* %31 to double*
  store double 1.000000e+00, double* %32, align 8, !tbaa !551
  %33 = getelementptr inbounds i8, i8* %24, i64 24
  %34 = bitcast i8* %33 to %struct.AVExpr**
  store %struct.AVExpr* %18, %struct.AVExpr** %34, align 8, !tbaa !27
  %35 = getelementptr inbounds i8, i8* %24, i64 32
  %36 = bitcast i8* %35 to %struct.AVExpr**
  store %struct.AVExpr* %23, %struct.AVExpr** %36, align 8, !tbaa !27
  store i8* %24, i8** %11, align 8, !tbaa !27
  br label %12

37:                                               ; preds = %12
  %38 = bitcast %struct.AVExpr** %3 to i64*
  %39 = load i64, i64* %38, align 8, !tbaa !27
  %40 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %39, i64* %40, align 8, !tbaa !27
  br label %41

41:                                               ; preds = %37, %26, %21, %2
  %42 = phi i32 [ 0, %37 ], [ %7, %2 ], [ -12, %26 ], [ %19, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #18
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @parse_factor(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #5 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.AVExpr*, align 8
  %6 = alloca %struct.AVExpr*, align 8
  %7 = bitcast %struct.AVExpr** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #18
  %8 = bitcast %struct.AVExpr** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #18
  %9 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8, !tbaa !543
  %11 = load i8, i8* %10, align 1, !tbaa !33
  %12 = icmp eq i8 %11, 45
  br i1 %12, label %13, label %30

13:                                               ; preds = %2
  %14 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #18
  %15 = call nsz double @strtod(i8* %10, i8** nonnull %3) #18
  %16 = load i8*, i8** %3, align 8, !tbaa !27
  %17 = load i8*, i8** %9, align 8, !tbaa !543
  %18 = icmp eq i8* %16, %17
  br i1 %18, label %26, label %19

19:                                               ; preds = %13
  %20 = load i8, i8* %16, align 1, !tbaa !33
  %21 = icmp eq i8 %20, 100
  br i1 %21, label %22, label %26

22:                                               ; preds = %19
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  %24 = load i8, i8* %23, align 1, !tbaa !33
  %25 = icmp eq i8 %24, 66
  br i1 %25, label %28, label %26

26:                                               ; preds = %22, %19, %13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #18
  %27 = load i8, i8* %17, align 1, !tbaa !33
  br label %30

28:                                               ; preds = %22
  %29 = call fastcc i32 @parse_primary(%struct.AVExpr** nonnull %5, %struct.Parser* nonnull %1) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #18
  br label %44

30:                                               ; preds = %26, %2
  %31 = phi i8 [ %27, %26 ], [ %11, %2 ]
  %32 = phi i8* [ %17, %26 ], [ %10, %2 ]
  %33 = icmp eq i8 %31, 43
  %34 = zext i1 %33 to i32
  %35 = icmp eq i8 %31, 45
  %36 = zext i1 %35 to i32
  %37 = sub nsw i32 %34, %36
  %38 = and i32 %37, 1
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %32, i64 %39
  store i8* %40, i8** %9, align 8, !tbaa !543
  %41 = call fastcc i32 @parse_primary(%struct.AVExpr** nonnull %5, %struct.Parser* nonnull %1) #18
  %42 = or i32 %37, 1
  %43 = sitofp i32 %42 to double
  br label %44

44:                                               ; preds = %30, %28
  %45 = phi double [ %43, %30 ], [ 1.000000e+00, %28 ]
  %46 = phi i32 [ %41, %30 ], [ %29, %28 ]
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %136, label %48

48:                                               ; preds = %44
  %49 = load i8*, i8** %9, align 8, !tbaa !543
  %50 = load i8, i8* %49, align 1, !tbaa !33
  %51 = icmp eq i8 %50, 94
  %52 = load %struct.AVExpr*, %struct.AVExpr** %5, align 8, !tbaa !27
  %53 = ptrtoint %struct.AVExpr* %52 to i64
  br i1 %51, label %54, label %126

54:                                               ; preds = %48
  %55 = bitcast i8** %4 to i8*
  %56 = bitcast %struct.AVExpr** %5 to i8**
  %57 = load i8*, i8** %56, align 8, !tbaa !27
  br label %58

58:                                               ; preds = %119, %54
  %59 = phi i8* [ %57, %54 ], [ %100, %119 ]
  %60 = phi %struct.AVExpr* [ %52, %54 ], [ %112, %119 ]
  %61 = phi i8* [ %49, %54 ], [ %120, %119 ]
  %62 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %62, i8** %9, align 8, !tbaa !543
  %63 = load i8, i8* %62, align 1, !tbaa !33
  %64 = icmp eq i8 %63, 45
  br i1 %64, label %65, label %81

65:                                               ; preds = %58
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #18
  %66 = call nsz double @strtod(i8* nonnull %62, i8** nonnull %4) #18
  %67 = load i8*, i8** %4, align 8, !tbaa !27
  %68 = load i8*, i8** %9, align 8, !tbaa !543
  %69 = icmp eq i8* %67, %68
  br i1 %69, label %77, label %70

70:                                               ; preds = %65
  %71 = load i8, i8* %67, align 1, !tbaa !33
  %72 = icmp eq i8 %71, 100
  br i1 %72, label %73, label %77

73:                                               ; preds = %70
  %74 = getelementptr inbounds i8, i8* %67, i64 1
  %75 = load i8, i8* %74, align 1, !tbaa !33
  %76 = icmp eq i8 %75, 66
  br i1 %76, label %79, label %77

77:                                               ; preds = %73, %70, %65
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #18
  %78 = load i8, i8* %68, align 1, !tbaa !33
  br label %81

79:                                               ; preds = %73
  %80 = call fastcc i32 @parse_primary(%struct.AVExpr** nonnull %6, %struct.Parser* nonnull %1) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #18
  br label %93

81:                                               ; preds = %77, %58
  %82 = phi i8 [ %78, %77 ], [ %63, %58 ]
  %83 = phi i8* [ %68, %77 ], [ %62, %58 ]
  %84 = icmp eq i8 %82, 43
  %85 = zext i1 %84 to i32
  %86 = icmp eq i8 %82, 45
  %87 = zext i1 %86 to i32
  %88 = sub nsw i32 %85, %87
  %89 = and i32 %88, 1
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %83, i64 %90
  store i8* %91, i8** %9, align 8, !tbaa !543
  %92 = call fastcc i32 @parse_primary(%struct.AVExpr** nonnull %6, %struct.Parser* nonnull %1) #18
  br label %93

93:                                               ; preds = %81, %79
  %94 = phi i32 [ %88, %81 ], [ 0, %79 ]
  %95 = phi i32 [ %92, %81 ], [ %80, %79 ]
  %96 = icmp slt i32 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  store i8* %59, i8** %56, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %60)
  br label %136

98:                                               ; preds = %93
  %99 = load %struct.AVExpr*, %struct.AVExpr** %6, align 8, !tbaa !27
  %100 = tail call fastcc noalias i8* @av_mallocz(i64 56) #18
  %101 = icmp eq i8* %100, null
  br i1 %101, label %102, label %103

102:                                              ; preds = %98
  store %struct.AVExpr* null, %struct.AVExpr** %5, align 8, !tbaa !27
  tail call fastcc void @av_expr_free(%struct.AVExpr* %60)
  tail call fastcc void @av_expr_free(%struct.AVExpr* %99)
  br label %136

103:                                              ; preds = %98
  %104 = bitcast i8* %100 to i32*
  store i32 16, i32* %104, align 8, !tbaa !550
  %105 = getelementptr inbounds i8, i8* %100, i64 8
  %106 = bitcast i8* %105 to double*
  store double 1.000000e+00, double* %106, align 8, !tbaa !551
  %107 = getelementptr inbounds i8, i8* %100, i64 24
  %108 = bitcast i8* %107 to %struct.AVExpr**
  store %struct.AVExpr* %60, %struct.AVExpr** %108, align 8, !tbaa !27
  %109 = getelementptr inbounds i8, i8* %100, i64 32
  %110 = bitcast i8* %109 to %struct.AVExpr**
  store %struct.AVExpr* %99, %struct.AVExpr** %110, align 8, !tbaa !27
  %111 = icmp eq %struct.AVExpr* %99, null
  %112 = bitcast i8* %100 to %struct.AVExpr*
  br i1 %111, label %119, label %113

113:                                              ; preds = %103
  %114 = or i32 %94, 1
  %115 = sitofp i32 %114 to double
  %116 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %99, i64 0, i32 1
  %117 = load double, double* %116, align 8, !tbaa !551
  %118 = fmul nsz double %117, %115
  store double %118, double* %116, align 8, !tbaa !551
  br label %119

119:                                              ; preds = %113, %103
  %120 = load i8*, i8** %9, align 8, !tbaa !543
  %121 = load i8, i8* %120, align 1, !tbaa !33
  %122 = icmp eq i8 %121, 94
  br i1 %122, label %58, label %123

123:                                              ; preds = %119
  %124 = bitcast i8* %100 to %struct.AVExpr*
  store i8* %100, i8** %56, align 8, !tbaa !27
  %125 = ptrtoint i8* %100 to i64
  br label %126

126:                                              ; preds = %123, %48
  %127 = phi i64 [ %53, %48 ], [ %125, %123 ]
  %128 = phi %struct.AVExpr* [ %52, %48 ], [ %124, %123 ]
  %129 = icmp eq %struct.AVExpr* %128, null
  br i1 %129, label %134, label %130

130:                                              ; preds = %126
  %131 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %128, i64 0, i32 1
  %132 = load double, double* %131, align 8, !tbaa !551
  %133 = fmul nsz double %45, %132
  store double %133, double* %131, align 8, !tbaa !551
  br label %134

134:                                              ; preds = %130, %126
  %135 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %127, i64* %135, align 8, !tbaa !27
  br label %136

136:                                              ; preds = %134, %102, %97, %44
  %137 = phi i32 [ %95, %97 ], [ -12, %102 ], [ 0, %134 ], [ %46, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #18
  ret i32 %137
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @parse_primary(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #5 {
  %3 = alloca %struct.AVExpr*, align 8
  %4 = alloca i8*, align 8
  %5 = bitcast %struct.AVExpr** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #18
  %6 = tail call fastcc noalias i8* @av_mallocz(i64 56) #18
  %7 = bitcast %struct.AVExpr** %3 to i8**
  store i8* %6, i8** %7, align 8, !tbaa !27
  %8 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #18
  %9 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !543
  %12 = bitcast i8** %4 to i64*
  store i64 %11, i64* %12, align 8, !tbaa !27
  %13 = inttoptr i64 %11 to i8*
  %14 = icmp eq i8* %6, null
  %15 = ptrtoint i8* %6 to i64
  br i1 %14, label %429, label %16

16:                                               ; preds = %2
  %17 = call nsz fastcc double @av_strtod(i8* %13, i8** nonnull %4)
  %18 = getelementptr inbounds i8, i8* %6, i64 8
  %19 = bitcast i8* %18 to double*
  store double %17, double* %19, align 8, !tbaa !551
  %20 = load i8*, i8** %4, align 8, !tbaa !27
  %21 = load i8*, i8** %9, align 8, !tbaa !543
  %22 = icmp eq i8* %20, %21
  br i1 %22, label %27, label %23

23:                                               ; preds = %16
  %24 = ptrtoint i8* %20 to i64
  %25 = bitcast i8* %6 to i32*
  store i32 0, i32* %25, align 8, !tbaa !550
  store i64 %24, i64* %10, align 8, !tbaa !543
  %26 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %15, i64* %26, align 8, !tbaa !27
  br label %429

27:                                               ; preds = %16
  store double 1.000000e+00, double* %19, align 8, !tbaa !551
  %28 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 4
  %29 = load i8**, i8*** %28, align 8, !tbaa !544
  %30 = icmp eq i8** %29, null
  br i1 %30, label %.loopexit154, label %31

31:                                               ; preds = %27
  %32 = load i8*, i8** %29, align 8, !tbaa !27
  %33 = icmp eq i8* %32, null
  br i1 %33, label %.loopexit154, label %34

34:                                               ; preds = %31
  %35 = load i8, i8* %20, align 1, !tbaa !33
  br label %36

36:                                               ; preds = %.loopexit152, %34
  %37 = phi i8* [ %72, %.loopexit152 ], [ %32, %34 ]
  %38 = phi i64 [ %70, %.loopexit152 ], [ 0, %34 ]
  %39 = load i8, i8* %37, align 1, !tbaa !33
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %.loopexit153, label %.preheader151

41:                                               ; preds = %.preheader151
  %42 = getelementptr inbounds i8, i8* %37, i64 %51
  %43 = load i8, i8* %42, align 1, !tbaa !33
  %44 = icmp eq i8 %43, 0
  %45 = getelementptr inbounds i8, i8* %20, i64 %51
  %46 = load i8, i8* %45, align 1, !tbaa !33
  br i1 %44, label %.loopexit153, label %.preheader151

.preheader151:                                    ; preds = %36, %41
  %47 = phi i64 [ %51, %41 ], [ 0, %36 ]
  %48 = phi i8 [ %46, %41 ], [ %35, %36 ]
  %49 = phi i8 [ %43, %41 ], [ %39, %36 ]
  %50 = icmp eq i8 %49, %48
  %51 = add nuw i64 %47, 1
  br i1 %50, label %41, label %.loopexit152

.loopexit153:                                     ; preds = %41, %36
  %52 = phi i8 [ %35, %36 ], [ %46, %41 ]
  %53 = sext i8 %52 to i32
  %54 = add nsw i32 %53, -48
  %55 = icmp ugt i32 %54, 9
  %56 = and i32 %53, -33
  %57 = add nsw i32 %56, -65
  %58 = icmp ugt i32 %57, 25
  %59 = icmp ne i8 %52, 95
  %60 = and i1 %55, %58
  %61 = and i1 %59, %60
  br i1 %61, label %62, label %.loopexit152

62:                                               ; preds = %.loopexit153
  %63 = trunc i64 %38 to i32
  %64 = call i64 @strlen(i8* nonnull %37) #28
  %65 = getelementptr inbounds i8, i8* %20, i64 %64
  store i8* %65, i8** %9, align 8, !tbaa !543
  %66 = bitcast i8* %6 to i32*
  store i32 1, i32* %66, align 8, !tbaa !550
  %67 = getelementptr inbounds i8, i8* %6, i64 16
  %68 = bitcast i8* %67 to i32*
  store i32 %63, i32* %68, align 8, !tbaa !33
  %69 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %15, i64* %69, align 8, !tbaa !27
  br label %429

.loopexit152:                                     ; preds = %.preheader151, %.loopexit153
  %70 = add nuw i64 %38, 1
  %71 = getelementptr inbounds i8*, i8** %29, i64 %70
  %72 = load i8*, i8** %71, align 8, !tbaa !27
  %73 = icmp eq i8* %72, null
  br i1 %73, label %.loopexit154, label %36

.loopexit154:                                     ; preds = %.loopexit152, %31, %27
  %74 = load i8, i8* %20, align 1, !tbaa !33
  switch i8 %74, label %.thread88 [
    i8 69, label %75
    i8 80, label %1203
  ]

75:                                               ; preds = %.loopexit154
  %76 = getelementptr inbounds i8, i8* %20, i64 1
  %77 = load i8, i8* %76, align 1, !tbaa !33
  %78 = sext i8 %77 to i32
  %79 = add nsw i32 %78, -48
  %80 = icmp ugt i32 %79, 9
  %81 = and i32 %78, -33
  %82 = add nsw i32 %81, -65
  %83 = icmp ugt i32 %82, 25
  %84 = icmp ne i8 %77, 95
  %85 = and i1 %80, %83
  %86 = and i1 %84, %85
  br i1 %86, label %87, label %.thread88

87:                                               ; preds = %1224, %1212, %75
  %88 = phi i64 [ 0, %75 ], [ 1, %1224 ], [ 2, %1212 ]
  %89 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.47.2337, i64 0, i64 0), %75 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48.2338, i64 0, i64 0), %1224 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49.2339, i64 0, i64 0), %1212 ]
  %90 = call i64 @strlen(i8* nonnull %89) #28
  %91 = getelementptr inbounds i8, i8* %20, i64 %90
  store i8* %91, i8** %9, align 8, !tbaa !543
  %92 = bitcast i8* %6 to i32*
  store i32 0, i32* %92, align 8, !tbaa !550
  %93 = getelementptr inbounds [3 x %struct.anon.829], [3 x %struct.anon.829]* @constants, i64 0, i64 %88, i32 1
  %94 = bitcast double* %93 to i64*
  %95 = load i64, i64* %94, align 8, !tbaa !552
  %96 = bitcast i8* %18 to i64*
  store i64 %95, i64* %96, align 8, !tbaa !551
  %97 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %15, i64* %97, align 8, !tbaa !27
  br label %429

98:                                               ; preds = %.thread88
  %99 = bitcast %struct.Parser* %1 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %99, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2.2340, i64 0, i64 0), i8* %13) #18
  %100 = load i64, i64* %12, align 8, !tbaa !27
  store i64 %100, i64* %10, align 8, !tbaa !543
  %101 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8, !tbaa !27
  call fastcc void @av_expr_free(%struct.AVExpr* %101)
  br label %429

102:                                              ; preds = %.thread88
  %103 = getelementptr inbounds i8, i8* %1206, i64 1
  store i8* %103, i8** %9, align 8, !tbaa !543
  %104 = load i8, i8* %20, align 1, !tbaa !33
  %105 = icmp eq i8 %104, 40
  br i1 %105, label %106, label %121

106:                                              ; preds = %102
  call fastcc void @av_freep(i8* nonnull %5) #18
  %107 = call fastcc i32 @parse_expr(%struct.AVExpr** nonnull %3, %struct.Parser* nonnull %1)
  %108 = icmp slt i32 %107, 0
  br i1 %108, label %429, label %109

109:                                              ; preds = %106
  %110 = load i8*, i8** %9, align 8, !tbaa !543
  %111 = load i8, i8* %110, align 1, !tbaa !33
  %112 = icmp eq i8 %111, 41
  br i1 %112, label %116, label %113

113:                                              ; preds = %109
  %114 = bitcast %struct.Parser* %1 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %114, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.2341, i64 0, i64 0), i8* %13) #18
  %115 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8, !tbaa !27
  call fastcc void @av_expr_free(%struct.AVExpr* %115)
  br label %429

116:                                              ; preds = %109
  %117 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %117, i8** %9, align 8, !tbaa !543
  %118 = bitcast %struct.AVExpr** %3 to i64*
  %119 = load i64, i64* %118, align 8, !tbaa !27
  %120 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %119, i64* %120, align 8, !tbaa !27
  br label %429

121:                                              ; preds = %102
  %122 = getelementptr inbounds i8, i8* %6, i64 24
  %123 = bitcast i8* %122 to %struct.AVExpr**
  %124 = call fastcc i32 @parse_expr(%struct.AVExpr** nonnull %123, %struct.Parser* nonnull %1)
  %125 = icmp slt i32 %124, 0
  br i1 %125, label %126, label %128

126:                                              ; preds = %121
  %127 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8, !tbaa !27
  call fastcc void @av_expr_free(%struct.AVExpr* %127)
  br label %429

128:                                              ; preds = %121
  %129 = load i8*, i8** %9, align 8, !tbaa !543
  %130 = load i8, i8* %129, align 1, !tbaa !33
  %131 = icmp eq i8 %130, 44
  br i1 %131, label %132, label %146

132:                                              ; preds = %128
  %133 = getelementptr inbounds i8, i8* %129, i64 1
  store i8* %133, i8** %9, align 8, !tbaa !543
  %134 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8, !tbaa !27
  %135 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %134, i64 0, i32 3, i64 1
  %136 = call fastcc i32 @parse_expr(%struct.AVExpr** nonnull %135, %struct.Parser* nonnull %1)
  %137 = load i8*, i8** %9, align 8, !tbaa !543
  %138 = load i8, i8* %137, align 1, !tbaa !33
  %139 = icmp eq i8 %138, 44
  br i1 %139, label %140, label %146

140:                                              ; preds = %132
  %141 = getelementptr inbounds i8, i8* %137, i64 1
  store i8* %141, i8** %9, align 8, !tbaa !543
  %142 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %134, i64 0, i32 3, i64 2
  %143 = call fastcc i32 @parse_expr(%struct.AVExpr** nonnull %142, %struct.Parser* nonnull %1)
  %144 = load i8*, i8** %9, align 8, !tbaa !543
  %145 = load i8, i8* %144, align 1, !tbaa !33
  br label %146

146:                                              ; preds = %140, %132, %128
  %147 = phi i8 [ %145, %140 ], [ %138, %132 ], [ %130, %128 ]
  %148 = phi i8* [ %144, %140 ], [ %137, %132 ], [ %129, %128 ]
  %149 = icmp eq i8 %147, 41
  br i1 %149, label %153, label %150

150:                                              ; preds = %146
  %151 = bitcast %struct.Parser* %1 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %151, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4.2342, i64 0, i64 0), i8* %13) #18
  %152 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8, !tbaa !27
  call fastcc void @av_expr_free(%struct.AVExpr* %152)
  br label %429

153:                                              ; preds = %146
  %154 = getelementptr inbounds i8, i8* %148, i64 1
  store i8* %154, i8** %9, align 8, !tbaa !543
  %155 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8, !tbaa !27
  %156 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 0
  store i32 2, i32* %156, align 8, !tbaa !550
  %157 = load i8*, i8** %4, align 8, !tbaa !27
  %158 = load i8, i8* %157, align 1, !tbaa !33
  %159 = ptrtoint %struct.AVExpr* %155 to i64
  switch i8 %158, label %.thread193 [
    i8 115, label %160
    i8 99, label %166
    i8 116, label %172
    i8 97, label %184
    i8 101, label %193
    i8 108, label %199
    i8 103, label %218
    i8 109, label %223
    i8 105, label %261
    i8 119, label %271
    i8 114, label %280
    i8 102, label %285
    i8 110, label %305
    i8 112, label %310
    i8 104, label %320
  ]

160:                                              ; preds = %153
  %161 = getelementptr inbounds i8, i8* %157, i64 1
  %162 = load i8, i8* %161, align 1, !tbaa !33
  %163 = icmp eq i8 %162, 105
  br i1 %163, label %1183, label %213

164:                                              ; preds = %1191
  %165 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @sinh, double (double)** %165, align 8, !tbaa !33
  br label %427

166:                                              ; preds = %153
  %167 = getelementptr inbounds i8, i8* %157, i64 1
  %168 = load i8, i8* %167, align 1, !tbaa !33
  %169 = icmp eq i8 %168, 111
  br i1 %169, label %1163, label %290

170:                                              ; preds = %1171
  %171 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @cosh, double (double)** %171, align 8, !tbaa !33
  br label %427

172:                                              ; preds = %153
  %173 = getelementptr inbounds i8, i8* %157, i64 1
  %174 = load i8, i8* %173, align 1, !tbaa !33
  %175 = icmp eq i8 %174, 97
  br i1 %175, label %1143, label %207

176:                                              ; preds = %1151
  %177 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @tanh, double (double)** %177, align 8, !tbaa !33
  br label %427

178:                                              ; preds = %1131
  %179 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @sin, double (double)** %179, align 8, !tbaa !33
  br label %427

180:                                              ; preds = %1115
  %181 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @cos, double (double)** %181, align 8, !tbaa !33
  br label %427

182:                                              ; preds = %1099
  %183 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @tan, double (double)** %183, align 8, !tbaa !33
  br label %427

184:                                              ; preds = %153
  %185 = getelementptr inbounds i8, i8* %157, i64 1
  %186 = load i8, i8* %185, align 1, !tbaa !33
  switch i8 %186, label %.thread193 [
    i8 116, label %1075
    i8 115, label %1055
    i8 99, label %1035
    i8 98, label %987
  ]

187:                                              ; preds = %1083
  %188 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @atan, double (double)** %188, align 8, !tbaa !33
  br label %427

189:                                              ; preds = %1063
  %190 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @asin, double (double)** %190, align 8, !tbaa !33
  br label %427

191:                                              ; preds = %1043
  %192 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @acos, double (double)** %192, align 8, !tbaa !33
  br label %427

193:                                              ; preds = %153
  %194 = getelementptr inbounds i8, i8* %157, i64 1
  %195 = load i8, i8* %194, align 1, !tbaa !33
  %196 = icmp eq i8 %195, 120
  br i1 %196, label %1019, label %229

197:                                              ; preds = %1023
  %198 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @exp, double (double)** %198, align 8, !tbaa !33
  br label %427

199:                                              ; preds = %153
  %200 = getelementptr inbounds i8, i8* %157, i64 1
  %201 = load i8, i8* %200, align 1, !tbaa !33
  %202 = icmp eq i8 %201, 111
  br i1 %202, label %1003, label %.thread126

203:                                              ; preds = %1007
  %204 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @log, double (double)** %204, align 8, !tbaa !33
  br label %427

205:                                              ; preds = %991
  %206 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @fabs, double (double)** %206, align 8, !tbaa !33
  br label %427

207:                                              ; preds = %172, %1099, %1095
  %208 = getelementptr inbounds i8, i8* %157, i64 1
  %209 = load i8, i8* %208, align 1, !tbaa !33
  %210 = icmp eq i8 %209, 105
  br i1 %210, label %967, label %.thread132.thread

211:                                              ; preds = %975
  %212 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2, i32 0
  store double (double)* @etime, double (double)** %212, align 8, !tbaa !33
  br label %427

213:                                              ; preds = %1127, %1131, %160
  %214 = getelementptr inbounds i8, i8* %157, i64 1
  %215 = load i8, i8* %214, align 1, !tbaa !33
  %216 = icmp eq i8 %215, 113
  br i1 %216, label %939, label %.thread84

217:                                              ; preds = %955
  store i32 5, i32* %156, align 8, !tbaa !550
  br label %427

218:                                              ; preds = %153
  %219 = getelementptr inbounds i8, i8* %157, i64 1
  %220 = load i8, i8* %219, align 1, !tbaa !33
  %221 = icmp eq i8 %220, 97
  br i1 %221, label %915, label %234

222:                                              ; preds = %927
  store i32 6, i32* %156, align 8, !tbaa !550
  br label %427

223:                                              ; preds = %153
  %224 = getelementptr inbounds i8, i8* %157, i64 1
  %225 = load i8, i8* %224, align 1, !tbaa !33
  switch i8 %225, label %.thread193 [
    i8 111, label %899
    i8 97, label %883
    i8 105, label %867
  ]

226:                                              ; preds = %903
  store i32 10, i32* %156, align 8, !tbaa !550
  br label %427

227:                                              ; preds = %887
  store i32 11, i32* %156, align 8, !tbaa !550
  br label %427

228:                                              ; preds = %871
  store i32 12, i32* %156, align 8, !tbaa !550
  br label %427

229:                                              ; preds = %1023, %1019, %193
  %230 = getelementptr inbounds i8, i8* %157, i64 1
  %231 = load i8, i8* %230, align 1, !tbaa !33
  %232 = icmp eq i8 %231, 113
  br i1 %232, label %855, label %.thread193

233:                                              ; preds = %855
  store i32 13, i32* %156, align 8, !tbaa !550
  br label %427

234:                                              ; preds = %218, %915, %919, %923, %927
  %235 = getelementptr inbounds i8, i8* %157, i64 1
  %236 = load i8, i8* %235, align 1, !tbaa !33
  %237 = icmp eq i8 %236, 116
  br i1 %237, label %839, label %325

238:                                              ; preds = %843
  store i32 15, i32* %156, align 8, !tbaa !550
  br label %427

239:                                              ; preds = %827
  store i32 14, i32* %156, align 8, !tbaa !550
  br label %427

.thread126:                                       ; preds = %1007, %1003, %199
  %240 = getelementptr inbounds i8, i8* %157, i64 1
  %241 = load i8, i8* %240, align 1, !tbaa !33
  switch i8 %241, label %.thread193 [
    i8 116, label %811
    i8 100, label %787
  ]

242:                                              ; preds = %815
  %243 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 3, i64 1
  %244 = bitcast %struct.AVExpr** %243 to i64*
  %245 = load i64, i64* %244, align 8, !tbaa !27
  %246 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 3, i64 0
  %247 = bitcast %struct.AVExpr** %246 to i64*
  %248 = load i64, i64* %247, align 8, !tbaa !27
  store i64 %248, i64* %244, align 8, !tbaa !27
  %249 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 3
  %250 = bitcast [3 x %struct.AVExpr*]* %249 to i64*
  store i64 %245, i64* %250, align 8, !tbaa !27
  store i32 15, i32* %156, align 8, !tbaa !550
  br label %427

251:                                              ; preds = %799
  %252 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 3, i64 1
  %253 = bitcast %struct.AVExpr** %252 to i64*
  %254 = load i64, i64* %253, align 8, !tbaa !27
  %255 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 3, i64 0
  %256 = bitcast %struct.AVExpr** %255 to i64*
  %257 = load i64, i64* %256, align 8, !tbaa !27
  store i64 %257, i64* %253, align 8, !tbaa !27
  %258 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 3
  %259 = bitcast [3 x %struct.AVExpr*]* %258 to i64*
  store i64 %254, i64* %259, align 8, !tbaa !27
  store i32 14, i32* %156, align 8, !tbaa !550
  br label %427

260:                                              ; preds = %787
  store i32 7, i32* %156, align 8, !tbaa !550
  br label %427

261:                                              ; preds = %153
  %262 = getelementptr inbounds i8, i8* %157, i64 1
  %263 = load i8, i8* %262, align 1, !tbaa !33
  %264 = icmp eq i8 %263, 115
  br i1 %264, label %763, label %330

265:                                              ; preds = %775
  store i32 8, i32* %156, align 8, !tbaa !550
  br label %427

266:                                              ; preds = %751
  store i32 9, i32* %156, align 8, !tbaa !550
  br label %427

.thread84:                                        ; preds = %213, %939, %943, %947, %951, %955
  %267 = getelementptr inbounds i8, i8* %157, i64 1
  %268 = load i8, i8* %267, align 1, !tbaa !33
  %269 = icmp eq i8 %268, 116
  br i1 %269, label %727, label %300

270:                                              ; preds = %727
  store i32 21, i32* %156, align 8, !tbaa !550
  br label %427

271:                                              ; preds = %153
  %272 = getelementptr inbounds i8, i8* %157, i64 1
  %273 = load i8, i8* %272, align 1, !tbaa !33
  %274 = icmp eq i8 %273, 104
  br i1 %274, label %703, label %.thread193

275:                                              ; preds = %715
  store i32 22, i32* %156, align 8, !tbaa !550
  br label %427

.thread132.thread:                                ; preds = %207, %967, %971, %975
  %276 = getelementptr inbounds i8, i8* %157, i64 1
  %277 = load i8, i8* %276, align 1, !tbaa !33
  %278 = icmp eq i8 %277, 97
  br i1 %278, label %675, label %295

279:                                              ; preds = %691
  store i32 23, i32* %156, align 8, !tbaa !550
  br label %427

280:                                              ; preds = %153
  %281 = getelementptr inbounds i8, i8* %157, i64 1
  %282 = load i8, i8* %281, align 1, !tbaa !33
  %283 = icmp eq i8 %282, 111
  br i1 %283, label %655, label %315

284:                                              ; preds = %663
  store i32 24, i32* %156, align 8, !tbaa !550
  br label %427

285:                                              ; preds = %153
  %286 = getelementptr inbounds i8, i8* %157, i64 1
  %287 = load i8, i8* %286, align 1, !tbaa !33
  %288 = icmp eq i8 %287, 108
  br i1 %288, label %631, label %.thread193

289:                                              ; preds = %643
  store i32 25, i32* %156, align 8, !tbaa !550
  br label %427

290:                                              ; preds = %166, %1111, %1115
  %291 = getelementptr inbounds i8, i8* %157, i64 1
  %292 = load i8, i8* %291, align 1, !tbaa !33
  %293 = icmp eq i8 %292, 101
  br i1 %293, label %611, label %.thread193

294:                                              ; preds = %619
  store i32 26, i32* %156, align 8, !tbaa !550
  br label %427

295:                                              ; preds = %.thread132.thread, %675, %679, %683, %687, %691
  %296 = getelementptr inbounds i8, i8* %157, i64 1
  %297 = load i8, i8* %296, align 1, !tbaa !33
  %298 = icmp eq i8 %297, 114
  br i1 %298, label %587, label %.thread193

299:                                              ; preds = %599
  store i32 27, i32* %156, align 8, !tbaa !550
  br label %427

300:                                              ; preds = %727, %.thread84
  %301 = getelementptr inbounds i8, i8* %157, i64 1
  %302 = load i8, i8* %301, align 1, !tbaa !33
  %303 = icmp eq i8 %302, 113
  br i1 %303, label %567, label %.thread193

304:                                              ; preds = %575
  store i32 28, i32* %156, align 8, !tbaa !550
  br label %427

305:                                              ; preds = %153
  %306 = getelementptr inbounds i8, i8* %157, i64 1
  %307 = load i8, i8* %306, align 1, !tbaa !33
  %308 = icmp eq i8 %307, 111
  br i1 %308, label %551, label %.thread193

309:                                              ; preds = %555
  store i32 29, i32* %156, align 8, !tbaa !550
  br label %427

310:                                              ; preds = %153
  %311 = getelementptr inbounds i8, i8* %157, i64 1
  %312 = load i8, i8* %311, align 1, !tbaa !33
  %313 = icmp eq i8 %312, 111
  br i1 %313, label %535, label %.thread193

314:                                              ; preds = %539
  store i32 16, i32* %156, align 8, !tbaa !550
  br label %427

315:                                              ; preds = %663, %659, %655, %280
  %316 = getelementptr inbounds i8, i8* %157, i64 1
  %317 = load i8, i8* %316, align 1, !tbaa !33
  %318 = icmp eq i8 %317, 97
  br i1 %318, label %507, label %.thread193

319:                                              ; preds = %523
  store i32 30, i32* %156, align 8, !tbaa !550
  br label %427

320:                                              ; preds = %153
  %321 = getelementptr inbounds i8, i8* %157, i64 1
  %322 = load i8, i8* %321, align 1, !tbaa !33
  %323 = icmp eq i8 %322, 121
  br i1 %323, label %483, label %.thread193

324:                                              ; preds = %495
  store i32 31, i32* %156, align 8, !tbaa !550
  br label %427

325:                                              ; preds = %234, %827
  %326 = getelementptr inbounds i8, i8* %157, i64 1
  %327 = load i8, i8* %326, align 1, !tbaa !33
  %328 = icmp eq i8 %327, 99
  br i1 %328, label %467, label %.thread193

329:                                              ; preds = %471
  store i32 32, i32* %156, align 8, !tbaa !550
  br label %427

330:                                              ; preds = %739, %743, %747, %751, %261
  %331 = getelementptr inbounds i8, i8* %157, i64 1
  %332 = load i8, i8* %331, align 1, !tbaa !33
  %333 = icmp eq i8 %332, 102
  br i1 %333, label %455, label %.thread193

334:                                              ; preds = %455
  store i32 33, i32* %156, align 8, !tbaa !550
  br label %427

.thread193:                                       ; preds = %153, %787, %799, %.thread126, %715, %711, %707, %703, %271, %285, %631, %635, %639, %643, %619, %615, %611, %290, %599, %595, %591, %587, %295, %320, %483, %487, %491, %495, %305, %310, %535, %539, %551, %555, %223, %184, %899, %903, %883, %887, %1075, %1079, %1083, %1055, %1059, %1063, %1035, %1039, %1043, %987, %991, %855, %229, %871, %867, %325, %467, %471, %523, %519, %515, %511, %507, %315, %300, %567, %571, %575, %330, %443, %439, %435, %431
  %335 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 6
  %336 = load i8**, i8*** %335, align 8, !tbaa !554
  %337 = icmp eq i8** %336, null
  br i1 %337, label %.loopexit150, label %338

338:                                              ; preds = %.thread193
  %339 = load i8*, i8** %336, align 8, !tbaa !27
  %340 = icmp eq i8* %339, null
  br i1 %340, label %.loopexit150, label %.preheader149

341:                                              ; preds = %443
  store i32 34, i32* %156, align 8, !tbaa !550
  br label %427

.preheader149:                                    ; preds = %338, %.loopexit147
  %342 = phi i8* [ %379, %.loopexit147 ], [ %339, %338 ]
  %343 = phi i64 [ %377, %.loopexit147 ], [ 0, %338 ]
  %344 = load i8, i8* %342, align 1, !tbaa !33
  %345 = icmp eq i8 %344, 0
  br i1 %345, label %.loopexit148, label %.preheader146

346:                                              ; preds = %.preheader146
  %347 = getelementptr inbounds i8, i8* %342, i64 %356
  %348 = load i8, i8* %347, align 1, !tbaa !33
  %349 = icmp eq i8 %348, 0
  %350 = getelementptr inbounds i8, i8* %157, i64 %356
  %351 = load i8, i8* %350, align 1, !tbaa !33
  br i1 %349, label %.loopexit148, label %.preheader146

.preheader146:                                    ; preds = %.preheader149, %346
  %352 = phi i64 [ %356, %346 ], [ 0, %.preheader149 ]
  %353 = phi i8 [ %351, %346 ], [ %158, %.preheader149 ]
  %354 = phi i8 [ %348, %346 ], [ %344, %.preheader149 ]
  %355 = icmp eq i8 %354, %353
  %356 = add nuw i64 %352, 1
  br i1 %355, label %346, label %.loopexit147

.loopexit148:                                     ; preds = %346, %.preheader149
  %357 = phi i8 [ %158, %.preheader149 ], [ %351, %346 ]
  %358 = sext i8 %357 to i32
  %359 = add nsw i32 %358, -48
  %360 = icmp ugt i32 %359, 9
  %361 = and i32 %358, -33
  %362 = add nsw i32 %361, -65
  %363 = icmp ugt i32 %362, 25
  %364 = icmp ne i8 %357, 95
  %365 = and i1 %360, %363
  %366 = and i1 %364, %365
  br i1 %366, label %367, label %.loopexit147

367:                                              ; preds = %.loopexit148
  %368 = and i64 %343, 4294967295
  %369 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 5
  %370 = load double (i8*, double)**, double (i8*, double)*** %369, align 8, !tbaa !555
  %371 = getelementptr inbounds double (i8*, double)*, double (i8*, double)** %370, i64 %368
  %372 = bitcast double (i8*, double)** %371 to i64*
  %373 = load i64, i64* %372, align 8, !tbaa !27
  %374 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2
  %375 = bitcast %union.anon.830* %374 to i64*
  store i64 %373, i64* %375, align 8, !tbaa !33
  store i32 3, i32* %156, align 8, !tbaa !550
  %376 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %159, i64* %376, align 8, !tbaa !27
  br label %429

.loopexit147:                                     ; preds = %.preheader146, %.loopexit148
  %377 = add nuw i64 %343, 1
  %378 = getelementptr inbounds i8*, i8** %336, i64 %377
  %379 = load i8*, i8** %378, align 8, !tbaa !27
  %380 = icmp eq i8* %379, null
  br i1 %380, label %.loopexit150, label %.preheader149

.loopexit150:                                     ; preds = %.loopexit147, %338, %.thread193
  %381 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 8
  %382 = load i8**, i8*** %381, align 8, !tbaa !556
  %383 = icmp eq i8** %382, null
  br i1 %383, label %.loopexit145, label %384

384:                                              ; preds = %.loopexit150
  %385 = load i8*, i8** %382, align 8, !tbaa !27
  %386 = icmp eq i8* %385, null
  br i1 %386, label %.loopexit145, label %.preheader144

.preheader144:                                    ; preds = %384, %.loopexit
  %387 = phi i8* [ %424, %.loopexit ], [ %385, %384 ]
  %388 = phi i64 [ %422, %.loopexit ], [ 0, %384 ]
  %389 = load i8, i8* %387, align 1, !tbaa !33
  %390 = icmp eq i8 %389, 0
  br i1 %390, label %.loopexit143, label %.preheader

391:                                              ; preds = %.preheader
  %392 = getelementptr inbounds i8, i8* %387, i64 %401
  %393 = load i8, i8* %392, align 1, !tbaa !33
  %394 = icmp eq i8 %393, 0
  %395 = getelementptr inbounds i8, i8* %157, i64 %401
  %396 = load i8, i8* %395, align 1, !tbaa !33
  br i1 %394, label %.loopexit143, label %.preheader

.preheader:                                       ; preds = %.preheader144, %391
  %397 = phi i64 [ %401, %391 ], [ 0, %.preheader144 ]
  %398 = phi i8 [ %396, %391 ], [ %158, %.preheader144 ]
  %399 = phi i8 [ %393, %391 ], [ %389, %.preheader144 ]
  %400 = icmp eq i8 %399, %398
  %401 = add nuw i64 %397, 1
  br i1 %400, label %391, label %.loopexit

.loopexit143:                                     ; preds = %391, %.preheader144
  %402 = phi i8 [ %158, %.preheader144 ], [ %396, %391 ]
  %403 = sext i8 %402 to i32
  %404 = add nsw i32 %403, -48
  %405 = icmp ugt i32 %404, 9
  %406 = and i32 %403, -33
  %407 = add nsw i32 %406, -65
  %408 = icmp ugt i32 %407, 25
  %409 = icmp ne i8 %402, 95
  %410 = and i1 %405, %408
  %411 = and i1 %409, %410
  br i1 %411, label %412, label %.loopexit

412:                                              ; preds = %.loopexit143
  %413 = and i64 %388, 4294967295
  %414 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 7
  %415 = load double (i8*, double, double)**, double (i8*, double, double)*** %414, align 8, !tbaa !557
  %416 = getelementptr inbounds double (i8*, double, double)*, double (i8*, double, double)** %415, i64 %413
  %417 = bitcast double (i8*, double, double)** %416 to i64*
  %418 = load i64, i64* %417, align 8, !tbaa !27
  %419 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %155, i64 0, i32 2
  %420 = bitcast %union.anon.830* %419 to i64*
  store i64 %418, i64* %420, align 8, !tbaa !33
  store i32 4, i32* %156, align 8, !tbaa !550
  %421 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %159, i64* %421, align 8, !tbaa !27
  br label %429

.loopexit:                                        ; preds = %.preheader, %.loopexit143
  %422 = add nuw i64 %388, 1
  %423 = getelementptr inbounds i8*, i8** %382, i64 %422
  %424 = load i8*, i8** %423, align 8, !tbaa !27
  %425 = icmp eq i8* %424, null
  br i1 %425, label %.loopexit145, label %.preheader144

.loopexit145:                                     ; preds = %.loopexit, %384, %.loopexit150
  %426 = bitcast %struct.Parser* %1 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %426, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.46.2343, i64 0, i64 0), i8* %13) #18
  call fastcc void @av_expr_free(%struct.AVExpr* %155)
  br label %429

427:                                              ; preds = %341, %334, %329, %324, %319, %314, %309, %304, %299, %294, %289, %284, %279, %275, %270, %266, %265, %260, %251, %242, %239, %238, %233, %228, %227, %226, %222, %217, %211, %205, %203, %197, %191, %189, %187, %182, %180, %178, %176, %170, %164
  %428 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %159, i64* %428, align 8, !tbaa !27
  br label %429

429:                                              ; preds = %427, %.loopexit145, %412, %367, %150, %126, %116, %113, %106, %98, %87, %62, %23, %2
  %430 = phi i32 [ 0, %23 ], [ 0, %62 ], [ 0, %87 ], [ -22, %98 ], [ -22, %113 ], [ 0, %116 ], [ %124, %126 ], [ -22, %150 ], [ 0, %427 ], [ 0, %367 ], [ 0, %412 ], [ -22, %.loopexit145 ], [ -12, %2 ], [ %107, %106 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #18
  ret i32 %430

431:                                              ; preds = %455
  %432 = getelementptr inbounds i8, i8* %157, i64 2
  %433 = load i8, i8* %432, align 1, !tbaa !33
  %434 = icmp eq i8 %433, 110
  br i1 %434, label %435, label %.thread193

435:                                              ; preds = %431
  %436 = getelementptr inbounds i8, i8* %157, i64 3
  %437 = load i8, i8* %436, align 1, !tbaa !33
  %438 = icmp eq i8 %437, 111
  br i1 %438, label %439, label %.thread193

439:                                              ; preds = %435
  %440 = getelementptr inbounds i8, i8* %157, i64 4
  %441 = load i8, i8* %440, align 1, !tbaa !33
  %442 = icmp eq i8 %441, 116
  br i1 %442, label %443, label %.thread193

443:                                              ; preds = %439
  %444 = getelementptr inbounds i8, i8* %157, i64 5
  %445 = load i8, i8* %444, align 1, !tbaa !33
  %446 = sext i8 %445 to i32
  %447 = add nsw i32 %446, -48
  %448 = icmp ugt i32 %447, 9
  %449 = and i32 %446, -33
  %450 = add nsw i32 %449, -65
  %451 = icmp ugt i32 %450, 25
  %452 = icmp ne i8 %445, 95
  %453 = and i1 %448, %451
  %454 = and i1 %452, %453
  br i1 %454, label %341, label %.thread193

455:                                              ; preds = %330
  %456 = getelementptr inbounds i8, i8* %157, i64 2
  %457 = load i8, i8* %456, align 1, !tbaa !33
  %458 = sext i8 %457 to i32
  %459 = add nsw i32 %458, -48
  %460 = icmp ugt i32 %459, 9
  %461 = and i32 %458, -33
  %462 = add nsw i32 %461, -65
  %463 = icmp ugt i32 %462, 25
  %464 = icmp ne i8 %457, 95
  %465 = and i1 %460, %463
  %466 = and i1 %464, %465
  br i1 %466, label %334, label %431

467:                                              ; preds = %325
  %468 = getelementptr inbounds i8, i8* %157, i64 2
  %469 = load i8, i8* %468, align 1, !tbaa !33
  %470 = icmp eq i8 %469, 100
  br i1 %470, label %471, label %.thread193

471:                                              ; preds = %467
  %472 = getelementptr inbounds i8, i8* %157, i64 3
  %473 = load i8, i8* %472, align 1, !tbaa !33
  %474 = sext i8 %473 to i32
  %475 = add nsw i32 %474, -48
  %476 = icmp ugt i32 %475, 9
  %477 = and i32 %474, -33
  %478 = add nsw i32 %477, -65
  %479 = icmp ugt i32 %478, 25
  %480 = icmp ne i8 %473, 95
  %481 = and i1 %476, %479
  %482 = and i1 %480, %481
  br i1 %482, label %329, label %.thread193

483:                                              ; preds = %320
  %484 = getelementptr inbounds i8, i8* %157, i64 2
  %485 = load i8, i8* %484, align 1, !tbaa !33
  %486 = icmp eq i8 %485, 112
  br i1 %486, label %487, label %.thread193

487:                                              ; preds = %483
  %488 = getelementptr inbounds i8, i8* %157, i64 3
  %489 = load i8, i8* %488, align 1, !tbaa !33
  %490 = icmp eq i8 %489, 111
  br i1 %490, label %491, label %.thread193

491:                                              ; preds = %487
  %492 = getelementptr inbounds i8, i8* %157, i64 4
  %493 = load i8, i8* %492, align 1, !tbaa !33
  %494 = icmp eq i8 %493, 116
  br i1 %494, label %495, label %.thread193

495:                                              ; preds = %491
  %496 = getelementptr inbounds i8, i8* %157, i64 5
  %497 = load i8, i8* %496, align 1, !tbaa !33
  %498 = sext i8 %497 to i32
  %499 = add nsw i32 %498, -48
  %500 = icmp ugt i32 %499, 9
  %501 = and i32 %498, -33
  %502 = add nsw i32 %501, -65
  %503 = icmp ugt i32 %502, 25
  %504 = icmp ne i8 %497, 95
  %505 = and i1 %500, %503
  %506 = and i1 %504, %505
  br i1 %506, label %324, label %.thread193

507:                                              ; preds = %315
  %508 = getelementptr inbounds i8, i8* %157, i64 2
  %509 = load i8, i8* %508, align 1, !tbaa !33
  %510 = icmp eq i8 %509, 110
  br i1 %510, label %511, label %.thread193

511:                                              ; preds = %507
  %512 = getelementptr inbounds i8, i8* %157, i64 3
  %513 = load i8, i8* %512, align 1, !tbaa !33
  %514 = icmp eq i8 %513, 100
  br i1 %514, label %515, label %.thread193

515:                                              ; preds = %511
  %516 = getelementptr inbounds i8, i8* %157, i64 4
  %517 = load i8, i8* %516, align 1, !tbaa !33
  %518 = icmp eq i8 %517, 111
  br i1 %518, label %519, label %.thread193

519:                                              ; preds = %515
  %520 = getelementptr inbounds i8, i8* %157, i64 5
  %521 = load i8, i8* %520, align 1, !tbaa !33
  %522 = icmp eq i8 %521, 109
  br i1 %522, label %523, label %.thread193

523:                                              ; preds = %519
  %524 = getelementptr inbounds i8, i8* %157, i64 6
  %525 = load i8, i8* %524, align 1, !tbaa !33
  %526 = sext i8 %525 to i32
  %527 = add nsw i32 %526, -48
  %528 = icmp ugt i32 %527, 9
  %529 = and i32 %526, -33
  %530 = add nsw i32 %529, -65
  %531 = icmp ugt i32 %530, 25
  %532 = icmp ne i8 %525, 95
  %533 = and i1 %528, %531
  %534 = and i1 %532, %533
  br i1 %534, label %319, label %.thread193

535:                                              ; preds = %310
  %536 = getelementptr inbounds i8, i8* %157, i64 2
  %537 = load i8, i8* %536, align 1, !tbaa !33
  %538 = icmp eq i8 %537, 119
  br i1 %538, label %539, label %.thread193

539:                                              ; preds = %535
  %540 = getelementptr inbounds i8, i8* %157, i64 3
  %541 = load i8, i8* %540, align 1, !tbaa !33
  %542 = sext i8 %541 to i32
  %543 = add nsw i32 %542, -48
  %544 = icmp ugt i32 %543, 9
  %545 = and i32 %542, -33
  %546 = add nsw i32 %545, -65
  %547 = icmp ugt i32 %546, 25
  %548 = icmp ne i8 %541, 95
  %549 = and i1 %544, %547
  %550 = and i1 %548, %549
  br i1 %550, label %314, label %.thread193

551:                                              ; preds = %305
  %552 = getelementptr inbounds i8, i8* %157, i64 2
  %553 = load i8, i8* %552, align 1, !tbaa !33
  %554 = icmp eq i8 %553, 116
  br i1 %554, label %555, label %.thread193

555:                                              ; preds = %551
  %556 = getelementptr inbounds i8, i8* %157, i64 3
  %557 = load i8, i8* %556, align 1, !tbaa !33
  %558 = sext i8 %557 to i32
  %559 = add nsw i32 %558, -48
  %560 = icmp ugt i32 %559, 9
  %561 = and i32 %558, -33
  %562 = add nsw i32 %561, -65
  %563 = icmp ugt i32 %562, 25
  %564 = icmp ne i8 %557, 95
  %565 = and i1 %560, %563
  %566 = and i1 %564, %565
  br i1 %566, label %309, label %.thread193

567:                                              ; preds = %300
  %568 = getelementptr inbounds i8, i8* %157, i64 2
  %569 = load i8, i8* %568, align 1, !tbaa !33
  %570 = icmp eq i8 %569, 114
  br i1 %570, label %571, label %.thread193

571:                                              ; preds = %567
  %572 = getelementptr inbounds i8, i8* %157, i64 3
  %573 = load i8, i8* %572, align 1, !tbaa !33
  %574 = icmp eq i8 %573, 116
  br i1 %574, label %575, label %.thread193

575:                                              ; preds = %571
  %576 = getelementptr inbounds i8, i8* %157, i64 4
  %577 = load i8, i8* %576, align 1, !tbaa !33
  %578 = sext i8 %577 to i32
  %579 = add nsw i32 %578, -48
  %580 = icmp ugt i32 %579, 9
  %581 = and i32 %578, -33
  %582 = add nsw i32 %581, -65
  %583 = icmp ugt i32 %582, 25
  %584 = icmp ne i8 %577, 95
  %585 = and i1 %580, %583
  %586 = and i1 %584, %585
  br i1 %586, label %304, label %.thread193

587:                                              ; preds = %295
  %588 = getelementptr inbounds i8, i8* %157, i64 2
  %589 = load i8, i8* %588, align 1, !tbaa !33
  %590 = icmp eq i8 %589, 117
  br i1 %590, label %591, label %.thread193

591:                                              ; preds = %587
  %592 = getelementptr inbounds i8, i8* %157, i64 3
  %593 = load i8, i8* %592, align 1, !tbaa !33
  %594 = icmp eq i8 %593, 110
  br i1 %594, label %595, label %.thread193

595:                                              ; preds = %591
  %596 = getelementptr inbounds i8, i8* %157, i64 4
  %597 = load i8, i8* %596, align 1, !tbaa !33
  %598 = icmp eq i8 %597, 99
  br i1 %598, label %599, label %.thread193

599:                                              ; preds = %595
  %600 = getelementptr inbounds i8, i8* %157, i64 5
  %601 = load i8, i8* %600, align 1, !tbaa !33
  %602 = sext i8 %601 to i32
  %603 = add nsw i32 %602, -48
  %604 = icmp ugt i32 %603, 9
  %605 = and i32 %602, -33
  %606 = add nsw i32 %605, -65
  %607 = icmp ugt i32 %606, 25
  %608 = icmp ne i8 %601, 95
  %609 = and i1 %604, %607
  %610 = and i1 %608, %609
  br i1 %610, label %299, label %.thread193

611:                                              ; preds = %290
  %612 = getelementptr inbounds i8, i8* %157, i64 2
  %613 = load i8, i8* %612, align 1, !tbaa !33
  %614 = icmp eq i8 %613, 105
  br i1 %614, label %615, label %.thread193

615:                                              ; preds = %611
  %616 = getelementptr inbounds i8, i8* %157, i64 3
  %617 = load i8, i8* %616, align 1, !tbaa !33
  %618 = icmp eq i8 %617, 108
  br i1 %618, label %619, label %.thread193

619:                                              ; preds = %615
  %620 = getelementptr inbounds i8, i8* %157, i64 4
  %621 = load i8, i8* %620, align 1, !tbaa !33
  %622 = sext i8 %621 to i32
  %623 = add nsw i32 %622, -48
  %624 = icmp ugt i32 %623, 9
  %625 = and i32 %622, -33
  %626 = add nsw i32 %625, -65
  %627 = icmp ugt i32 %626, 25
  %628 = icmp ne i8 %621, 95
  %629 = and i1 %624, %627
  %630 = and i1 %628, %629
  br i1 %630, label %294, label %.thread193

631:                                              ; preds = %285
  %632 = getelementptr inbounds i8, i8* %157, i64 2
  %633 = load i8, i8* %632, align 1, !tbaa !33
  %634 = icmp eq i8 %633, 111
  br i1 %634, label %635, label %.thread193

635:                                              ; preds = %631
  %636 = getelementptr inbounds i8, i8* %157, i64 3
  %637 = load i8, i8* %636, align 1, !tbaa !33
  %638 = icmp eq i8 %637, 111
  br i1 %638, label %639, label %.thread193

639:                                              ; preds = %635
  %640 = getelementptr inbounds i8, i8* %157, i64 4
  %641 = load i8, i8* %640, align 1, !tbaa !33
  %642 = icmp eq i8 %641, 114
  br i1 %642, label %643, label %.thread193

643:                                              ; preds = %639
  %644 = getelementptr inbounds i8, i8* %157, i64 5
  %645 = load i8, i8* %644, align 1, !tbaa !33
  %646 = sext i8 %645 to i32
  %647 = add nsw i32 %646, -48
  %648 = icmp ugt i32 %647, 9
  %649 = and i32 %646, -33
  %650 = add nsw i32 %649, -65
  %651 = icmp ugt i32 %650, 25
  %652 = icmp ne i8 %645, 95
  %653 = and i1 %648, %651
  %654 = and i1 %652, %653
  br i1 %654, label %289, label %.thread193

655:                                              ; preds = %280
  %656 = getelementptr inbounds i8, i8* %157, i64 2
  %657 = load i8, i8* %656, align 1, !tbaa !33
  %658 = icmp eq i8 %657, 111
  br i1 %658, label %659, label %315

659:                                              ; preds = %655
  %660 = getelementptr inbounds i8, i8* %157, i64 3
  %661 = load i8, i8* %660, align 1, !tbaa !33
  %662 = icmp eq i8 %661, 116
  br i1 %662, label %663, label %315

663:                                              ; preds = %659
  %664 = getelementptr inbounds i8, i8* %157, i64 4
  %665 = load i8, i8* %664, align 1, !tbaa !33
  %666 = sext i8 %665 to i32
  %667 = add nsw i32 %666, -48
  %668 = icmp ugt i32 %667, 9
  %669 = and i32 %666, -33
  %670 = add nsw i32 %669, -65
  %671 = icmp ugt i32 %670, 25
  %672 = icmp ne i8 %665, 95
  %673 = and i1 %668, %671
  %674 = and i1 %672, %673
  br i1 %674, label %284, label %315

675:                                              ; preds = %.thread132.thread
  %676 = getelementptr inbounds i8, i8* %157, i64 2
  %677 = load i8, i8* %676, align 1, !tbaa !33
  %678 = icmp eq i8 %677, 121
  br i1 %678, label %679, label %295

679:                                              ; preds = %675
  %680 = getelementptr inbounds i8, i8* %157, i64 3
  %681 = load i8, i8* %680, align 1, !tbaa !33
  %682 = icmp eq i8 %681, 108
  br i1 %682, label %683, label %295

683:                                              ; preds = %679
  %684 = getelementptr inbounds i8, i8* %157, i64 4
  %685 = load i8, i8* %684, align 1, !tbaa !33
  %686 = icmp eq i8 %685, 111
  br i1 %686, label %687, label %295

687:                                              ; preds = %683
  %688 = getelementptr inbounds i8, i8* %157, i64 5
  %689 = load i8, i8* %688, align 1, !tbaa !33
  %690 = icmp eq i8 %689, 114
  br i1 %690, label %691, label %295

691:                                              ; preds = %687
  %692 = getelementptr inbounds i8, i8* %157, i64 6
  %693 = load i8, i8* %692, align 1, !tbaa !33
  %694 = sext i8 %693 to i32
  %695 = add nsw i32 %694, -48
  %696 = icmp ugt i32 %695, 9
  %697 = and i32 %694, -33
  %698 = add nsw i32 %697, -65
  %699 = icmp ugt i32 %698, 25
  %700 = icmp ne i8 %693, 95
  %701 = and i1 %696, %699
  %702 = and i1 %700, %701
  br i1 %702, label %279, label %295

703:                                              ; preds = %271
  %704 = getelementptr inbounds i8, i8* %157, i64 2
  %705 = load i8, i8* %704, align 1, !tbaa !33
  %706 = icmp eq i8 %705, 105
  br i1 %706, label %707, label %.thread193

707:                                              ; preds = %703
  %708 = getelementptr inbounds i8, i8* %157, i64 3
  %709 = load i8, i8* %708, align 1, !tbaa !33
  %710 = icmp eq i8 %709, 108
  br i1 %710, label %711, label %.thread193

711:                                              ; preds = %707
  %712 = getelementptr inbounds i8, i8* %157, i64 4
  %713 = load i8, i8* %712, align 1, !tbaa !33
  %714 = icmp eq i8 %713, 101
  br i1 %714, label %715, label %.thread193

715:                                              ; preds = %711
  %716 = getelementptr inbounds i8, i8* %157, i64 5
  %717 = load i8, i8* %716, align 1, !tbaa !33
  %718 = sext i8 %717 to i32
  %719 = add nsw i32 %718, -48
  %720 = icmp ugt i32 %719, 9
  %721 = and i32 %718, -33
  %722 = add nsw i32 %721, -65
  %723 = icmp ugt i32 %722, 25
  %724 = icmp ne i8 %717, 95
  %725 = and i1 %720, %723
  %726 = and i1 %724, %725
  br i1 %726, label %275, label %.thread193

727:                                              ; preds = %.thread84
  %728 = getelementptr inbounds i8, i8* %157, i64 2
  %729 = load i8, i8* %728, align 1, !tbaa !33
  %730 = sext i8 %729 to i32
  %731 = add nsw i32 %730, -48
  %732 = icmp ugt i32 %731, 9
  %733 = and i32 %730, -33
  %734 = add nsw i32 %733, -65
  %735 = icmp ugt i32 %734, 25
  %736 = icmp ne i8 %729, 95
  %737 = and i1 %732, %735
  %738 = and i1 %736, %737
  br i1 %738, label %270, label %300

739:                                              ; preds = %775, %771, %767, %763
  %740 = getelementptr inbounds i8, i8* %157, i64 2
  %741 = load i8, i8* %740, align 1, !tbaa !33
  %742 = icmp eq i8 %741, 105
  br i1 %742, label %743, label %330

743:                                              ; preds = %739
  %744 = getelementptr inbounds i8, i8* %157, i64 3
  %745 = load i8, i8* %744, align 1, !tbaa !33
  %746 = icmp eq i8 %745, 110
  br i1 %746, label %747, label %330

747:                                              ; preds = %743
  %748 = getelementptr inbounds i8, i8* %157, i64 4
  %749 = load i8, i8* %748, align 1, !tbaa !33
  %750 = icmp eq i8 %749, 102
  br i1 %750, label %751, label %330

751:                                              ; preds = %747
  %752 = getelementptr inbounds i8, i8* %157, i64 5
  %753 = load i8, i8* %752, align 1, !tbaa !33
  %754 = sext i8 %753 to i32
  %755 = add nsw i32 %754, -48
  %756 = icmp ugt i32 %755, 9
  %757 = and i32 %754, -33
  %758 = add nsw i32 %757, -65
  %759 = icmp ugt i32 %758, 25
  %760 = icmp ne i8 %753, 95
  %761 = and i1 %756, %759
  %762 = and i1 %760, %761
  br i1 %762, label %266, label %330

763:                                              ; preds = %261
  %764 = getelementptr inbounds i8, i8* %157, i64 2
  %765 = load i8, i8* %764, align 1, !tbaa !33
  %766 = icmp eq i8 %765, 110
  br i1 %766, label %767, label %739

767:                                              ; preds = %763
  %768 = getelementptr inbounds i8, i8* %157, i64 3
  %769 = load i8, i8* %768, align 1, !tbaa !33
  %770 = icmp eq i8 %769, 97
  br i1 %770, label %771, label %739

771:                                              ; preds = %767
  %772 = getelementptr inbounds i8, i8* %157, i64 4
  %773 = load i8, i8* %772, align 1, !tbaa !33
  %774 = icmp eq i8 %773, 110
  br i1 %774, label %775, label %739

775:                                              ; preds = %771
  %776 = getelementptr inbounds i8, i8* %157, i64 5
  %777 = load i8, i8* %776, align 1, !tbaa !33
  %778 = sext i8 %777 to i32
  %779 = add nsw i32 %778, -48
  %780 = icmp ugt i32 %779, 9
  %781 = and i32 %778, -33
  %782 = add nsw i32 %781, -65
  %783 = icmp ugt i32 %782, 25
  %784 = icmp ne i8 %777, 95
  %785 = and i1 %780, %783
  %786 = and i1 %784, %785
  br i1 %786, label %265, label %739

787:                                              ; preds = %.thread126
  %788 = getelementptr inbounds i8, i8* %157, i64 2
  %789 = load i8, i8* %788, align 1, !tbaa !33
  %790 = sext i8 %789 to i32
  %791 = add nsw i32 %790, -48
  %792 = icmp ugt i32 %791, 9
  %793 = and i32 %790, -33
  %794 = add nsw i32 %793, -65
  %795 = icmp ugt i32 %794, 25
  %796 = icmp ne i8 %789, 95
  %797 = and i1 %792, %795
  %798 = and i1 %796, %797
  br i1 %798, label %260, label %.thread193

799:                                              ; preds = %815, %811
  %800 = getelementptr inbounds i8, i8* %157, i64 2
  %801 = load i8, i8* %800, align 1, !tbaa !33
  %802 = sext i8 %801 to i32
  %803 = add nsw i32 %802, -48
  %804 = icmp ugt i32 %803, 9
  %805 = and i32 %802, -33
  %806 = add nsw i32 %805, -65
  %807 = icmp ugt i32 %806, 25
  %808 = icmp ne i8 %801, 95
  %809 = and i1 %804, %807
  %810 = and i1 %808, %809
  br i1 %810, label %251, label %.thread193

811:                                              ; preds = %.thread126
  %812 = getelementptr inbounds i8, i8* %157, i64 2
  %813 = load i8, i8* %812, align 1, !tbaa !33
  %814 = icmp eq i8 %813, 101
  br i1 %814, label %815, label %799

815:                                              ; preds = %811
  %816 = getelementptr inbounds i8, i8* %157, i64 3
  %817 = load i8, i8* %816, align 1, !tbaa !33
  %818 = sext i8 %817 to i32
  %819 = add nsw i32 %818, -48
  %820 = icmp ugt i32 %819, 9
  %821 = and i32 %818, -33
  %822 = add nsw i32 %821, -65
  %823 = icmp ugt i32 %822, 25
  %824 = icmp ne i8 %817, 95
  %825 = and i1 %820, %823
  %826 = and i1 %824, %825
  br i1 %826, label %242, label %799

827:                                              ; preds = %843, %839
  %828 = getelementptr inbounds i8, i8* %157, i64 2
  %829 = load i8, i8* %828, align 1, !tbaa !33
  %830 = sext i8 %829 to i32
  %831 = add nsw i32 %830, -48
  %832 = icmp ugt i32 %831, 9
  %833 = and i32 %830, -33
  %834 = add nsw i32 %833, -65
  %835 = icmp ugt i32 %834, 25
  %836 = icmp ne i8 %829, 95
  %837 = and i1 %832, %835
  %838 = and i1 %836, %837
  br i1 %838, label %239, label %325

839:                                              ; preds = %234
  %840 = getelementptr inbounds i8, i8* %157, i64 2
  %841 = load i8, i8* %840, align 1, !tbaa !33
  %842 = icmp eq i8 %841, 101
  br i1 %842, label %843, label %827

843:                                              ; preds = %839
  %844 = getelementptr inbounds i8, i8* %157, i64 3
  %845 = load i8, i8* %844, align 1, !tbaa !33
  %846 = sext i8 %845 to i32
  %847 = add nsw i32 %846, -48
  %848 = icmp ugt i32 %847, 9
  %849 = and i32 %846, -33
  %850 = add nsw i32 %849, -65
  %851 = icmp ugt i32 %850, 25
  %852 = icmp ne i8 %845, 95
  %853 = and i1 %848, %851
  %854 = and i1 %852, %853
  br i1 %854, label %238, label %827

855:                                              ; preds = %229
  %856 = getelementptr inbounds i8, i8* %157, i64 2
  %857 = load i8, i8* %856, align 1, !tbaa !33
  %858 = sext i8 %857 to i32
  %859 = add nsw i32 %858, -48
  %860 = icmp ugt i32 %859, 9
  %861 = and i32 %858, -33
  %862 = add nsw i32 %861, -65
  %863 = icmp ugt i32 %862, 25
  %864 = icmp ne i8 %857, 95
  %865 = and i1 %860, %863
  %866 = and i1 %864, %865
  br i1 %866, label %233, label %.thread193

867:                                              ; preds = %223
  %868 = getelementptr inbounds i8, i8* %157, i64 2
  %869 = load i8, i8* %868, align 1, !tbaa !33
  %870 = icmp eq i8 %869, 110
  br i1 %870, label %871, label %.thread193

871:                                              ; preds = %867
  %872 = getelementptr inbounds i8, i8* %157, i64 3
  %873 = load i8, i8* %872, align 1, !tbaa !33
  %874 = sext i8 %873 to i32
  %875 = add nsw i32 %874, -48
  %876 = icmp ugt i32 %875, 9
  %877 = and i32 %874, -33
  %878 = add nsw i32 %877, -65
  %879 = icmp ugt i32 %878, 25
  %880 = icmp ne i8 %873, 95
  %881 = and i1 %876, %879
  %882 = and i1 %880, %881
  br i1 %882, label %228, label %.thread193

883:                                              ; preds = %223
  %884 = getelementptr inbounds i8, i8* %157, i64 2
  %885 = load i8, i8* %884, align 1, !tbaa !33
  %886 = icmp eq i8 %885, 120
  br i1 %886, label %887, label %.thread193

887:                                              ; preds = %883
  %888 = getelementptr inbounds i8, i8* %157, i64 3
  %889 = load i8, i8* %888, align 1, !tbaa !33
  %890 = sext i8 %889 to i32
  %891 = add nsw i32 %890, -48
  %892 = icmp ugt i32 %891, 9
  %893 = and i32 %890, -33
  %894 = add nsw i32 %893, -65
  %895 = icmp ugt i32 %894, 25
  %896 = icmp ne i8 %889, 95
  %897 = and i1 %892, %895
  %898 = and i1 %896, %897
  br i1 %898, label %227, label %.thread193

899:                                              ; preds = %223
  %900 = getelementptr inbounds i8, i8* %157, i64 2
  %901 = load i8, i8* %900, align 1, !tbaa !33
  %902 = icmp eq i8 %901, 100
  br i1 %902, label %903, label %.thread193

903:                                              ; preds = %899
  %904 = getelementptr inbounds i8, i8* %157, i64 3
  %905 = load i8, i8* %904, align 1, !tbaa !33
  %906 = sext i8 %905 to i32
  %907 = add nsw i32 %906, -48
  %908 = icmp ugt i32 %907, 9
  %909 = and i32 %906, -33
  %910 = add nsw i32 %909, -65
  %911 = icmp ugt i32 %910, 25
  %912 = icmp ne i8 %905, 95
  %913 = and i1 %908, %911
  %914 = and i1 %912, %913
  br i1 %914, label %226, label %.thread193

915:                                              ; preds = %218
  %916 = getelementptr inbounds i8, i8* %157, i64 2
  %917 = load i8, i8* %916, align 1, !tbaa !33
  %918 = icmp eq i8 %917, 117
  br i1 %918, label %919, label %234

919:                                              ; preds = %915
  %920 = getelementptr inbounds i8, i8* %157, i64 3
  %921 = load i8, i8* %920, align 1, !tbaa !33
  %922 = icmp eq i8 %921, 115
  br i1 %922, label %923, label %234

923:                                              ; preds = %919
  %924 = getelementptr inbounds i8, i8* %157, i64 4
  %925 = load i8, i8* %924, align 1, !tbaa !33
  %926 = icmp eq i8 %925, 115
  br i1 %926, label %927, label %234

927:                                              ; preds = %923
  %928 = getelementptr inbounds i8, i8* %157, i64 5
  %929 = load i8, i8* %928, align 1, !tbaa !33
  %930 = sext i8 %929 to i32
  %931 = add nsw i32 %930, -48
  %932 = icmp ugt i32 %931, 9
  %933 = and i32 %930, -33
  %934 = add nsw i32 %933, -65
  %935 = icmp ugt i32 %934, 25
  %936 = icmp ne i8 %929, 95
  %937 = and i1 %932, %935
  %938 = and i1 %936, %937
  br i1 %938, label %222, label %234

939:                                              ; preds = %213
  %940 = getelementptr inbounds i8, i8* %157, i64 2
  %941 = load i8, i8* %940, align 1, !tbaa !33
  %942 = icmp eq i8 %941, 117
  br i1 %942, label %943, label %.thread84

943:                                              ; preds = %939
  %944 = getelementptr inbounds i8, i8* %157, i64 3
  %945 = load i8, i8* %944, align 1, !tbaa !33
  %946 = icmp eq i8 %945, 105
  br i1 %946, label %947, label %.thread84

947:                                              ; preds = %943
  %948 = getelementptr inbounds i8, i8* %157, i64 4
  %949 = load i8, i8* %948, align 1, !tbaa !33
  %950 = icmp eq i8 %949, 115
  br i1 %950, label %951, label %.thread84

951:                                              ; preds = %947
  %952 = getelementptr inbounds i8, i8* %157, i64 5
  %953 = load i8, i8* %952, align 1, !tbaa !33
  %954 = icmp eq i8 %953, 104
  br i1 %954, label %955, label %.thread84

955:                                              ; preds = %951
  %956 = getelementptr inbounds i8, i8* %157, i64 6
  %957 = load i8, i8* %956, align 1, !tbaa !33
  %958 = sext i8 %957 to i32
  %959 = add nsw i32 %958, -48
  %960 = icmp ugt i32 %959, 9
  %961 = and i32 %958, -33
  %962 = add nsw i32 %961, -65
  %963 = icmp ugt i32 %962, 25
  %964 = icmp ne i8 %957, 95
  %965 = and i1 %960, %963
  %966 = and i1 %964, %965
  br i1 %966, label %217, label %.thread84

967:                                              ; preds = %207
  %968 = getelementptr inbounds i8, i8* %157, i64 2
  %969 = load i8, i8* %968, align 1, !tbaa !33
  %970 = icmp eq i8 %969, 109
  br i1 %970, label %971, label %.thread132.thread

971:                                              ; preds = %967
  %972 = getelementptr inbounds i8, i8* %157, i64 3
  %973 = load i8, i8* %972, align 1, !tbaa !33
  %974 = icmp eq i8 %973, 101
  br i1 %974, label %975, label %.thread132.thread

975:                                              ; preds = %971
  %976 = getelementptr inbounds i8, i8* %157, i64 4
  %977 = load i8, i8* %976, align 1, !tbaa !33
  %978 = sext i8 %977 to i32
  %979 = add nsw i32 %978, -48
  %980 = icmp ugt i32 %979, 9
  %981 = and i32 %978, -33
  %982 = add nsw i32 %981, -65
  %983 = icmp ugt i32 %982, 25
  %984 = icmp ne i8 %977, 95
  %985 = and i1 %980, %983
  %986 = and i1 %984, %985
  br i1 %986, label %211, label %.thread132.thread

987:                                              ; preds = %184
  %988 = getelementptr inbounds i8, i8* %157, i64 2
  %989 = load i8, i8* %988, align 1, !tbaa !33
  %990 = icmp eq i8 %989, 115
  br i1 %990, label %991, label %.thread193

991:                                              ; preds = %987
  %992 = getelementptr inbounds i8, i8* %157, i64 3
  %993 = load i8, i8* %992, align 1, !tbaa !33
  %994 = sext i8 %993 to i32
  %995 = add nsw i32 %994, -48
  %996 = icmp ugt i32 %995, 9
  %997 = and i32 %994, -33
  %998 = add nsw i32 %997, -65
  %999 = icmp ugt i32 %998, 25
  %1000 = icmp ne i8 %993, 95
  %1001 = and i1 %996, %999
  %1002 = and i1 %1000, %1001
  br i1 %1002, label %205, label %.thread193

1003:                                             ; preds = %199
  %1004 = getelementptr inbounds i8, i8* %157, i64 2
  %1005 = load i8, i8* %1004, align 1, !tbaa !33
  %1006 = icmp eq i8 %1005, 103
  br i1 %1006, label %1007, label %.thread126

1007:                                             ; preds = %1003
  %1008 = getelementptr inbounds i8, i8* %157, i64 3
  %1009 = load i8, i8* %1008, align 1, !tbaa !33
  %1010 = sext i8 %1009 to i32
  %1011 = add nsw i32 %1010, -48
  %1012 = icmp ugt i32 %1011, 9
  %1013 = and i32 %1010, -33
  %1014 = add nsw i32 %1013, -65
  %1015 = icmp ugt i32 %1014, 25
  %1016 = icmp ne i8 %1009, 95
  %1017 = and i1 %1012, %1015
  %1018 = and i1 %1016, %1017
  br i1 %1018, label %203, label %.thread126

1019:                                             ; preds = %193
  %1020 = getelementptr inbounds i8, i8* %157, i64 2
  %1021 = load i8, i8* %1020, align 1, !tbaa !33
  %1022 = icmp eq i8 %1021, 112
  br i1 %1022, label %1023, label %229

1023:                                             ; preds = %1019
  %1024 = getelementptr inbounds i8, i8* %157, i64 3
  %1025 = load i8, i8* %1024, align 1, !tbaa !33
  %1026 = sext i8 %1025 to i32
  %1027 = add nsw i32 %1026, -48
  %1028 = icmp ugt i32 %1027, 9
  %1029 = and i32 %1026, -33
  %1030 = add nsw i32 %1029, -65
  %1031 = icmp ugt i32 %1030, 25
  %1032 = icmp ne i8 %1025, 95
  %1033 = and i1 %1028, %1031
  %1034 = and i1 %1032, %1033
  br i1 %1034, label %197, label %229

1035:                                             ; preds = %184
  %1036 = getelementptr inbounds i8, i8* %157, i64 2
  %1037 = load i8, i8* %1036, align 1, !tbaa !33
  %1038 = icmp eq i8 %1037, 111
  br i1 %1038, label %1039, label %.thread193

1039:                                             ; preds = %1035
  %1040 = getelementptr inbounds i8, i8* %157, i64 3
  %1041 = load i8, i8* %1040, align 1, !tbaa !33
  %1042 = icmp eq i8 %1041, 115
  br i1 %1042, label %1043, label %.thread193

1043:                                             ; preds = %1039
  %1044 = getelementptr inbounds i8, i8* %157, i64 4
  %1045 = load i8, i8* %1044, align 1, !tbaa !33
  %1046 = sext i8 %1045 to i32
  %1047 = add nsw i32 %1046, -48
  %1048 = icmp ugt i32 %1047, 9
  %1049 = and i32 %1046, -33
  %1050 = add nsw i32 %1049, -65
  %1051 = icmp ugt i32 %1050, 25
  %1052 = icmp ne i8 %1045, 95
  %1053 = and i1 %1048, %1051
  %1054 = and i1 %1052, %1053
  br i1 %1054, label %191, label %.thread193

1055:                                             ; preds = %184
  %1056 = getelementptr inbounds i8, i8* %157, i64 2
  %1057 = load i8, i8* %1056, align 1, !tbaa !33
  %1058 = icmp eq i8 %1057, 105
  br i1 %1058, label %1059, label %.thread193

1059:                                             ; preds = %1055
  %1060 = getelementptr inbounds i8, i8* %157, i64 3
  %1061 = load i8, i8* %1060, align 1, !tbaa !33
  %1062 = icmp eq i8 %1061, 110
  br i1 %1062, label %1063, label %.thread193

1063:                                             ; preds = %1059
  %1064 = getelementptr inbounds i8, i8* %157, i64 4
  %1065 = load i8, i8* %1064, align 1, !tbaa !33
  %1066 = sext i8 %1065 to i32
  %1067 = add nsw i32 %1066, -48
  %1068 = icmp ugt i32 %1067, 9
  %1069 = and i32 %1066, -33
  %1070 = add nsw i32 %1069, -65
  %1071 = icmp ugt i32 %1070, 25
  %1072 = icmp ne i8 %1065, 95
  %1073 = and i1 %1068, %1071
  %1074 = and i1 %1072, %1073
  br i1 %1074, label %189, label %.thread193

1075:                                             ; preds = %184
  %1076 = getelementptr inbounds i8, i8* %157, i64 2
  %1077 = load i8, i8* %1076, align 1, !tbaa !33
  %1078 = icmp eq i8 %1077, 97
  br i1 %1078, label %1079, label %.thread193

1079:                                             ; preds = %1075
  %1080 = getelementptr inbounds i8, i8* %157, i64 3
  %1081 = load i8, i8* %1080, align 1, !tbaa !33
  %1082 = icmp eq i8 %1081, 110
  br i1 %1082, label %1083, label %.thread193

1083:                                             ; preds = %1079
  %1084 = getelementptr inbounds i8, i8* %157, i64 4
  %1085 = load i8, i8* %1084, align 1, !tbaa !33
  %1086 = sext i8 %1085 to i32
  %1087 = add nsw i32 %1086, -48
  %1088 = icmp ugt i32 %1087, 9
  %1089 = and i32 %1086, -33
  %1090 = add nsw i32 %1089, -65
  %1091 = icmp ugt i32 %1090, 25
  %1092 = icmp ne i8 %1085, 95
  %1093 = and i1 %1088, %1091
  %1094 = and i1 %1092, %1093
  br i1 %1094, label %187, label %.thread193

1095:                                             ; preds = %1151, %1147, %1143
  %1096 = getelementptr inbounds i8, i8* %157, i64 2
  %1097 = load i8, i8* %1096, align 1, !tbaa !33
  %1098 = icmp eq i8 %1097, 110
  br i1 %1098, label %1099, label %207

1099:                                             ; preds = %1095
  %1100 = getelementptr inbounds i8, i8* %157, i64 3
  %1101 = load i8, i8* %1100, align 1, !tbaa !33
  %1102 = sext i8 %1101 to i32
  %1103 = add nsw i32 %1102, -48
  %1104 = icmp ugt i32 %1103, 9
  %1105 = and i32 %1102, -33
  %1106 = add nsw i32 %1105, -65
  %1107 = icmp ugt i32 %1106, 25
  %1108 = icmp ne i8 %1101, 95
  %1109 = and i1 %1104, %1107
  %1110 = and i1 %1108, %1109
  br i1 %1110, label %182, label %207

1111:                                             ; preds = %1171, %1167, %1163
  %1112 = getelementptr inbounds i8, i8* %157, i64 2
  %1113 = load i8, i8* %1112, align 1, !tbaa !33
  %1114 = icmp eq i8 %1113, 115
  br i1 %1114, label %1115, label %290

1115:                                             ; preds = %1111
  %1116 = getelementptr inbounds i8, i8* %157, i64 3
  %1117 = load i8, i8* %1116, align 1, !tbaa !33
  %1118 = sext i8 %1117 to i32
  %1119 = add nsw i32 %1118, -48
  %1120 = icmp ugt i32 %1119, 9
  %1121 = and i32 %1118, -33
  %1122 = add nsw i32 %1121, -65
  %1123 = icmp ugt i32 %1122, 25
  %1124 = icmp ne i8 %1117, 95
  %1125 = and i1 %1120, %1123
  %1126 = and i1 %1124, %1125
  br i1 %1126, label %180, label %290

1127:                                             ; preds = %1191, %1187, %1183
  %1128 = getelementptr inbounds i8, i8* %157, i64 2
  %1129 = load i8, i8* %1128, align 1, !tbaa !33
  %1130 = icmp eq i8 %1129, 110
  br i1 %1130, label %1131, label %213

1131:                                             ; preds = %1127
  %1132 = getelementptr inbounds i8, i8* %157, i64 3
  %1133 = load i8, i8* %1132, align 1, !tbaa !33
  %1134 = sext i8 %1133 to i32
  %1135 = add nsw i32 %1134, -48
  %1136 = icmp ugt i32 %1135, 9
  %1137 = and i32 %1134, -33
  %1138 = add nsw i32 %1137, -65
  %1139 = icmp ugt i32 %1138, 25
  %1140 = icmp ne i8 %1133, 95
  %1141 = and i1 %1136, %1139
  %1142 = and i1 %1140, %1141
  br i1 %1142, label %178, label %213

1143:                                             ; preds = %172
  %1144 = getelementptr inbounds i8, i8* %157, i64 2
  %1145 = load i8, i8* %1144, align 1, !tbaa !33
  %1146 = icmp eq i8 %1145, 110
  br i1 %1146, label %1147, label %1095

1147:                                             ; preds = %1143
  %1148 = getelementptr inbounds i8, i8* %157, i64 3
  %1149 = load i8, i8* %1148, align 1, !tbaa !33
  %1150 = icmp eq i8 %1149, 104
  br i1 %1150, label %1151, label %1095

1151:                                             ; preds = %1147
  %1152 = getelementptr inbounds i8, i8* %157, i64 4
  %1153 = load i8, i8* %1152, align 1, !tbaa !33
  %1154 = sext i8 %1153 to i32
  %1155 = add nsw i32 %1154, -48
  %1156 = icmp ugt i32 %1155, 9
  %1157 = and i32 %1154, -33
  %1158 = add nsw i32 %1157, -65
  %1159 = icmp ugt i32 %1158, 25
  %1160 = icmp ne i8 %1153, 95
  %1161 = and i1 %1156, %1159
  %1162 = and i1 %1160, %1161
  br i1 %1162, label %176, label %1095

1163:                                             ; preds = %166
  %1164 = getelementptr inbounds i8, i8* %157, i64 2
  %1165 = load i8, i8* %1164, align 1, !tbaa !33
  %1166 = icmp eq i8 %1165, 115
  br i1 %1166, label %1167, label %1111

1167:                                             ; preds = %1163
  %1168 = getelementptr inbounds i8, i8* %157, i64 3
  %1169 = load i8, i8* %1168, align 1, !tbaa !33
  %1170 = icmp eq i8 %1169, 104
  br i1 %1170, label %1171, label %1111

1171:                                             ; preds = %1167
  %1172 = getelementptr inbounds i8, i8* %157, i64 4
  %1173 = load i8, i8* %1172, align 1, !tbaa !33
  %1174 = sext i8 %1173 to i32
  %1175 = add nsw i32 %1174, -48
  %1176 = icmp ugt i32 %1175, 9
  %1177 = and i32 %1174, -33
  %1178 = add nsw i32 %1177, -65
  %1179 = icmp ugt i32 %1178, 25
  %1180 = icmp ne i8 %1173, 95
  %1181 = and i1 %1176, %1179
  %1182 = and i1 %1180, %1181
  br i1 %1182, label %170, label %1111

1183:                                             ; preds = %160
  %1184 = getelementptr inbounds i8, i8* %157, i64 2
  %1185 = load i8, i8* %1184, align 1, !tbaa !33
  %1186 = icmp eq i8 %1185, 110
  br i1 %1186, label %1187, label %1127

1187:                                             ; preds = %1183
  %1188 = getelementptr inbounds i8, i8* %157, i64 3
  %1189 = load i8, i8* %1188, align 1, !tbaa !33
  %1190 = icmp eq i8 %1189, 104
  br i1 %1190, label %1191, label %1127

1191:                                             ; preds = %1187
  %1192 = getelementptr inbounds i8, i8* %157, i64 4
  %1193 = load i8, i8* %1192, align 1, !tbaa !33
  %1194 = sext i8 %1193 to i32
  %1195 = add nsw i32 %1194, -48
  %1196 = icmp ugt i32 %1195, 9
  %1197 = and i32 %1194, -33
  %1198 = add nsw i32 %1197, -65
  %1199 = icmp ugt i32 %1198, 25
  %1200 = icmp ne i8 %1193, 95
  %1201 = and i1 %1196, %1199
  %1202 = and i1 %1200, %1201
  br i1 %1202, label %164, label %1127

1203:                                             ; preds = %.loopexit154
  %1204 = getelementptr inbounds i8, i8* %20, i64 1
  %1205 = load i8, i8* %1204, align 1, !tbaa !33
  switch i8 %1205, label %.thread88 [
    i8 73, label %1224
    i8 72, label %1208
  ]

.thread88:                                        ; preds = %1203, %1224, %75, %1212, %1208, %.loopexit154
  %1206 = call i8* @strchr(i8* nonnull %20, i32 40) #28
  store i8* %1206, i8** %9, align 8, !tbaa !543
  %1207 = icmp eq i8* %1206, null
  br i1 %1207, label %98, label %102

1208:                                             ; preds = %1203
  %1209 = getelementptr inbounds i8, i8* %20, i64 2
  %1210 = load i8, i8* %1209, align 1, !tbaa !33
  %1211 = icmp eq i8 %1210, 73
  br i1 %1211, label %1212, label %.thread88

1212:                                             ; preds = %1208
  %1213 = getelementptr inbounds i8, i8* %20, i64 3
  %1214 = load i8, i8* %1213, align 1, !tbaa !33
  %1215 = sext i8 %1214 to i32
  %1216 = add nsw i32 %1215, -48
  %1217 = icmp ugt i32 %1216, 9
  %1218 = and i32 %1215, -33
  %1219 = add nsw i32 %1218, -65
  %1220 = icmp ugt i32 %1219, 25
  %1221 = icmp ne i8 %1214, 95
  %1222 = and i1 %1217, %1220
  %1223 = and i1 %1221, %1222
  br i1 %1223, label %87, label %.thread88

1224:                                             ; preds = %1203
  %1225 = getelementptr inbounds i8, i8* %20, i64 2
  %1226 = load i8, i8* %1225, align 1, !tbaa !33
  %1227 = sext i8 %1226 to i32
  %1228 = add nsw i32 %1227, -48
  %1229 = icmp ugt i32 %1228, 9
  %1230 = and i32 %1227, -33
  %1231 = add nsw i32 %1230, -65
  %1232 = icmp ugt i32 %1231, 25
  %1233 = icmp ne i8 %1226, 95
  %1234 = and i1 %1229, %1232
  %1235 = and i1 %1233, %1234
  br i1 %1235, label %87, label %.thread88
}

; Function Attrs: nofree nounwind readnone
declare dso_local double @sinh(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @cosh(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @tanh(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @sin(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @cos(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @tan(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @atan(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @asin(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @acos(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @exp(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @log(double) #24

; Function Attrs: nofree nounwind readnone
declare dso_local double @fabs(double) #24

; Function Attrs: nounwind uwtable
define internal double @etime(double) #5 {
  %2 = tail call fastcc i64 @av_gettime() #18
  %3 = sitofp i64 %2 to double
  %4 = fmul nsz double %3, 0x3EB0C6F7A0B5ED8D
  ret double %4
}

; Function Attrs: nounwind uwtable
define internal fastcc double @eval_expr(%struct.Parser*, %struct.AVExpr* readonly) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8, !tbaa !550
  switch i32 %4, label %382 [
    i32 0, label %12
    i32 1, label %15
    i32 2, label %27
    i32 3, label %37
    i32 4, label %50
    i32 5, label %66
    i32 6, label %74
    i32 7, label %82
    i32 8, label %99
    i32 9, label %108
    i32 25, label %118
    i32 26, label %126
    i32 27, label %134
    i32 28, label %142
    i32 29, label %150
    i32 33, label %159
    i32 34, label %179
    i32 30, label %199
    i32 22, label %5
    i32 23, label %231
    i32 24, label %280
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %7 = load %struct.AVExpr*, %struct.AVExpr** %6, align 8, !tbaa !27
  %8 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %7)
  %9 = fcmp nsz une double %8, 0.000000e+00
  br i1 %9, label %10, label %.loopexit

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 1
  br label %225

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8, !tbaa !551
  br label %.loopexit

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %17 = load double, double* %16, align 8, !tbaa !551
  %18 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 3
  %19 = load double*, double** %18, align 8, !tbaa !558
  %20 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 2
  %21 = bitcast %union.anon.830* %20 to i32*
  %22 = load i32, i32* %21, align 8, !tbaa !33
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds double, double* %19, i64 %23
  %25 = load double, double* %24, align 8, !tbaa !559
  %26 = fmul nsz double %17, %25
  br label %.loopexit

27:                                               ; preds = %2
  %28 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %29 = load double, double* %28, align 8, !tbaa !551
  %30 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 2, i32 0
  %31 = load double (double)*, double (double)** %30, align 8, !tbaa !33
  %32 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %33 = load %struct.AVExpr*, %struct.AVExpr** %32, align 8, !tbaa !27
  %34 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %33)
  %35 = tail call nsz double %31(double %34) #18
  %36 = fmul nsz double %29, %35
  ret double %36

37:                                               ; preds = %2
  %38 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %39 = load double, double* %38, align 8, !tbaa !551
  %40 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 2
  %41 = bitcast %union.anon.830* %40 to double (i8*, double)**
  %42 = load double (i8*, double)*, double (i8*, double)** %41, align 8, !tbaa !33
  %43 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 9
  %44 = load i8*, i8** %43, align 8, !tbaa !560
  %45 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %46 = load %struct.AVExpr*, %struct.AVExpr** %45, align 8, !tbaa !27
  %47 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %46)
  %48 = tail call nsz double %42(i8* %44, double %47) #18
  %49 = fmul nsz double %39, %48
  ret double %49

50:                                               ; preds = %2
  %51 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %52 = load double, double* %51, align 8, !tbaa !551
  %53 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 2
  %54 = bitcast %union.anon.830* %53 to double (i8*, double, double)**
  %55 = load double (i8*, double, double)*, double (i8*, double, double)** %54, align 8, !tbaa !33
  %56 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 9
  %57 = load i8*, i8** %56, align 8, !tbaa !560
  %58 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %59 = load %struct.AVExpr*, %struct.AVExpr** %58, align 8, !tbaa !27
  %60 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %59)
  %61 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 1
  %62 = load %struct.AVExpr*, %struct.AVExpr** %61, align 8, !tbaa !27
  %63 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %62)
  %64 = tail call nsz double %55(i8* %57, double %60, double %63) #18
  %65 = fmul nsz double %52, %64
  ret double %65

66:                                               ; preds = %2
  %67 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %68 = load %struct.AVExpr*, %struct.AVExpr** %67, align 8, !tbaa !27
  %69 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %68)
  %70 = fmul nsz double %69, 4.000000e+00
  %71 = tail call nsz double @llvm.exp.f64(double %70)
  %72 = fadd nsz double %71, 1.000000e+00
  %73 = fdiv nsz double 1.000000e+00, %72
  ret double %73

74:                                               ; preds = %2
  %75 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %76 = load %struct.AVExpr*, %struct.AVExpr** %75, align 8, !tbaa !27
  %77 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %76)
  %78 = fmul nsz double %77, %77
  %79 = fmul nsz double %78, -5.000000e-01
  %80 = tail call nsz double @llvm.exp.f64(double %79)
  %81 = fdiv nsz double %80, 0x40040D931FF62705
  ret double %81

82:                                               ; preds = %2
  %83 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %84 = load double, double* %83, align 8, !tbaa !551
  %85 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %86 = load double*, double** %85, align 8, !tbaa !561
  %87 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %88 = load %struct.AVExpr*, %struct.AVExpr** %87, align 8, !tbaa !27
  %89 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %88)
  %90 = fptosi double %89 to i32
  %91 = icmp slt i32 %90, 9
  %92 = select i1 %91, i32 %90, i32 9
  %93 = icmp sgt i32 %92, 0
  %94 = select i1 %93, i32 %92, i32 0
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds double, double* %86, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !559
  %98 = fmul nsz double %84, %97
  ret double %98

99:                                               ; preds = %2
  %100 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %101 = load double, double* %100, align 8, !tbaa !551
  %102 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %103 = load %struct.AVExpr*, %struct.AVExpr** %102, align 8, !tbaa !27
  %104 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %103)
  %105 = fcmp nsz uno double %104, 0.000000e+00
  %106 = uitofp i1 %105 to double
  %107 = fmul nsz double %101, %106
  ret double %107

108:                                              ; preds = %2
  %109 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %110 = load double, double* %109, align 8, !tbaa !551
  %111 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %112 = load %struct.AVExpr*, %struct.AVExpr** %111, align 8, !tbaa !27
  %113 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %112)
  %114 = tail call nsz double @llvm.fabs.f64(double %113) #30
  %115 = fcmp nsz oeq double %114, 0x7FF0000000000000
  %116 = uitofp i1 %115 to double
  %117 = fmul nsz double %110, %116
  ret double %117

118:                                              ; preds = %2
  %119 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %120 = load double, double* %119, align 8, !tbaa !551
  %121 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %122 = load %struct.AVExpr*, %struct.AVExpr** %121, align 8, !tbaa !27
  %123 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %122)
  %124 = tail call nsz double @llvm.floor.f64(double %123)
  %125 = fmul nsz double %120, %124
  ret double %125

126:                                              ; preds = %2
  %127 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %128 = load double, double* %127, align 8, !tbaa !551
  %129 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %130 = load %struct.AVExpr*, %struct.AVExpr** %129, align 8, !tbaa !27
  %131 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %130)
  %132 = tail call nsz double @llvm.ceil.f64(double %131)
  %133 = fmul nsz double %128, %132
  ret double %133

134:                                              ; preds = %2
  %135 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %136 = load double, double* %135, align 8, !tbaa !551
  %137 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %138 = load %struct.AVExpr*, %struct.AVExpr** %137, align 8, !tbaa !27
  %139 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %138)
  %140 = tail call nsz double @llvm.trunc.f64(double %139)
  %141 = fmul nsz double %136, %140
  ret double %141

142:                                              ; preds = %2
  %143 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %144 = load double, double* %143, align 8, !tbaa !551
  %145 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %146 = load %struct.AVExpr*, %struct.AVExpr** %145, align 8, !tbaa !27
  %147 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %146)
  %148 = tail call nsz double @llvm.sqrt.f64(double %147)
  %149 = fmul nsz double %144, %148
  ret double %149

150:                                              ; preds = %2
  %151 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %152 = load double, double* %151, align 8, !tbaa !551
  %153 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %154 = load %struct.AVExpr*, %struct.AVExpr** %153, align 8, !tbaa !27
  %155 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %154)
  %156 = fcmp nsz oeq double %155, 0.000000e+00
  %157 = uitofp i1 %156 to double
  %158 = fmul nsz double %152, %157
  ret double %158

159:                                              ; preds = %2
  %160 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %161 = load double, double* %160, align 8, !tbaa !551
  %162 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %163 = load %struct.AVExpr*, %struct.AVExpr** %162, align 8, !tbaa !27
  %164 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %163)
  %165 = fcmp nsz une double %164, 0.000000e+00
  br i1 %165, label %166, label %170

166:                                              ; preds = %159
  %167 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 1
  %168 = load %struct.AVExpr*, %struct.AVExpr** %167, align 8, !tbaa !27
  %169 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %168)
  br label %176

170:                                              ; preds = %159
  %171 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 2
  %172 = load %struct.AVExpr*, %struct.AVExpr** %171, align 8, !tbaa !27
  %173 = icmp eq %struct.AVExpr* %172, null
  br i1 %173, label %176, label %174

174:                                              ; preds = %170
  %175 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* nonnull %172)
  br label %176

176:                                              ; preds = %174, %170, %166
  %177 = phi double [ %169, %166 ], [ %175, %174 ], [ 0.000000e+00, %170 ]
  %178 = fmul nsz double %161, %177
  br label %.loopexit

179:                                              ; preds = %2
  %180 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %181 = load double, double* %180, align 8, !tbaa !551
  %182 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %183 = load %struct.AVExpr*, %struct.AVExpr** %182, align 8, !tbaa !27
  %184 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %183)
  %185 = fcmp nsz une double %184, 0.000000e+00
  br i1 %185, label %190, label %186

186:                                              ; preds = %179
  %187 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 1
  %188 = load %struct.AVExpr*, %struct.AVExpr** %187, align 8, !tbaa !27
  %189 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %188)
  br label %196

190:                                              ; preds = %179
  %191 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 2
  %192 = load %struct.AVExpr*, %struct.AVExpr** %191, align 8, !tbaa !27
  %193 = icmp eq %struct.AVExpr* %192, null
  br i1 %193, label %196, label %194

194:                                              ; preds = %190
  %195 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* nonnull %192)
  br label %196

196:                                              ; preds = %194, %190, %186
  %197 = phi double [ %189, %186 ], [ %195, %194 ], [ 0.000000e+00, %190 ]
  %198 = fmul nsz double %181, %197
  br label %.loopexit

199:                                              ; preds = %2
  %200 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %201 = load %struct.AVExpr*, %struct.AVExpr** %200, align 8, !tbaa !27
  %202 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %201)
  %203 = fptosi double %202 to i32
  %204 = icmp slt i32 %203, 9
  %205 = select i1 %204, i32 %203, i32 9
  %206 = icmp sgt i32 %205, 0
  %207 = select i1 %206, i32 %205, i32 0
  %208 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %209 = load double*, double** %208, align 8, !tbaa !561
  %210 = zext i32 %207 to i64
  %211 = getelementptr inbounds double, double* %209, i64 %210
  %212 = load double, double* %211, align 8, !tbaa !559
  %213 = fcmp nsz uno double %212, 0.000000e+00
  br i1 %213, label %219, label %214

214:                                              ; preds = %199
  %215 = fptoui double %212 to i64
  %216 = mul i64 %215, 1664525
  %217 = add i64 %216, 1013904223
  %218 = uitofp i64 %217 to double
  br label %219

219:                                              ; preds = %214, %199
  %220 = phi double [ %218, %214 ], [ 0x41CE3779AF800000, %199 ]
  store double %220, double* %211, align 8, !tbaa !559
  %221 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %222 = load double, double* %221, align 8, !tbaa !551
  %223 = fmul nsz double %220, 0x3BF0000000000000
  %224 = fmul nsz double %223, %222
  br label %.loopexit

225:                                              ; preds = %225, %10
  %226 = load %struct.AVExpr*, %struct.AVExpr** %11, align 8, !tbaa !27
  %227 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %226)
  %228 = load %struct.AVExpr*, %struct.AVExpr** %6, align 8, !tbaa !27
  %229 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %228)
  %230 = fcmp nsz une double %229, 0.000000e+00
  br i1 %230, label %225, label %.loopexit

231:                                              ; preds = %2
  %232 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 1
  %233 = load %struct.AVExpr*, %struct.AVExpr** %232, align 8, !tbaa !27
  %234 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %233)
  %235 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 2
  %236 = load %struct.AVExpr*, %struct.AVExpr** %235, align 8, !tbaa !27
  %237 = icmp eq %struct.AVExpr* %236, null
  br i1 %237, label %246, label %238

238:                                              ; preds = %231
  %239 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* nonnull %236)
  %240 = fptosi double %239 to i32
  %241 = icmp slt i32 %240, 9
  %242 = select i1 %241, i32 %240, i32 9
  %243 = icmp sgt i32 %242, 0
  %244 = select i1 %243, i32 %242, i32 0
  %245 = zext i32 %244 to i64
  br label %246

246:                                              ; preds = %238, %231
  %247 = phi i64 [ %245, %238 ], [ 0, %231 ]
  %248 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %249 = load double*, double** %248, align 8, !tbaa !561
  %250 = getelementptr inbounds double, double* %249, i64 %247
  %251 = bitcast double* %250 to i64*
  %252 = load i64, i64* %251, align 8, !tbaa !559
  %253 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  store double 0.000000e+00, double* %250, align 8, !tbaa !559
  %254 = load %struct.AVExpr*, %struct.AVExpr** %253, align 8, !tbaa !27
  %255 = tail call nsz fastcc double @eval_expr(%struct.Parser* nonnull %0, %struct.AVExpr* %254)
  br label %256

256:                                              ; preds = %262, %246
  %257 = phi double [ %255, %246 ], [ %271, %262 ]
  %258 = phi i32 [ 0, %246 ], [ %260, %262 ]
  %259 = phi double [ 1.000000e+00, %246 ], [ %265, %262 ]
  %260 = add nuw nsw i32 %258, 1
  %261 = icmp eq i32 %260, 1000
  br i1 %261, label %275, label %262

262:                                              ; preds = %256
  %263 = sitofp i32 %260 to double
  %264 = fdiv nsz double %234, %263
  %265 = fmul nsz double %259, %264
  %266 = load double*, double** %248, align 8, !tbaa !561
  %267 = getelementptr inbounds double, double* %266, i64 %247
  store double %263, double* %267, align 8, !tbaa !559
  %268 = load %struct.AVExpr*, %struct.AVExpr** %253, align 8, !tbaa !27
  %269 = tail call nsz fastcc double @eval_expr(%struct.Parser* nonnull %0, %struct.AVExpr* %268)
  %270 = fmul nsz double %265, %269
  %271 = fadd nsz double %257, %270
  %272 = fcmp nsz oeq double %257, %271
  %273 = fcmp nsz une double %269, 0.000000e+00
  %274 = and i1 %273, %272
  br i1 %274, label %275, label %256

275:                                              ; preds = %262, %256
  %276 = phi double [ %257, %256 ], [ %271, %262 ]
  %277 = load double*, double** %248, align 8, !tbaa !561
  %278 = getelementptr inbounds double, double* %277, i64 %247
  %279 = bitcast double* %278 to i64*
  store i64 %252, i64* %279, align 8, !tbaa !559
  br label %.loopexit

280:                                              ; preds = %2
  %281 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %282 = bitcast double** %281 to i64**
  %283 = load i64*, i64** %282, align 8, !tbaa !561
  %284 = load i64, i64* %283, align 8, !tbaa !559
  %285 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 1
  %286 = load %struct.AVExpr*, %struct.AVExpr** %285, align 8, !tbaa !27
  %287 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %286)
  %288 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  br label %291

289:                                              ; preds = %341
  %290 = icmp eq i32 %347, 1024
  br i1 %290, label %.loopexit15, label %291

291:                                              ; preds = %289, %280
  %292 = phi double [ 0x7FEFFFFFFFFFFFFF, %280 ], [ %343, %289 ]
  %293 = phi double [ 0xFFEFFFFFFFFFFFFF, %280 ], [ %334, %289 ]
  %294 = phi double [ -1.000000e+00, %280 ], [ %342, %289 ]
  %295 = phi double [ -1.000000e+00, %280 ], [ %333, %289 ]
  %296 = phi i32 [ -1, %280 ], [ %347, %289 ]
  %297 = icmp slt i32 %296, 255
  br i1 %297, label %298, label %307

298:                                              ; preds = %291
  %299 = and i32 %296, 255
  %300 = zext i32 %299 to i64
  %301 = getelementptr inbounds [256 x i8], [256 x i8]* @av_reverse, i64 0, i64 %300
  %302 = load i8, i8* %301, align 1, !tbaa !33
  %303 = uitofp i8 %302 to double
  %304 = fmul nsz double %287, %303
  %305 = fdiv nsz double %304, 2.550000e+02
  %306 = load double*, double** %281, align 8, !tbaa !561
  store double %305, double* %306, align 8, !tbaa !559
  br label %323

307:                                              ; preds = %291
  %308 = add nsw i32 %296, -255
  %309 = sitofp i32 %308 to double
  %310 = tail call nsz double @llvm.pow.f64(double 9.000000e-01, double %309)
  %311 = fmul nsz double %287, %310
  %312 = load double*, double** %281, align 8, !tbaa !561
  %313 = and i32 %296, 1
  %314 = icmp eq i32 %313, 0
  %315 = fsub nsz double -0.000000e+00, %311
  %316 = select i1 %314, double %311, double %315
  store double %316, double* %312, align 8, !tbaa !559
  %317 = and i32 %296, 2
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %321, label %319

319:                                              ; preds = %307
  %320 = fadd nsz double %295, %316
  store double %320, double* %312, align 8, !tbaa !559
  br label %323

321:                                              ; preds = %307
  %322 = fadd nsz double %294, %316
  store double %322, double* %312, align 8, !tbaa !559
  br label %323

323:                                              ; preds = %321, %319, %298
  %324 = load %struct.AVExpr*, %struct.AVExpr** %288, align 8, !tbaa !27
  %325 = tail call nsz fastcc double @eval_expr(%struct.Parser* nonnull %0, %struct.AVExpr* %324)
  %326 = fcmp nsz ole double %325, 0.000000e+00
  %327 = fcmp nsz ogt double %325, %293
  %328 = and i1 %326, %327
  br i1 %328, label %329, label %332

329:                                              ; preds = %323
  %330 = load double*, double** %281, align 8, !tbaa !561
  %331 = load double, double* %330, align 8, !tbaa !559
  br label %332

332:                                              ; preds = %329, %323
  %333 = phi double [ %331, %329 ], [ %295, %323 ]
  %334 = phi double [ %325, %329 ], [ %293, %323 ]
  %335 = fcmp nsz oge double %325, 0.000000e+00
  %336 = fcmp nsz olt double %325, %292
  %337 = and i1 %335, %336
  br i1 %337, label %338, label %341

338:                                              ; preds = %332
  %339 = load double*, double** %281, align 8, !tbaa !561
  %340 = load double, double* %339, align 8, !tbaa !559
  br label %341

341:                                              ; preds = %338, %332
  %342 = phi double [ %340, %338 ], [ %294, %332 ]
  %343 = phi double [ %325, %338 ], [ %292, %332 ]
  %344 = fcmp nsz oge double %333, 0.000000e+00
  %345 = fcmp nsz oge double %342, 0.000000e+00
  %346 = and i1 %344, %345
  %347 = add nsw i32 %296, 1
  br i1 %346, label %.preheader, label %289

348:                                              ; preds = %372
  %349 = icmp eq i32 %375, 1000
  br i1 %349, label %.loopexit15, label %.preheader

.preheader:                                       ; preds = %341, %348
  %350 = phi double [ %373, %348 ], [ %342, %341 ]
  %351 = phi double [ %367, %348 ], [ %333, %341 ]
  %352 = phi i32 [ %375, %348 ], [ 0, %341 ]
  %353 = fadd nsz double %350, %351
  %354 = fmul nsz double %353, 5.000000e-01
  %355 = load double*, double** %281, align 8, !tbaa !561
  store double %354, double* %355, align 8, !tbaa !559
  %356 = fcmp nsz oeq double %351, %354
  %357 = fcmp nsz oeq double %350, %354
  %358 = or i1 %356, %357
  br i1 %358, label %.loopexit15, label %359

359:                                              ; preds = %.preheader
  %360 = load %struct.AVExpr*, %struct.AVExpr** %288, align 8, !tbaa !27
  %361 = tail call nsz fastcc double @eval_expr(%struct.Parser* nonnull %0, %struct.AVExpr* %360)
  %362 = fcmp nsz ugt double %361, 0.000000e+00
  br i1 %362, label %366, label %363

363:                                              ; preds = %359
  %364 = load double*, double** %281, align 8, !tbaa !561
  %365 = load double, double* %364, align 8, !tbaa !559
  br label %366

366:                                              ; preds = %363, %359
  %367 = phi double [ %365, %363 ], [ %351, %359 ]
  %368 = fcmp nsz ult double %361, 0.000000e+00
  br i1 %368, label %372, label %369

369:                                              ; preds = %366
  %370 = load double*, double** %281, align 8, !tbaa !561
  %371 = load double, double* %370, align 8, !tbaa !559
  br label %372

372:                                              ; preds = %369, %366
  %373 = phi double [ %371, %369 ], [ %350, %366 ]
  %374 = fcmp nsz uno double %361, 0.000000e+00
  %375 = add nuw nsw i32 %352, 1
  br i1 %374, label %.loopexit15, label %348

.loopexit15:                                      ; preds = %289, %372, %.preheader, %348
  %376 = phi double [ %367, %348 ], [ %351, %.preheader ], [ %361, %372 ], [ %333, %289 ]
  %377 = phi double [ %373, %348 ], [ %350, %.preheader ], [ %361, %372 ], [ %342, %289 ]
  %378 = load i64*, i64** %282, align 8, !tbaa !561
  store i64 %284, i64* %378, align 8, !tbaa !559
  %379 = fsub nsz double -0.000000e+00, %334
  %380 = fcmp nsz ogt double %343, %379
  %381 = select i1 %380, double %376, double %377
  br label %.loopexit

382:                                              ; preds = %2
  %383 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 0
  %384 = load %struct.AVExpr*, %struct.AVExpr** %383, align 8, !tbaa !27
  %385 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %384)
  %386 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i64 1
  %387 = load %struct.AVExpr*, %struct.AVExpr** %386, align 8, !tbaa !27
  %388 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %387)
  %389 = load i32, i32* %3, align 8, !tbaa !550
  switch i32 %389, label %.loopexit [
    i32 10, label %390
    i32 32, label %398
    i32 11, label %406
    i32 12, label %412
    i32 13, label %418
    i32 14, label %424
    i32 15, label %430
    i32 16, label %436
    i32 17, label %441
    i32 18, label %446
    i32 19, label %451
    i32 20, label %456
    i32 21, label %460
    i32 31, label %473
  ]

390:                                              ; preds = %382
  %391 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %392 = load double, double* %391, align 8, !tbaa !551
  %393 = fdiv nsz double %385, %388
  %394 = tail call nsz double @llvm.floor.f64(double %393)
  %395 = fmul nsz double %388, %394
  %396 = fsub nsz double %385, %395
  %397 = fmul nsz double %396, %392
  br label %.loopexit

398:                                              ; preds = %382
  %399 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %400 = load double, double* %399, align 8, !tbaa !551
  %401 = fptosi double %385 to i64
  %402 = fptosi double %388 to i64
  %403 = tail call fastcc i64 @av_gcd(i64 %401, i64 %402) #29
  %404 = sitofp i64 %403 to double
  %405 = fmul nsz double %400, %404
  br label %.loopexit

406:                                              ; preds = %382
  %407 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %408 = load double, double* %407, align 8, !tbaa !551
  %409 = fcmp nsz ogt double %385, %388
  %410 = select i1 %409, double %385, double %388
  %411 = fmul nsz double %410, %408
  br label %.loopexit

412:                                              ; preds = %382
  %413 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %414 = load double, double* %413, align 8, !tbaa !551
  %415 = fcmp nsz olt double %385, %388
  %416 = select i1 %415, double %385, double %388
  %417 = fmul nsz double %416, %414
  br label %.loopexit

418:                                              ; preds = %382
  %419 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %420 = load double, double* %419, align 8, !tbaa !551
  %421 = fcmp nsz oeq double %385, %388
  %422 = select nsz i1 %421, double 1.000000e+00, double 0.000000e+00
  %423 = fmul nsz double %422, %420
  br label %.loopexit

424:                                              ; preds = %382
  %425 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %426 = load double, double* %425, align 8, !tbaa !551
  %427 = fcmp nsz ogt double %385, %388
  %428 = select nsz i1 %427, double 1.000000e+00, double 0.000000e+00
  %429 = fmul nsz double %428, %426
  br label %.loopexit

430:                                              ; preds = %382
  %431 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %432 = load double, double* %431, align 8, !tbaa !551
  %433 = fcmp nsz oge double %385, %388
  %434 = select nsz i1 %433, double 1.000000e+00, double 0.000000e+00
  %435 = fmul nsz double %434, %432
  br label %.loopexit

436:                                              ; preds = %382
  %437 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %438 = load double, double* %437, align 8, !tbaa !551
  %439 = tail call nsz double @llvm.pow.f64(double %385, double %388)
  %440 = fmul nsz double %439, %438
  br label %.loopexit

441:                                              ; preds = %382
  %442 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %443 = load double, double* %442, align 8, !tbaa !551
  %444 = fmul nsz double %385, %388
  %445 = fmul nsz double %444, %443
  br label %.loopexit

446:                                              ; preds = %382
  %447 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %448 = load double, double* %447, align 8, !tbaa !551
  %449 = fdiv nsz double %385, %388
  %450 = fmul nsz double %449, %448
  br label %.loopexit

451:                                              ; preds = %382
  %452 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %453 = load double, double* %452, align 8, !tbaa !551
  %454 = fadd nsz double %385, %388
  %455 = fmul nsz double %454, %453
  br label %.loopexit

456:                                              ; preds = %382
  %457 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %458 = load double, double* %457, align 8, !tbaa !551
  %459 = fmul nsz double %388, %458
  br label %.loopexit

460:                                              ; preds = %382
  %461 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %462 = load double, double* %461, align 8, !tbaa !551
  %463 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %464 = load double*, double** %463, align 8, !tbaa !561
  %465 = fptosi double %385 to i32
  %466 = icmp slt i32 %465, 9
  %467 = select i1 %466, i32 %465, i32 9
  %468 = icmp sgt i32 %467, 0
  %469 = select i1 %468, i32 %467, i32 0
  %470 = zext i32 %469 to i64
  %471 = getelementptr inbounds double, double* %464, i64 %470
  store double %388, double* %471, align 8, !tbaa !559
  %472 = fmul nsz double %388, %462
  br label %.loopexit

473:                                              ; preds = %382
  %474 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %475 = load double, double* %474, align 8, !tbaa !551
  %476 = fmul nsz double %385, %385
  %477 = fmul nsz double %388, %388
  %478 = fadd nsz double %476, %477
  %479 = tail call nsz double @llvm.sqrt.f64(double %478)
  %480 = fmul nsz double %479, %475
  br label %.loopexit

.loopexit:                                        ; preds = %225, %473, %460, %456, %451, %446, %441, %436, %430, %424, %418, %412, %406, %398, %390, %382, %.loopexit15, %275, %219, %196, %176, %15, %12, %5
  %481 = phi double [ 0x7FF8000000000000, %382 ], [ %397, %390 ], [ %405, %398 ], [ %411, %406 ], [ %417, %412 ], [ %423, %418 ], [ %429, %424 ], [ %435, %430 ], [ %440, %436 ], [ %445, %441 ], [ %450, %446 ], [ %455, %451 ], [ %459, %456 ], [ %472, %460 ], [ %480, %473 ], [ %381, %.loopexit15 ], [ %276, %275 ], [ %224, %219 ], [ %198, %196 ], [ %178, %176 ], [ %26, %15 ], [ %14, %12 ], [ 0x7FF8000000000000, %5 ], [ %227, %225 ]
  ret double %481
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #6

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_expr_parse_and_eval(double* nocapture, i8*, i8*) unnamed_addr #5 {
  %4 = alloca %struct.Parser, align 8
  %5 = alloca %struct.AVExpr*, align 8
  %6 = bitcast %struct.AVExpr** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #18
  store %struct.AVExpr* null, %struct.AVExpr** %5, align 8, !tbaa !27
  %7 = call fastcc i32 @av_expr_parse(%struct.AVExpr** nonnull %5, i8* %1, i8* %2)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  store double 0x7FF8000000000000, double* %0, align 8, !tbaa !559
  br label %24

10:                                               ; preds = %3
  %11 = load %struct.AVExpr*, %struct.AVExpr** %5, align 8, !tbaa !27
  %12 = bitcast %struct.Parser* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %12) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 96, i1 false) #18
  %13 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %11, i64 0, i32 4
  %14 = bitcast double** %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !547
  %16 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 12
  %17 = bitcast double** %16 to i64*
  store i64 %15, i64* %17, align 8, !tbaa !561
  %18 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 3
  store double* getelementptr inbounds ([4 x double], [4 x double]* @const_values, i64 0, i64 0), double** %18, align 8, !tbaa !558
  %19 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 9
  store i8* null, i8** %19, align 8, !tbaa !560
  %20 = call nsz fastcc double @eval_expr(%struct.Parser* nonnull %4, %struct.AVExpr* %11) #18
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %12) #18
  store double %20, double* %0, align 8, !tbaa !559
  call fastcc void @av_expr_free(%struct.AVExpr* %11)
  %21 = load double, double* %0, align 8, !tbaa !559
  %22 = fcmp nsz uno double %21, 0.000000e+00
  %23 = select i1 %22, i32 -22, i32 0
  br label %24

24:                                               ; preds = %10, %9
  %25 = phi i32 [ %7, %9 ], [ %23, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #18
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.AVFifoBuffer* @av_fifo_alloc() unnamed_addr #5 {
  %1 = alloca %struct.AVFifoBuffer*, align 8
  %2 = bitcast %struct.AVFifoBuffer** %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #18
  %3 = tail call fastcc noalias i8* @av_mallocz(i64 40) #18
  %4 = bitcast %struct.AVFifoBuffer** %1 to i8**
  store i8* %3, i8** %4, align 8, !tbaa !27
  %5 = icmp eq i8* %3, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %0
  %7 = bitcast i8* %3 to %struct.AVFifoBuffer*
  %8 = tail call fastcc noalias i8* @av_malloc(i64 4096) #18
  %9 = bitcast i8* %3 to i8**
  store i8* %8, i8** %9, align 8, !tbaa !562
  %10 = getelementptr inbounds i8, i8* %8, i64 4096
  %11 = getelementptr inbounds i8, i8* %3, i64 24
  %12 = bitcast i8* %11 to i8**
  store i8* %10, i8** %12, align 8, !tbaa !564
  %13 = ptrtoint i8* %8 to i64
  %14 = getelementptr inbounds i8, i8* %3, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8, !tbaa !565
  %16 = getelementptr inbounds i8, i8* %3, i64 16
  %17 = bitcast i8* %16 to i64*
  store i64 %13, i64* %17, align 8, !tbaa !566
  %18 = getelementptr inbounds i8, i8* %3, i64 32
  %19 = bitcast i8* %18 to i32*
  store i32 0, i32* %19, align 8, !tbaa !567
  %20 = getelementptr inbounds i8, i8* %3, i64 36
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 4, !tbaa !568
  %22 = icmp eq i8* %8, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %6
  call fastcc void @av_freep(i8* nonnull %2) #18
  %24 = load %struct.AVFifoBuffer*, %struct.AVFifoBuffer** %1, align 8, !tbaa !27
  br label %25

25:                                               ; preds = %23, %6, %0
  %26 = phi %struct.AVFifoBuffer* [ null, %0 ], [ %7, %6 ], [ %24, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #18
  ret %struct.AVFifoBuffer* %26
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_fifo_free(%struct.AVFifoBuffer*) unnamed_addr #5 {
  %2 = icmp eq %struct.AVFifoBuffer* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.AVFifoBuffer* %0 to i8*
  tail call fastcc void @av_freep(i8* nonnull %4) #18
  tail call fastcc void @av_free(i8* nonnull %4) #18
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc i32 @av_fifo_size(%struct.AVFifoBuffer* nocapture readonly) unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.AVFifoBuffer, %struct.AVFifoBuffer* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 4, !tbaa !568
  %4 = getelementptr inbounds %struct.AVFifoBuffer, %struct.AVFifoBuffer* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8, !tbaa !567
  %6 = sub i32 %3, %5
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_fifo_generic_read(%struct.AVFifoBuffer* nocapture, i8* nocapture) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVFifoBuffer, %struct.AVFifoBuffer* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to i64*
  %5 = getelementptr inbounds %struct.AVFifoBuffer, %struct.AVFifoBuffer* %0, i64 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = bitcast %struct.AVFifoBuffer* %0 to i64*
  %8 = getelementptr inbounds %struct.AVFifoBuffer, %struct.AVFifoBuffer* %0, i64 0, i32 4
  %9 = load i64, i64* %4, align 8, !tbaa !564
  %10 = load i64, i64* %6, align 8, !tbaa !565
  br label %11

11:                                               ; preds = %2, %34
  %12 = phi i64 [ %36, %34 ], [ %10, %2 ]
  %13 = phi i64 [ %29, %34 ], [ %9, %2 ]
  %14 = phi i32 [ %39, %34 ], [ 32, %2 ]
  %15 = phi i8* [ %24, %34 ], [ %1, %2 ]
  %16 = sub i64 %13, %12
  %17 = sext i32 %14 to i64
  %18 = icmp sgt i64 %16, %17
  %19 = select i1 %18, i64 %17, i64 %16
  %20 = trunc i64 %19 to i32
  %21 = inttoptr i64 %12 to i8*
  %22 = shl i64 %19, 32
  %23 = ashr exact i64 %22, 32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %21, i64 %23, i1 false)
  %24 = getelementptr inbounds i8, i8* %15, i64 %23
  %25 = load i8*, i8** %5, align 8, !tbaa !565
  %26 = getelementptr inbounds i8, i8* %25, i64 %23
  store i8* %26, i8** %5, align 8, !tbaa !565
  %27 = load i8*, i8** %3, align 8, !tbaa !564
  %28 = icmp ult i8* %26, %27
  %29 = ptrtoint i8* %27 to i64
  br i1 %28, label %34, label %30

30:                                               ; preds = %11
  %31 = load i64, i64* %7, align 8, !tbaa !562
  %32 = sub i64 %31, %29
  %33 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8* %33, i8** %5, align 8, !tbaa !565
  br label %34

34:                                               ; preds = %30, %11
  %35 = phi i8* [ %33, %30 ], [ %26, %11 ]
  %36 = ptrtoint i8* %35 to i64
  %37 = load i32, i32* %8, align 8, !tbaa !567
  %38 = add i32 %37, %20
  store i32 %38, i32* %8, align 8, !tbaa !567
  %39 = sub nsw i32 %14, %20
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %11, label %41

41:                                               ; preds = %34
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_fifo_generic_write(%struct.AVFifoBuffer* nocapture, i8* nocapture readonly) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.AVFifoBuffer, %struct.AVFifoBuffer* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4, !tbaa !568
  %5 = getelementptr inbounds %struct.AVFifoBuffer, %struct.AVFifoBuffer* %0, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8, !tbaa !566
  %7 = getelementptr inbounds %struct.AVFifoBuffer, %struct.AVFifoBuffer* %0, i64 0, i32 3
  %8 = bitcast i8** %7 to i64*
  %9 = getelementptr inbounds %struct.AVFifoBuffer, %struct.AVFifoBuffer* %0, i64 0, i32 0
  %10 = load i64, i64* %8, align 8, !tbaa !564
  br label %11

11:                                               ; preds = %2, %32
  %12 = phi i64 [ %29, %32 ], [ %10, %2 ]
  %13 = phi i32 [ %35, %32 ], [ 32, %2 ]
  %14 = phi i32 [ %34, %32 ], [ %4, %2 ]
  %15 = phi i8* [ %33, %32 ], [ %6, %2 ]
  %16 = phi i8* [ %25, %32 ], [ %1, %2 ]
  %17 = ptrtoint i8* %15 to i64
  %18 = sub i64 %12, %17
  %19 = sext i32 %13 to i64
  %20 = icmp sgt i64 %18, %19
  %21 = select i1 %20, i64 %19, i64 %18
  %22 = trunc i64 %21 to i32
  %23 = shl i64 %21, 32
  %24 = ashr exact i64 %23, 32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %16, i64 %24, i1 false)
  %25 = getelementptr inbounds i8, i8* %16, i64 %24
  %26 = getelementptr inbounds i8, i8* %15, i64 %24
  %27 = load i8*, i8** %7, align 8, !tbaa !564
  %28 = icmp ult i8* %26, %27
  %29 = ptrtoint i8* %27 to i64
  br i1 %28, label %32, label %30

30:                                               ; preds = %11
  %31 = load i8*, i8** %9, align 8, !tbaa !562
  br label %32

32:                                               ; preds = %30, %11
  %33 = phi i8* [ %31, %30 ], [ %26, %11 ]
  %34 = add i32 %14, %22
  %35 = sub nsw i32 %13, %22
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %11, label %37

37:                                               ; preds = %32
  store i32 %34, i32* %3, align 4, !tbaa !568
  store i8* %33, i8** %5, align 8, !tbaa !566
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_image_fill_max_pixsteps(i32* nocapture, i32*, %struct.AVPixFmtDescriptor* nocapture readonly) unnamed_addr #5 {
  %4 = bitcast i32* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 16, i1 false)
  %5 = icmp eq i32* %1, null
  br i1 %5, label %6, label %18

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 0, i32 0
  %8 = load i16, i16* %7, align 2
  %9 = lshr i16 %8, 2
  %10 = and i16 %9, 7
  %11 = add nuw nsw i16 %10, 1
  %12 = zext i16 %11 to i32
  %13 = and i16 %8, 3
  %14 = zext i16 %13 to i64
  %15 = getelementptr inbounds i32, i32* %0, i64 %14
  %16 = load i32, i32* %15, align 4, !tbaa !28
  %17 = icmp slt i32 %16, %12
  br i1 %17, label %48, label %49

18:                                               ; preds = %3
  %19 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %19, i8 0, i64 16, i1 false)
  %20 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 0, i32 0
  %21 = load i16, i16* %20, align 2
  %22 = lshr i16 %21, 2
  %23 = and i16 %22, 7
  %24 = add nuw nsw i16 %23, 1
  %25 = zext i16 %24 to i32
  %26 = and i16 %21, 3
  %27 = zext i16 %26 to i64
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  %29 = load i32, i32* %28, align 4, !tbaa !28
  %30 = icmp slt i32 %29, %25
  br i1 %30, label %31, label %36

31:                                               ; preds = %18
  store i32 %25, i32* %28, align 4, !tbaa !28
  %32 = load i16, i16* %20, align 2
  %33 = and i16 %32, 3
  %34 = zext i16 %33 to i64
  %35 = getelementptr inbounds i32, i32* %1, i64 %34
  store i32 0, i32* %35, align 4, !tbaa !28
  br label %36

36:                                               ; preds = %31, %18
  %37 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 1, i32 0
  %38 = load i16, i16* %37, align 2
  %39 = lshr i16 %38, 2
  %40 = and i16 %39, 7
  %41 = add nuw nsw i16 %40, 1
  %42 = zext i16 %41 to i32
  %43 = and i16 %38, 3
  %44 = zext i16 %43 to i64
  %45 = getelementptr inbounds i32, i32* %0, i64 %44
  %46 = load i32, i32* %45, align 4, !tbaa !28
  %47 = icmp slt i32 %46, %42
  br i1 %47, label %62, label %67

48:                                               ; preds = %6
  store i32 %12, i32* %15, align 4, !tbaa !28
  br label %49

49:                                               ; preds = %48, %6
  %50 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 1, i32 0
  %51 = load i16, i16* %50, align 2
  %52 = lshr i16 %51, 2
  %53 = and i16 %52, 7
  %54 = add nuw nsw i16 %53, 1
  %55 = zext i16 %54 to i32
  %56 = and i16 %51, 3
  %57 = zext i16 %56 to i64
  %58 = getelementptr inbounds i32, i32* %0, i64 %57
  %59 = load i32, i32* %58, align 4, !tbaa !28
  %60 = icmp slt i32 %59, %55
  br i1 %60, label %101, label %102

61:                                               ; preds = %127, %115, %96, %84
  ret void

62:                                               ; preds = %36
  store i32 %42, i32* %45, align 4, !tbaa !28
  %63 = load i16, i16* %37, align 2
  %64 = and i16 %63, 3
  %65 = zext i16 %64 to i64
  %66 = getelementptr inbounds i32, i32* %1, i64 %65
  store i32 1, i32* %66, align 4, !tbaa !28
  br label %67

67:                                               ; preds = %62, %36
  %68 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 2, i32 0
  %69 = load i16, i16* %68, align 2
  %70 = lshr i16 %69, 2
  %71 = and i16 %70, 7
  %72 = add nuw nsw i16 %71, 1
  %73 = zext i16 %72 to i32
  %74 = and i16 %69, 3
  %75 = zext i16 %74 to i64
  %76 = getelementptr inbounds i32, i32* %0, i64 %75
  %77 = load i32, i32* %76, align 4, !tbaa !28
  %78 = icmp slt i32 %77, %73
  br i1 %78, label %79, label %84

79:                                               ; preds = %67
  store i32 %73, i32* %76, align 4, !tbaa !28
  %80 = load i16, i16* %68, align 2
  %81 = and i16 %80, 3
  %82 = zext i16 %81 to i64
  %83 = getelementptr inbounds i32, i32* %1, i64 %82
  store i32 2, i32* %83, align 4, !tbaa !28
  br label %84

84:                                               ; preds = %79, %67
  %85 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 3, i32 0
  %86 = load i16, i16* %85, align 2
  %87 = lshr i16 %86, 2
  %88 = and i16 %87, 7
  %89 = add nuw nsw i16 %88, 1
  %90 = zext i16 %89 to i32
  %91 = and i16 %86, 3
  %92 = zext i16 %91 to i64
  %93 = getelementptr inbounds i32, i32* %0, i64 %92
  %94 = load i32, i32* %93, align 4, !tbaa !28
  %95 = icmp slt i32 %94, %90
  br i1 %95, label %96, label %61

96:                                               ; preds = %84
  store i32 %90, i32* %93, align 4, !tbaa !28
  %97 = load i16, i16* %85, align 2
  %98 = and i16 %97, 3
  %99 = zext i16 %98 to i64
  %100 = getelementptr inbounds i32, i32* %1, i64 %99
  store i32 3, i32* %100, align 4, !tbaa !28
  br label %61

101:                                              ; preds = %49
  store i32 %55, i32* %58, align 4, !tbaa !28
  br label %102

102:                                              ; preds = %101, %49
  %103 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 2, i32 0
  %104 = load i16, i16* %103, align 2
  %105 = lshr i16 %104, 2
  %106 = and i16 %105, 7
  %107 = add nuw nsw i16 %106, 1
  %108 = zext i16 %107 to i32
  %109 = and i16 %104, 3
  %110 = zext i16 %109 to i64
  %111 = getelementptr inbounds i32, i32* %0, i64 %110
  %112 = load i32, i32* %111, align 4, !tbaa !28
  %113 = icmp slt i32 %112, %108
  br i1 %113, label %114, label %115

114:                                              ; preds = %102
  store i32 %108, i32* %111, align 4, !tbaa !28
  br label %115

115:                                              ; preds = %114, %102
  %116 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 3, i32 0
  %117 = load i16, i16* %116, align 2
  %118 = lshr i16 %117, 2
  %119 = and i16 %118, 7
  %120 = add nuw nsw i16 %119, 1
  %121 = zext i16 %120 to i32
  %122 = and i16 %117, 3
  %123 = zext i16 %122 to i64
  %124 = getelementptr inbounds i32, i32* %0, i64 %123
  %125 = load i32, i32* %124, align 4, !tbaa !28
  %126 = icmp slt i32 %125, %121
  br i1 %126, label %127, label %61

127:                                              ; preds = %115
  store i32 %121, i32* %124, align 4, !tbaa !28
  br label %61
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_image_fill_linesizes(i32* nocapture, i32, i32) unnamed_addr #5 {
  %4 = alloca [4 x i32], align 16
  %5 = alloca [4 x i32], align 16
  %6 = tail call fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %1) #18
  %7 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #18
  %8 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #18
  %9 = bitcast i32* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 16, i1 false)
  %10 = icmp eq %struct.AVPixFmtDescriptor* %6, null
  br i1 %10, label %55, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 4
  %13 = load i8, i8* %12, align 1, !tbaa !270
  %14 = and i8 %13, 8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %55

16:                                               ; preds = %11
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  call fastcc void @av_image_fill_max_pixsteps(i32* nonnull %17, i32* nonnull %18, %struct.AVPixFmtDescriptor* nonnull %6)
  %19 = icmp slt i32 %2, 0
  %20 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 2
  %21 = add nsw i32 %2, -1
  br i1 %19, label %55, label %22

22:                                               ; preds = %16
  %23 = load i32, i32* %17, align 16, !tbaa !28
  %24 = load i32, i32* %18, align 16, !tbaa !28
  %25 = add i32 %24, -1
  %26 = icmp ult i32 %25, 2
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = load i8, i8* %20, align 1, !tbaa !569
  %29 = zext i8 %28 to i32
  br label %30

30:                                               ; preds = %27, %22
  %31 = phi i32 [ %29, %27 ], [ 0, %22 ]
  %32 = shl i32 1, %31
  %33 = add i32 %32, %21
  %34 = ashr i32 %33, %31
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = sdiv i32 2147483647, %34
  %38 = icmp slt i32 %37, %23
  br i1 %38, label %55, label %39

39:                                               ; preds = %36, %30
  %40 = mul nsw i32 %34, %23
  %41 = load i8, i8* %12, align 1, !tbaa !270
  %42 = and i8 %41, 4
  %43 = icmp eq i8 %42, 0
  %44 = add nsw i32 %40, 7
  %45 = ashr i32 %44, 3
  %46 = select i1 %43, i32 %40, i32 %45
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %55, label %48

48:                                               ; preds = %39
  store i32 %46, i32* %0, align 4, !tbaa !28
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 1
  %50 = load i32, i32* %49, align 4, !tbaa !28
  %51 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %52 = load i32, i32* %51, align 4, !tbaa !28
  %53 = add i32 %52, -1
  %54 = icmp ult i32 %53, 2
  br i1 %54, label %57, label %60

55:                                               ; preds = %127, %121, %118, %95, %92, %69, %66, %39, %36, %16, %11, %3
  %56 = phi i32 [ -22, %11 ], [ -22, %3 ], [ -22, %16 ], [ -22, %36 ], [ %46, %39 ], [ -22, %66 ], [ %73, %69 ], [ -22, %92 ], [ %99, %95 ], [ -22, %118 ], [ %125, %121 ], [ 0, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #18
  ret i32 %56

57:                                               ; preds = %48
  %58 = load i8, i8* %20, align 1, !tbaa !569
  %59 = zext i8 %58 to i32
  br label %60

60:                                               ; preds = %57, %48
  %61 = phi i32 [ %59, %57 ], [ 0, %48 ]
  %62 = shl i32 1, %61
  %63 = add i32 %62, %21
  %64 = ashr i32 %63, %61
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %60
  %67 = sdiv i32 2147483647, %64
  %68 = icmp slt i32 %67, %50
  br i1 %68, label %55, label %69

69:                                               ; preds = %66, %60
  %70 = mul nsw i32 %64, %50
  %71 = add nsw i32 %70, 7
  %72 = ashr i32 %71, 3
  %73 = select i1 %43, i32 %70, i32 %72
  %74 = icmp slt i32 %73, 0
  br i1 %74, label %55, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 %73, i32* %76, align 4, !tbaa !28
  %77 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 2
  %78 = load i32, i32* %77, align 8, !tbaa !28
  %79 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %80 = load i32, i32* %79, align 8, !tbaa !28
  %81 = add i32 %80, -1
  %82 = icmp ult i32 %81, 2
  br i1 %82, label %83, label %86

83:                                               ; preds = %75
  %84 = load i8, i8* %20, align 1, !tbaa !569
  %85 = zext i8 %84 to i32
  br label %86

86:                                               ; preds = %83, %75
  %87 = phi i32 [ %85, %83 ], [ 0, %75 ]
  %88 = shl i32 1, %87
  %89 = add i32 %88, %21
  %90 = ashr i32 %89, %87
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %86
  %93 = sdiv i32 2147483647, %90
  %94 = icmp slt i32 %93, %78
  br i1 %94, label %55, label %95

95:                                               ; preds = %92, %86
  %96 = mul nsw i32 %90, %78
  %97 = add nsw i32 %96, 7
  %98 = ashr i32 %97, 3
  %99 = select i1 %43, i32 %96, i32 %98
  %100 = icmp slt i32 %99, 0
  br i1 %100, label %55, label %101

101:                                              ; preds = %95
  %102 = getelementptr inbounds i32, i32* %0, i64 2
  store i32 %99, i32* %102, align 4, !tbaa !28
  %103 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 3
  %104 = load i32, i32* %103, align 4, !tbaa !28
  %105 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  %106 = load i32, i32* %105, align 4, !tbaa !28
  %107 = add i32 %106, -1
  %108 = icmp ult i32 %107, 2
  br i1 %108, label %109, label %112

109:                                              ; preds = %101
  %110 = load i8, i8* %20, align 1, !tbaa !569
  %111 = zext i8 %110 to i32
  br label %112

112:                                              ; preds = %109, %101
  %113 = phi i32 [ %111, %109 ], [ 0, %101 ]
  %114 = shl i32 1, %113
  %115 = add i32 %114, %21
  %116 = ashr i32 %115, %113
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %121, label %118

118:                                              ; preds = %112
  %119 = sdiv i32 2147483647, %116
  %120 = icmp slt i32 %119, %104
  br i1 %120, label %55, label %121

121:                                              ; preds = %118, %112
  %122 = mul nsw i32 %116, %104
  %123 = add nsw i32 %122, 7
  %124 = ashr i32 %123, 3
  %125 = select i1 %43, i32 %122, i32 %124
  %126 = icmp slt i32 %125, 0
  br i1 %126, label %55, label %127

127:                                              ; preds = %121
  %128 = getelementptr inbounds i32, i32* %0, i64 3
  store i32 %125, i32* %128, align 4, !tbaa !28
  br label %55
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_image_fill_pointers(i8** nocapture, i32, i32, i8*, i32* nocapture readonly) unnamed_addr #5 {
  %6 = alloca [4 x i32], align 16
  %7 = bitcast [4 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 16, i1 false)
  %8 = tail call fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %1) #18
  %9 = bitcast i8** %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false)
  %10 = icmp eq %struct.AVPixFmtDescriptor* %8, null
  br i1 %10, label %79, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 4
  %13 = load i8, i8* %12, align 1, !tbaa !270
  %14 = and i8 %13, 8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %79

16:                                               ; preds = %11
  store i8* %3, i8** %0, align 8, !tbaa !27
  %17 = load i32, i32* %4, align 4, !tbaa !28
  %18 = sdiv i32 2147482623, %2
  %19 = icmp sgt i32 %17, %18
  br i1 %19, label %79, label %20

20:                                               ; preds = %16
  %21 = mul nsw i32 %17, %2
  %22 = and i8 %13, 66
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %48

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 5, i64 0, i32 0
  %26 = load i16, i16* %25, align 2
  %27 = and i16 %26, 3
  %28 = zext i16 %27 to i64
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %28
  store i32 1, i32* %29, align 4, !tbaa !28
  %30 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 5, i64 1, i32 0
  %31 = load i16, i16* %30, align 2
  %32 = and i16 %31, 3
  %33 = zext i16 %32 to i64
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %33
  store i32 1, i32* %34, align 4, !tbaa !28
  %35 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 5, i64 2, i32 0
  %36 = load i16, i16* %35, align 2
  %37 = and i16 %36, 3
  %38 = zext i16 %37 to i64
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %38
  store i32 1, i32* %39, align 4, !tbaa !28
  %40 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 5, i64 3, i32 0
  %41 = load i16, i16* %40, align 2
  %42 = and i16 %41, 3
  %43 = zext i16 %42 to i64
  %44 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %43
  store i32 1, i32* %44, align 4, !tbaa !28
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %46 = load i32, i32* %45, align 4, !tbaa !28
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %79, label %55

48:                                               ; preds = %20
  %49 = add nsw i32 %21, 3
  %50 = and i32 %49, -4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %3, i64 %51
  %53 = getelementptr inbounds i8*, i8** %0, i64 1
  store i8* %52, i8** %53, align 8, !tbaa !27
  %54 = add nsw i32 %50, 1024
  br label %79

55:                                               ; preds = %24
  %56 = add i32 %2, -1
  %57 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i64 0, i32 3
  %58 = load i8, i8* %57, align 2, !tbaa !570
  %59 = zext i8 %58 to i32
  %60 = sext i32 %21 to i64
  %61 = getelementptr inbounds i8, i8* %3, i64 %60
  %62 = getelementptr inbounds i8*, i8** %0, i64 1
  store i8* %61, i8** %62, align 8, !tbaa !27
  %63 = shl i32 1, %59
  %64 = add i32 %56, %63
  %65 = ashr i32 %64, %59
  %66 = getelementptr inbounds i32, i32* %4, i64 1
  %67 = load i32, i32* %66, align 4, !tbaa !28
  %68 = sdiv i32 2147483647, %65
  %69 = icmp sgt i32 %67, %68
  br i1 %69, label %79, label %70

70:                                               ; preds = %55
  %71 = mul nsw i32 %65, %67
  %72 = sub nsw i32 2147483647, %71
  %73 = icmp sgt i32 %21, %72
  br i1 %73, label %79, label %74

74:                                               ; preds = %70
  %75 = add nsw i32 %71, %21
  %76 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 2
  %77 = load i32, i32* %76, align 8, !tbaa !28
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %105, %97, %92, %88, %81, %74, %70, %55, %48, %24, %16, %11, %5
  %80 = phi i32 [ %54, %48 ], [ -22, %11 ], [ -22, %5 ], [ -22, %16 ], [ -22, %70 ], [ %21, %24 ], [ -22, %55 ], [ %75, %74 ], [ -22, %81 ], [ -22, %88 ], [ %93, %92 ], [ -22, %97 ], [ %110, %105 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #18
  ret i32 %80

81:                                               ; preds = %74
  %82 = sext i32 %71 to i64
  %83 = getelementptr inbounds i8, i8* %61, i64 %82
  %84 = getelementptr inbounds i8*, i8** %0, i64 2
  store i8* %83, i8** %84, align 8, !tbaa !27
  %85 = getelementptr inbounds i32, i32* %4, i64 2
  %86 = load i32, i32* %85, align 4, !tbaa !28
  %87 = icmp sgt i32 %86, %68
  br i1 %87, label %79, label %88

88:                                               ; preds = %81
  %89 = mul nsw i32 %86, %65
  %90 = sub nsw i32 2147483647, %89
  %91 = icmp sgt i32 %75, %90
  br i1 %91, label %79, label %92

92:                                               ; preds = %88
  %93 = add nsw i32 %89, %75
  %94 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %95 = load i32, i32* %94, align 4, !tbaa !28
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %79, label %97

97:                                               ; preds = %92
  %98 = sext i32 %89 to i64
  %99 = getelementptr inbounds i8, i8* %83, i64 %98
  %100 = getelementptr inbounds i8*, i8** %0, i64 3
  store i8* %99, i8** %100, align 8, !tbaa !27
  %101 = getelementptr inbounds i32, i32* %4, i64 3
  %102 = load i32, i32* %101, align 4, !tbaa !28
  %103 = sdiv i32 2147483647, %2
  %104 = icmp sgt i32 %102, %103
  br i1 %104, label %79, label %105

105:                                              ; preds = %97
  %106 = mul nsw i32 %102, %2
  %107 = sub nsw i32 2147483647, %106
  %108 = icmp sgt i32 %93, %107
  %109 = add nsw i32 %106, %93
  %110 = select i1 %108, i32 -22, i32 %109
  br label %79
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define internal fastcc void @avpriv_set_systematic_pal2(i32* nocapture, i32) unnamed_addr #7 {
  switch i32 %1, label %.preheader [
    i32 22, label %.preheader1
    i32 19, label %.preheader3
  ]

.preheader1:                                      ; preds = %2, %.preheader1
  %3 = phi i64 [ %29, %.preheader1 ], [ 0, %2 ]
  %4 = trunc i64 %3 to i32
  %5 = lshr i32 %4, 5
  %6 = lshr i32 %4, 2
  %7 = and i32 %6, 7
  %8 = and i32 %4, 2
  %9 = mul nuw nsw i32 %8, 85
  %10 = mul nuw nsw i32 %7, 9216
  %11 = mul i32 %5, 2359296
  %12 = add i32 %11, -16777216
  %13 = or i32 %10, %9
  %14 = or i32 %13, %12
  %15 = getelementptr inbounds i32, i32* %0, i64 %3
  store i32 %14, i32* %15, align 4, !tbaa !28
  %16 = or i64 %3, 1
  %17 = trunc i64 %16 to i32
  %18 = lshr i32 %17, 5
  %19 = lshr i32 %17, 2
  %20 = and i32 %19, 7
  %21 = and i32 %17, 3
  %22 = mul nuw nsw i32 %21, 85
  %23 = mul nuw nsw i32 %20, 9216
  %24 = mul i32 %18, 2359296
  %25 = add i32 %24, -16777216
  %26 = or i32 %23, %22
  %27 = or i32 %26, %25
  %28 = getelementptr inbounds i32, i32* %0, i64 %16
  store i32 %27, i32* %28, align 4, !tbaa !28
  %29 = add nuw nsw i64 %3, 2
  %30 = icmp eq i64 %29, 256
  br i1 %30, label %.loopexit, label %.preheader1

.preheader3:                                      ; preds = %2, %.preheader3
  %31 = phi i64 [ %57, %.preheader3 ], [ 0, %2 ]
  %32 = trunc i64 %31 to i32
  %33 = lshr i32 %32, 6
  %34 = mul nuw nsw i32 %33, 85
  %35 = lshr i32 %32, 3
  %36 = and i32 %35, 7
  %37 = and i32 %32, 6
  %38 = mul nuw nsw i32 %36, 9216
  %39 = mul nuw nsw i32 %37, 2359296
  %40 = add nuw nsw i32 %39, -16777216
  %41 = or i32 %40, %38
  %42 = add i32 %41, %34
  %43 = getelementptr inbounds i32, i32* %0, i64 %31
  store i32 %42, i32* %43, align 4, !tbaa !28
  %44 = or i64 %31, 1
  %45 = trunc i64 %44 to i32
  %46 = lshr i32 %45, 6
  %47 = mul nuw nsw i32 %46, 85
  %48 = lshr i32 %45, 3
  %49 = and i32 %48, 7
  %50 = and i32 %45, 7
  %51 = mul nuw nsw i32 %49, 9216
  %52 = mul nuw nsw i32 %50, 2359296
  %53 = add nuw nsw i32 %52, -16777216
  %54 = or i32 %53, %51
  %55 = add i32 %54, %47
  %56 = getelementptr inbounds i32, i32* %0, i64 %44
  store i32 %55, i32* %56, align 4, !tbaa !28
  %57 = add nuw nsw i64 %31, 2
  %58 = icmp eq i64 %57, 256
  br i1 %58, label %.loopexit, label %.preheader3

.preheader:                                       ; preds = %2, %77
  %59 = phi i64 [ %87, %77 ], [ 0, %2 ]
  %60 = trunc i64 %59 to i32
  switch i32 %1, label %.loopexit [
    i32 8, label %77
    i32 21, label %69
    i32 24, label %61
  ]

61:                                               ; preds = %.preheader
  %62 = lshr i32 %60, 3
  %63 = mul nsw i32 %62, 255
  %64 = lshr i32 %60, 1
  %65 = and i32 %64, 3
  %66 = mul nuw nsw i32 %65, 85
  %67 = and i32 %60, 1
  %68 = mul nuw nsw i32 %67, 255
  br label %77

69:                                               ; preds = %.preheader
  %70 = lshr i32 %60, 3
  %71 = mul nsw i32 %70, 255
  %72 = lshr i32 %60, 1
  %73 = and i32 %72, 3
  %74 = mul nuw nsw i32 %73, 85
  %75 = and i32 %60, 1
  %76 = mul nuw nsw i32 %75, 255
  br label %77

77:                                               ; preds = %69, %61, %.preheader
  %78 = phi i32 [ %76, %69 ], [ %63, %61 ], [ %60, %.preheader ]
  %79 = phi i32 [ %74, %69 ], [ %66, %61 ], [ %60, %.preheader ]
  %80 = phi i32 [ %71, %69 ], [ %68, %61 ], [ %60, %.preheader ]
  %81 = shl i32 %79, 8
  %82 = shl i32 %78, 16
  %83 = add i32 %82, -16777216
  %84 = add i32 %83, %81
  %85 = add i32 %84, %80
  %86 = getelementptr inbounds i32, i32* %0, i64 %59
  store i32 %85, i32* %86, align 4, !tbaa !28
  %87 = add nuw nsw i64 %59, 1
  %88 = icmp eq i64 %87, 256
  br i1 %88, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.preheader3, %.preheader1, %77, %.preheader
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_image_check_size(i32, i32, i8*) unnamed_addr #5 {
  %4 = alloca %struct.FileLogContext, align 8
  %5 = bitcast %struct.FileLogContext* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #18
  %6 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %4, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %6, align 8, !tbaa !571
  %7 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %4, i64 0, i32 1
  store i32 0, i32* %7, align 8, !tbaa !573
  %8 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %4, i64 0, i32 2
  store i8* %2, i8** %8, align 8, !tbaa !574
  %9 = icmp sgt i32 %0, 0
  %10 = icmp sgt i32 %1, 0
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %3
  %13 = add nuw i32 %0, 128
  %14 = zext i32 %13 to i64
  %15 = add nuw i32 %1, 128
  %16 = zext i32 %15 to i64
  %17 = mul nuw i64 %16, %14
  %18 = icmp ult i64 %17, 268435455
  br i1 %18, label %20, label %19

19:                                               ; preds = %12, %3
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %5, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2376, i64 0, i64 0), i32 %0, i32 %1) #18
  br label %20

20:                                               ; preds = %19, %12
  %21 = phi i32 [ -22, %19 ], [ 0, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #18
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_image_copy(i8** nocapture readonly, i32* nocapture readonly, i8** nocapture readonly, i32* nocapture readonly, i32, i32, i32) unnamed_addr #5 {
  %8 = alloca [4 x i32], align 16
  %9 = alloca [4 x i32], align 16
  %10 = tail call fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %4) #18
  %11 = icmp eq %struct.AVPixFmtDescriptor* %10, null
  br i1 %11, label %.loopexit20, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %10, i64 0, i32 4
  %14 = load i8, i8* %13, align 1, !tbaa !270
  %15 = zext i8 %14 to i32
  %16 = and i32 %15, 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %.loopexit20

18:                                               ; preds = %12
  %19 = and i32 %15, 66
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %10, i64 0, i32 1
  %23 = load i8, i8* %22, align 8, !tbaa !575
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %.loopexit20, label %25

25:                                               ; preds = %21
  %26 = zext i8 %23 to i64
  %27 = and i64 %26, 1
  %28 = icmp eq i8 %23, 1
  br i1 %28, label %.loopexit21, label %29

29:                                               ; preds = %25
  %30 = sub nuw nsw i64 %26, %27
  br label %118

31:                                               ; preds = %18
  %32 = load i8*, i8** %0, align 8, !tbaa !27
  %33 = load i32, i32* %1, align 4, !tbaa !28
  %34 = load i8*, i8** %2, align 8, !tbaa !27
  %35 = load i32, i32* %3, align 4, !tbaa !28
  %36 = icmp ne i8* %32, null
  %37 = icmp ne i8* %34, null
  %38 = and i1 %36, %37
  br i1 %38, label %39, label %.loopexit23

39:                                               ; preds = %31
  %40 = icmp slt i32 %35, 0
  %41 = sub nsw i32 0, %35
  %42 = select i1 %40, i32 %41, i32 %35
  %43 = icmp slt i32 %42, %5
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.2382, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2.2383, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.2384, i64 0, i64 0), i32 248) #18
  tail call void @abort() #27
  unreachable

45:                                               ; preds = %39
  %46 = icmp slt i32 %33, 0
  %47 = sub nsw i32 0, %33
  %48 = select i1 %46, i32 %47, i32 %33
  %49 = icmp slt i32 %48, %5
  br i1 %49, label %71, label %50

50:                                               ; preds = %45
  %51 = icmp sgt i32 %6, 0
  br i1 %51, label %52, label %.loopexit23

52:                                               ; preds = %50
  %53 = sext i32 %5 to i64
  %54 = sext i32 %33 to i64
  %55 = sext i32 %35 to i64
  %56 = add nsw i32 %6, -1
  %57 = and i32 %6, 3
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %.loopexit25, label %.preheader24

.preheader24:                                     ; preds = %52, %.preheader24
  %59 = phi i8* [ %62, %.preheader24 ], [ %32, %52 ]
  %60 = phi i8* [ %63, %.preheader24 ], [ %34, %52 ]
  %61 = phi i32 [ %64, %.preheader24 ], [ %57, %52 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %60, i64 %53, i1 false) #18
  %62 = getelementptr inbounds i8, i8* %59, i64 %54
  %63 = getelementptr inbounds i8, i8* %60, i64 %55
  %64 = add nsw i32 %61, -1
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %.loopexit25.loopexit, label %.preheader24, !llvm.loop !576

.loopexit25.loopexit:                             ; preds = %.preheader24
  %66 = sub i32 %6, %57
  br label %.loopexit25

.loopexit25:                                      ; preds = %.loopexit25.loopexit, %52
  %67 = phi i32 [ %6, %52 ], [ %66, %.loopexit25.loopexit ]
  %68 = phi i8* [ %32, %52 ], [ %62, %.loopexit25.loopexit ]
  %69 = phi i8* [ %34, %52 ], [ %63, %.loopexit25.loopexit ]
  %70 = icmp ult i32 %56, 3
  br i1 %70, label %.loopexit23, label %.preheader22

71:                                               ; preds = %45
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.2382, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4.2385, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.2384, i64 0, i64 0), i32 249) #18
  tail call void @abort() #27
  unreachable

.preheader22:                                     ; preds = %.loopexit25, %.preheader22
  %72 = phi i32 [ %83, %.preheader22 ], [ %67, %.loopexit25 ]
  %73 = phi i8* [ %81, %.preheader22 ], [ %68, %.loopexit25 ]
  %74 = phi i8* [ %82, %.preheader22 ], [ %69, %.loopexit25 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %74, i64 %53, i1 false) #18
  %75 = getelementptr inbounds i8, i8* %73, i64 %54
  %76 = getelementptr inbounds i8, i8* %74, i64 %55
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %75, i8* align 1 %76, i64 %53, i1 false) #18
  %77 = getelementptr inbounds i8, i8* %75, i64 %54
  %78 = getelementptr inbounds i8, i8* %76, i64 %55
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %78, i64 %53, i1 false) #18
  %79 = getelementptr inbounds i8, i8* %77, i64 %54
  %80 = getelementptr inbounds i8, i8* %78, i64 %55
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %80, i64 %53, i1 false) #18
  %81 = getelementptr inbounds i8, i8* %79, i64 %54
  %82 = getelementptr inbounds i8, i8* %80, i64 %55
  %83 = add nsw i32 %72, -4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %.preheader22, label %.loopexit23

.loopexit23:                                      ; preds = %.preheader22, %.loopexit25, %50, %31
  %85 = getelementptr inbounds i8*, i8** %0, i64 1
  %86 = load i8*, i8** %85, align 8, !tbaa !27
  %87 = getelementptr inbounds i8*, i8** %2, i64 1
  %88 = load i8*, i8** %87, align 8, !tbaa !27
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 1 %88, i64 1024, i1 false)
  br label %.loopexit20

.loopexit21:                                      ; preds = %118, %25
  %89 = phi i32 [ undef, %25 ], [ %136, %118 ]
  %90 = phi i64 [ 0, %25 ], [ %137, %118 ]
  %91 = phi i32 [ 0, %25 ], [ %136, %118 ]
  %92 = icmp eq i64 %27, 0
  br i1 %92, label %select.unfold, label %93

93:                                               ; preds = %.loopexit21
  %94 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %10, i64 0, i32 5, i64 %90, i32 0
  %95 = load i16, i16* %94, align 2
  %96 = and i16 %95, 3
  %97 = add nuw nsw i16 %96, 1
  %98 = zext i16 %97 to i32
  %99 = icmp ugt i32 %91, %98
  br i1 %99, label %select.unfold, label %.thread

select.unfold:                                    ; preds = %93, %.loopexit21
  %100 = phi i32 [ %89, %.loopexit21 ], [ %91, %93 ]
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %.thread, label %.loopexit20

.thread:                                          ; preds = %93, %select.unfold
  %102 = phi i32 [ %100, %select.unfold ], [ %98, %93 ]
  %103 = bitcast [4 x i32]* %8 to i8*
  %104 = bitcast [4 x i32]* %9 to i8*
  %105 = icmp ugt i32 %4, 316
  %106 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %107 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 0
  %108 = icmp slt i32 %5, 0
  %109 = add nsw i32 %5, -1
  %110 = sub nsw i32 0, %6
  %111 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %10, i64 0, i32 3
  br i1 %105, label %117, label %112

112:                                              ; preds = %.thread
  %113 = zext i32 %102 to i64
  %114 = call fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %4) #18
  %115 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %114, i64 0, i32 4
  %116 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %114, i64 0, i32 2
  br label %140

117:                                              ; preds = %.thread
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %103) #18
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #18
  br label %.loopexit18

118:                                              ; preds = %118, %29
  %119 = phi i64 [ 0, %29 ], [ %137, %118 ]
  %120 = phi i32 [ 0, %29 ], [ %136, %118 ]
  %121 = phi i64 [ %30, %29 ], [ %138, %118 ]
  %122 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %10, i64 0, i32 5, i64 %119, i32 0
  %123 = load i16, i16* %122, align 2
  %124 = and i16 %123, 3
  %125 = add nuw nsw i16 %124, 1
  %126 = zext i16 %125 to i32
  %127 = icmp ugt i32 %120, %126
  %128 = select i1 %127, i32 %120, i32 %126
  %129 = or i64 %119, 1
  %130 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %10, i64 0, i32 5, i64 %129, i32 0
  %131 = load i16, i16* %130, align 2
  %132 = and i16 %131, 3
  %133 = add nuw nsw i16 %132, 1
  %134 = zext i16 %133 to i32
  %135 = icmp ugt i32 %128, %134
  %136 = select i1 %135, i32 %128, i32 %134
  %137 = add nuw nsw i64 %119, 2
  %138 = add i64 %121, -2
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %.loopexit21, label %118

140:                                              ; preds = %.loopexit, %112
  %141 = phi i64 [ 0, %112 ], [ %242, %.loopexit ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %103) #18
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #18
  %142 = load i8, i8* %115, align 1, !tbaa !270
  %143 = and i8 %142, 8
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %145, label %.loopexit18

145:                                              ; preds = %140
  call fastcc void @av_image_fill_max_pixsteps(i32* nonnull %106, i32* nonnull %107, %struct.AVPixFmtDescriptor* nonnull %114) #18
  %146 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 %141
  %147 = load i32, i32* %146, align 4, !tbaa !28
  br i1 %108, label %.loopexit18, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %141
  %150 = load i32, i32* %149, align 4, !tbaa !28
  %151 = add i32 %150, -1
  %152 = icmp ult i32 %151, 2
  br i1 %152, label %153, label %156

153:                                              ; preds = %148
  %154 = load i8, i8* %116, align 1, !tbaa !569
  %155 = zext i8 %154 to i32
  br label %156

156:                                              ; preds = %153, %148
  %157 = phi i32 [ %155, %153 ], [ 0, %148 ]
  %158 = shl i32 1, %157
  %159 = add i32 %109, %158
  %160 = ashr i32 %159, %157
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %165, label %162

162:                                              ; preds = %156
  %163 = sdiv i32 2147483647, %160
  %164 = icmp slt i32 %163, %147
  br i1 %164, label %.loopexit18, label %165

.loopexit18:                                      ; preds = %162, %145, %140, %117
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %103) #18
  br label %.loopexit19

165:                                              ; preds = %162, %156
  %166 = mul nsw i32 %160, %147
  %167 = load i8, i8* %115, align 1, !tbaa !270
  %168 = and i8 %167, 4
  %169 = icmp eq i8 %168, 0
  %170 = add nsw i32 %166, 7
  %171 = ashr i32 %170, 3
  %172 = select i1 %169, i32 %166, i32 %171
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %103) #18
  %173 = icmp slt i32 %172, 0
  br i1 %173, label %.loopexit19, label %174

174:                                              ; preds = %165
  %175 = trunc i64 %141 to i32
  %176 = add i32 %175, -1
  %177 = icmp ult i32 %176, 2
  br i1 %177, label %178, label %183

178:                                              ; preds = %174
  %179 = load i8, i8* %111, align 2, !tbaa !570
  %180 = zext i8 %179 to i32
  %181 = ashr i32 %110, %180
  %182 = sub nsw i32 0, %181
  br label %183

183:                                              ; preds = %178, %174
  %184 = phi i32 [ %182, %178 ], [ %6, %174 ]
  %185 = getelementptr inbounds i8*, i8** %0, i64 %141
  %186 = load i8*, i8** %185, align 8, !tbaa !27
  %187 = getelementptr inbounds i32, i32* %1, i64 %141
  %188 = load i32, i32* %187, align 4, !tbaa !28
  %189 = getelementptr inbounds i8*, i8** %2, i64 %141
  %190 = load i8*, i8** %189, align 8, !tbaa !27
  %191 = getelementptr inbounds i32, i32* %3, i64 %141
  %192 = load i32, i32* %191, align 4, !tbaa !28
  %193 = icmp ne i8* %186, null
  %194 = icmp ne i8* %190, null
  %195 = and i1 %193, %194
  br i1 %195, label %196, label %.loopexit

196:                                              ; preds = %183
  %197 = icmp slt i32 %192, 0
  %198 = sub nsw i32 0, %192
  %199 = select i1 %197, i32 %198, i32 %192
  %200 = icmp slt i32 %199, %172
  br i1 %200, label %201, label %202

201:                                              ; preds = %196
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.2382, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2.2383, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.2384, i64 0, i64 0), i32 248) #18
  call void @abort() #27
  unreachable

202:                                              ; preds = %196
  %203 = icmp slt i32 %188, 0
  %204 = sub nsw i32 0, %188
  %205 = select i1 %203, i32 %204, i32 %188
  %206 = icmp slt i32 %205, %172
  br i1 %206, label %228, label %207

207:                                              ; preds = %202
  %208 = icmp sgt i32 %184, 0
  br i1 %208, label %209, label %.loopexit

209:                                              ; preds = %207
  %210 = sext i32 %172 to i64
  %211 = sext i32 %188 to i64
  %212 = sext i32 %192 to i64
  %213 = add nsw i32 %184, -1
  %214 = and i32 %184, 3
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %.loopexit17, label %.preheader16

.preheader16:                                     ; preds = %209, %.preheader16
  %216 = phi i8* [ %219, %.preheader16 ], [ %186, %209 ]
  %217 = phi i8* [ %220, %.preheader16 ], [ %190, %209 ]
  %218 = phi i32 [ %221, %.preheader16 ], [ %214, %209 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %216, i8* align 1 %217, i64 %210, i1 false) #18
  %219 = getelementptr inbounds i8, i8* %216, i64 %211
  %220 = getelementptr inbounds i8, i8* %217, i64 %212
  %221 = add nsw i32 %218, -1
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %.loopexit17.loopexit, label %.preheader16, !llvm.loop !577

.loopexit17.loopexit:                             ; preds = %.preheader16
  %223 = sub i32 %184, %214
  br label %.loopexit17

.loopexit17:                                      ; preds = %.loopexit17.loopexit, %209
  %224 = phi i32 [ %184, %209 ], [ %223, %.loopexit17.loopexit ]
  %225 = phi i8* [ %186, %209 ], [ %219, %.loopexit17.loopexit ]
  %226 = phi i8* [ %190, %209 ], [ %220, %.loopexit17.loopexit ]
  %227 = icmp ult i32 %213, 3
  br i1 %227, label %.loopexit, label %.preheader

228:                                              ; preds = %202
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.2382, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4.2385, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.2384, i64 0, i64 0), i32 249) #18
  call void @abort() #27
  unreachable

.preheader:                                       ; preds = %.loopexit17, %.preheader
  %229 = phi i32 [ %240, %.preheader ], [ %224, %.loopexit17 ]
  %230 = phi i8* [ %238, %.preheader ], [ %225, %.loopexit17 ]
  %231 = phi i8* [ %239, %.preheader ], [ %226, %.loopexit17 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %230, i8* align 1 %231, i64 %210, i1 false) #18
  %232 = getelementptr inbounds i8, i8* %230, i64 %211
  %233 = getelementptr inbounds i8, i8* %231, i64 %212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %232, i8* align 1 %233, i64 %210, i1 false) #18
  %234 = getelementptr inbounds i8, i8* %232, i64 %211
  %235 = getelementptr inbounds i8, i8* %233, i64 %212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %234, i8* align 1 %235, i64 %210, i1 false) #18
  %236 = getelementptr inbounds i8, i8* %234, i64 %211
  %237 = getelementptr inbounds i8, i8* %235, i64 %212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %236, i8* align 1 %237, i64 %210, i1 false) #18
  %238 = getelementptr inbounds i8, i8* %236, i64 %211
  %239 = getelementptr inbounds i8, i8* %237, i64 %212
  %240 = add nsw i32 %229, -4
  %241 = icmp sgt i32 %240, 0
  br i1 %241, label %.preheader, label %.loopexit

.loopexit19:                                      ; preds = %165, %.loopexit18
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5.2388, i64 0, i64 0)) #18
  br label %.loopexit20

.loopexit:                                        ; preds = %.preheader, %.loopexit17, %207, %183
  %242 = add nuw nsw i64 %141, 1
  %243 = icmp eq i64 %242, %113
  br i1 %243, label %.loopexit20, label %140

.loopexit20:                                      ; preds = %.loopexit, %.loopexit19, %select.unfold, %.loopexit23, %21, %12, %7
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_image_fill_arrays(i8** nocapture, i32* nocapture, i8*, i32, i32, i32) unnamed_addr #5 {
  %7 = alloca %struct.FileLogContext, align 8
  %8 = bitcast %struct.FileLogContext* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #18
  %9 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %7, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %9, align 8, !tbaa !571
  %10 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %7, i64 0, i32 1
  store i32 0, i32* %10, align 8, !tbaa !573
  %11 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %7, i64 0, i32 2
  store i8* null, i8** %11, align 8, !tbaa !574
  %12 = icmp sgt i32 %4, 0
  %13 = icmp sgt i32 %5, 0
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %22

15:                                               ; preds = %6
  %16 = add nuw i32 %4, 128
  %17 = zext i32 %16 to i64
  %18 = add nuw i32 %5, 128
  %19 = zext i32 %18 to i64
  %20 = mul nuw i64 %19, %17
  %21 = icmp ult i64 %20, 268435455
  br i1 %21, label %23, label %22

22:                                               ; preds = %15, %6
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %8, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2376, i64 0, i64 0), i32 %4, i32 %5) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #18
  br label %31

23:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #18
  %24 = tail call fastcc i32 @av_image_fill_linesizes(i32* %1, i32 %3, i32 %4)
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %23
  %27 = tail call fastcc i32 @av_image_fill_pointers(i8** %0, i32 %3, i32 %4, i8* null, i32* %1)
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %26
  %30 = tail call fastcc i32 @av_image_fill_pointers(i8** %0, i32 %3, i32 %5, i8* %2, i32* nonnull %1)
  br label %31

31:                                               ; preds = %29, %26, %23, %22
  %32 = phi i32 [ %30, %29 ], [ %24, %23 ], [ %27, %26 ], [ -22, %22 ]
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_image_get_buffer_size(i32, i32, i32) unnamed_addr #5 {
  %4 = alloca %struct.FileLogContext, align 8
  %5 = alloca [4 x i8*], align 16
  %6 = alloca [4 x i32], align 16
  %7 = tail call fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %0) #18
  %8 = bitcast [4 x i8*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #18
  %9 = bitcast [4 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #18
  %10 = icmp eq %struct.AVPixFmtDescriptor* %7, null
  br i1 %10, label %38, label %11

11:                                               ; preds = %3
  %12 = bitcast %struct.FileLogContext* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #18
  %13 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %4, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %13, align 8, !tbaa !571
  %14 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %4, i64 0, i32 1
  store i32 0, i32* %14, align 8, !tbaa !573
  %15 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %4, i64 0, i32 2
  store i8* null, i8** %15, align 8, !tbaa !574
  %16 = icmp sgt i32 %1, 0
  %17 = icmp sgt i32 %2, 0
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = add nuw i32 %1, 128
  %21 = zext i32 %20 to i64
  %22 = add nuw i32 %2, 128
  %23 = zext i32 %22 to i64
  %24 = mul nuw i64 %23, %21
  %25 = icmp ult i64 %24, 268435455
  br i1 %25, label %27, label %26

26:                                               ; preds = %19, %11
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %12, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2376, i64 0, i64 0), i32 %1, i32 %2) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #18
  br label %38

27:                                               ; preds = %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #18
  %28 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %7, i64 0, i32 4
  %29 = load i8, i8* %28, align 1, !tbaa !270
  %30 = and i8 %29, 64
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %27
  %33 = mul nsw i32 %2, %1
  br label %38

34:                                               ; preds = %27
  %35 = getelementptr inbounds [4 x i8*], [4 x i8*]* %5, i64 0, i64 0
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %37 = call fastcc i32 @av_image_fill_arrays(i8** nonnull %35, i32* nonnull %36, i8* null, i32 %0, i32 %1, i32 %2)
  br label %38

38:                                               ; preds = %34, %32, %26, %3
  %39 = phi i32 [ %33, %32 ], [ %37, %34 ], [ -22, %3 ], [ -22, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #18
  ret i32 %39
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_image_copy_to_buffer(i8*, i32, i8** nocapture readonly, i32* nocapture readonly, i32, i32, i32) unnamed_addr #5 {
  %8 = alloca %struct.FileLogContext, align 8
  %9 = alloca [4 x i8*], align 16
  %10 = alloca [4 x i32], align 16
  %11 = alloca [4 x i32], align 16
  %12 = bitcast [4 x i32]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #18
  %13 = tail call fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %4) #18
  %14 = bitcast [4 x i8*]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #18
  %15 = bitcast [4 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #18
  %16 = icmp eq %struct.AVPixFmtDescriptor* %13, null
  br i1 %16, label %44, label %17

17:                                               ; preds = %7
  %18 = bitcast %struct.FileLogContext* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #18
  %19 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %8, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %19, align 8, !tbaa !571
  %20 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %8, i64 0, i32 1
  store i32 0, i32* %20, align 8, !tbaa !573
  %21 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %8, i64 0, i32 2
  store i8* null, i8** %21, align 8, !tbaa !574
  %22 = icmp sgt i32 %5, 0
  %23 = icmp sgt i32 %6, 0
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %32

25:                                               ; preds = %17
  %26 = add nuw i32 %5, 128
  %27 = zext i32 %26 to i64
  %28 = add nuw i32 %6, 128
  %29 = zext i32 %28 to i64
  %30 = mul nuw i64 %29, %27
  %31 = icmp ult i64 %30, 268435455
  br i1 %31, label %33, label %32

32:                                               ; preds = %25, %17
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %18, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2376, i64 0, i64 0), i32 %5, i32 %6) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #18
  br label %44

33:                                               ; preds = %25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #18
  %34 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 4
  %35 = load i8, i8* %34, align 1, !tbaa !270
  %36 = and i8 %35, 64
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = mul nsw i32 %6, %5
  br label %44

40:                                               ; preds = %33
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 0
  %42 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 0
  %43 = call fastcc i32 @av_image_fill_arrays(i8** nonnull %41, i32* nonnull %42, i8* null, i32 %4, i32 %5, i32 %6) #18
  br label %44

44:                                               ; preds = %40, %38, %32, %7
  %45 = phi i32 [ %39, %38 ], [ %43, %40 ], [ -22, %7 ], [ -22, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #18
  %46 = icmp sgt i32 %45, %1
  %47 = icmp slt i32 %45, 0
  %48 = or i1 %46, %47
  br i1 %48, label %.loopexit, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 1
  %51 = load i8, i8* %50, align 8, !tbaa !575
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %113, label %53

53:                                               ; preds = %49
  %54 = zext i8 %51 to i64
  %55 = add nsw i64 %54, -1
  %56 = and i64 %54, 3
  %57 = icmp ult i64 %55, 3
  br i1 %57, label %.loopexit2, label %58

58:                                               ; preds = %53
  %59 = sub nuw nsw i64 %54, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %91, %60 ]
  %62 = phi i32 [ 0, %58 ], [ %90, %60 ]
  %63 = phi i64 [ %59, %58 ], [ %92, %60 ]
  %64 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %61, i32 0
  %65 = load i16, i16* %64, align 2
  %66 = and i16 %65, 3
  %67 = zext i16 %66 to i32
  %68 = icmp ult i32 %62, %67
  %69 = select i1 %68, i32 %67, i32 %62
  %70 = or i64 %61, 1
  %71 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %70, i32 0
  %72 = load i16, i16* %71, align 2
  %73 = and i16 %72, 3
  %74 = zext i16 %73 to i32
  %75 = icmp ult i32 %69, %74
  %76 = select i1 %75, i32 %74, i32 %69
  %77 = or i64 %61, 2
  %78 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %77, i32 0
  %79 = load i16, i16* %78, align 2
  %80 = and i16 %79, 3
  %81 = zext i16 %80 to i32
  %82 = icmp ult i32 %76, %81
  %83 = select i1 %82, i32 %81, i32 %76
  %84 = or i64 %61, 3
  %85 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %84, i32 0
  %86 = load i16, i16* %85, align 2
  %87 = and i16 %86, 3
  %88 = zext i16 %87 to i32
  %89 = icmp ult i32 %83, %88
  %90 = select i1 %89, i32 %88, i32 %83
  %91 = add nuw nsw i64 %61, 4
  %92 = add i64 %63, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %.loopexit2, label %60

.loopexit2:                                       ; preds = %60, %53
  %94 = phi i32 [ undef, %53 ], [ %90, %60 ]
  %95 = phi i64 [ 0, %53 ], [ %91, %60 ]
  %96 = phi i32 [ 0, %53 ], [ %90, %60 ]
  %97 = icmp eq i64 %56, 0
  br i1 %97, label %.loopexit1, label %.preheader

.preheader:                                       ; preds = %.loopexit2, %.preheader
  %98 = phi i64 [ %107, %.preheader ], [ %95, %.loopexit2 ]
  %99 = phi i32 [ %106, %.preheader ], [ %96, %.loopexit2 ]
  %100 = phi i64 [ %108, %.preheader ], [ %56, %.loopexit2 ]
  %101 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 5, i64 %98, i32 0
  %102 = load i16, i16* %101, align 2
  %103 = and i16 %102, 3
  %104 = zext i16 %103 to i32
  %105 = icmp ult i32 %99, %104
  %106 = select i1 %105, i32 %104, i32 %99
  %107 = add nuw nsw i64 %98, 1
  %108 = add nsw i64 %100, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %.loopexit1, label %.preheader, !llvm.loop !578

.loopexit1:                                       ; preds = %.preheader, %.loopexit2
  %110 = phi i32 [ %94, %.loopexit2 ], [ %106, %.preheader ]
  %111 = add i32 %110, 1
  %112 = zext i32 %111 to i64
  br label %113

113:                                              ; preds = %.loopexit1, %49
  %114 = phi i64 [ 1, %49 ], [ %112, %.loopexit1 ]
  %115 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 0
  %116 = call fastcc i32 @av_image_fill_linesizes(i32* nonnull %115, i32 %4, i32 %5)
  %117 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 3
  %118 = add i32 %6, -1
  br label %119

119:                                              ; preds = %173, %113
  %120 = phi i64 [ %175, %173 ], [ 0, %113 ]
  %121 = phi i8* [ %174, %173 ], [ %0, %113 ]
  %122 = trunc i64 %120 to i32
  %123 = add i32 %122, -1
  %124 = icmp ult i32 %123, 2
  br i1 %124, label %125, label %128

125:                                              ; preds = %119
  %126 = load i8, i8* %117, align 2, !tbaa !570
  %127 = zext i8 %126 to i32
  br label %128

128:                                              ; preds = %125, %119
  %129 = phi i32 [ %127, %125 ], [ 0, %119 ]
  %130 = shl i32 1, %129
  %131 = add i32 %118, %130
  %132 = ashr i32 %131, %129
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %173

134:                                              ; preds = %128
  %135 = getelementptr inbounds i8*, i8** %2, i64 %120
  %136 = load i8*, i8** %135, align 8, !tbaa !27
  %137 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %120
  %138 = getelementptr inbounds i32, i32* %3, i64 %120
  %139 = load i32, i32* %137, align 4, !tbaa !28
  %140 = and i32 %132, 1
  %141 = icmp eq i32 %132, 1
  br i1 %141, label %.thread, label %142

142:                                              ; preds = %134
  %143 = sub nuw nsw i32 %132, %140
  br label %144

144:                                              ; preds = %144, %142
  %145 = phi i32 [ %139, %142 ], [ %156, %144 ]
  %146 = phi i8* [ %136, %142 ], [ %161, %144 ]
  %147 = phi i8* [ %121, %142 ], [ %158, %144 ]
  %148 = phi i32 [ %143, %142 ], [ %162, %144 ]
  %149 = sext i32 %145 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %147, i8* align 1 %146, i64 %149, i1 false)
  %150 = load i32, i32* %137, align 4, !tbaa !28
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %147, i64 %151
  %153 = load i32, i32* %138, align 4, !tbaa !28
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %146, i64 %154
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %152, i8* align 1 %155, i64 %151, i1 false)
  %156 = load i32, i32* %137, align 4, !tbaa !28
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %152, i64 %157
  %159 = load i32, i32* %138, align 4, !tbaa !28
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %155, i64 %160
  %162 = add i32 %148, -2
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %144

164:                                              ; preds = %144
  %165 = icmp eq i32 %140, 0
  br i1 %165, label %173, label %.thread

.thread:                                          ; preds = %134, %164
  %166 = phi i8* [ %158, %164 ], [ %121, %134 ]
  %167 = phi i8* [ %161, %164 ], [ %136, %134 ]
  %168 = phi i32 [ %156, %164 ], [ %139, %134 ]
  %169 = sext i32 %168 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %166, i8* align 1 %167, i64 %169, i1 false)
  %170 = load i32, i32* %137, align 4, !tbaa !28
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8, i8* %166, i64 %171
  br label %173

173:                                              ; preds = %.thread, %164, %128
  %174 = phi i8* [ %121, %128 ], [ %158, %164 ], [ %172, %.thread ]
  %175 = add nuw nsw i64 %120, 1
  %176 = icmp eq i64 %175, %114
  br i1 %176, label %177, label %119

177:                                              ; preds = %173
  %178 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %13, i64 0, i32 4
  %179 = load i8, i8* %178, align 1, !tbaa !270
  %180 = and i8 %179, 2
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %.loopexit, label %182

182:                                              ; preds = %177
  %183 = ptrtoint i8* %174 to i64
  %184 = add i64 %183, 3
  %185 = and i64 %184, -4
  %186 = inttoptr i64 %185 to i32*
  %187 = getelementptr inbounds i8*, i8** %2, i64 1
  br label %188

188:                                              ; preds = %188, %182
  %189 = phi i64 [ 0, %182 ], [ %217, %188 ]
  %190 = load i8*, i8** %187, align 8, !tbaa !27
  %191 = shl nsw i64 %189, 2
  %192 = getelementptr inbounds i8, i8* %190, i64 %191
  %193 = bitcast i8* %192 to i32*
  %194 = load i32, i32* %193, align 1, !tbaa !33
  %195 = getelementptr inbounds i32, i32* %186, i64 %189
  store i32 %194, i32* %195, align 4, !tbaa !33
  %196 = or i64 %189, 1
  %197 = load i8*, i8** %187, align 8, !tbaa !27
  %198 = shl nsw i64 %196, 2
  %199 = getelementptr inbounds i8, i8* %197, i64 %198
  %200 = bitcast i8* %199 to i32*
  %201 = load i32, i32* %200, align 1, !tbaa !33
  %202 = getelementptr inbounds i32, i32* %186, i64 %196
  store i32 %201, i32* %202, align 4, !tbaa !33
  %203 = or i64 %189, 2
  %204 = load i8*, i8** %187, align 8, !tbaa !27
  %205 = shl nsw i64 %203, 2
  %206 = getelementptr inbounds i8, i8* %204, i64 %205
  %207 = bitcast i8* %206 to i32*
  %208 = load i32, i32* %207, align 1, !tbaa !33
  %209 = getelementptr inbounds i32, i32* %186, i64 %203
  store i32 %208, i32* %209, align 4, !tbaa !33
  %210 = or i64 %189, 3
  %211 = load i8*, i8** %187, align 8, !tbaa !27
  %212 = shl nsw i64 %210, 2
  %213 = getelementptr inbounds i8, i8* %211, i64 %212
  %214 = bitcast i8* %213 to i32*
  %215 = load i32, i32* %214, align 1, !tbaa !33
  %216 = getelementptr inbounds i32, i32* %186, i64 %210
  store i32 %215, i32* %216, align 4, !tbaa !33
  %217 = add nuw nsw i64 %189, 4
  %218 = icmp eq i64 %217, 256
  br i1 %218, label %.loopexit, label %188

.loopexit:                                        ; preds = %188, %177, %44
  %219 = phi i32 [ -22, %44 ], [ %45, %177 ], [ %45, %188 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #18
  ret i32 %219
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log.f64(double) #6

; Function Attrs: norecurse nounwind readonly uwtable
define internal i8* @av_default_item_name(i8* nocapture readonly) #15 {
  %2 = bitcast i8* %0 to %struct.AVClass**
  %3 = load %struct.AVClass*, %struct.AVClass** %2, align 8, !tbaa !27
  %4 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %3, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8, !tbaa !579
  ret i8* %5
}

; Function Attrs: nounwind uwtable
define internal fastcc void @format_line(i8*, i8* nocapture readonly, %struct.__va_list_tag*, [1024 x i8]* nocapture, i32*) unnamed_addr #5 {
  %6 = icmp eq i8* %0, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %5
  %8 = bitcast i8* %0 to %struct.AVClass**
  %9 = load %struct.AVClass*, %struct.AVClass** %8, align 8, !tbaa !27
  br label %10

10:                                               ; preds = %7, %5
  %11 = phi %struct.AVClass* [ %9, %7 ], [ null, %5 ]
  %12 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 2, i64 0
  store i8 0, i8* %12, align 1, !tbaa !33
  %13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 1, i64 0
  store i8 0, i8* %13, align 1, !tbaa !33
  %14 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  store i8 0, i8* %14, align 1, !tbaa !33
  %15 = icmp ne i32* %4, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %10
  %17 = getelementptr inbounds i32, i32* %4, i64 1
  store i32 16, i32* %17, align 4, !tbaa !28
  store i32 16, i32* %4, align 4, !tbaa !28
  br label %18

18:                                               ; preds = %16, %10
  %19 = load i32, i32* @av_log_default_callback.print_prefix, align 4, !tbaa !28
  %20 = icmp ne i32 %19, 0
  %21 = icmp ne %struct.AVClass* %11, null
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %108

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %11, i64 0, i32 5
  %25 = load i32, i32* %24, align 8, !tbaa !581
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %71, label %27

27:                                               ; preds = %23
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds i8, i8* %0, i64 %28
  %30 = bitcast i8* %29 to %struct.AVClass***
  %31 = load %struct.AVClass**, %struct.AVClass*** %30, align 8, !tbaa !27
  %32 = icmp eq %struct.AVClass** %31, null
  br i1 %32, label %71, label %33

33:                                               ; preds = %27
  %34 = load %struct.AVClass*, %struct.AVClass** %31, align 8, !tbaa !27
  %35 = icmp eq %struct.AVClass* %34, null
  br i1 %35, label %71, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %34, i64 0, i32 1
  %38 = load i8* (i8*)*, i8* (i8*)** %37, align 8, !tbaa !582
  %39 = bitcast %struct.AVClass** %31 to i8*
  %40 = tail call i8* %38(i8* nonnull %39) #18
  %41 = tail call i32 (i8*, i64, i8*, ...) @snprintf(i8* %14, i64 1024, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.2400, i64 0, i64 0), i8* %40, %struct.AVClass** nonnull %31) #18
  br i1 %15, label %42, label %103

42:                                               ; preds = %36
  %43 = load i32, i32* %24, align 8, !tbaa !581
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %0, i64 %44
  %46 = bitcast i8* %45 to %struct.AVClass**
  %47 = load %struct.AVClass*, %struct.AVClass** %46, align 8, !tbaa !27
  %48 = icmp eq %struct.AVClass* %47, null
  br i1 %48, label %69, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %47, i64 0, i32 3
  %51 = load i32, i32* %50, align 8, !tbaa !583
  %52 = and i32 %51, 252
  %53 = icmp ult i32 %52, 100
  %54 = icmp slt i32 %51, 3357440
  %55 = or i1 %54, %53
  br i1 %55, label %69, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %47, i64 0, i32 8
  %58 = load i32, i32* %57, align 8, !tbaa !584
  %59 = icmp ugt i32 %58, 10
  br i1 %59, label %69, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %47, i64 0, i32 9
  %62 = load i32 (i8*)*, i32 (i8*)** %61, align 8, !tbaa !585
  %63 = icmp eq i32 (i8*)* %62, null
  br i1 %63, label %67, label %64

64:                                               ; preds = %60
  %65 = tail call i32 %62(i8* nonnull %45) #18
  %66 = add i32 %65, 16
  br label %69

67:                                               ; preds = %60
  %68 = add nuw nsw i32 %58, 16
  br label %69

69:                                               ; preds = %67, %64, %56, %49, %42
  %70 = phi i32 [ %66, %64 ], [ %68, %67 ], [ 16, %42 ], [ 16, %56 ], [ 16, %49 ]
  store i32 %70, i32* %4, align 4, !tbaa !28
  br label %71

71:                                               ; preds = %69, %33, %27, %23
  %72 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %11, i64 0, i32 1
  %73 = load i8* (i8*)*, i8* (i8*)** %72, align 8, !tbaa !582
  %74 = tail call i8* %73(i8* %0) #18
  %75 = tail call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %13, i64 1024, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.2400, i64 0, i64 0), i8* %74, i8* %0) #18
  br i1 %15, label %76, label %108

76:                                               ; preds = %71
  %77 = bitcast i8* %0 to %struct.AVClass**
  %78 = load %struct.AVClass*, %struct.AVClass** %77, align 8, !tbaa !27
  %79 = icmp eq %struct.AVClass* %78, null
  br i1 %79, label %100, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %78, i64 0, i32 3
  %82 = load i32, i32* %81, align 8, !tbaa !583
  %83 = and i32 %82, 252
  %84 = icmp ult i32 %83, 100
  %85 = icmp slt i32 %82, 3357440
  %86 = or i1 %85, %84
  br i1 %86, label %100, label %87

87:                                               ; preds = %80
  %88 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %78, i64 0, i32 8
  %89 = load i32, i32* %88, align 8, !tbaa !584
  %90 = icmp ugt i32 %89, 10
  br i1 %90, label %100, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %78, i64 0, i32 9
  %93 = load i32 (i8*)*, i32 (i8*)** %92, align 8, !tbaa !585
  %94 = icmp eq i32 (i8*)* %93, null
  br i1 %94, label %98, label %95

95:                                               ; preds = %91
  %96 = tail call i32 %93(i8* nonnull %0) #18
  %97 = add i32 %96, 16
  br label %100

98:                                               ; preds = %91
  %99 = add nuw nsw i32 %89, 16
  br label %100

100:                                              ; preds = %98, %95, %87, %80, %76
  %101 = phi i32 [ %97, %95 ], [ %99, %98 ], [ 16, %76 ], [ 16, %87 ], [ 16, %80 ]
  %102 = getelementptr inbounds i32, i32* %4, i64 1
  store i32 %101, i32* %102, align 4, !tbaa !28
  br label %108

103:                                              ; preds = %36
  %104 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %11, i64 0, i32 1
  %105 = load i8* (i8*)*, i8* (i8*)** %104, align 8, !tbaa !582
  %106 = tail call i8* %105(i8* nonnull %0) #18
  %107 = tail call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %13, i64 1024, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.2400, i64 0, i64 0), i8* %106, i8* nonnull %0) #18
  br label %108

108:                                              ; preds = %103, %100, %71, %18
  %109 = tail call i32 @vsnprintf(i8* nonnull %12, i64 1024, i8* %1, %struct.__va_list_tag* %2) #18
  %110 = tail call i64 @strlen(i8* nonnull %12) #28
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %118, label %112

112:                                              ; preds = %108
  %113 = add i64 %110, -1
  %114 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 2, i64 %113
  %115 = load i8, i8* %114, align 1, !tbaa !33
  %116 = icmp eq i8 %115, 10
  %117 = zext i1 %116 to i32
  br label %118

118:                                              ; preds = %112, %108
  %119 = phi i32 [ 0, %108 ], [ %117, %112 ]
  store i32 %119, i32* @av_log_default_callback.print_prefix, align 4, !tbaa !28
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_log_default_callback(i8*, i32, i8* nocapture readonly, %struct.__va_list_tag*) unnamed_addr #5 {
  %5 = alloca [3 x [1024 x i8]], align 16
  %6 = alloca [1024 x i8], align 16
  %7 = alloca [2 x i32], align 4
  %8 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* %5, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3072, i8* nonnull %8) #18
  %9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %9) #18
  %10 = bitcast [2 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #18
  %11 = icmp sgt i32 %1, 32
  br i1 %11, label %73, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* %5, i64 0, i64 0
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  call fastcc void @format_line(i8* %0, i8* %2, %struct.__va_list_tag* %3, [1024 x i8]* nonnull %13, i32* nonnull %14)
  %15 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* %5, i64 0, i64 1, i64 0
  %16 = getelementptr inbounds [3 x [1024 x i8]], [3 x [1024 x i8]]* %5, i64 0, i64 2, i64 0
  %17 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %9, i64 1024, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2399, i64 0, i64 0), i8* nonnull %8, i8* nonnull %15, i8* nonnull %16) #18
  %18 = load i32, i32* @av_log_default_callback.is_atty, align 4, !tbaa !28
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %12
  %21 = call i32 @isatty(i32 2) #18
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32 -1, i32 1
  store i32 %23, i32* @av_log_default_callback.is_atty, align 4, !tbaa !28
  br label %24

24:                                               ; preds = %20, %12
  %25 = call i8* @strcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @av_log_default_callback.prev, i64 0, i64 0), i8* nonnull %9) #18
  %26 = load i8, i8* %8, align 16, !tbaa !33
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %.loopexit12, label %.preheader11

.preheader11:                                     ; preds = %24, %35
  %28 = phi i8 [ %37, %35 ], [ %26, %24 ]
  %29 = phi i8* [ %36, %35 ], [ %8, %24 ]
  %30 = icmp ult i8 %28, 8
  %31 = add i8 %28, -14
  %32 = icmp ult i8 %31, 18
  %33 = or i1 %30, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %.preheader11
  store i8 63, i8* %29, align 1, !tbaa !33
  br label %35

35:                                               ; preds = %34, %.preheader11
  %36 = getelementptr inbounds i8, i8* %29, i64 1
  %37 = load i8, i8* %36, align 1, !tbaa !33
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %.loopexit12, label %.preheader11

.loopexit12:                                      ; preds = %35, %24
  %39 = load i32, i32* %14, align 4, !tbaa !28
  call fastcc void @colored_fputs(i32 %39, i8* nonnull %8)
  %40 = load i8, i8* %15, align 16, !tbaa !33
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %.loopexit10, label %.preheader9

.preheader9:                                      ; preds = %.loopexit12, %49
  %42 = phi i8 [ %51, %49 ], [ %40, %.loopexit12 ]
  %43 = phi i8* [ %50, %49 ], [ %15, %.loopexit12 ]
  %44 = icmp ult i8 %42, 8
  %45 = add i8 %42, -14
  %46 = icmp ult i8 %45, 18
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %.preheader9
  store i8 63, i8* %43, align 1, !tbaa !33
  br label %49

49:                                               ; preds = %48, %.preheader9
  %50 = getelementptr inbounds i8, i8* %43, i64 1
  %51 = load i8, i8* %50, align 1, !tbaa !33
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %.loopexit10, label %.preheader9

.loopexit10:                                      ; preds = %49, %.loopexit12
  %53 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  %54 = load i32, i32* %53, align 4, !tbaa !28
  call fastcc void @colored_fputs(i32 %54, i8* nonnull %15)
  %55 = load i8, i8* %16, align 16, !tbaa !33
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %.loopexit10, %64
  %57 = phi i8 [ %66, %64 ], [ %55, %.loopexit10 ]
  %58 = phi i8* [ %65, %64 ], [ %16, %.loopexit10 ]
  %59 = icmp ult i8 %57, 8
  %60 = add i8 %57, -14
  %61 = icmp ult i8 %60, 18
  %62 = or i1 %59, %61
  br i1 %62, label %63, label %64

63:                                               ; preds = %.preheader
  store i8 63, i8* %58, align 1, !tbaa !33
  br label %64

64:                                               ; preds = %63, %.preheader
  %65 = getelementptr inbounds i8, i8* %58, i64 1
  %66 = load i8, i8* %65, align 1, !tbaa !33
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %64, %.loopexit10
  %68 = ashr i32 %1, 3
  %69 = icmp slt i32 %68, 6
  %70 = select i1 %69, i32 %68, i32 6
  %71 = icmp sgt i32 %70, 0
  %72 = select i1 %71, i32 %70, i32 0
  call fastcc void @colored_fputs(i32 %72, i8* nonnull %16)
  br label %73

73:                                               ; preds = %.loopexit, %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #18
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #18
  call void @llvm.lifetime.end.p0i8(i64 3072, i8* nonnull %8) #18
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @isatty(i32) local_unnamed_addr #12

; Function Attrs: nounwind uwtable
define internal fastcc void @colored_fputs(i32, i8* nocapture readonly) unnamed_addr #5 {
  %3 = load i32, i32* @use_color, align 4, !tbaa !28
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %5, label %27

5:                                                ; preds = %2
  %6 = tail call i8* @getenv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4.2404, i64 0, i64 0)) #18
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %21

8:                                                ; preds = %5
  %9 = tail call i8* @getenv(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5.2405, i64 0, i64 0)) #18
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %21

11:                                               ; preds = %8
  %12 = tail call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.2406, i64 0, i64 0)) #18
  %13 = icmp eq i8* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = tail call i32 @isatty(i32 2) #18
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %14, %11
  %18 = tail call i8* @getenv(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7.2407, i64 0, i64 0)) #18
  %19 = icmp ne i8* %18, null
  %20 = zext i1 %19 to i32
  br label %21

21:                                               ; preds = %17, %14, %8, %5
  %22 = phi i32 [ 0, %8 ], [ 0, %5 ], [ 1, %14 ], [ %20, %17 ]
  store i32 %22, i32* @use_color, align 4, !tbaa !28
  %23 = tail call i8* @getenv(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8.2408, i64 0, i64 0)) #18
  %24 = icmp eq i8* %23, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %21
  %26 = shl nuw nsw i32 %22, 8
  store i32 %26, i32* @use_color, align 4, !tbaa !28
  br label %27

27:                                               ; preds = %25, %21, %2
  %28 = phi i32 [ %22, %21 ], [ %26, %25 ], [ %3, %2 ]
  switch i32 %28, label %48 [
    i32 1, label %29
    i32 256, label %38
  ]

29:                                               ; preds = %27
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !27
  %31 = sext i32 %0 to i64
  %32 = getelementptr inbounds [27 x i32], [27 x i32]* @color, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4, !tbaa !28
  %34 = lshr i32 %33, 4
  %35 = and i32 %34, 15
  %36 = and i32 %33, 15
  %37 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9.2409, i64 0, i64 0), i32 %35, i32 %36) #31
  br label %48

38:                                               ; preds = %27
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !27
  %40 = sext i32 %0 to i64
  %41 = getelementptr inbounds [27 x i32], [27 x i32]* @color, i64 0, i64 %40
  %42 = load i32, i32* %41, align 4, !tbaa !28
  %43 = lshr i32 %42, 16
  %44 = and i32 %43, 255
  %45 = lshr i32 %42, 8
  %46 = and i32 %45, 255
  %47 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10.2410, i64 0, i64 0), i32 %44, i32 %46) #31
  br label %48

48:                                               ; preds = %38, %29, %27
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !27
  %50 = tail call i32 @fputs(i8* %1, %struct._IO_FILE* %49) #31
  %51 = load i32, i32* @use_color, align 4, !tbaa !28
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %48
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !27
  %55 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11.2411, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %54) #31
  br label %56

56:                                               ; preds = %53, %48
  ret void
}

; Function Attrs: nofree nounwind readonly
declare dso_local i8* @getenv(i8* nocapture) local_unnamed_addr #10

; Function Attrs: nofree nounwind
declare dso_local i32 @fputs(i8* nocapture readonly, %struct._IO_FILE* nocapture) local_unnamed_addr #16

; Function Attrs: nounwind uwtable
define internal void @av_log(i8*, i32, i8* nocapture readonly, ...) unnamed_addr #5 {
  %4 = alloca [1 x %struct.__va_list_tag], align 16
  %5 = icmp eq i8* %0, null
  br i1 %5, label %6, label %9

6:                                                ; preds = %3
  %7 = bitcast [1 x %struct.__va_list_tag]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #18
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %4, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %7)
  br label %31

9:                                                ; preds = %3
  %10 = bitcast i8* %0 to %struct.AVClass**
  %11 = load %struct.AVClass*, %struct.AVClass** %10, align 8, !tbaa !27
  %12 = bitcast [1 x %struct.__va_list_tag]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #18
  %13 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %4, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %12)
  %14 = icmp eq %struct.AVClass* %11, null
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %11, i64 0, i32 3
  %17 = load i32, i32* %16, align 8, !tbaa !583
  %18 = icmp sgt i32 %17, 3280641
  br i1 %18, label %19, label %31

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %11, i64 0, i32 4
  %21 = load i32, i32* %20, align 4, !tbaa !586
  %22 = icmp ne i32 %21, 0
  %23 = icmp sgt i32 %1, 7
  %24 = and i1 %23, %22
  br i1 %24, label %25, label %31

25:                                               ; preds = %19
  %26 = sext i32 %21 to i64
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 4, !tbaa !28
  %30 = add nsw i32 %29, %1
  br label %31

31:                                               ; preds = %6, %9, %15, %19, %25
  %32 = phi %struct.__va_list_tag* [ %13, %25 ], [ %13, %19 ], [ %13, %15 ], [ %13, %9 ], [ %8, %6 ]
  %33 = phi i8* [ %12, %25 ], [ %12, %19 ], [ %12, %15 ], [ %12, %9 ], [ %7, %6 ]
  %34 = phi i32 [ %30, %25 ], [ %1, %19 ], [ %1, %15 ], [ %1, %9 ], [ %1, %6 ]
  call fastcc void @av_log_default_callback(i8* %0, i32 %34, i8* %2, %struct.__va_list_tag* nonnull %32) #18
  call void @llvm.va_end(i8* nonnull %33)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #18
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc i64 @av_gcd(i64, i64) unnamed_addr #11 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %2, %.preheader
  %4 = phi i64 [ %6, %.preheader ], [ %1, %2 ]
  %5 = phi i64 [ %4, %.preheader ], [ %0, %2 ]
  %6 = srem i64 %5, %4
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.preheader, %2
  %8 = phi i64 [ %0, %2 ], [ %4, %.preheader ]
  ret i64 %8
}

; Function Attrs: nounwind readnone uwtable
define internal fastcc i64 @av_rescale_rnd(i64, i64, i64, i32) unnamed_addr #25 {
  %5 = and i32 %3, 8192
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %4
  %8 = add i64 %0, -9223372036854775807
  %9 = icmp ult i64 %8, 2
  br i1 %9, label %.loopexit, label %10

10:                                               ; preds = %7
  %11 = add i32 %3, -8192
  br label %12

12:                                               ; preds = %10, %4
  %13 = phi i32 [ %11, %10 ], [ %3, %4 ]
  %14 = icmp slt i64 %0, 0
  %15 = icmp ne i64 %0, -9223372036854775808
  %16 = and i1 %14, %15
  br i1 %16, label %17, label %24

17:                                               ; preds = %12
  %18 = sub nsw i64 0, %0
  %19 = lshr i32 %13, 1
  %20 = and i32 %19, 1
  %21 = xor i32 %20, %13
  %22 = tail call fastcc i64 @av_rescale_rnd(i64 %18, i64 %1, i64 %2, i32 %21) #29
  %23 = sub nsw i64 0, %22
  ret i64 %23

24:                                               ; preds = %12
  %25 = icmp eq i32 %13, 5
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = sdiv i64 %2, 2
  br label %33

28:                                               ; preds = %24
  %29 = and i32 %13, 1
  %30 = icmp eq i32 %29, 0
  %31 = add nsw i64 %2, -1
  %32 = select i1 %30, i64 0, i64 %31
  br label %33

33:                                               ; preds = %28, %26
  %34 = phi i64 [ %27, %26 ], [ %32, %28 ]
  %35 = icmp slt i64 %1, 2147483648
  %36 = icmp slt i64 %2, 2147483648
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %52

38:                                               ; preds = %33
  %39 = icmp slt i64 %0, 2147483648
  br i1 %39, label %40, label %44

40:                                               ; preds = %38
  %41 = mul nsw i64 %1, %0
  %42 = add nsw i64 %34, %41
  %43 = sdiv i64 %42, %2
  br label %.loopexit

44:                                               ; preds = %38
  %45 = sdiv i64 %0, %2
  %46 = mul nsw i64 %45, %1
  %47 = srem i64 %0, %2
  %48 = mul nsw i64 %47, %1
  %49 = add nsw i64 %48, %34
  %50 = sdiv i64 %49, %2
  %51 = add nsw i64 %50, %46
  br label %.loopexit

52:                                               ; preds = %33
  %53 = and i64 %0, 4294967295
  %54 = ashr i64 %0, 32
  %55 = and i64 %1, 4294967295
  %56 = ashr i64 %1, 32
  %57 = mul nsw i64 %56, %53
  %58 = mul nsw i64 %55, %54
  %59 = add i64 %57, %58
  %60 = shl i64 %59, 32
  %61 = mul nuw i64 %55, %53
  %62 = add i64 %60, %61
  %63 = mul nsw i64 %56, %54
  %64 = lshr i64 %59, 32
  %65 = add nsw i64 %64, %63
  %66 = icmp ult i64 %62, %60
  %67 = zext i1 %66 to i64
  %68 = add nsw i64 %65, %67
  %69 = add i64 %34, %62
  %70 = icmp ult i64 %69, %34
  %71 = zext i1 %70 to i64
  %72 = add nsw i64 %68, %71
  br label %73

73:                                               ; preds = %73, %52
  %74 = phi i64 [ 63, %52 ], [ %100, %73 ]
  %75 = phi i64 [ %59, %52 ], [ %99, %73 ]
  %76 = phi i64 [ %72, %52 ], [ %96, %73 ]
  %77 = lshr i64 %69, %74
  %78 = and i64 %77, 1
  %79 = shl i64 %76, 1
  %80 = or i64 %79, %78
  %81 = shl i64 %75, 1
  %82 = icmp ult i64 %80, %2
  %83 = select i1 %82, i64 0, i64 %2
  %84 = sub i64 %80, %83
  %85 = xor i1 %82, true
  %86 = zext i1 %85 to i64
  %87 = or i64 %81, %86
  %88 = add nsw i64 %74, -1
  %89 = lshr i64 %69, %88
  %90 = and i64 %89, 1
  %91 = shl i64 %84, 1
  %92 = or i64 %91, %90
  %93 = shl i64 %87, 1
  %94 = icmp ult i64 %92, %2
  %95 = select i1 %94, i64 0, i64 %2
  %96 = sub i64 %92, %95
  %97 = xor i1 %94, true
  %98 = zext i1 %97 to i64
  %99 = or i64 %93, %98
  %100 = add nsw i64 %74, -2
  %101 = icmp eq i64 %88, 0
  br i1 %101, label %.loopexit, label %73

.loopexit:                                        ; preds = %73, %44, %40, %7
  %102 = phi i64 [ %43, %40 ], [ %51, %44 ], [ %0, %7 ], [ %99, %73 ]
  ret i64 %102
}

; Function Attrs: nounwind readnone uwtable
define internal fastcc i64 @av_rescale(i64, i64, i64) unnamed_addr #25 {
  %4 = tail call fastcc i64 @av_rescale_rnd(i64 %0, i64 %1, i64 %2, i32 5) #29
  ret i64 %4
}

; Function Attrs: nounwind readnone uwtable
define internal fastcc i64 @av_rescale_q_rnd(i64, i64, i64) unnamed_addr #25 {
  %4 = shl i64 %1, 32
  %5 = ashr exact i64 %4, 32
  %6 = ashr i64 %2, 32
  %7 = mul nsw i64 %5, %6
  %8 = shl i64 %2, 32
  %9 = ashr exact i64 %8, 32
  %10 = ashr i64 %1, 32
  %11 = mul nsw i64 %9, %10
  %12 = tail call fastcc i64 @av_rescale_rnd(i64 %0, i64 %7, i64 %11, i32 2) #29
  ret i64 %12
}

; Function Attrs: nounwind readnone uwtable
define internal fastcc i64 @av_rescale_q(i64, i64, i64) unnamed_addr #25 {
  %4 = shl i64 %1, 32
  %5 = ashr exact i64 %4, 32
  %6 = ashr i64 %2, 32
  %7 = mul nsw i64 %5, %6
  %8 = shl i64 %2, 32
  %9 = ashr exact i64 %8, 32
  %10 = ashr i64 %1, 32
  %11 = mul nsw i64 %9, %10
  %12 = tail call fastcc i64 @av_rescale_rnd(i64 %0, i64 %7, i64 %11, i32 5) #29
  ret i64 %12
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc i64 @av_compare_mod(i64, i64, i64) unnamed_addr #11 {
  %4 = sub i64 %0, %1
  %5 = add i64 %2, -1
  %6 = and i64 %5, %4
  %7 = lshr i64 %2, 1
  %8 = icmp ugt i64 %6, %7
  %9 = select i1 %8, i64 %2, i64 0
  %10 = sub i64 %6, %9
  ret i64 %10
}

; Function Attrs: nounwind uwtable
define internal fastcc noalias i8* @av_malloc(i64) unnamed_addr #5 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #18
  store i8* null, i8** %3, align 8, !tbaa !27
  %5 = icmp ugt i64 %0, 2147483615
  br i1 %5, label %23, label %6

6:                                                ; preds = %1
  %7 = icmp eq i64 %0, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %6
  %9 = call i32 @posix_memalign(i8** nonnull %3, i64 16, i64 %0) #18
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = load i8*, i8** %3, align 8, !tbaa !27
  br label %23

13:                                               ; preds = %8
  store i8* null, i8** %3, align 8, !tbaa !27
  br label %23

14:                                               ; preds = %6
  %15 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #18
  store i8* null, i8** %2, align 8, !tbaa !27
  %16 = call i32 @posix_memalign(i8** nonnull %2, i64 16, i64 1) #18
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = load i8*, i8** %2, align 8, !tbaa !27
  br label %21

20:                                               ; preds = %14
  store i8* null, i8** %2, align 8, !tbaa !27
  br label %21

21:                                               ; preds = %20, %18
  %22 = phi i8* [ %19, %18 ], [ null, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #18
  store i8* %22, i8** %3, align 8, !tbaa !27
  br label %23

23:                                               ; preds = %21, %13, %11, %1
  %24 = phi i8* [ null, %1 ], [ %12, %11 ], [ null, %13 ], [ %22, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #18
  ret i8* %24
}

; Function Attrs: nofree nounwind
declare dso_local i32 @posix_memalign(i8**, i64, i64) local_unnamed_addr #16

; Function Attrs: nounwind uwtable
define internal fastcc noalias i8* @av_realloc(i8* nocapture, i64) unnamed_addr #5 {
  %3 = icmp ugt i64 %1, 2147483615
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = icmp eq i64 %1, 0
  %6 = zext i1 %5 to i64
  %7 = add nuw nsw i64 %6, %1
  %8 = tail call i8* @realloc(i8* %0, i64 %7) #18
  br label %9

9:                                                ; preds = %4, %2
  %10 = phi i8* [ %8, %4 ], [ null, %2 ]
  ret i8* %10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #12

; Function Attrs: nounwind uwtable
define internal fastcc i8* @av_realloc_f(i8* nocapture, i64) unnamed_addr #5 {
  %3 = icmp ugt i64 %1, 2147483615
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = icmp eq i64 %1, 0
  %6 = zext i1 %5 to i64
  %7 = add nuw nsw i64 %6, %1
  %8 = tail call i8* @realloc(i8* %0, i64 %7) #18
  br label %9

9:                                                ; preds = %4, %2
  %10 = phi i8* [ %8, %4 ], [ null, %2 ]
  %11 = icmp eq i8* %10, null
  %12 = icmp ne i64 %1, 0
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @free(i8* %0) #18
  br label %15

15:                                               ; preds = %14, %9
  ret i8* %10
}

; Function Attrs: nounwind
declare dso_local void @free(i8* nocapture) local_unnamed_addr #12

; Function Attrs: nounwind uwtable
define internal fastcc void @av_free(i8* nocapture) unnamed_addr #5 {
  tail call void @free(i8* %0) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_freep(i8* nocapture) unnamed_addr #5 {
  %2 = bitcast i8* %0 to i8**
  %3 = load i8*, i8** %2, align 8, !tbaa !27
  tail call void @free(i8* %3) #18
  store i8* null, i8** %2, align 8, !tbaa !27
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc noalias i8* @av_mallocz(i64) unnamed_addr #5 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #18
  store i8* null, i8** %3, align 8, !tbaa !27
  %5 = icmp ugt i64 %0, 2147483615
  br i1 %5, label %23, label %6

6:                                                ; preds = %1
  %7 = icmp eq i64 %0, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %6
  %9 = call i32 @posix_memalign(i8** nonnull %3, i64 16, i64 %0) #18
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = load i8*, i8** %3, align 8, !tbaa !27
  br label %24

13:                                               ; preds = %8
  store i8* null, i8** %3, align 8, !tbaa !27
  br label %23

14:                                               ; preds = %6
  %15 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #18
  store i8* null, i8** %2, align 8, !tbaa !27
  %16 = call i32 @posix_memalign(i8** nonnull %2, i64 16, i64 1) #18
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = load i8*, i8** %2, align 8, !tbaa !27
  br label %21

20:                                               ; preds = %14
  store i8* null, i8** %2, align 8, !tbaa !27
  br label %21

21:                                               ; preds = %20, %18
  %22 = phi i8* [ %19, %18 ], [ null, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #18
  store i8* %22, i8** %3, align 8, !tbaa !27
  br label %24

23:                                               ; preds = %13, %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #18
  br label %28

24:                                               ; preds = %21, %11
  %25 = phi i8* [ %12, %11 ], [ %22, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #18
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %25, i8 0, i64 %0, i1 false)
  br label %28

28:                                               ; preds = %27, %24, %23
  %29 = phi i8* [ null, %23 ], [ null, %24 ], [ %25, %27 ]
  ret i8* %29
}

; Function Attrs: nounwind uwtable
define internal fastcc noalias i8* @av_strdup(i8* readonly) unnamed_addr #5 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = icmp eq i8* %0, null
  br i1 %4, label %34, label %5

5:                                                ; preds = %1
  %6 = tail call i64 @strlen(i8* nonnull %0) #28
  %7 = shl i64 %6, 32
  %8 = add i64 %7, 4294967296
  %9 = ashr exact i64 %8, 32
  %10 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #18
  store i8* null, i8** %3, align 8, !tbaa !27
  %11 = icmp ugt i64 %9, 2147483615
  br i1 %11, label %29, label %12

12:                                               ; preds = %5
  %13 = icmp eq i64 %8, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %12
  %15 = call i32 @posix_memalign(i8** nonnull %3, i64 16, i64 %9) #18
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %14
  %18 = load i8*, i8** %3, align 8, !tbaa !27
  br label %30

19:                                               ; preds = %14
  store i8* null, i8** %3, align 8, !tbaa !27
  br label %29

20:                                               ; preds = %12
  %21 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #18
  store i8* null, i8** %2, align 8, !tbaa !27
  %22 = call i32 @posix_memalign(i8** nonnull %2, i64 16, i64 1) #18
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = load i8*, i8** %2, align 8, !tbaa !27
  br label %27

26:                                               ; preds = %20
  store i8* null, i8** %2, align 8, !tbaa !27
  br label %27

27:                                               ; preds = %26, %24
  %28 = phi i8* [ %25, %24 ], [ null, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #18
  store i8* %28, i8** %3, align 8, !tbaa !27
  br label %30

29:                                               ; preds = %19, %5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #18
  br label %34

30:                                               ; preds = %27, %17
  %31 = phi i8* [ %18, %17 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #18
  %32 = icmp eq i8* %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %30
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %31, i8* nonnull align 1 %0, i64 %9, i1 false)
  br label %34

34:                                               ; preds = %33, %30, %29, %1
  %35 = phi i8* [ null, %1 ], [ null, %30 ], [ %31, %33 ], [ null, %29 ]
  ret i8* %35
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_dynarray_add(i8* nocapture, i32* nocapture, i8*) unnamed_addr #5 {
  %4 = load i32, i32* %1, align 4, !tbaa !28
  %5 = bitcast i8* %0 to i64**
  %6 = load i64*, i64** %5, align 8, !tbaa !27
  %7 = tail call i32 @llvm.ctpop.i32(i32 %4), !range !587
  %8 = icmp ult i32 %7, 2
  br i1 %8, label %9, label %26

9:                                                ; preds = %3
  %10 = icmp eq i32 %4, 0
  br i1 %10, label %.thread, label %11

11:                                               ; preds = %9
  %12 = shl nsw i32 %4, 1
  %13 = sext i32 %12 to i64
  %14 = shl nsw i64 %13, 3
  %15 = icmp ugt i64 %14, 2147483615
  br i1 %15, label %22, label %.thread

.thread:                                          ; preds = %9, %11
  %16 = phi i64 [ %14, %11 ], [ 8, %9 ]
  %17 = bitcast i64* %6 to i8*
  %18 = icmp eq i64 %16, 0
  %19 = zext i1 %18 to i64
  %20 = or i64 %16, %19
  %21 = tail call i8* @realloc(i8* %17, i64 %20) #18
  br label %22

22:                                               ; preds = %.thread, %11
  %23 = phi i8* [ %21, %.thread ], [ null, %11 ]
  %24 = bitcast i8* %23 to i64*
  %25 = bitcast i8* %0 to i8**
  store i8* %23, i8** %25, align 8, !tbaa !27
  br label %26

26:                                               ; preds = %22, %3
  %27 = phi i64* [ %24, %22 ], [ %6, %3 ]
  %28 = ptrtoint i8* %2 to i64
  %29 = add nsw i32 %4, 1
  %30 = sext i32 %4 to i64
  %31 = getelementptr inbounds i64, i64* %27, i64 %30
  store i64 %28, i64* %31, align 8, !tbaa !26
  store i32 %29, i32* %1, align 4, !tbaa !28
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #6

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_opt_set(i8*, i8* readonly, i8*) unnamed_addr #5 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #18
  %8 = call fastcc %struct.AVOption* @av_opt_find2(i8* %0, i8* %1, i8* null, i32 0, i8** nonnull %4)
  %9 = icmp ne %struct.AVOption* %8, null
  %10 = load i8*, i8** %4, align 8
  %11 = icmp ne i8* %10, null
  %12 = and i1 %9, %11
  br i1 %12, label %13, label %150

13:                                               ; preds = %3
  %14 = icmp ne i8* %2, null
  %15 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %8, i64 0, i32 3
  %16 = load i32, i32* %15, align 4, !tbaa !588
  br i1 %14, label %18, label %17

17:                                               ; preds = %13
  switch i32 %16, label %150 [
    i32 5, label %18
    i32 1346784596, label %18
    i32 1397116244, label %18
    i32 1397316165, label %18
  ]

18:                                               ; preds = %17, %17, %17, %17, %13
  %19 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %8, i64 0, i32 2
  %20 = load i32, i32* %19, align 8, !tbaa !590
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %10, i64 %21
  switch i32 %16, label %149 [
    i32 5, label %23
    i32 7, label %26
    i32 0, label %90
    i32 1, label %90
    i32 2, label %90
    i32 4, label %90
    i32 3, label %90
    i32 6, label %90
    i32 1397316165, label %92
    i32 1346784596, label %107
    i32 1397116244, label %128
  ]

23:                                               ; preds = %18
  %24 = bitcast i8* %22 to i8**
  call fastcc void @av_freep(i8* nonnull %22) #18
  %25 = call fastcc noalias i8* @av_strdup(i8* %2) #18
  store i8* %25, i8** %24, align 8, !tbaa !27
  br label %150

26:                                               ; preds = %18
  %27 = bitcast i8* %22 to i8**
  %28 = getelementptr inbounds i8, i8* %22, i64 8
  %29 = bitcast i8* %28 to i32*
  %30 = call i64 @strlen(i8* %2) #28
  %31 = trunc i64 %30 to i32
  call fastcc void @av_freep(i8* nonnull %22) #18
  store i32 0, i32* %29, align 4, !tbaa !28
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %150

34:                                               ; preds = %26
  %35 = sdiv i32 %31, 2
  %36 = sext i32 %35 to i64
  %37 = call fastcc noalias i8* @av_malloc(i64 %36) #18
  %38 = load i8, i8* %2, align 1, !tbaa !33
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %34, %83
  %40 = phi i8 [ %88, %83 ], [ %38, %34 ]
  %41 = phi i8* [ %61, %83 ], [ %2, %34 ]
  %42 = phi i8* [ %87, %83 ], [ %37, %34 ]
  %43 = getelementptr inbounds i8, i8* %41, i64 1
  %44 = sext i8 %40 to i32
  %45 = add i8 %40, -48
  %46 = icmp ult i8 %45, 10
  br i1 %46, label %47, label %49

47:                                               ; preds = %.preheader
  %48 = add nsw i32 %44, -48
  br label %59

49:                                               ; preds = %.preheader
  %50 = add i8 %40, -97
  %51 = icmp ult i8 %50, 6
  br i1 %51, label %52, label %54

52:                                               ; preds = %49
  %53 = add nsw i32 %44, -87
  br label %59

54:                                               ; preds = %49
  %55 = add i8 %40, -65
  %56 = icmp ult i8 %55, 6
  %57 = add nsw i32 %44, -55
  %58 = select i1 %56, i32 %57, i32 -1
  br label %59

59:                                               ; preds = %54, %52, %47
  %60 = phi i32 [ %58, %54 ], [ %48, %47 ], [ %53, %52 ]
  %61 = getelementptr inbounds i8, i8* %41, i64 2
  %62 = load i8, i8* %43, align 1, !tbaa !33
  %63 = sext i8 %62 to i32
  %64 = add i8 %62, -48
  %65 = icmp ult i8 %64, 10
  br i1 %65, label %66, label %68

66:                                               ; preds = %59
  %67 = add nsw i32 %63, -48
  br label %78

68:                                               ; preds = %59
  %69 = add i8 %62, -97
  %70 = icmp ult i8 %69, 6
  br i1 %70, label %71, label %73

71:                                               ; preds = %68
  %72 = add nsw i32 %63, -87
  br label %78

73:                                               ; preds = %68
  %74 = add i8 %62, -65
  %75 = icmp ult i8 %74, 6
  %76 = add nsw i32 %63, -55
  %77 = select i1 %75, i32 %76, i32 -1
  br label %78

78:                                               ; preds = %73, %71, %66
  %79 = phi i32 [ %77, %73 ], [ %67, %66 ], [ %72, %71 ]
  %80 = or i32 %79, %60
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  call fastcc void @av_free(i8* %37) #18
  br label %150

83:                                               ; preds = %78
  %84 = shl nsw i32 %60, 4
  %85 = or i32 %79, %84
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %86, i8* %42, align 1, !tbaa !33
  %88 = load i8, i8* %61, align 1, !tbaa !33
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %83, %34
  store i8* %37, i8** %27, align 8, !tbaa !27
  store i32 %35, i32* %29, align 4, !tbaa !28
  br label %150

90:                                               ; preds = %18, %18, %18, %18, %18, %18
  %91 = call fastcc i32 @set_string_number(i8* %0, %struct.AVOption* nonnull %8, i8* %2, i8* nonnull %22)
  br label %150

92:                                               ; preds = %18
  br i1 %14, label %93, label %96

93:                                               ; preds = %92
  %94 = call i32 @strcmp(i8* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2468, i64 0, i64 0)) #28
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %100

96:                                               ; preds = %93, %92
  %97 = bitcast i8* %22 to i32*
  %98 = getelementptr inbounds i8, i8* %22, i64 4
  %99 = bitcast i8* %98 to i32*
  store i32 0, i32* %99, align 4, !tbaa !28
  store i32 0, i32* %97, align 4, !tbaa !28
  br label %150

100:                                              ; preds = %93
  %101 = bitcast i8* %22 to i32*
  %102 = getelementptr inbounds i8, i8* %22, i64 4
  %103 = bitcast i8* %102 to i32*
  %104 = call fastcc i32 @av_parse_video_size(i32* nonnull %101, i32* nonnull %103, i8* nonnull %2) #18
  %105 = icmp slt i32 %104, 0
  br i1 %105, label %106, label %150

106:                                              ; preds = %100
  call void (i8*, i32, i8*, ...) @av_log(i8* %0, i32 16, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1.2469, i64 0, i64 0), i8* nonnull %2) #18
  br label %150

107:                                              ; preds = %18
  br i1 %14, label %108, label %125

108:                                              ; preds = %107
  %109 = call i32 @strcmp(i8* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2468, i64 0, i64 0)) #28
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %125, label %111

111:                                              ; preds = %108
  %112 = call fastcc i32 @av_get_pix_fmt(i8* nonnull %2) #18
  %113 = icmp eq i32 %112, -1
  br i1 %113, label %114, label %125

114:                                              ; preds = %111
  %115 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %115) #18
  %116 = call i64 @strtol(i8* nonnull %2, i8** nonnull %5, i32 0) #18
  %117 = trunc i64 %116 to i32
  %118 = load i8*, i8** %5, align 8, !tbaa !27
  %119 = load i8, i8* %118, align 1, !tbaa !33
  %120 = icmp ne i8 %119, 0
  %121 = icmp ugt i32 %117, 316
  %122 = or i1 %121, %120
  br i1 %122, label %123, label %124

123:                                              ; preds = %114
  call void (i8*, i32, i8*, ...) @av_log(i8* %0, i32 16, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2.2470, i64 0, i64 0), i8* nonnull %2) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %115) #18
  br label %150

124:                                              ; preds = %114
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %115) #18
  br label %125

125:                                              ; preds = %124, %111, %108, %107
  %126 = phi i32 [ %117, %124 ], [ %112, %111 ], [ -1, %108 ], [ -1, %107 ]
  %127 = bitcast i8* %22 to i32*
  store i32 %126, i32* %127, align 4, !tbaa !33
  br label %150

128:                                              ; preds = %18
  br i1 %14, label %129, label %146

129:                                              ; preds = %128
  %130 = call i32 @strcmp(i8* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2468, i64 0, i64 0)) #28
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %146, label %132

132:                                              ; preds = %129
  %133 = call fastcc i32 @av_get_sample_fmt(i8* nonnull %2) #18
  %134 = icmp eq i32 %133, -1
  br i1 %134, label %135, label %146

135:                                              ; preds = %132
  %136 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %136) #18
  %137 = call i64 @strtol(i8* nonnull %2, i8** nonnull %6, i32 0) #18
  %138 = trunc i64 %137 to i32
  %139 = load i8*, i8** %6, align 8, !tbaa !27
  %140 = load i8, i8* %139, align 1, !tbaa !33
  %141 = icmp ne i8 %140, 0
  %142 = icmp ugt i32 %138, 9
  %143 = or i1 %142, %141
  br i1 %143, label %144, label %145

144:                                              ; preds = %135
  call void (i8*, i32, i8*, ...) @av_log(i8* %0, i32 16, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3.2471, i64 0, i64 0), i8* nonnull %2) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %136) #18
  br label %150

145:                                              ; preds = %135
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %136) #18
  br label %146

146:                                              ; preds = %145, %132, %129, %128
  %147 = phi i32 [ %138, %145 ], [ %133, %132 ], [ -1, %129 ], [ -1, %128 ]
  %148 = bitcast i8* %22 to i32*
  store i32 %147, i32* %148, align 4, !tbaa !33
  br label %150

149:                                              ; preds = %18
  call void (i8*, i32, i8*, ...) @av_log(i8* %0, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.2472, i64 0, i64 0)) #18
  br label %150

150:                                              ; preds = %149, %146, %144, %125, %123, %106, %100, %96, %90, %.loopexit, %82, %26, %23, %17, %3
  %151 = phi i32 [ -22, %149 ], [ 0, %146 ], [ 0, %125 ], [ 0, %96 ], [ %91, %90 ], [ 0, %23 ], [ -1414549496, %3 ], [ -22, %17 ], [ %104, %106 ], [ %104, %100 ], [ -22, %123 ], [ -22, %144 ], [ 0, %.loopexit ], [ -22, %26 ], [ -22, %82 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #18
  ret i32 %151
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.AVOption* @av_opt_find2(i8*, i8* readonly, i8* readonly, i32, i8**) unnamed_addr #5 {
  %6 = alloca %struct.AVClass*, align 8
  %7 = icmp eq i8* %0, null
  br i1 %7, label %.loopexit, label %8

8:                                                ; preds = %5
  %9 = bitcast i8* %0 to %struct.AVClass**
  %10 = load %struct.AVClass*, %struct.AVClass** %9, align 8, !tbaa !27
  %11 = and i32 %3, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %.loopexit6, label %13

13:                                               ; preds = %8
  %14 = and i32 %3, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %10, i64 0, i32 6
  %18 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** %17, align 8, !tbaa !591
  %19 = icmp eq i8* (i8*, i8*)* %18, null
  br i1 %19, label %.loopexit6, label %.preheader5

20:                                               ; preds = %13
  %21 = bitcast %struct.AVClass** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #18
  store %struct.AVClass* null, %struct.AVClass** %6, align 8, !tbaa !27
  %22 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %10, i64 0, i32 7
  br label %23

23:                                               ; preds = %31, %20
  %24 = load %struct.AVClass* (%struct.AVClass*)*, %struct.AVClass* (%struct.AVClass*)** %22, align 8, !tbaa !592
  %25 = icmp eq %struct.AVClass* (%struct.AVClass*)* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  store %struct.AVClass* null, %struct.AVClass** %6, align 8, !tbaa !27
  br label %.loopexit8

27:                                               ; preds = %23
  %28 = load %struct.AVClass*, %struct.AVClass** %6, align 8, !tbaa !27
  %29 = call %struct.AVClass* %24(%struct.AVClass* %28) #18
  store %struct.AVClass* %29, %struct.AVClass** %6, align 8, !tbaa !27
  %30 = icmp eq %struct.AVClass* %29, null
  br i1 %30, label %.loopexit8, label %31

31:                                               ; preds = %27
  %32 = call fastcc %struct.AVOption* @av_opt_find2(i8* nonnull %21, i8* %1, i8* %2, i32 %3, i8** null)
  %33 = icmp eq %struct.AVOption* %32, null
  br i1 %33, label %23, label %34

.loopexit8:                                       ; preds = %27, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #18
  br label %.loopexit6

34:                                               ; preds = %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #18
  br label %.loopexit

.preheader5:                                      ; preds = %16, %42
  %35 = phi i8* (i8*, i8*)* [ %45, %42 ], [ %18, %16 ]
  %36 = phi i8* [ %37, %42 ], [ null, %16 ]
  %37 = tail call i8* %35(i8* nonnull %0, i8* %36) #18
  %38 = icmp eq i8* %37, null
  br i1 %38, label %.loopexit6, label %39

39:                                               ; preds = %.preheader5
  %40 = tail call fastcc %struct.AVOption* @av_opt_find2(i8* nonnull %37, i8* %1, i8* %2, i32 %3, i8** %4)
  %41 = icmp eq %struct.AVOption* %40, null
  br i1 %41, label %42, label %.loopexit

42:                                               ; preds = %39
  %43 = load %struct.AVClass*, %struct.AVClass** %9, align 8, !tbaa !27
  %44 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %43, i64 0, i32 6
  %45 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** %44, align 8, !tbaa !591
  %46 = icmp eq i8* (i8*, i8*)* %45, null
  br i1 %46, label %.loopexit6, label %.preheader5

.loopexit6:                                       ; preds = %42, %.preheader5, %.loopexit8, %16, %8
  %47 = icmp eq i8* %2, null
  br i1 %47, label %.preheader, label %.preheader2

.preheader:                                       ; preds = %.loopexit6, %.preheader.backedge
  %48 = phi %struct.AVOption* [ %67, %.preheader.backedge ], [ null, %.loopexit6 ]
  %49 = icmp eq %struct.AVOption* %48, null
  br i1 %49, label %56, label %50

50:                                               ; preds = %.preheader
  %51 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %48, i64 1, i32 0
  %52 = load i8*, i8** %51, align 8, !tbaa !593
  %53 = icmp eq i8* %52, null
  br i1 %53, label %.loopexit, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %48, i64 1
  br label %65

56:                                               ; preds = %.preheader
  %57 = load %struct.AVClass*, %struct.AVClass** %9, align 8, !tbaa !27
  %58 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %57, i64 0, i32 2
  %59 = load %struct.AVOption*, %struct.AVOption** %58, align 8, !tbaa !594
  %60 = icmp eq %struct.AVOption* %59, null
  br i1 %60, label %.loopexit, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %59, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8, !tbaa !593
  %64 = icmp eq i8* %63, null
  br i1 %64, label %.loopexit, label %65

65:                                               ; preds = %61, %54
  %66 = phi i8* [ %52, %54 ], [ %63, %61 ]
  %67 = phi %struct.AVOption* [ %55, %54 ], [ %59, %61 ]
  %68 = call i32 @strcmp(i8* nonnull %66, i8* %1) #28
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %.preheader.backedge

70:                                               ; preds = %65
  %71 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %67, i64 0, i32 3
  %72 = load i32, i32* %71, align 4, !tbaa !588
  %73 = icmp eq i32 %72, 128
  br i1 %73, label %.preheader.backedge, label %.loopexit1

.preheader.backedge:                              ; preds = %70, %65
  br label %.preheader

.preheader2:                                      ; preds = %.loopexit6, %.preheader2.backedge
  %74 = phi %struct.AVOption* [ %93, %.preheader2.backedge ], [ null, %.loopexit6 ]
  %75 = icmp eq %struct.AVOption* %74, null
  br i1 %75, label %76, label %85

76:                                               ; preds = %.preheader2
  %77 = load %struct.AVClass*, %struct.AVClass** %9, align 8, !tbaa !27
  %78 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %77, i64 0, i32 2
  %79 = load %struct.AVOption*, %struct.AVOption** %78, align 8, !tbaa !594
  %80 = icmp eq %struct.AVOption* %79, null
  br i1 %80, label %.loopexit, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %79, i64 0, i32 0
  %83 = load i8*, i8** %82, align 8, !tbaa !593
  %84 = icmp eq i8* %83, null
  br i1 %84, label %.loopexit, label %91

85:                                               ; preds = %.preheader2
  %86 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %74, i64 1, i32 0
  %87 = load i8*, i8** %86, align 8, !tbaa !593
  %88 = icmp eq i8* %87, null
  br i1 %88, label %.loopexit, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %74, i64 1
  br label %91

91:                                               ; preds = %89, %81
  %92 = phi i8* [ %87, %89 ], [ %83, %81 ]
  %93 = phi %struct.AVOption* [ %90, %89 ], [ %79, %81 ]
  %94 = call i32 @strcmp(i8* nonnull %92, i8* %1) #28
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %.preheader2.backedge

96:                                               ; preds = %91
  %97 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %93, i64 0, i32 3
  %98 = load i32, i32* %97, align 4, !tbaa !588
  %99 = icmp eq i32 %98, 128
  br i1 %99, label %100, label %.preheader2.backedge

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %93, i64 0, i32 8
  %102 = load i8*, i8** %101, align 8, !tbaa !595
  %103 = icmp eq i8* %102, null
  br i1 %103, label %.preheader2.backedge, label %104

104:                                              ; preds = %100
  %105 = call i32 @strcmp(i8* nonnull %102, i8* nonnull %2) #28
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %.loopexit1, label %.preheader2.backedge

.preheader2.backedge:                             ; preds = %104, %100, %96, %91
  br label %.preheader2

.loopexit1:                                       ; preds = %104, %70
  %107 = phi %struct.AVOption* [ %67, %70 ], [ %93, %104 ]
  %108 = icmp eq i8** %4, null
  br i1 %108, label %.loopexit, label %109

109:                                              ; preds = %.loopexit1
  %110 = and i32 %3, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  store i8* %0, i8** %4, align 8, !tbaa !27
  br label %.loopexit

113:                                              ; preds = %109
  store i8* null, i8** %4, align 8, !tbaa !27
  br label %.loopexit

.loopexit:                                        ; preds = %39, %85, %81, %76, %61, %56, %50, %113, %112, %.loopexit1, %34, %5
  %114 = phi %struct.AVOption* [ %32, %34 ], [ null, %5 ], [ %107, %.loopexit1 ], [ %107, %112 ], [ %107, %113 ], [ null, %50 ], [ null, %56 ], [ null, %61 ], [ null, %76 ], [ null, %81 ], [ null, %85 ], [ %40, %39 ]
  ret %struct.AVOption* %114
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @set_string_number(i8*, %struct.AVOption* nocapture readonly, i8*, i8* nocapture) unnamed_addr #5 {
  %5 = alloca [256 x i8], align 16
  %6 = alloca double, align 8
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %8 = bitcast double* %6 to i8*
  %9 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 3
  %10 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 8
  %11 = bitcast [256 x i8]* %5 to i64*
  %12 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 5
  %13 = bitcast double* %12 to i64*
  %14 = bitcast double* %6 to i64*
  %15 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 6
  %16 = bitcast double* %15 to i64*
  %17 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 4, i32 0
  %18 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 4
  %19 = bitcast %union.anon* %18 to double*
  %20 = bitcast i8* %3 to i32*
  %21 = getelementptr inbounds i8, i8* %3, i64 4
  %22 = bitcast i8* %21 to i32*
  %23 = bitcast i8* %3 to double*
  %24 = bitcast i8* %3 to float*
  %25 = bitcast i8* %3 to i64*
  %26 = bitcast i64* %17 to double*
  br label %27

27:                                               ; preds = %157, %4
  %28 = phi i32 [ 0, %4 ], [ 1, %157 ]
  %29 = phi i8* [ %2, %4 ], [ %154, %157 ]
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #18
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #18
  %30 = load i8, i8* %29, align 1, !tbaa !33
  switch i8 %30, label %40 [
    i8 43, label %31
    i8 45, label %31
  ]

31:                                               ; preds = %27, %27
  %32 = load i32, i32* %9, align 4, !tbaa !588
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %31
  %35 = getelementptr inbounds i8, i8* %29, i64 1
  %36 = sext i8 %30 to i32
  br label %40

37:                                               ; preds = %31
  %38 = icmp eq i32 %28, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  store i8 %30, i8* %7, align 16, !tbaa !33
  br label %40

40:                                               ; preds = %39, %37, %34, %27
  %41 = phi i64 [ 0, %34 ], [ 0, %37 ], [ 1, %39 ], [ 0, %27 ]
  %42 = phi i32 [ %36, %34 ], [ 0, %37 ], [ 0, %39 ], [ 0, %27 ]
  %43 = phi i8* [ %35, %34 ], [ %29, %37 ], [ %29, %39 ], [ %29, %27 ]
  br label %44

44:                                               ; preds = %48, %40
  %45 = phi i64 [ %41, %40 ], [ %50, %48 ]
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  %47 = load i8, i8* %46, align 1, !tbaa !33
  switch i8 %47, label %48 [
    i8 0, label %52
    i8 43, label %52
    i8 45, label %52
  ]

48:                                               ; preds = %44
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %45
  store i8 %47, i8* %49, align 1, !tbaa !33
  %50 = add nuw nsw i64 %45, 1
  %51 = icmp eq i64 %50, 255
  br i1 %51, label %52, label %44

52:                                               ; preds = %48, %44, %44, %44
  %53 = phi i64 [ 255, %48 ], [ %45, %44 ], [ %45, %44 ], [ %45, %44 ]
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %53
  store i8 0, i8* %54, align 1, !tbaa !33
  %55 = load i8*, i8** %10, align 8, !tbaa !595
  %56 = call fastcc %struct.AVOption* @av_opt_find2(i8* %0, i8* nonnull %7, i8* %55, i32 0, i8** null) #18
  %57 = icmp eq %struct.AVOption* %56, null
  br i1 %57, label %66, label %58

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %56, i64 0, i32 3
  %60 = load i32, i32* %59, align 4, !tbaa !588
  %61 = icmp eq i32 %60, 128
  br i1 %61, label %62, label %66

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %56, i64 0, i32 4, i32 0
  %64 = load i64, i64* %63, align 8, !tbaa !33
  %65 = sitofp i64 %64 to double
  store double %65, double* %6, align 8, !tbaa !559
  br label %95

66:                                               ; preds = %58, %52
  %67 = load i64, i64* %11, align 16
  %68 = icmp eq i64 %67, 32770348699510116
  %69 = trunc i64 %67 to i32
  br i1 %68, label %70, label %79

70:                                               ; preds = %66
  %71 = load i32, i32* %9, align 4, !tbaa !588
  switch i32 %71, label %75 [
    i32 2, label %72
    i32 128, label %72
    i32 0, label %72
    i32 1, label %72
  ]

72:                                               ; preds = %70, %70, %70, %70
  %73 = load i64, i64* %17, align 8, !tbaa !33
  %74 = sitofp i64 %73 to double
  br label %77

75:                                               ; preds = %70
  %76 = load double, double* %19, align 8, !tbaa !33
  br label %77

77:                                               ; preds = %75, %72
  %78 = phi double [ %74, %72 ], [ %76, %75 ]
  store double %78, double* %6, align 8, !tbaa !559
  br label %95

79:                                               ; preds = %66
  switch i32 %69, label %84 [
    i32 7889261, label %80
    i32 7235949, label %82
  ]

80:                                               ; preds = %79
  %81 = load i64, i64* %16, align 8, !tbaa !596
  store i64 %81, i64* %14, align 8, !tbaa !559
  br label %95

82:                                               ; preds = %79
  %83 = load i64, i64* %13, align 8, !tbaa !597
  store i64 %83, i64* %14, align 8, !tbaa !559
  br label %95

84:                                               ; preds = %79
  %85 = call i32 @bcmp(i8* nonnull %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2468, i64 0, i64 0), i64 5)
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  store double 0.000000e+00, double* %6, align 8, !tbaa !559
  br label %95

88:                                               ; preds = %84
  %89 = icmp eq i32 %69, 7105633
  br i1 %89, label %90, label %91

90:                                               ; preds = %88
  store double -1.000000e+00, double* %6, align 8, !tbaa !559
  br label %95

91:                                               ; preds = %88
  %92 = call fastcc i32 @av_expr_parse_and_eval(double* nonnull %6, i8* nonnull %7, i8* %0) #18
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  call void (i8*, i32, i8*, ...) @av_log(i8* %0, i32 16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.30.2473, i64 0, i64 0), i8* nonnull %43) #18
  br label %.loopexit

95:                                               ; preds = %91, %90, %87, %82, %80, %77, %62
  %96 = load i32, i32* %9, align 4, !tbaa !588
  switch i32 %96, label %127 [
    i32 0, label %97
    i32 128, label %125
    i32 1346784596, label %111
    i32 1397116244, label %111
    i32 1, label %111
    i32 2, label %114
    i32 4, label %116
    i32 3, label %119
    i32 6, label %121
  ]

97:                                               ; preds = %95
  %98 = load i32, i32* %20, align 4, !tbaa !28
  %99 = zext i32 %98 to i64
  switch i32 %42, label %149 [
    i32 43, label %100
    i32 45, label %105
  ]

100:                                              ; preds = %97
  %101 = load double, double* %6, align 8, !tbaa !559
  %102 = fptosi double %101 to i64
  %103 = or i64 %102, %99
  %104 = sitofp i64 %103 to double
  store double %104, double* %6, align 8, !tbaa !559
  br label %149

105:                                              ; preds = %97
  %106 = load double, double* %6, align 8, !tbaa !559
  %107 = fptosi double %106 to i64
  %108 = xor i64 %107, 4294967295
  %109 = and i64 %108, %99
  %110 = sitofp i64 %109 to double
  store double %110, double* %6, align 8, !tbaa !559
  br label %149

111:                                              ; preds = %95, %95, %95
  %112 = load i32, i32* %20, align 4, !tbaa !28
  %113 = sext i32 %112 to i64
  br label %127

114:                                              ; preds = %95
  %115 = load i64, i64* %25, align 8, !tbaa !26
  br label %127

116:                                              ; preds = %95
  %117 = load float, float* %24, align 4, !tbaa !52
  %118 = fpext float %117 to double
  br label %127

119:                                              ; preds = %95
  %120 = load double, double* %23, align 8, !tbaa !559
  br label %127

121:                                              ; preds = %95
  %122 = load i32, i32* %20, align 4, !tbaa !522
  %123 = sext i32 %122 to i64
  %124 = load i32, i32* %22, align 4, !tbaa !598
  br label %127

125:                                              ; preds = %95
  %126 = load double, double* %26, align 8, !tbaa !33
  br label %127

127:                                              ; preds = %125, %121, %119, %116, %114, %111, %95
  %128 = phi i32 [ 1, %125 ], [ %124, %121 ], [ 1, %119 ], [ 1, %116 ], [ 1, %114 ], [ 1, %111 ], [ 1, %95 ]
  %129 = phi double [ %126, %125 ], [ 1.000000e+00, %121 ], [ %120, %119 ], [ %118, %116 ], [ 1.000000e+00, %114 ], [ 1.000000e+00, %111 ], [ 1.000000e+00, %95 ]
  %130 = phi i64 [ 1, %125 ], [ %123, %121 ], [ 1, %119 ], [ 1, %116 ], [ %115, %114 ], [ %113, %111 ], [ 1, %95 ]
  switch i32 %42, label %149 [
    i32 43, label %131
    i32 45, label %140
  ]

131:                                              ; preds = %127
  %132 = sitofp i32 %28 to double
  %133 = fmul nsz double %129, %132
  %134 = sitofp i64 %130 to double
  %135 = fmul nsz double %133, %134
  %136 = sitofp i32 %128 to double
  %137 = fdiv nsz double %135, %136
  %138 = load double, double* %6, align 8, !tbaa !559
  %139 = fadd nsz double %137, %138
  store double %139, double* %6, align 8, !tbaa !559
  br label %149

140:                                              ; preds = %127
  %141 = sitofp i32 %28 to double
  %142 = fmul nsz double %129, %141
  %143 = sitofp i64 %130 to double
  %144 = fmul nsz double %142, %143
  %145 = sitofp i32 %128 to double
  %146 = fdiv nsz double %144, %145
  %147 = load double, double* %6, align 8, !tbaa !559
  %148 = fsub nsz double %146, %147
  store double %148, double* %6, align 8, !tbaa !559
  br label %149

149:                                              ; preds = %140, %131, %127, %105, %100, %97
  %150 = load double, double* %6, align 8, !tbaa !559
  %151 = call fastcc i32 @write_number(i8* %0, %struct.AVOption* nonnull %1, i8* %3, double %150, i32 1)
  %152 = icmp slt i32 %151, 0
  br i1 %152, label %.loopexit, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds i8, i8* %43, i64 %53
  %155 = load i8, i8* %154, align 1, !tbaa !33
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %.loopexit, label %157

157:                                              ; preds = %153
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #18
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #18
  br label %27

.loopexit:                                        ; preds = %153, %149, %94
  %158 = phi i32 [ %92, %94 ], [ 0, %153 ], [ %151, %149 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #18
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #18
  ret i32 %158
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @write_number(i8*, %struct.AVOption* nocapture readonly, i8* nocapture, double, i32) unnamed_addr #5 {
  %6 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 6
  %7 = load double, double* %6, align 8, !tbaa !596
  %8 = sitofp i32 %4 to double
  %9 = fmul nsz double %7, %8
  %10 = fcmp nsz olt double %9, %3
  %11 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 5
  %12 = load double, double* %11, align 8, !tbaa !597
  %13 = fmul nsz double %12, %8
  %14 = fcmp nsz ogt double %13, %3
  %15 = or i1 %10, %14
  br i1 %15, label %16, label %20

16:                                               ; preds = %5
  %17 = fdiv nsz double %3, %8
  %18 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8, !tbaa !593
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %0, i32 16, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.34.2474, i64 0, i64 0), double %17, i8* %19, double %12, double %7) #18
  br label %51

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %1, i64 0, i32 3
  %22 = load i32, i32* %21, align 4, !tbaa !588
  switch i32 %22, label %51 [
    i32 0, label %23
    i32 1346784596, label %23
    i32 1397116244, label %23
    i32 1, label %23
    i32 2, label %28
    i32 4, label %32
    i32 3, label %36
    i32 6, label %39
  ]

23:                                               ; preds = %20, %20, %20, %20
  %24 = fdiv nsz double %3, %8
  %25 = tail call i64 @llvm.llrint.i64.f64(double %24)
  %26 = trunc i64 %25 to i32
  %27 = bitcast i8* %2 to i32*
  store i32 %26, i32* %27, align 4, !tbaa !28
  br label %51

28:                                               ; preds = %20
  %29 = fdiv nsz double %3, %8
  %30 = tail call i64 @llvm.llrint.i64.f64(double %29)
  %31 = bitcast i8* %2 to i64*
  store i64 %30, i64* %31, align 8, !tbaa !26
  br label %51

32:                                               ; preds = %20
  %33 = fdiv nsz double %3, %8
  %34 = fptrunc double %33 to float
  %35 = bitcast i8* %2 to float*
  store float %34, float* %35, align 4, !tbaa !52
  br label %51

36:                                               ; preds = %20
  %37 = fdiv nsz double %3, %8
  %38 = bitcast i8* %2 to double*
  store double %37, double* %38, align 8, !tbaa !559
  br label %51

39:                                               ; preds = %20
  %40 = fptosi double %3 to i32
  %41 = sitofp i32 %40 to double
  %42 = fcmp nsz oeq double %41, %3
  br i1 %42, label %43, label %47

43:                                               ; preds = %39
  %44 = bitcast i8* %2 to i32*
  store i32 %40, i32* %44, align 4
  %45 = getelementptr inbounds i8, i8* %2, i64 4
  %46 = bitcast i8* %45 to i32*
  store i32 %4, i32* %46, align 4
  br label %51

47:                                               ; preds = %39
  %48 = fdiv nsz double %3, %8
  %49 = tail call fastcc i64 @av_d2q(double %48, i32 16777216) #29
  %50 = bitcast i8* %2 to i64*
  store i64 %49, i64* %50, align 4
  br label %51

51:                                               ; preds = %47, %43, %36, %32, %28, %23, %20, %16
  %52 = phi i32 [ -34, %16 ], [ -22, %20 ], [ 0, %43 ], [ 0, %47 ], [ 0, %36 ], [ 0, %32 ], [ 0, %28 ], [ 0, %23 ]
  ret i32 %52
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_opt_set_int(i8*, i8* readonly, i64) unnamed_addr #5 {
  %4 = alloca i8*, align 8
  %5 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #18
  %6 = call fastcc %struct.AVOption* @av_opt_find2(i8* %0, i8* %1, i8* null, i32 0, i8** nonnull %4) #18
  %7 = icmp ne %struct.AVOption* %6, null
  %8 = load i8*, i8** %4, align 8
  %9 = icmp ne i8* %8, null
  %10 = and i1 %7, %9
  br i1 %10, label %11, label %49

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %6, i64 0, i32 2
  %13 = load i32, i32* %12, align 8, !tbaa !590
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %8, i64 %14
  %16 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %6, i64 0, i32 6
  %17 = load double, double* %16, align 8, !tbaa !596
  %18 = sitofp i64 %2 to double
  %19 = fcmp nsz olt double %17, %18
  %20 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %6, i64 0, i32 5
  %21 = load double, double* %20, align 8, !tbaa !597
  %22 = fcmp nsz ogt double %21, %18
  %23 = or i1 %19, %22
  br i1 %23, label %24, label %27

24:                                               ; preds = %11
  %25 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %6, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8, !tbaa !593
  call void (i8*, i32, i8*, ...) @av_log(i8* %0, i32 16, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.34.2474, i64 0, i64 0), double %18, i8* %26, double %21, double %17) #18
  br label %49

27:                                               ; preds = %11
  %28 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %6, i64 0, i32 3
  %29 = load i32, i32* %28, align 4, !tbaa !588
  switch i32 %29, label %49 [
    i32 0, label %30
    i32 1346784596, label %30
    i32 1397116244, label %30
    i32 1, label %30
    i32 2, label %35
    i32 4, label %39
    i32 3, label %42
    i32 6, label %44
  ]

30:                                               ; preds = %27, %27, %27, %27
  %31 = call i64 @llvm.llrint.i64.f64(double 1.000000e+00) #18
  %32 = mul nsw i64 %31, %2
  %33 = trunc i64 %32 to i32
  %34 = bitcast i8* %15 to i32*
  store i32 %33, i32* %34, align 4, !tbaa !28
  br label %49

35:                                               ; preds = %27
  %36 = call i64 @llvm.llrint.i64.f64(double 1.000000e+00) #18
  %37 = mul nsw i64 %36, %2
  %38 = bitcast i8* %15 to i64*
  store i64 %37, i64* %38, align 8, !tbaa !26
  br label %49

39:                                               ; preds = %27
  %40 = fptrunc double %18 to float
  %41 = bitcast i8* %15 to float*
  store float %40, float* %41, align 4, !tbaa !52
  br label %49

42:                                               ; preds = %27
  %43 = bitcast i8* %15 to double*
  store double %18, double* %43, align 8, !tbaa !559
  br label %49

44:                                               ; preds = %27
  %45 = trunc i64 %2 to i32
  %46 = bitcast i8* %15 to i32*
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds i8, i8* %15, i64 4
  %48 = bitcast i8* %47 to i32*
  store i32 1, i32* %48, align 4
  br label %49

49:                                               ; preds = %44, %42, %39, %35, %30, %27, %24, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @set_format(i8*, i8*, i32, i32, i8*, i32) unnamed_addr #5 {
  %7 = alloca i8*, align 8
  %8 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #18
  %9 = call fastcc %struct.AVOption* @av_opt_find2(i8* %0, i8* %1, i8* null, i32 0, i8** nonnull %7)
  %10 = bitcast i8* %0 to %struct.AVClass**
  %11 = load %struct.AVClass*, %struct.AVClass** %10, align 8, !tbaa !27
  %12 = icmp ne %struct.AVOption* %9, null
  %13 = load i8*, i8** %7, align 8
  %14 = icmp ne i8* %13, null
  %15 = and i1 %12, %14
  br i1 %15, label %16, label %55

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %9, i64 0, i32 3
  %18 = load i32, i32* %17, align 4, !tbaa !588
  %19 = icmp eq i32 %18, %3
  br i1 %19, label %21, label %20

20:                                               ; preds = %16
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %0, i32 16, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.35.2483, i64 0, i64 0), i8* %1, i8* %4) #18
  br label %55

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %11, i64 0, i32 3
  %23 = load i32, i32* %22, align 8, !tbaa !583
  %24 = icmp ne i32 %23, 0
  %25 = icmp slt i32 %23, 3410788
  %26 = and i1 %24, %25
  br i1 %26, label %27, label %29

27:                                               ; preds = %21
  %28 = add nsw i32 %5, -1
  br label %42

29:                                               ; preds = %21
  %30 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %9, i64 0, i32 5
  %31 = load double, double* %30, align 8, !tbaa !597
  %32 = fcmp nsz oge double %31, -1.000000e+00
  %33 = select i1 %32, double -1.000000e+00, double %31
  %34 = fptosi double %33 to i32
  %35 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %9, i64 0, i32 6
  %36 = load double, double* %35, align 8, !tbaa !596
  %37 = add nsw i32 %5, -1
  %38 = sitofp i32 %37 to double
  %39 = fcmp nsz ogt double %36, %38
  %40 = select i1 %39, double %36, double %38
  %41 = fptosi double %40 to i32
  br label %42

42:                                               ; preds = %29, %27
  %43 = phi i32 [ -1, %27 ], [ %34, %29 ]
  %44 = phi i32 [ %28, %27 ], [ %41, %29 ]
  %45 = icmp sgt i32 %43, %2
  %46 = icmp slt i32 %44, %2
  %47 = or i1 %45, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %42
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %0, i32 16, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.36.2484, i64 0, i64 0), i32 %2, i8* %1, i8* %4, i32 %43, i32 %44) #18
  br label %55

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %9, i64 0, i32 2
  %51 = load i32, i32* %50, align 8, !tbaa !590
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %13, i64 %52
  %54 = bitcast i8* %53 to i32*
  store i32 %2, i32* %54, align 4, !tbaa !28
  br label %55

55:                                               ; preds = %49, %48, %20, %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_opt_get(i8*, i8** nocapture) unnamed_addr #5 {
  %3 = alloca i8*, align 8
  %4 = alloca [128 x i8], align 16
  %5 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #18
  %6 = call fastcc %struct.AVOption* @av_opt_find2(i8* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6.1995, i64 0, i64 0), i8* null, i32 1, i8** nonnull %3)
  %7 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %7) #18
  %8 = icmp ne %struct.AVOption* %6, null
  %9 = load i8*, i8** %3, align 8
  %10 = icmp ne i8* %9, null
  %11 = and i1 %8, %10
  br i1 %11, label %12, label %.loopexit

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %6, i64 0, i32 2
  %14 = load i32, i32* %13, align 8, !tbaa !590
  %15 = icmp slt i32 %14, 1
  %16 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %6, i64 0, i32 3
  %17 = load i32, i32* %16, align 4, !tbaa !588
  br i1 %15, label %18, label %21

18:                                               ; preds = %12
  %19 = icmp eq i32 %17, 128
  br i1 %19, label %20, label %.loopexit

20:                                               ; preds = %18
  store i8 0, i8* %7, align 16, !tbaa !33
  br label %52

21:                                               ; preds = %12
  %22 = sext i32 %14 to i64
  %23 = getelementptr inbounds i8, i8* %9, i64 %22
  store i8 0, i8* %7, align 16, !tbaa !33
  switch i32 %17, label %.loopexit [
    i32 0, label %24
    i32 1, label %28
    i32 2, label %32
    i32 4, label %36
    i32 3, label %41
    i32 6, label %45
    i32 128, label %52
    i32 5, label %57
    i32 7, label %67
    i32 1397316165, label %100
    i32 1346784596, label %107
    i32 1397116244, label %114
  ]

24:                                               ; preds = %21
  %25 = bitcast i8* %23 to i32*
  %26 = load i32, i32* %25, align 4, !tbaa !28
  %27 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.2486, i64 0, i64 0), i32 %26) #18
  br label %121

28:                                               ; preds = %21
  %29 = bitcast i8* %23 to i32*
  %30 = load i32, i32* %29, align 4, !tbaa !28
  %31 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10.2487, i64 0, i64 0), i32 %30) #18
  br label %121

32:                                               ; preds = %21
  %33 = bitcast i8* %23 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !26
  %35 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11.2488, i64 0, i64 0), i64 %34) #18
  br label %121

36:                                               ; preds = %21
  %37 = bitcast i8* %23 to float*
  %38 = load float, float* %37, align 4, !tbaa !52
  %39 = fpext float %38 to double
  %40 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.2489, i64 0, i64 0), double %39) #18
  br label %121

41:                                               ; preds = %21
  %42 = bitcast i8* %23 to double*
  %43 = load double, double* %42, align 8, !tbaa !559
  %44 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.2489, i64 0, i64 0), double %43) #18
  br label %121

45:                                               ; preds = %21
  %46 = bitcast i8* %23 to i32*
  %47 = load i32, i32* %46, align 4, !tbaa !522
  %48 = getelementptr inbounds i8, i8* %23, i64 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 4, !tbaa !598
  %51 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.2490, i64 0, i64 0), i32 %47, i32 %50) #18
  br label %121

52:                                               ; preds = %21, %20
  %53 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %6, i64 0, i32 4
  %54 = bitcast %union.anon* %53 to double*
  %55 = load double, double* %54, align 8, !tbaa !33
  %56 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.2489, i64 0, i64 0), double %55) #18
  br label %121

57:                                               ; preds = %21
  %58 = bitcast i8* %23 to i8**
  %59 = load i8*, i8** %58, align 8, !tbaa !27
  %60 = icmp eq i8* %59, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %57
  %62 = call fastcc noalias i8* @av_strdup(i8* nonnull %59) #18
  br label %65

63:                                               ; preds = %57
  %64 = call fastcc noalias i8* @av_strdup(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.15.2494, i64 0, i64 0)) #18
  br label %65

65:                                               ; preds = %63, %61
  %66 = phi i8* [ %64, %63 ], [ %62, %61 ]
  store i8* %66, i8** %1, align 8, !tbaa !27
  br label %.loopexit

67:                                               ; preds = %21
  %68 = getelementptr inbounds i8, i8* %23, i64 8
  %69 = bitcast i8* %68 to i32*
  %70 = load i32, i32* %69, align 4, !tbaa !28
  %71 = sext i32 %70 to i64
  %72 = and i64 %71, 9223372035781033984
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %.loopexit

74:                                               ; preds = %67
  %75 = shl nsw i32 %70, 1
  %76 = or i32 %75, 1
  %77 = sext i32 %76 to i64
  %78 = call fastcc noalias i8* @av_malloc(i64 %77) #18
  store i8* %78, i8** %1, align 8, !tbaa !27
  %79 = icmp eq i8* %78, null
  br i1 %79, label %.loopexit, label %80

80:                                               ; preds = %74
  %81 = bitcast i8* %23 to i8**
  %82 = load i8*, i8** %81, align 8, !tbaa !27
  %83 = icmp sgt i32 %70, 0
  br i1 %83, label %84, label %.loopexit

84:                                               ; preds = %80
  %85 = zext i32 %70 to i64
  %86 = load i8, i8* %82, align 1, !tbaa !33
  %87 = zext i8 %86 to i32
  %88 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %78, i64 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.2491, i64 0, i64 0), i32 %87) #18
  %89 = icmp eq i32 %70, 1
  br i1 %89, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %84, %.preheader
  %90 = phi i64 [ %98, %.preheader ], [ 1, %84 ]
  %91 = load i8*, i8** %1, align 8, !tbaa !27
  %92 = shl nuw nsw i64 %90, 1
  %93 = getelementptr inbounds i8, i8* %91, i64 %92
  %94 = getelementptr inbounds i8, i8* %82, i64 %90
  %95 = load i8, i8* %94, align 1, !tbaa !33
  %96 = zext i8 %95 to i32
  %97 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %93, i64 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.2491, i64 0, i64 0), i32 %96) #18
  %98 = add nuw nsw i64 %90, 1
  %99 = icmp eq i64 %98, %85
  br i1 %99, label %.loopexit, label %.preheader

100:                                              ; preds = %21
  %101 = bitcast i8* %23 to i32*
  %102 = load i32, i32* %101, align 4, !tbaa !28
  %103 = getelementptr inbounds i8, i8* %23, i64 4
  %104 = bitcast i8* %103 to i32*
  %105 = load i32, i32* %104, align 4, !tbaa !28
  %106 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.2495, i64 0, i64 0), i32 %102, i32 %105) #18
  br label %121

107:                                              ; preds = %21
  %108 = bitcast i8* %23 to i32*
  %109 = load i32, i32* %108, align 4, !tbaa !33
  %110 = call fastcc i8* @av_get_pix_fmt_name(i32 %109) #18
  %111 = icmp eq i8* %110, null
  %112 = select i1 %111, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2468, i64 0, i64 0), i8* %110
  %113 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17.2496, i64 0, i64 0), i8* %112) #18
  br label %121

114:                                              ; preds = %21
  %115 = bitcast i8* %23 to i32*
  %116 = load i32, i32* %115, align 4, !tbaa !33
  %117 = call fastcc i8* @av_get_sample_fmt_name(i32 %116) #18
  %118 = icmp eq i8* %117, null
  %119 = select i1 %118, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2468, i64 0, i64 0), i8* %117
  %120 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %7, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17.2496, i64 0, i64 0), i8* %119) #18
  br label %121

121:                                              ; preds = %114, %107, %100, %52, %45, %41, %36, %32, %28, %24
  %122 = phi i32 [ %120, %114 ], [ %113, %107 ], [ %106, %100 ], [ %56, %52 ], [ %51, %45 ], [ %44, %41 ], [ %40, %36 ], [ %35, %32 ], [ %31, %28 ], [ %27, %24 ]
  %123 = icmp ugt i32 %122, 127
  br i1 %123, label %.loopexit, label %124

124:                                              ; preds = %121
  %125 = call fastcc noalias i8* @av_strdup(i8* nonnull %7) #18
  store i8* %125, i8** %1, align 8, !tbaa !27
  br label %.loopexit

.loopexit:                                        ; preds = %.preheader, %124, %121, %84, %80, %74, %67, %65, %21, %18, %2
  %126 = phi i32 [ 0, %124 ], [ 0, %65 ], [ -1414549496, %18 ], [ -1414549496, %2 ], [ -22, %67 ], [ -12, %74 ], [ -22, %21 ], [ -22, %121 ], [ 0, %80 ], [ 0, %84 ], [ 0, %.preheader ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %7) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #18
  ret i32 %126
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_opt_set_defaults(i8*) unnamed_addr #5 {
  tail call fastcc void @av_opt_set_defaults2(i8* %0, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_opt_set_defaults2(i8*, i32, i32) unnamed_addr #5 {
  %4 = bitcast i8* %0 to %struct.AVClass**
  %5 = load %struct.AVClass*, %struct.AVClass** %4, align 8, !tbaa !27
  %6 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %5, i64 0, i32 3
  %7 = icmp eq i8* %0, null
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.backedge, %3
  %8 = phi %struct.AVOption* [ null, %3 ], [ %25, %.loopexit.backedge ]
  %9 = icmp eq %struct.AVOption* %8, null
  br i1 %9, label %10, label %19

10:                                               ; preds = %.loopexit
  %11 = load %struct.AVClass*, %struct.AVClass** %4, align 8, !tbaa !27
  %12 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %11, i64 0, i32 2
  %13 = load %struct.AVOption*, %struct.AVOption** %12, align 8, !tbaa !594
  %14 = icmp eq %struct.AVOption* %13, null
  br i1 %14, label %161, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %13, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8, !tbaa !593
  %18 = icmp eq i8* %17, null
  br i1 %18, label %161, label %24

19:                                               ; preds = %.loopexit
  %20 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %8, i64 1, i32 0
  %21 = load i8*, i8** %20, align 8, !tbaa !593
  %22 = icmp eq i8* %21, null
  %23 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %8, i64 1
  br i1 %22, label %161, label %24

24:                                               ; preds = %19, %15
  %25 = phi %struct.AVOption* [ %23, %19 ], [ %13, %15 ]
  %26 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 7
  %27 = load i32, i32* %26, align 8, !tbaa !599
  %28 = and i32 %27, %1
  %29 = icmp eq i32 %28, %2
  br i1 %29, label %30, label %.loopexit.backedge

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 3
  %32 = load i32, i32* %31, align 4, !tbaa !588
  switch i32 %32, label %158 [
    i32 128, label %.loopexit.backedge
    i32 0, label %33
    i32 1, label %33
    i32 2, label %33
    i32 3, label %38
    i32 4, label %38
    i32 6, label %76
    i32 5, label %119
    i32 1397316165, label %119
    i32 1346784596, label %126
    i32 1397116244, label %142
    i32 7, label %.loopexit.backedge
  ]

33:                                               ; preds = %30, %30, %30
  %34 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8, !tbaa !593
  %36 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 4, i32 0
  %37 = load i64, i64* %36, align 8, !tbaa !33
  tail call fastcc void @av_opt_set_int(i8* %0, i8* %35, i64 %37)
  br label %.loopexit.backedge

38:                                               ; preds = %30, %30
  %39 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 4
  %40 = bitcast %union.anon* %39 to double*
  %41 = load double, double* %40, align 8, !tbaa !33
  %42 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8, !tbaa !593
  br i1 %7, label %.loopexit.backedge, label %.preheader

.preheader:                                       ; preds = %38, %.preheader.backedge
  %44 = phi %struct.AVOption* [ %63, %.preheader.backedge ], [ null, %38 ]
  %45 = icmp eq %struct.AVOption* %44, null
  br i1 %45, label %52, label %46

46:                                               ; preds = %.preheader
  %47 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %44, i64 1, i32 0
  %48 = load i8*, i8** %47, align 8, !tbaa !593
  %49 = icmp eq i8* %48, null
  br i1 %49, label %.loopexit.backedge, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %44, i64 1
  br label %61

52:                                               ; preds = %.preheader
  %53 = load %struct.AVClass*, %struct.AVClass** %4, align 8, !tbaa !27
  %54 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %53, i64 0, i32 2
  %55 = load %struct.AVOption*, %struct.AVOption** %54, align 8, !tbaa !594
  %56 = icmp eq %struct.AVOption* %55, null
  br i1 %56, label %.loopexit.backedge, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %55, i64 0, i32 0
  %59 = load i8*, i8** %58, align 8, !tbaa !593
  %60 = icmp eq i8* %59, null
  br i1 %60, label %.loopexit.backedge, label %61

61:                                               ; preds = %57, %50
  %62 = phi i8* [ %48, %50 ], [ %59, %57 ]
  %63 = phi %struct.AVOption* [ %51, %50 ], [ %55, %57 ]
  %64 = tail call i32 @strcmp(i8* nonnull %62, i8* %43) #28
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %.preheader.backedge

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %63, i64 0, i32 3
  %68 = load i32, i32* %67, align 4, !tbaa !588
  %69 = icmp eq i32 %68, 128
  br i1 %69, label %.preheader.backedge, label %70

.preheader.backedge:                              ; preds = %66, %61
  br label %.preheader

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %63, i64 0, i32 2
  %72 = load i32, i32* %71, align 8, !tbaa !590
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %0, i64 %73
  %75 = tail call fastcc i32 @write_number(i8* nonnull %0, %struct.AVOption* nonnull %63, i8* nonnull %74, double %41, i32 1) #18
  br label %.loopexit.backedge

76:                                               ; preds = %30
  %77 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 4
  %78 = bitcast %union.anon* %77 to double*
  %79 = load double, double* %78, align 8, !tbaa !33
  %80 = tail call fastcc i64 @av_d2q(double %79, i32 2147483647) #29
  %81 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 0
  %82 = load i8*, i8** %81, align 8, !tbaa !593
  br i1 %7, label %.loopexit.backedge, label %.preheader10

.preheader10:                                     ; preds = %76, %.preheader10.backedge
  %83 = phi %struct.AVOption* [ %102, %.preheader10.backedge ], [ null, %76 ]
  %84 = icmp eq %struct.AVOption* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %.preheader10
  %86 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %83, i64 1, i32 0
  %87 = load i8*, i8** %86, align 8, !tbaa !593
  %88 = icmp eq i8* %87, null
  br i1 %88, label %.loopexit.backedge, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %83, i64 1
  br label %100

91:                                               ; preds = %.preheader10
  %92 = load %struct.AVClass*, %struct.AVClass** %4, align 8, !tbaa !27
  %93 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %92, i64 0, i32 2
  %94 = load %struct.AVOption*, %struct.AVOption** %93, align 8, !tbaa !594
  %95 = icmp eq %struct.AVOption* %94, null
  br i1 %95, label %.loopexit.backedge, label %96

96:                                               ; preds = %91
  %97 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %94, i64 0, i32 0
  %98 = load i8*, i8** %97, align 8, !tbaa !593
  %99 = icmp eq i8* %98, null
  br i1 %99, label %.loopexit.backedge, label %100

100:                                              ; preds = %96, %89
  %101 = phi i8* [ %87, %89 ], [ %98, %96 ]
  %102 = phi %struct.AVOption* [ %90, %89 ], [ %94, %96 ]
  %103 = tail call i32 @strcmp(i8* nonnull %101, i8* %82) #28
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %.preheader10.backedge

105:                                              ; preds = %100
  %106 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %102, i64 0, i32 3
  %107 = load i32, i32* %106, align 4, !tbaa !588
  %108 = icmp eq i32 %107, 128
  br i1 %108, label %.preheader10.backedge, label %109

.preheader10.backedge:                            ; preds = %105, %100
  br label %.preheader10

109:                                              ; preds = %105
  %110 = trunc i64 %80 to i32
  %111 = sitofp i32 %110 to double
  %112 = lshr i64 %80, 32
  %113 = trunc i64 %112 to i32
  %114 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %102, i64 0, i32 2
  %115 = load i32, i32* %114, align 8, !tbaa !590
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %0, i64 %116
  %118 = tail call fastcc i32 @write_number(i8* nonnull %0, %struct.AVOption* nonnull %102, i8* nonnull %117, double %111, i32 %113) #18
  br label %.loopexit.backedge

119:                                              ; preds = %30, %30
  %120 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 0
  %121 = load i8*, i8** %120, align 8, !tbaa !593
  %122 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 4
  %123 = bitcast %union.anon* %122 to i8**
  %124 = load i8*, i8** %123, align 8, !tbaa !33
  %125 = tail call fastcc i32 @av_opt_set(i8* %0, i8* %121, i8* %124)
  br label %.loopexit.backedge

126:                                              ; preds = %30
  %127 = load i32, i32* %6, align 8, !tbaa !583
  %128 = icmp ne i32 %127, 0
  %129 = icmp slt i32 %127, 3410532
  %130 = and i1 %128, %129
  %131 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 0
  %132 = load i8*, i8** %131, align 8, !tbaa !593
  br i1 %130, label %133, label %138

133:                                              ; preds = %126
  %134 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 4
  %135 = bitcast %union.anon* %134 to i8**
  %136 = load i8*, i8** %135, align 8, !tbaa !33
  %137 = tail call fastcc i32 @av_opt_set(i8* %0, i8* %132, i8* %136)
  br label %.loopexit.backedge

138:                                              ; preds = %126
  %139 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 4, i32 0
  %140 = load i64, i64* %139, align 8, !tbaa !33
  %141 = trunc i64 %140 to i32
  tail call fastcc void @set_format(i8* %0, i8* %132, i32 %141, i32 1346784596, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.2482, i64 0, i64 0), i32 317) #18
  br label %.loopexit.backedge

142:                                              ; preds = %30
  %143 = load i32, i32* %6, align 8, !tbaa !583
  %144 = icmp ne i32 %143, 0
  %145 = icmp slt i32 %143, 3410532
  %146 = and i1 %144, %145
  %147 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 0
  %148 = load i8*, i8** %147, align 8, !tbaa !593
  br i1 %146, label %149, label %154

149:                                              ; preds = %142
  %150 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 4
  %151 = bitcast %union.anon* %150 to i8**
  %152 = load i8*, i8** %151, align 8, !tbaa !33
  %153 = tail call fastcc i32 @av_opt_set(i8* %0, i8* %148, i8* %152)
  br label %.loopexit.backedge

154:                                              ; preds = %142
  %155 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 4, i32 0
  %156 = load i64, i64* %155, align 8, !tbaa !33
  %157 = trunc i64 %156 to i32
  tail call fastcc void @set_format(i8* %0, i8* %148, i32 %157, i32 1397116244, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.2485, i64 0, i64 0), i32 10) #18
  br label %.loopexit.backedge

158:                                              ; preds = %30
  %159 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %25, i64 0, i32 0
  %160 = load i8*, i8** %159, align 8, !tbaa !593
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %0, i32 48, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.20.2531, i64 0, i64 0), i32 %32, i8* %160) #18
  br label %.loopexit.backedge

.loopexit.backedge:                               ; preds = %85, %91, %96, %46, %52, %57, %158, %154, %149, %138, %133, %119, %109, %76, %70, %38, %33, %30, %30, %24
  br label %.loopexit

161:                                              ; preds = %19, %15, %10
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @av_opt_free(i8* nocapture) unnamed_addr #5 {
  %2 = bitcast i8* %0 to %struct.AVClass**
  br label %3

3:                                                ; preds = %.backedge, %1
  %4 = phi %struct.AVOption* [ null, %1 ], [ %21, %.backedge ]
  %5 = icmp eq %struct.AVOption* %4, null
  br i1 %5, label %6, label %15

6:                                                ; preds = %3
  %7 = load %struct.AVClass*, %struct.AVClass** %2, align 8, !tbaa !27
  %8 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %7, i64 0, i32 2
  %9 = load %struct.AVOption*, %struct.AVOption** %8, align 8, !tbaa !594
  %10 = icmp eq %struct.AVOption* %9, null
  br i1 %10, label %29, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %9, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8, !tbaa !593
  %14 = icmp eq i8* %13, null
  br i1 %14, label %29, label %20

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %4, i64 1, i32 0
  %17 = load i8*, i8** %16, align 8, !tbaa !593
  %18 = icmp eq i8* %17, null
  %19 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %4, i64 1
  br i1 %18, label %29, label %20

20:                                               ; preds = %15, %11
  %21 = phi %struct.AVOption* [ %19, %15 ], [ %9, %11 ]
  %22 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %21, i64 0, i32 3
  %23 = load i32, i32* %22, align 4, !tbaa !588
  switch i32 %23, label %.backedge [
    i32 5, label %24
    i32 7, label %24
  ]

24:                                               ; preds = %20, %20
  %25 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %21, i64 0, i32 2
  %26 = load i32, i32* %25, align 8, !tbaa !590
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  tail call fastcc void @av_freep(i8* %28) #18
  br label %.backedge

.backedge:                                        ; preds = %24, %20
  br label %3

29:                                               ; preds = %15, %11, %6
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_opt_set_dict(i8*, %struct.AVDictionary** nocapture) unnamed_addr #5 {
  %3 = alloca %struct.AVDictionary*, align 8
  %4 = bitcast %struct.AVDictionary** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #18
  store %struct.AVDictionary* null, %struct.AVDictionary** %3, align 8, !tbaa !27
  %5 = load %struct.AVDictionary*, %struct.AVDictionary** %1, align 8, !tbaa !27
  %6 = tail call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.15.2494, i64 0, i64 0), %struct.AVCodecDefault* null, i32 2) #18
  %7 = icmp eq %struct.AVCodecDefault* %6, null
  br i1 %7, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %2, %24
  %8 = phi %struct.AVCodecDefault* [ %26, %24 ], [ %6, %2 ]
  %9 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %8, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8, !tbaa !414
  %11 = getelementptr inbounds %struct.AVCodecDefault, %struct.AVCodecDefault* %8, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8, !tbaa !384
  %13 = tail call fastcc i32 @av_opt_set(i8* %0, i8* %10, i8* %12)
  %14 = icmp eq i32 %13, -1414549496
  br i1 %14, label %15, label %19

15:                                               ; preds = %.preheader
  %16 = load i8*, i8** %9, align 8, !tbaa !414
  %17 = load i8*, i8** %11, align 8, !tbaa !384
  %18 = call fastcc i32 @av_dict_set(%struct.AVDictionary** nonnull %3, i8* %16, i8* %17, i32 0) #18
  br label %24

19:                                               ; preds = %.preheader
  %20 = icmp slt i32 %13, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %19
  %22 = load i8*, i8** %9, align 8, !tbaa !414
  %23 = load i8*, i8** %11, align 8, !tbaa !384
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %0, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.25.2544, i64 0, i64 0), i8* %22, i8* %23) #18
  br label %.loopexit

24:                                               ; preds = %19, %15
  %25 = load %struct.AVDictionary*, %struct.AVDictionary** %1, align 8, !tbaa !27
  %26 = tail call fastcc %struct.AVCodecDefault* @av_dict_get(%struct.AVDictionary* %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.15.2494, i64 0, i64 0), %struct.AVCodecDefault* nonnull %8, i32 2) #18
  %27 = icmp eq %struct.AVCodecDefault* %26, null
  br i1 %27, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %24, %21, %2
  %28 = phi i32 [ %13, %21 ], [ 0, %2 ], [ 0, %24 ]
  tail call fastcc void @av_dict_free(%struct.AVDictionary** %1) #18
  %29 = bitcast %struct.AVDictionary** %3 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !27
  %31 = bitcast %struct.AVDictionary** %1 to i64*
  store i64 %30, i64* %31, align 8, !tbaa !27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #18
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_parse_video_size(i32* nocapture, i32* nocapture, i8*) unnamed_addr #5 {
  %4 = alloca i8*, align 8
  %5 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #18
  %6 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.2548, i64 0, i64 0), i8* %2) #28
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %143, %140, %137, %134, %131, %128, %125, %122, %119, %116, %113, %110, %107, %104, %101, %98, %95, %92, %89, %86, %83, %80, %77, %74, %71, %68, %65, %62, %59, %56, %53, %50, %47, %44, %41, %14, %3
  %9 = phi i64 [ 0, %3 ], [ 1, %14 ], [ 2, %41 ], [ 3, %44 ], [ 4, %47 ], [ 5, %50 ], [ 6, %53 ], [ 7, %56 ], [ 8, %59 ], [ 9, %62 ], [ 10, %65 ], [ 11, %68 ], [ 12, %71 ], [ 13, %74 ], [ 14, %77 ], [ 15, %80 ], [ 16, %83 ], [ 17, %86 ], [ 18, %89 ], [ 19, %92 ], [ 20, %95 ], [ 21, %98 ], [ 22, %101 ], [ 23, %104 ], [ 24, %107 ], [ 25, %110 ], [ 26, %113 ], [ 27, %116 ], [ 28, %119 ], [ 29, %122 ], [ 30, %125 ], [ 31, %128 ], [ 32, %131 ], [ 33, %134 ], [ 34, %137 ], [ 35, %140 ], [ 36, %143 ]
  %10 = getelementptr inbounds [37 x %struct.anon], [37 x %struct.anon]* @video_size_abbrs, i64 0, i64 %9, i32 1
  %11 = load i32, i32* %10, align 8, !tbaa !600
  %12 = getelementptr inbounds [37 x %struct.anon], [37 x %struct.anon]* @video_size_abbrs, i64 0, i64 %9, i32 2
  %13 = load i32, i32* %12, align 4, !tbaa !602
  br label %32

14:                                               ; preds = %3
  %15 = tail call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.2549, i64 0, i64 0), i8* %2) #28
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %8, label %41

17:                                               ; preds = %143
  %18 = call i64 @strtol(i8* %2, i8** nonnull %4, i32 10) #18
  %19 = trunc i64 %18 to i32
  %20 = load i8*, i8** %4, align 8, !tbaa !27
  %21 = load i8, i8* %20, align 1, !tbaa !33
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %24, i8** %4, align 8, !tbaa !27
  br label %25

25:                                               ; preds = %23, %17
  %26 = phi i8* [ %20, %17 ], [ %24, %23 ]
  %27 = call i64 @strtol(i8* %26, i8** nonnull %4, i32 10) #18
  %28 = trunc i64 %27 to i32
  %29 = load i8*, i8** %4, align 8, !tbaa !27
  %30 = load i8, i8* %29, align 1, !tbaa !33
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %39

32:                                               ; preds = %25, %8
  %33 = phi i32 [ %19, %25 ], [ %11, %8 ]
  %34 = phi i32 [ %28, %25 ], [ %13, %8 ]
  %35 = icmp slt i32 %33, 1
  %36 = icmp slt i32 %34, 1
  %37 = or i1 %35, %36
  br i1 %37, label %39, label %38

38:                                               ; preds = %32
  store i32 %33, i32* %0, align 4, !tbaa !28
  store i32 %34, i32* %1, align 4, !tbaa !28
  br label %39

39:                                               ; preds = %38, %32, %25
  %40 = phi i32 [ 0, %38 ], [ -22, %25 ], [ -22, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #18
  ret i32 %40

41:                                               ; preds = %14
  %42 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.2550, i64 0, i64 0), i8* %2) #28
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %8, label %44

44:                                               ; preds = %41
  %45 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17.2551, i64 0, i64 0), i8* %2) #28
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %8, label %47

47:                                               ; preds = %44
  %48 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18.2552, i64 0, i64 0), i8* %2) #28
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %8, label %50

50:                                               ; preds = %47
  %51 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.2553, i64 0, i64 0), i8* %2) #28
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %8, label %53

53:                                               ; preds = %50
  %54 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20.2554, i64 0, i64 0), i8* %2) #28
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %8, label %56

56:                                               ; preds = %53
  %57 = tail call i32 @strcmp(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21.2555, i64 0, i64 0), i8* %2) #28
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %8, label %59

59:                                               ; preds = %56
  %60 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22.2556, i64 0, i64 0), i8* %2) #28
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %8, label %62

62:                                               ; preds = %59
  %63 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23.2557, i64 0, i64 0), i8* %2) #28
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %8, label %65

65:                                               ; preds = %62
  %66 = tail call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24.2558, i64 0, i64 0), i8* %2) #28
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %8, label %68

68:                                               ; preds = %65
  %69 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25.2559, i64 0, i64 0), i8* %2) #28
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %8, label %71

71:                                               ; preds = %68
  %72 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26.2560, i64 0, i64 0), i8* %2) #28
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %8, label %74

74:                                               ; preds = %71
  %75 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27.2561, i64 0, i64 0), i8* %2) #28
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %8, label %77

77:                                               ; preds = %74
  %78 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28.2562, i64 0, i64 0), i8* %2) #28
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %8, label %80

80:                                               ; preds = %77
  %81 = tail call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29.2563, i64 0, i64 0), i8* %2) #28
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %8, label %83

83:                                               ; preds = %80
  %84 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30.2564, i64 0, i64 0), i8* %2) #28
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %8, label %86

86:                                               ; preds = %83
  %87 = tail call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31.2565, i64 0, i64 0), i8* %2) #28
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %8, label %89

89:                                               ; preds = %86
  %90 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32.2566, i64 0, i64 0), i8* %2) #28
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %8, label %92

92:                                               ; preds = %89
  %93 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33.2567, i64 0, i64 0), i8* %2) #28
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %8, label %95

95:                                               ; preds = %92
  %96 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34.2568, i64 0, i64 0), i8* %2) #28
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %8, label %98

98:                                               ; preds = %95
  %99 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35.2569, i64 0, i64 0), i8* %2) #28
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %8, label %101

101:                                              ; preds = %98
  %102 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36.2570, i64 0, i64 0), i8* %2) #28
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %8, label %104

104:                                              ; preds = %101
  %105 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37.2571, i64 0, i64 0), i8* %2) #28
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %8, label %107

107:                                              ; preds = %104
  %108 = tail call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38.2572, i64 0, i64 0), i8* %2) #28
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %8, label %110

110:                                              ; preds = %107
  %111 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39.2573, i64 0, i64 0), i8* %2) #28
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %8, label %113

113:                                              ; preds = %110
  %114 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40.2574, i64 0, i64 0), i8* %2) #28
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %8, label %116

116:                                              ; preds = %113
  %117 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41.2575, i64 0, i64 0), i8* %2) #28
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %8, label %119

119:                                              ; preds = %116
  %120 = tail call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.42.2576, i64 0, i64 0), i8* %2) #28
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %8, label %122

122:                                              ; preds = %119
  %123 = tail call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43.2577, i64 0, i64 0), i8* %2) #28
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %8, label %125

125:                                              ; preds = %122
  %126 = tail call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44.2578, i64 0, i64 0), i8* %2) #28
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %8, label %128

128:                                              ; preds = %125
  %129 = tail call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45.2579, i64 0, i64 0), i8* %2) #28
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %8, label %131

131:                                              ; preds = %128
  %132 = tail call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.46.2580, i64 0, i64 0), i8* %2) #28
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %8, label %134

134:                                              ; preds = %131
  %135 = tail call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47.2581, i64 0, i64 0), i8* %2) #28
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %8, label %137

137:                                              ; preds = %134
  %138 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48.2582, i64 0, i64 0), i8* %2) #28
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %8, label %140

140:                                              ; preds = %137
  %141 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49.2583, i64 0, i64 0), i8* %2) #28
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %8, label %143

143:                                              ; preds = %140
  %144 = tail call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.50.2584, i64 0, i64 0), i8* %2) #28
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %8, label %17
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc i8* @av_get_pix_fmt_name(i32) unnamed_addr #11 {
  %2 = icmp ult i32 %0, 317
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %4, i32 0
  %6 = load i8*, i8** %5, align 8, !tbaa !603
  br label %7

7:                                                ; preds = %3, %1
  %8 = phi i8* [ %6, %3 ], [ null, %1 ]
  ret i8* %8
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @av_get_pix_fmt(i8*) unnamed_addr #5 {
  %2 = alloca [32 x i8], align 16
  %3 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.134.2880, i64 0, i64 0)) #28
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.135.2881, i64 0, i64 0)) #28
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28.2770, i64 0, i64 0), i8* %0
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30.2772, i64 0, i64 0), %1 ], [ %8, %5 ]
  br label %11

11:                                               ; preds = %19, %9
  %12 = phi i64 [ 0, %9 ], [ %20, %19 ]
  %13 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %12, i32 0
  %14 = load i8*, i8** %13, align 8, !tbaa !603
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %11
  %17 = tail call i32 @strcmp(i8* nonnull %14, i8* %10) #28
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %16, %11
  %20 = add nuw nsw i64 %12, 1
  %21 = icmp eq i64 %20, 317
  br i1 %21, label %.loopexit5, label %11

22:                                               ; preds = %16
  %23 = trunc i64 %12 to i32
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %.loopexit5, label %41

.loopexit5:                                       ; preds = %19, %22
  %25 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #18
  %26 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %25, i64 32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.136.2882, i64 0, i64 0), i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.137.2883, i64 0, i64 0)) #18
  br label %27

27:                                               ; preds = %35, %.loopexit5
  %28 = phi i64 [ 0, %.loopexit5 ], [ %36, %35 ]
  %29 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %28, i32 0
  %30 = load i8*, i8** %29, align 8, !tbaa !603
  %31 = icmp eq i8* %30, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %27
  %33 = call i32 @strcmp(i8* nonnull %30, i8* nonnull %25) #28
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %32, %27
  %36 = add nuw nsw i64 %28, 1
  %37 = icmp eq i64 %36, 317
  br i1 %37, label %.loopexit, label %27

38:                                               ; preds = %32
  %39 = trunc i64 %28 to i32
  br label %.loopexit

.loopexit:                                        ; preds = %35, %38
  %40 = phi i32 [ %39, %38 ], [ -1, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #18
  br label %41

41:                                               ; preds = %.loopexit, %22
  %42 = phi i32 [ %40, %.loopexit ], [ %23, %22 ]
  ret i32 %42
}

; Function Attrs: norecurse nounwind readonly uwtable
define internal fastcc i32 @av_get_bits_per_pixel(%struct.AVPixFmtDescriptor* nocapture readonly) unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 1, !tbaa !569
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 2, !tbaa !570
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, %4
  %9 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8, !tbaa !575
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %65, label %12

12:                                               ; preds = %1
  %13 = zext i8 %10 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i8 %10, 1
  br i1 %15, label %.loopexit, label %16

16:                                               ; preds = %12
  %17 = sub nuw nsw i64 %13, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %45, %18 ]
  %20 = phi i32 [ 0, %16 ], [ %44, %18 ]
  %21 = phi i64 [ %17, %16 ], [ %46, %18 ]
  %22 = trunc i64 %19 to i32
  %23 = icmp eq i32 %22, 2
  %24 = select i1 %23, i32 0, i32 %8
  %25 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %0, i64 0, i32 5, i64 %19, i32 0
  %26 = load i16, i16* %25, align 2
  %27 = lshr i16 %26, 11
  %28 = and i16 %27, 15
  %29 = add nuw nsw i16 %28, 1
  %30 = zext i16 %29 to i32
  %31 = shl i32 %30, %24
  %32 = add nsw i32 %31, %20
  %33 = or i64 %19, 1
  %34 = trunc i64 %33 to i32
  %35 = icmp eq i32 %34, 1
  %36 = select i1 %35, i32 0, i32 %8
  %37 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %0, i64 0, i32 5, i64 %33, i32 0
  %38 = load i16, i16* %37, align 2
  %39 = lshr i16 %38, 11
  %40 = and i16 %39, 15
  %41 = add nuw nsw i16 %40, 1
  %42 = zext i16 %41 to i32
  %43 = shl i32 %42, %36
  %44 = add nsw i32 %32, %43
  %45 = add nuw nsw i64 %19, 2
  %46 = add i64 %21, -2
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %.loopexit, label %18

.loopexit:                                        ; preds = %18, %12
  %48 = phi i32 [ undef, %12 ], [ %44, %18 ]
  %49 = phi i64 [ 0, %12 ], [ %45, %18 ]
  %50 = phi i32 [ 0, %12 ], [ %44, %18 ]
  %51 = icmp eq i64 %14, 0
  br i1 %51, label %65, label %52

52:                                               ; preds = %.loopexit
  %53 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %0, i64 0, i32 5, i64 %49, i32 0
  %54 = load i16, i16* %53, align 2
  %55 = lshr i16 %54, 11
  %56 = and i16 %55, 15
  %57 = add nuw nsw i16 %56, 1
  %58 = zext i16 %57 to i32
  %59 = trunc i64 %49 to i32
  %60 = add i32 %59, -1
  %61 = icmp ult i32 %60, 2
  %62 = select i1 %61, i32 0, i32 %8
  %63 = shl i32 %58, %62
  %64 = add nsw i32 %63, %50
  br label %65

65:                                               ; preds = %52, %.loopexit, %1
  %66 = phi i32 [ 0, %1 ], [ %48, %.loopexit ], [ %64, %52 ]
  %67 = ashr i32 %66, %8
  ret i32 %67
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32) unnamed_addr #11 {
  %2 = icmp ugt i32 %0, 316
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %3
  %5 = select i1 %2, %struct.AVPixFmtDescriptor* null, %struct.AVPixFmtDescriptor* %4
  ret %struct.AVPixFmtDescriptor* %5
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define internal fastcc void @av_pix_fmt_get_chroma_sub_sample(i32, i32* nocapture, i32* nocapture) unnamed_addr #7 {
  %4 = icmp ugt i32 %0, 316
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %5
  %7 = icmp eq %struct.AVPixFmtDescriptor* %6, null
  %8 = or i1 %4, %7
  br i1 %8, label %16, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %5, i32 2
  %11 = load i8, i8* %10, align 1, !tbaa !569
  %12 = zext i8 %11 to i32
  store i32 %12, i32* %1, align 4, !tbaa !28
  %13 = getelementptr inbounds [317 x %struct.AVPixFmtDescriptor], [317 x %struct.AVPixFmtDescriptor]* bitcast (<{ { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, [4 x { i8, i8 }] }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> }, { i8*, i8, i8, i8, i8, <{ { i8, i8 }, { i8, i8 }, { i8, i8 }, %struct.AVComponentDescriptor }> } }>* @av_pix_fmt_descriptors to [317 x %struct.AVPixFmtDescriptor]*), i64 0, i64 %5, i32 3
  %14 = load i8, i8* %13, align 2, !tbaa !570
  %15 = zext i8 %14 to i32
  store i32 %15, i32* %2, align 4, !tbaa !28
  br label %16

16:                                               ; preds = %9, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define internal fastcc i32 @av_reduce(i32* nocapture, i32* nocapture, i64, i64, i64) unnamed_addr #7 {
  %6 = xor i64 %3, %2
  %7 = icmp slt i64 %2, 0
  %8 = sub nsw i64 0, %2
  %9 = select i1 %7, i64 %8, i64 %2
  %10 = icmp slt i64 %3, 0
  %11 = sub nsw i64 0, %3
  %12 = select i1 %10, i64 %11, i64 %3
  %13 = tail call fastcc i64 @av_gcd(i64 %9, i64 %12) #29
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %5
  %16 = sdiv i64 %9, %13
  %17 = sdiv i64 %12, %13
  br label %18

18:                                               ; preds = %15, %5
  %19 = phi i64 [ %17, %15 ], [ %3, %5 ]
  %20 = phi i64 [ %16, %15 ], [ %2, %5 ]
  %21 = icmp sgt i64 %20, %4
  %22 = icmp sgt i64 %19, %4
  %23 = or i1 %22, %21
  %24 = trunc i64 %20 to i32
  %25 = trunc i64 %19 to i32
  %26 = select i1 %23, i32 1, i32 %24
  %27 = select i1 %23, i32 0, i32 %25
  %28 = icmp eq i64 %19, 0
  %.demorgan = or i1 %22, %21
  %29 = xor i1 %.demorgan, true
  %30 = or i1 %28, %29
  br i1 %30, label %84, label %.preheader

.preheader:                                       ; preds = %18, %76
  %31 = phi i64 [ %32, %76 ], [ %20, %18 ]
  %32 = phi i64 [ %78, %76 ], [ %19, %18 ]
  %33 = phi i32 [ %35, %76 ], [ 1, %18 ]
  %34 = phi i32 [ %36, %76 ], [ 0, %18 ]
  %35 = phi i32 [ %80, %76 ], [ %27, %18 ]
  %36 = phi i32 [ %79, %76 ], [ %26, %18 ]
  %37 = sdiv i64 %31, %32
  %38 = sext i32 %36 to i64
  %39 = mul i64 %37, %38
  %40 = sext i32 %34 to i64
  %41 = add i64 %39, %40
  %42 = sext i32 %35 to i64
  %43 = mul i64 %37, %42
  %44 = sext i32 %33 to i64
  %45 = add i64 %43, %44
  %46 = icmp sgt i64 %41, %4
  %47 = icmp sgt i64 %45, %4
  %48 = or i1 %46, %47
  br i1 %48, label %49, label %76

49:                                               ; preds = %.preheader
  %50 = icmp eq i32 %36, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %49
  %52 = sub nsw i64 %4, %40
  %53 = sdiv i64 %52, %38
  br label %54

54:                                               ; preds = %51, %49
  %55 = phi i64 [ %53, %51 ], [ %37, %49 ]
  %56 = icmp eq i32 %35, 0
  br i1 %56, label %62, label %57

57:                                               ; preds = %54
  %58 = sub nsw i64 %4, %44
  %59 = sdiv i64 %58, %42
  %60 = icmp ugt i64 %55, %59
  %61 = select i1 %60, i64 %59, i64 %55
  br label %62

62:                                               ; preds = %57, %54
  %63 = phi i64 [ %61, %57 ], [ %55, %54 ]
  %64 = shl nsw i64 %42, 1
  %65 = mul i64 %64, %63
  %66 = add i64 %65, %44
  %67 = mul i64 %66, %32
  %68 = mul nsw i64 %31, %42
  %69 = icmp ugt i64 %67, %68
  br i1 %69, label %70, label %84

70:                                               ; preds = %62
  %71 = trunc i64 %63 to i32
  %72 = mul i32 %36, %71
  %73 = add i32 %72, %34
  %74 = mul i32 %35, %71
  %75 = add i32 %74, %33
  br label %84

76:                                               ; preds = %.preheader
  %77 = mul i64 %37, %32
  %78 = sub i64 %31, %77
  %79 = trunc i64 %41 to i32
  %80 = trunc i64 %45 to i32
  %81 = icmp eq i64 %78, 0
  br i1 %81, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %76
  %82 = trunc i64 %41 to i32
  %83 = trunc i64 %45 to i32
  br label %84

84:                                               ; preds = %.loopexit, %70, %62, %18
  %85 = phi i64 [ %32, %62 ], [ %32, %70 ], [ 0, %18 ], [ 0, %.loopexit ]
  %86 = phi i32 [ %36, %62 ], [ %73, %70 ], [ %26, %18 ], [ %82, %.loopexit ]
  %87 = phi i32 [ %35, %62 ], [ %75, %70 ], [ %27, %18 ], [ %83, %.loopexit ]
  %88 = icmp slt i64 %6, 0
  %89 = sub nsw i32 0, %86
  %90 = select i1 %88, i32 %89, i32 %86
  store i32 %90, i32* %0, align 4, !tbaa !28
  store i32 %87, i32* %1, align 4, !tbaa !28
  %91 = icmp eq i64 %85, 0
  %92 = zext i1 %91 to i32
  ret i32 %92
}

; Function Attrs: nounwind readnone uwtable
define internal fastcc i64 @av_d2q(double, i32) unnamed_addr #25 {
  %3 = alloca %struct.AVRational, align 4
  %4 = bitcast %struct.AVRational* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #18
  %5 = fcmp nsz uno double %0, 0.000000e+00
  br i1 %5, label %34, label %6

6:                                                ; preds = %2
  %7 = tail call nsz double @llvm.fabs.f64(double %0) #30
  %8 = fcmp nsz oeq double %7, 0x7FF0000000000000
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %10 = fcmp nsz olt double %0, 0.000000e+00
  %11 = select i1 %10, i32 -1, i32 1
  br label %34

12:                                               ; preds = %6
  %13 = fadd nsz double %7, 0x3BC79CA10C924223
  %14 = tail call nsz double @llvm.log.f64(double %13)
  %15 = fdiv nsz double %14, 0x3FE62E42FEFA39EF
  %16 = fptosi double %15 to i32
  %17 = icmp sgt i32 %16, 0
  %18 = sub i32 61, %16
  %19 = select i1 %17, i32 %18, i32 61
  %20 = zext i32 %19 to i64
  %21 = shl i64 1, %20
  %22 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %3, i64 0, i32 0
  %23 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %3, i64 0, i32 1
  %24 = sitofp i64 %21 to double
  %25 = fmul nsz double %24, %0
  %26 = fadd nsz double %25, 5.000000e-01
  %27 = fptosi double %26 to i64
  %28 = sext i32 %1 to i64
  %29 = call fastcc i32 @av_reduce(i32* nonnull %22, i32* nonnull %23, i64 %27, i64 %21, i64 %28)
  %30 = load i32, i32* %22, align 4
  %31 = load i32, i32* %23, align 4
  %32 = zext i32 %31 to i64
  %33 = shl nuw i64 %32, 32
  br label %34

34:                                               ; preds = %12, %9, %2
  %35 = phi i32 [ %11, %9 ], [ %30, %12 ], [ 0, %2 ]
  %36 = phi i64 [ 0, %9 ], [ %33, %12 ], [ 0, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #18
  %37 = zext i32 %35 to i64
  %38 = or i64 %36, %37
  ret i64 %38
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc i8* @av_get_sample_fmt_name(i32) unnamed_addr #11 {
  %2 = icmp ugt i32 %0, 9
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %3, i32 0, i64 0
  %5 = select i1 %2, i8* null, i8* %4
  ret i8* %5
}

; Function Attrs: nounwind readonly uwtable
define internal fastcc i32 @av_get_sample_fmt(i8* nocapture readonly) unnamed_addr #22 {
  %2 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 0, i32 0, i64 0), i8* %0) #28
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 1, i32 0, i64 0), i8* %0) #28
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %27, %24, %21, %18, %15, %12, %9, %4, %1
  %8 = phi i32 [ 0, %1 ], [ 1, %4 ], [ 2, %9 ], [ 3, %12 ], [ 4, %15 ], [ 5, %18 ], [ 6, %21 ], [ 7, %24 ], [ 8, %27 ]
  ret i32 %8

9:                                                ; preds = %4
  %10 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 2, i32 0, i64 0), i8* %0) #28
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %7, label %12

12:                                               ; preds = %9
  %13 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 3, i32 0, i64 0), i8* %0) #28
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %7, label %15

15:                                               ; preds = %12
  %16 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 4, i32 0, i64 0), i8* %0) #28
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %7, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 5, i32 0, i64 0), i8* %0) #28
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %7, label %21

21:                                               ; preds = %18
  %22 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 6, i32 0, i64 0), i8* %0) #28
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %7, label %24

24:                                               ; preds = %21
  %25 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 7, i32 0, i64 0), i8* %0) #28
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %7, label %27

27:                                               ; preds = %24
  %28 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 8, i32 0, i64 0), i8* %0) #28
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %7, label %30

30:                                               ; preds = %27
  %31 = tail call i32 @strcmp(i8* nonnull getelementptr inbounds ([10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 9, i32 0, i64 0), i8* %0) #28
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, i32 9, i32 -1
  ret i32 %33
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc i32 @av_get_planar_sample_fmt(i32) unnamed_addr #11 {
  %2 = icmp ugt i32 %0, 9
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = add nsw i64 %4, -5
  %6 = icmp ult i64 %5, 5
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds [10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %4, i32 3
  %9 = load i32, i32* %8, align 4, !tbaa !604
  br label %10

10:                                               ; preds = %7, %3, %1
  %11 = phi i32 [ %9, %7 ], [ -1, %1 ], [ %0, %3 ]
  ret i32 %11
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc i32 @av_sample_fmt_is_planar(i32) unnamed_addr #11 {
  %2 = icmp ugt i32 %0, 9
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %4, i32 2
  %6 = load i32, i32* %5, align 4, !tbaa !606
  br label %7

7:                                                ; preds = %3, %1
  %8 = phi i32 [ %6, %3 ], [ 0, %1 ]
  ret i32 %8
}

; Function Attrs: nofree norecurse nounwind readnone uwtable
define internal fastcc i32 @av_samples_get_buffer_size(i32, i32, i32) unnamed_addr #26 {
  %4 = icmp ugt i32 %2, 9
  br i1 %4, label %33, label %5

5:                                                ; preds = %3
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds [10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %6, i32 1
  %8 = load i32, i32* %7, align 4, !tbaa !607
  %9 = ashr i32 %8, 3
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %1, 1
  %12 = or i1 %11, %10
  %13 = icmp slt i32 %0, 1
  %14 = or i1 %13, %12
  br i1 %14, label %33, label %15

15:                                               ; preds = %5
  %16 = add nuw nsw i32 %1, 31
  %17 = and i32 %16, -32
  %18 = sext i32 %0 to i64
  %19 = sext i32 %17 to i64
  %20 = mul nsw i64 %19, %18
  %21 = sub nuw nsw i32 2147483647, %0
  %22 = sdiv i32 %21, %9
  %23 = sext i32 %22 to i64
  %24 = icmp sgt i64 %20, %23
  br i1 %24, label %33, label %25

25:                                               ; preds = %15
  %26 = add nsw i64 %6, -5
  %27 = icmp ult i64 %26, 5
  %28 = select i1 %27, i32 1, i32 %0
  %29 = select i1 %27, i32 %0, i32 1
  %30 = mul i32 %28, %17
  %31 = mul i32 %30, %29
  %32 = mul i32 %31, %9
  br label %33

33:                                               ; preds = %25, %15, %5, %3
  %34 = phi i32 [ %32, %25 ], [ -22, %5 ], [ -22, %15 ], [ -22, %3 ]
  ret i32 %34
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define internal fastcc i32 @av_samples_fill_arrays(i8** nocapture, i32*, i8*, i32, i32, i32) unnamed_addr #7 {
  %7 = icmp ugt i32 %5, 9
  br i1 %7, label %92, label %8

8:                                                ; preds = %6
  %9 = sext i32 %5 to i64
  %10 = getelementptr inbounds [10 x %struct.SampleFmtInfo], [10 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %9, i32 1
  %11 = load i32, i32* %10, align 4, !tbaa !607
  %12 = ashr i32 %11, 3
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %4, 1
  %15 = or i1 %14, %13
  %16 = icmp slt i32 %3, 1
  %17 = or i1 %16, %15
  br i1 %17, label %92, label %18

18:                                               ; preds = %8
  %19 = add nuw nsw i32 %4, 31
  %20 = and i32 %19, -32
  %21 = sext i32 %3 to i64
  %22 = sext i32 %20 to i64
  %23 = mul nsw i64 %22, %21
  %24 = sub nuw nsw i32 2147483647, %3
  %25 = sdiv i32 %24, %12
  %26 = sext i32 %25 to i64
  %27 = icmp sgt i64 %23, %26
  br i1 %27, label %92, label %28

28:                                               ; preds = %18
  %29 = add nsw i64 %9, -5
  %30 = icmp ult i64 %29, 5
  %31 = select i1 %30, i32 1, i32 %3
  %32 = mul i32 %31, %20
  %33 = mul i32 %32, %12
  %34 = select i1 %30, i32 %3, i32 1
  %35 = mul nsw i32 %33, %34
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %92, label %37

37:                                               ; preds = %28
  store i8* %2, i8** %0, align 8, !tbaa !27
  %38 = icmp sgt i32 %3, 1
  %39 = and i1 %38, %30
  br i1 %39, label %40, label %.loopexit

40:                                               ; preds = %37
  %41 = sext i32 %33 to i64
  %42 = zext i32 %3 to i64
  %43 = add nsw i64 %42, -1
  %44 = add nsw i64 %42, -2
  %45 = and i64 %43, 7
  %46 = icmp ult i64 %44, 7
  br i1 %46, label %.loopexit1, label %47

47:                                               ; preds = %40
  %48 = sub nsw i64 %43, %45
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i8* [ %2, %47 ], [ %74, %49 ]
  %51 = phi i64 [ 1, %47 ], [ %76, %49 ]
  %52 = phi i64 [ %48, %47 ], [ %77, %49 ]
  %53 = getelementptr inbounds i8, i8* %50, i64 %41
  %54 = getelementptr inbounds i8*, i8** %0, i64 %51
  store i8* %53, i8** %54, align 8, !tbaa !27
  %55 = add nuw nsw i64 %51, 1
  %56 = getelementptr inbounds i8, i8* %53, i64 %41
  %57 = getelementptr inbounds i8*, i8** %0, i64 %55
  store i8* %56, i8** %57, align 8, !tbaa !27
  %58 = add nuw nsw i64 %51, 2
  %59 = getelementptr inbounds i8, i8* %56, i64 %41
  %60 = getelementptr inbounds i8*, i8** %0, i64 %58
  store i8* %59, i8** %60, align 8, !tbaa !27
  %61 = add nuw nsw i64 %51, 3
  %62 = getelementptr inbounds i8, i8* %59, i64 %41
  %63 = getelementptr inbounds i8*, i8** %0, i64 %61
  store i8* %62, i8** %63, align 8, !tbaa !27
  %64 = add nuw nsw i64 %51, 4
  %65 = getelementptr inbounds i8, i8* %62, i64 %41
  %66 = getelementptr inbounds i8*, i8** %0, i64 %64
  store i8* %65, i8** %66, align 8, !tbaa !27
  %67 = add nuw nsw i64 %51, 5
  %68 = getelementptr inbounds i8, i8* %65, i64 %41
  %69 = getelementptr inbounds i8*, i8** %0, i64 %67
  store i8* %68, i8** %69, align 8, !tbaa !27
  %70 = add nuw nsw i64 %51, 6
  %71 = getelementptr inbounds i8, i8* %68, i64 %41
  %72 = getelementptr inbounds i8*, i8** %0, i64 %70
  store i8* %71, i8** %72, align 8, !tbaa !27
  %73 = add nuw nsw i64 %51, 7
  %74 = getelementptr inbounds i8, i8* %71, i64 %41
  %75 = getelementptr inbounds i8*, i8** %0, i64 %73
  store i8* %74, i8** %75, align 8, !tbaa !27
  %76 = add nuw nsw i64 %51, 8
  %77 = add i64 %52, -8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %.loopexit1, label %49

.loopexit1:                                       ; preds = %49, %40
  %79 = phi i8* [ %2, %40 ], [ %74, %49 ]
  %80 = phi i64 [ 1, %40 ], [ %76, %49 ]
  %81 = icmp eq i64 %45, 0
  br i1 %81, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %.loopexit1, %.preheader
  %82 = phi i8* [ %85, %.preheader ], [ %79, %.loopexit1 ]
  %83 = phi i64 [ %87, %.preheader ], [ %80, %.loopexit1 ]
  %84 = phi i64 [ %88, %.preheader ], [ %45, %.loopexit1 ]
  %85 = getelementptr inbounds i8, i8* %82, i64 %41
  %86 = getelementptr inbounds i8*, i8** %0, i64 %83
  store i8* %85, i8** %86, align 8, !tbaa !27
  %87 = add nuw nsw i64 %83, 1
  %88 = add nsw i64 %84, -1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %.loopexit, label %.preheader, !llvm.loop !608

.loopexit:                                        ; preds = %.preheader, %.loopexit1, %37
  %90 = icmp eq i32* %1, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %.loopexit
  store i32 %33, i32* %1, align 4, !tbaa !28
  br label %92

92:                                               ; preds = %91, %.loopexit, %28, %18, %8, %6
  %93 = phi i32 [ %35, %28 ], [ 0, %.loopexit ], [ 0, %91 ], [ -22, %8 ], [ -22, %18 ], [ -22, %6 ]
  ret i32 %93
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @av_gettime() unnamed_addr #5 {
  %1 = alloca %struct.timespec, align 8
  %2 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #18
  %3 = call i32 @gettimeofday(%struct.timespec* nonnull %1, i8* null) #18
  %4 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !609
  %6 = mul nsw i64 %5, 1000000
  %7 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !611
  %9 = add nsw i64 %6, %8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #18
  ret i64 %9
}

; Function Attrs: nofree nounwind
declare dso_local i32 @gettimeofday(%struct.timespec* nocapture, i8* nocapture) local_unnamed_addr #16

; Function Attrs: nounwind uwtable
define internal fastcc void @av_usleep() unnamed_addr #5 {
  %1 = alloca %struct.timespec, align 8
  %2 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #18
  %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 0
  store i64 0, i64* %3, align 8, !tbaa !612
  %4 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 1
  store i64 1000000, i64* %4, align 8, !tbaa !614
  br label %5

5:                                                ; preds = %8, %0
  %6 = call i32 @nanosleep(%struct.timespec* nonnull %1, %struct.timespec* nonnull %1) #18
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = tail call i32* @__errno_location() #29
  %10 = load i32, i32* %9, align 4, !tbaa !28
  %11 = icmp eq i32 %10, 4
  br i1 %11, label %5, label %12

12:                                               ; preds = %8, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #18
  ret void
}

declare dso_local i32 @nanosleep(%struct.timespec*, %struct.timespec*) local_unnamed_addr #13

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree norecurse nounwind uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nofree nounwind readonly }
attributes #15 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nounwind }
attributes #19 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #21 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #22 = { nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #23 = { nofree nounwind }
attributes #24 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #25 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #26 = { nofree norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "prefer-vector-width"="1" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #27 = { noreturn nounwind }
attributes #28 = { nounwind readonly }
attributes #29 = { nounwind readnone }
attributes #30 = { readnone }
attributes #31 = { cold }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5}

!0 = !{!"clang version 9.0.1-12 "}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 1, !"ThinLTO", i32 0}
!3 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!4 = !{i32 2, !"Dwarf Version", i32 4}
!5 = !{i32 2, !"Debug Info Version", i32 3}
!6 = !{!7, !12, i64 48}
!7 = !{!"AVPacket", !8, i64 0, !8, i64 8, !11, i64 16, !12, i64 24, !12, i64 28, !12, i64 32, !11, i64 40, !12, i64 48, !12, i64 52, !11, i64 56, !11, i64 64, !8, i64 72, !8, i64 80}
!8 = !{!"long", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
!11 = !{!"any pointer", !9, i64 0}
!12 = !{!"int", !9, i64 0}
!13 = !{!7, !11, i64 40}
!14 = !{!15, !11, i64 0}
!15 = !{!"", !11, i64 0, !12, i64 8, !9, i64 12}
!16 = !{!7, !11, i64 16}
!17 = !{!7, !12, i64 24}
!18 = !{!7, !8, i64 0}
!19 = !{!7, !8, i64 8}
!20 = !{!7, !8, i64 72}
!21 = !{!7, !8, i64 80}
!22 = !{!7, !12, i64 32}
!23 = !{!7, !12, i64 28}
!24 = !{!7, !11, i64 56}
!25 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 8, !27, i64 24, i64 4, !28, i64 28, i64 4, !28, i64 32, i64 4, !28, i64 40, i64 8, !27, i64 48, i64 4, !28, i64 52, i64 4, !28, i64 56, i64 8, !27, i64 64, i64 8, !27, i64 72, i64 8, !26, i64 80, i64 8, !26}
!26 = !{!8, !8, i64 0}
!27 = !{!11, !11, i64 0}
!28 = !{!12, !12, i64 0}
!29 = !{!15, !12, i64 8}
!30 = !{!15, !9, i64 12}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = !{!9, !9, i64 0}
!34 = !{!35, !9, i64 0}
!35 = !{!"AVCodecDescriptor", !9, i64 0, !9, i64 4, !11, i64 8, !11, i64 16, !12, i64 24}
!36 = !{!37, !12, i64 908}
!37 = !{!"AVCodecContext", !11, i64 0, !12, i64 8, !9, i64 12, !11, i64 16, !9, i64 24, !9, i64 56, !12, i64 60, !12, i64 64, !12, i64 68, !11, i64 72, !11, i64 80, !11, i64 88, !12, i64 96, !12, i64 100, !12, i64 104, !12, i64 108, !12, i64 112, !12, i64 116, !11, i64 120, !12, i64 128, !38, i64 132, !12, i64 140, !12, i64 144, !12, i64 148, !12, i64 152, !12, i64 156, !12, i64 160, !12, i64 164, !9, i64 168, !12, i64 172, !11, i64 176, !11, i64 184, !12, i64 192, !39, i64 196, !12, i64 200, !12, i64 204, !12, i64 208, !12, i64 212, !39, i64 216, !12, i64 220, !12, i64 224, !39, i64 228, !39, i64 232, !39, i64 236, !39, i64 240, !39, i64 244, !39, i64 248, !39, i64 252, !12, i64 256, !12, i64 260, !11, i64 264, !38, i64 272, !12, i64 280, !12, i64 284, !12, i64 288, !12, i64 292, !12, i64 296, !12, i64 300, !12, i64 304, !12, i64 308, !12, i64 312, !12, i64 316, !12, i64 320, !12, i64 324, !12, i64 328, !12, i64 332, !12, i64 336, !12, i64 340, !12, i64 344, !12, i64 348, !11, i64 352, !11, i64 360, !12, i64 368, !12, i64 372, !12, i64 376, !12, i64 380, !12, i64 384, !12, i64 388, !12, i64 392, !12, i64 396, !12, i64 400, !39, i64 404, !12, i64 408, !12, i64 412, !12, i64 416, !12, i64 420, !12, i64 424, !12, i64 428, !12, i64 432, !12, i64 436, !12, i64 440, !12, i64 444, !12, i64 448, !9, i64 452, !9, i64 456, !9, i64 460, !9, i64 464, !9, i64 468, !12, i64 472, !9, i64 476, !12, i64 480, !12, i64 484, !9, i64 488, !12, i64 492, !12, i64 496, !12, i64 500, !12, i64 504, !12, i64 508, !8, i64 512, !8, i64 520, !9, i64 528, !9, i64 532, !11, i64 536, !11, i64 544, !11, i64 552, !39, i64 560, !39, i64 564, !12, i64 568, !12, i64 572, !12, i64 576, !39, i64 580, !39, i64 584, !12, i64 588, !12, i64 592, !12, i64 596, !11, i64 600, !11, i64 608, !12, i64 616, !12, i64 620, !39, i64 624, !39, i64 628, !39, i64 632, !39, i64 636, !12, i64 640, !12, i64 644, !12, i64 648, !12, i64 652, !12, i64 656, !12, i64 660, !12, i64 664, !12, i64 668, !12, i64 672, !12, i64 676, !12, i64 680, !12, i64 684, !8, i64 688, !11, i64 696, !12, i64 704, !12, i64 708, !12, i64 712, !12, i64 716, !12, i64 720, !12, i64 724, !12, i64 728, !12, i64 732, !12, i64 736, !12, i64 740, !11, i64 744, !11, i64 752, !12, i64 760, !12, i64 764, !12, i64 768, !12, i64 772, !12, i64 776, !12, i64 780, !8, i64 784, !11, i64 792, !11, i64 800, !9, i64 808, !12, i64 872, !12, i64 876, !12, i64 880, !12, i64 884, !12, i64 888, !12, i64 892, !11, i64 896, !12, i64 904, !12, i64 908, !12, i64 912, !12, i64 916, !11, i64 920, !11, i64 928, !11, i64 936, !12, i64 944, !12, i64 948, !12, i64 952, !9, i64 956, !9, i64 960, !9, i64 964, !11, i64 968, !12, i64 976, !12, i64 980, !11, i64 984, !8, i64 992, !38, i64 1000, !11, i64 1008, !8, i64 1016, !8, i64 1024, !8, i64 1032, !8, i64 1040, !11, i64 1048}
!38 = !{!"AVRational", !12, i64 0, !12, i64 4}
!39 = !{!"float", !9, i64 0}
!40 = !{!37, !11, i64 16}
!41 = !{!42, !12, i64 24}
!42 = !{!"AVCodec", !11, i64 0, !11, i64 8, !9, i64 16, !9, i64 20, !12, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !9, i64 72, !11, i64 80, !11, i64 88, !12, i64 96, !11, i64 104, !11, i64 112, !11, i64 120, !11, i64 128, !11, i64 136, !11, i64 144, !11, i64 152, !11, i64 160, !11, i64 168, !11, i64 176, !11, i64 184}
!43 = !{!37, !12, i64 904}
!44 = !{!37, !11, i64 80}
!45 = !{!46, !11, i64 56}
!46 = !{!"AVCodecInternal", !12, i64 0, !11, i64 8, !12, i64 16, !12, i64 20, !12, i64 24, !11, i64 32, !11, i64 40, !12, i64 48, !11, i64 56, !12, i64 64}
!47 = !{!48, !11, i64 0}
!48 = !{!"", !11, i64 0, !9, i64 8, !11, i64 48, !9, i64 56, !9, i64 96, !9, i64 144, !9, i64 4240, !9, i64 4280, !12, i64 4328, !12, i64 4332, !9, i64 4336, !12, i64 4848}
!49 = !{!48, !11, i64 48}
!50 = !{!37, !11, i64 72}
!51 = !{i64 0, i64 8, !27, i64 8, i64 4, !28, i64 12, i64 4, !33, i64 16, i64 8, !27, i64 24, i64 32, !33, i64 56, i64 4, !33, i64 60, i64 4, !28, i64 64, i64 4, !28, i64 68, i64 4, !28, i64 72, i64 8, !27, i64 80, i64 8, !27, i64 88, i64 8, !27, i64 96, i64 4, !28, i64 100, i64 4, !28, i64 104, i64 4, !28, i64 108, i64 4, !28, i64 112, i64 4, !28, i64 116, i64 4, !28, i64 120, i64 8, !27, i64 128, i64 4, !28, i64 132, i64 4, !28, i64 136, i64 4, !28, i64 140, i64 4, !28, i64 144, i64 4, !28, i64 148, i64 4, !28, i64 152, i64 4, !28, i64 156, i64 4, !28, i64 160, i64 4, !28, i64 164, i64 4, !28, i64 168, i64 4, !33, i64 172, i64 4, !28, i64 176, i64 8, !27, i64 184, i64 8, !27, i64 192, i64 4, !28, i64 196, i64 4, !52, i64 200, i64 4, !28, i64 204, i64 4, !28, i64 208, i64 4, !28, i64 212, i64 4, !28, i64 216, i64 4, !52, i64 220, i64 4, !28, i64 224, i64 4, !28, i64 228, i64 4, !52, i64 232, i64 4, !52, i64 236, i64 4, !52, i64 240, i64 4, !52, i64 244, i64 4, !52, i64 248, i64 4, !52, i64 252, i64 4, !52, i64 256, i64 4, !28, i64 260, i64 4, !28, i64 264, i64 8, !27, i64 272, i64 4, !28, i64 276, i64 4, !28, i64 280, i64 4, !28, i64 284, i64 4, !28, i64 288, i64 4, !28, i64 292, i64 4, !28, i64 296, i64 4, !28, i64 300, i64 4, !28, i64 304, i64 4, !28, i64 308, i64 4, !28, i64 312, i64 4, !28, i64 316, i64 4, !28, i64 320, i64 4, !28, i64 324, i64 4, !28, i64 328, i64 4, !28, i64 332, i64 4, !28, i64 336, i64 4, !28, i64 340, i64 4, !28, i64 344, i64 4, !28, i64 348, i64 4, !28, i64 352, i64 8, !27, i64 360, i64 8, !27, i64 368, i64 4, !28, i64 372, i64 4, !28, i64 376, i64 4, !28, i64 380, i64 4, !28, i64 384, i64 4, !28, i64 388, i64 4, !28, i64 392, i64 4, !28, i64 396, i64 4, !28, i64 400, i64 4, !28, i64 404, i64 4, !52, i64 408, i64 4, !28, i64 412, i64 4, !28, i64 416, i64 4, !28, i64 420, i64 4, !28, i64 424, i64 4, !28, i64 428, i64 4, !28, i64 432, i64 4, !28, i64 436, i64 4, !28, i64 440, i64 4, !28, i64 444, i64 4, !28, i64 448, i64 4, !28, i64 452, i64 4, !33, i64 456, i64 4, !33, i64 460, i64 4, !33, i64 464, i64 4, !33, i64 468, i64 4, !33, i64 472, i64 4, !28, i64 476, i64 4, !33, i64 480, i64 4, !28, i64 484, i64 4, !28, i64 488, i64 4, !33, i64 492, i64 4, !28, i64 496, i64 4, !28, i64 500, i64 4, !28, i64 504, i64 4, !28, i64 508, i64 4, !28, i64 512, i64 8, !26, i64 520, i64 8, !26, i64 528, i64 4, !33, i64 532, i64 4, !33, i64 536, i64 8, !27, i64 544, i64 8, !27, i64 552, i64 8, !27, i64 560, i64 4, !52, i64 564, i64 4, !52, i64 568, i64 4, !28, i64 572, i64 4, !28, i64 576, i64 4, !28, i64 580, i64 4, !52, i64 584, i64 4, !52, i64 588, i64 4, !28, i64 592, i64 4, !28, i64 596, i64 4, !28, i64 600, i64 8, !27, i64 608, i64 8, !27, i64 616, i64 4, !28, i64 620, i64 4, !28, i64 624, i64 4, !52, i64 628, i64 4, !52, i64 632, i64 4, !52, i64 636, i64 4, !52, i64 640, i64 4, !28, i64 644, i64 4, !28, i64 648, i64 4, !28, i64 652, i64 4, !28, i64 656, i64 4, !28, i64 660, i64 4, !28, i64 664, i64 4, !28, i64 668, i64 4, !28, i64 672, i64 4, !28, i64 676, i64 4, !28, i64 680, i64 4, !28, i64 684, i64 4, !28, i64 688, i64 8, !26, i64 696, i64 8, !27, i64 704, i64 4, !28, i64 708, i64 4, !28, i64 712, i64 4, !28, i64 716, i64 4, !28, i64 720, i64 4, !28, i64 724, i64 4, !28, i64 728, i64 4, !28, i64 732, i64 4, !28, i64 736, i64 4, !28, i64 740, i64 4, !28, i64 744, i64 8, !27, i64 752, i64 8, !27, i64 760, i64 4, !28, i64 764, i64 4, !28, i64 768, i64 4, !28, i64 772, i64 4, !28, i64 776, i64 4, !28, i64 780, i64 4, !28, i64 784, i64 8, !26, i64 792, i64 8, !27, i64 800, i64 8, !27, i64 808, i64 64, !33, i64 872, i64 4, !28, i64 876, i64 4, !28, i64 880, i64 4, !28, i64 884, i64 4, !28, i64 888, i64 4, !28, i64 892, i64 4, !28, i64 896, i64 8, !27, i64 904, i64 4, !28, i64 908, i64 4, !28, i64 912, i64 4, !28, i64 916, i64 4, !28, i64 920, i64 8, !27, i64 928, i64 8, !27, i64 936, i64 8, !27, i64 944, i64 4, !28, i64 948, i64 4, !28, i64 952, i64 4, !28, i64 956, i64 4, !33, i64 960, i64 4, !33, i64 964, i64 4, !33, i64 968, i64 8, !27, i64 976, i64 4, !28, i64 980, i64 4, !28, i64 984, i64 8, !27, i64 992, i64 8, !26, i64 1000, i64 4, !28, i64 1004, i64 4, !28, i64 1008, i64 8, !27, i64 1016, i64 8, !26, i64 1024, i64 8, !26, i64 1032, i64 8, !26, i64 1040, i64 8, !26, i64 1048, i64 8, !27}
!52 = !{!39, !39, i64 0}
!53 = !{!42, !12, i64 96}
!54 = !{!37, !12, i64 912}
!55 = !{!48, !12, i64 4848}
!56 = !{!57, !11, i64 0}
!57 = !{!"", !11, i64 0, !11, i64 8, !8, i64 16, !12, i64 24}
!58 = !{!37, !11, i64 544}
!59 = !{!57, !12, i64 24}
!60 = !{!57, !11, i64 8}
!61 = !{!57, !8, i64 16}
!62 = !{!48, !12, i64 4328}
!63 = !{!48, !12, i64 4332}
!64 = !{!37, !12, i64 112}
!65 = !{!66, !8, i64 200}
!66 = !{!"AVFrame", !9, i64 0, !9, i64 64, !11, i64 96, !12, i64 104, !12, i64 108, !12, i64 112, !12, i64 116, !12, i64 120, !9, i64 124, !9, i64 128, !38, i64 192, !8, i64 200, !8, i64 208, !8, i64 216, !12, i64 224, !12, i64 228, !12, i64 232, !12, i64 236, !11, i64 240, !12, i64 248, !12, i64 252, !11, i64 256, !9, i64 264, !11, i64 280, !11, i64 288, !9, i64 296, !11, i64 312, !9, i64 320, !12, i64 384, !12, i64 388, !12, i64 392, !12, i64 396, !12, i64 400, !12, i64 404, !11, i64 408, !8, i64 416, !11, i64 424, !11, i64 432, !11, i64 440, !9, i64 448, !12, i64 452, !8, i64 456, !8, i64 464, !8, i64 472, !8, i64 480, !11, i64 488, !12, i64 496, !8, i64 504, !12, i64 512}
!67 = !{!66, !12, i64 232}
!68 = !{!66, !9, i64 124}
!69 = !{!37, !9, i64 168}
!70 = !{!37, !12, i64 148}
!71 = !{!37, !12, i64 152}
!72 = !{i64 0, i64 8, !27, i64 8, i64 8, !27, i64 16, i64 8, !26, i64 24, i64 4, !28}
!73 = !{!74, !11, i64 2696}
!74 = !{!"GifState", !11, i64 0, !66, i64 8, !12, i64 528, !12, i64 532, !12, i64 536, !12, i64 540, !12, i64 544, !12, i64 548, !12, i64 552, !12, i64 556, !11, i64 560, !12, i64 568, !12, i64 572, !12, i64 576, !12, i64 580, !12, i64 584, !12, i64 588, !12, i64 592, !11, i64 600, !12, i64 608, !12, i64 612, !75, i64 616, !11, i64 640, !9, i64 648, !9, i64 1672, !11, i64 2696, !12, i64 2704, !12, i64 2708, !12, i64 2712}
!75 = !{!"GetByteContext", !11, i64 0, !11, i64 8, !11, i64 16}
!76 = !{!37, !11, i64 896}
!77 = !{!75, !11, i64 0}
!78 = !{!75, !11, i64 16}
!79 = !{!75, !11, i64 8}
!80 = !{!74, !8, i64 208}
!81 = !{!74, !8, i64 216}
!82 = !{!74, !8, i64 224}
!83 = !{!7, !12, i64 52}
!84 = !{!74, !8, i64 488}
!85 = !{!74, !12, i64 2704}
!86 = !{!74, !12, i64 2708}
!87 = !{!74, !12, i64 552}
!88 = !{!74, !12, i64 528}
!89 = !{!74, !12, i64 532}
!90 = !{!74, !11, i64 560}
!91 = !{!74, !12, i64 556}
!92 = !{!74, !12, i64 536}
!93 = !{!74, !12, i64 540}
!94 = !{!37, !12, i64 272}
!95 = !{!37, !12, i64 276}
!96 = !{!74, !12, i64 548}
!97 = !{!74, !12, i64 544}
!98 = !{!74, !9, i64 132}
!99 = !{!74, !12, i64 128}
!100 = !{!37, !11, i64 552}
!101 = !{!66, !12, i64 108}
!102 = !{!74, !12, i64 2712}
!103 = !{!74, !12, i64 572}
!104 = !{!74, !12, i64 612}
!105 = !{!74, !12, i64 584}
!106 = !{!74, !12, i64 588}
!107 = !{!74, !12, i64 592}
!108 = !{!74, !12, i64 580}
!109 = !{!74, !11, i64 600}
!110 = !{!74, !12, i64 576}
!111 = !{!74, !12, i64 116}
!112 = !{!74, !11, i64 640}
!113 = !{i64 0, i64 64, !33, i64 64, i64 32, !33, i64 96, i64 8, !27, i64 104, i64 4, !28, i64 108, i64 4, !28, i64 112, i64 4, !28, i64 116, i64 4, !28, i64 120, i64 4, !28, i64 124, i64 4, !33, i64 128, i64 64, !33, i64 192, i64 4, !28, i64 196, i64 4, !28, i64 200, i64 8, !26, i64 208, i64 8, !26, i64 216, i64 8, !26, i64 224, i64 4, !28, i64 228, i64 4, !28, i64 232, i64 4, !28, i64 236, i64 4, !28, i64 240, i64 8, !27, i64 248, i64 4, !28, i64 252, i64 4, !28, i64 256, i64 8, !27, i64 264, i64 16, !33, i64 280, i64 8, !27, i64 288, i64 8, !27, i64 296, i64 16, !33, i64 312, i64 8, !27, i64 320, i64 64, !33, i64 384, i64 4, !28, i64 388, i64 4, !28, i64 392, i64 4, !28, i64 396, i64 4, !28, i64 400, i64 4, !28, i64 404, i64 4, !28, i64 408, i64 8, !27, i64 416, i64 8, !26, i64 424, i64 8, !27, i64 432, i64 8, !27, i64 440, i64 8, !27, i64 448, i64 1, !33, i64 452, i64 4, !28, i64 456, i64 8, !26, i64 464, i64 8, !26, i64 472, i64 8, !26, i64 480, i64 8, !26, i64 488, i64 8, !27, i64 496, i64 4, !28, i64 504, i64 8, !26, i64 512, i64 4, !28}
!114 = !{!115, !12, i64 24}
!115 = !{!"LZWState", !11, i64 0, !11, i64 8, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !12, i64 48, !12, i64 52, !12, i64 56, !12, i64 60, !12, i64 64, !12, i64 68, !11, i64 72, !9, i64 80, !9, i64 4176, !9, i64 8272, !12, i64 16464}
!116 = !{!115, !12, i64 16464}
!117 = !{!115, !11, i64 8}
!118 = !{!115, !11, i64 0}
!119 = !{!115, !12, i64 20}
!120 = !{!115, !12, i64 16}
!121 = !{!115, !12, i64 36}
!122 = !{!115, !12, i64 28}
!123 = !{!124, !124, i64 0}
!124 = !{!"short", !9, i64 0}
!125 = !{!115, !12, i64 32}
!126 = !{!115, !12, i64 52}
!127 = !{!115, !12, i64 40}
!128 = !{!115, !12, i64 44}
!129 = !{!115, !12, i64 48}
!130 = !{!115, !12, i64 60}
!131 = !{!115, !12, i64 64}
!132 = !{!115, !12, i64 68}
!133 = !{!115, !11, i64 72}
!134 = !{!115, !12, i64 56}
!135 = !{!37, !11, i64 0}
!136 = !{!37, !9, i64 12}
!137 = !{!42, !9, i64 16}
!138 = !{!37, !11, i64 536}
!139 = !{!37, !11, i64 184}
!140 = !{!37, !11, i64 920}
!141 = !{!37, !11, i64 928}
!142 = !{!37, !9, i64 488}
!143 = !{!37, !8, i64 688}
!144 = !{!37, !8, i64 784}
!145 = !{!42, !11, i64 80}
!146 = !{!42, !11, i64 128}
!147 = !{!148, !11, i64 0}
!148 = !{!"AVCodecDefault", !11, i64 0, !11, i64 8}
!149 = !{!148, !11, i64 8}
!150 = !{!42, !11, i64 0}
!151 = !{!42, !11, i64 168}
!152 = !{!153, !8, i64 48}
!153 = !{!"AVCodecParserContext", !11, i64 0, !11, i64 8, !8, i64 16, !8, i64 24, !8, i64 32, !12, i64 40, !12, i64 44, !8, i64 48, !8, i64 56, !8, i64 64, !8, i64 72, !12, i64 80, !12, i64 84, !9, i64 88, !9, i64 120, !9, i64 152, !12, i64 184, !8, i64 192, !9, i64 200, !12, i64 232, !8, i64 240, !12, i64 248, !12, i64 252, !12, i64 256, !9, i64 264, !8, i64 296, !8, i64 304, !12, i64 312}
!154 = !{!153, !8, i64 56}
!155 = !{!153, !8, i64 296}
!156 = !{!153, !8, i64 192}
!157 = !{!153, !8, i64 24}
!158 = !{!153, !8, i64 16}
!159 = !{!153, !8, i64 32}
!160 = !{!153, !12, i64 184}
!161 = !{!153, !12, i64 84}
!162 = !{!153, !12, i64 80}
!163 = !{!153, !8, i64 64}
!164 = !{!153, !8, i64 72}
!165 = !{!153, !8, i64 304}
!166 = !{!153, !11, i64 8}
!167 = !{!168, !11, i64 32}
!168 = !{!"AVCodecParser", !9, i64 0, !12, i64 20, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56}
!169 = !{!168, !11, i64 40}
!170 = !{!153, !11, i64 0}
!171 = !{!37, !11, i64 936}
!172 = !{!173, !12, i64 60}
!173 = !{!"FrameThreadContext", !11, i64 0, !11, i64 8, !9, i64 16, !12, i64 56, !12, i64 60, !12, i64 64, !12, i64 68}
!174 = !{!173, !11, i64 0}
!175 = !{!173, !12, i64 56}
!176 = !{!177, !11, i64 248}
!177 = !{!"PerThreadContext", !11, i64 0, !8, i64 8, !12, i64 16, !9, i64 24, !9, i64 72, !9, i64 120, !9, i64 168, !9, i64 208, !11, i64 248, !7, i64 256, !12, i64 344, !66, i64 352, !12, i64 872, !12, i64 876, !9, i64 880, !9, i64 888, !12, i64 19088, !9, i64 19092, !9, i64 19372, !11, i64 19408}
!178 = !{!37, !11, i64 176}
!179 = !{!37, !11, i64 88}
!180 = !{!37, !12, i64 772}
!181 = !{!37, !12, i64 776}
!182 = !{!37, !12, i64 340}
!183 = !{!37, !12, i64 116}
!184 = !{!37, !12, i64 496}
!185 = !{!37, !12, i64 916}
!186 = !{!37, !12, i64 256}
!187 = !{!37, !11, i64 264}
!188 = !{!177, !11, i64 0}
!189 = !{!173, !11, i64 8}
!190 = !{!177, !11, i64 272}
!191 = !{!177, !12, i64 19088}
!192 = !{!66, !11, i64 432}
!193 = !{!66, !11, i64 440}
!194 = !{!177, !9, i64 880}
!195 = !{!37, !12, i64 156}
!196 = !{!37, !12, i64 160}
!197 = !{!37, !12, i64 220}
!198 = !{!37, !12, i64 876}
!199 = !{!37, !12, i64 884}
!200 = !{!37, !12, i64 320}
!201 = !{!37, !12, i64 948}
!202 = !{!37, !12, i64 952}
!203 = !{!37, !12, i64 888}
!204 = !{!37, !12, i64 140}
!205 = !{!37, !9, i64 452}
!206 = !{!37, !9, i64 456}
!207 = !{!37, !9, i64 460}
!208 = !{!37, !9, i64 464}
!209 = !{!37, !9, i64 468}
!210 = !{!42, !11, i64 120}
!211 = !{!177, !11, i64 19408}
!212 = !{!177, !12, i64 876}
!213 = !{!173, !12, i64 64}
!214 = !{!177, !12, i64 872}
!215 = !{!177, !8, i64 264}
!216 = !{!66, !8, i64 216}
!217 = !{!37, !12, i64 144}
!218 = !{!219, !11, i64 0}
!219 = !{!"ThreadContext", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !12, i64 40, !12, i64 44, !12, i64 48, !9, i64 56, !9, i64 104, !9, i64 152, !12, i64 192, !12, i64 196, !12, i64 200}
!220 = !{!219, !12, i64 192}
!221 = !{!219, !12, i64 44}
!222 = !{!219, !12, i64 48}
!223 = !{!219, !12, i64 200}
!224 = !{!37, !11, i64 984}
!225 = !{!42, !11, i64 144}
!226 = !{i64 0, i64 4, !28, i64 8, i64 8, !27, i64 16, i64 4, !28, i64 20, i64 4, !28, i64 24, i64 4, !28, i64 32, i64 8, !27, i64 40, i64 8, !27, i64 48, i64 4, !28, i64 56, i64 8, !27, i64 64, i64 4, !28}
!227 = !{!46, !12, i64 16}
!228 = !{!42, !11, i64 112}
!229 = !{!177, !12, i64 16}
!230 = !{!219, !12, i64 196}
!231 = !{!219, !11, i64 8}
!232 = !{!219, !11, i64 24}
!233 = !{!219, !11, i64 16}
!234 = !{!219, !11, i64 32}
!235 = !{!219, !12, i64 40}
!236 = !{!173, !12, i64 68}
!237 = !{!177, !11, i64 448}
!238 = !{!37, !9, i64 56}
!239 = !{!177, !8, i64 8}
!240 = !{!42, !11, i64 176}
!241 = !{!37, !12, i64 60}
!242 = !{!243, !12, i64 4}
!243 = !{!"PixelFormatTag", !9, i64 0, !12, i64 4}
!244 = !{!243, !9, i64 0}
!245 = !{!42, !11, i64 104}
!246 = !{!42, !11, i64 136}
!247 = !{!37, !12, i64 892}
!248 = !{!66, !12, i64 112}
!249 = !{!66, !11, i64 96}
!250 = !{!66, !12, i64 384}
!251 = !{!46, !12, i64 0}
!252 = !{!46, !11, i64 8}
!253 = !{!254, !12, i64 160}
!254 = !{!"InternalBuffer", !9, i64 0, !9, i64 64, !9, i64 128, !12, i64 160, !12, i64 164, !9, i64 168}
!255 = !{!254, !12, i64 164}
!256 = !{!254, !9, i64 168}
!257 = !{!37, !12, i64 484}
!258 = !{!46, !11, i64 32}
!259 = !{!66, !8, i64 416}
!260 = !{!66, !12, i64 104}
!261 = !{!66, !12, i64 116}
!262 = !{!37, !12, i64 480}
!263 = !{!66, !12, i64 452}
!264 = !{!37, !8, i64 512}
!265 = !{!66, !8, i64 456}
!266 = !{!66, !8, i64 504}
!267 = !{i64 0, i64 64, !33, i64 64, i64 64, !33, i64 128, i64 32, !33, i64 160, i64 4, !28, i64 164, i64 4, !28, i64 168, i64 4, !33}
!268 = !{!66, !12, i64 404}
!269 = !{!66, !11, i64 312}
!270 = !{!271, !9, i64 11}
!271 = !{!"AVPixFmtDescriptor", !11, i64 0, !9, i64 8, !9, i64 9, !9, i64 10, !9, i64 11, !9, i64 12}
!272 = !{!66, !8, i64 464}
!273 = !{!66, !8, i64 208}
!274 = !{!66, !8, i64 480}
!275 = !{!66, !8, i64 472}
!276 = !{!66, !12, i64 512}
!277 = !{!66, !12, i64 120}
!278 = !{!37, !11, i64 1008}
!279 = !{!37, !12, i64 128}
!280 = !{!42, !9, i64 20}
!281 = !{!37, !12, i64 764}
!282 = !{!42, !11, i64 152}
!283 = !{!42, !11, i64 160}
!284 = !{!37, !12, i64 132}
!285 = !{!37, !12, i64 136}
!286 = !{!42, !9, i64 72}
!287 = !{!42, !11, i64 56}
!288 = !{!42, !11, i64 40}
!289 = !{!42, !11, i64 48}
!290 = !{!42, !11, i64 64}
!291 = !{!37, !12, i64 96}
!292 = !{!37, !12, i64 640}
!293 = !{!37, !12, i64 592}
!294 = !{!37, !8, i64 1040}
!295 = !{!37, !8, i64 1032}
!296 = !{!46, !11, i64 40}
!297 = !{!46, !12, i64 48}
!298 = !{!37, !11, i64 744}
!299 = !{!66, !12, i64 192}
!300 = !{!66, !11, i64 488}
!301 = !{!37, !11, i64 1048}
!302 = !{!37, !8, i64 1024}
!303 = !{!37, !8, i64 1016}
!304 = !{!35, !11, i64 8}
!305 = !{!37, !12, i64 500}
!306 = !{!307, !11, i64 40}
!307 = !{!"AVIOContext", !11, i64 0, !11, i64 8, !12, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !8, i64 72, !12, i64 80, !12, i64 84, !12, i64 88, !12, i64 92, !8, i64 96, !11, i64 104, !11, i64 112, !12, i64 120, !11, i64 128, !11, i64 136, !12, i64 144, !8, i64 152, !12, i64 160, !8, i64 168, !12, i64 176}
!308 = !{!307, !11, i64 8}
!309 = !{!307, !12, i64 16}
!310 = !{!307, !11, i64 24}
!311 = !{!307, !12, i64 160}
!312 = !{!307, !11, i64 56}
!313 = !{!307, !11, i64 48}
!314 = !{!307, !11, i64 64}
!315 = !{!307, !12, i64 120}
!316 = !{!307, !12, i64 144}
!317 = !{!307, !12, i64 92}
!318 = !{!307, !11, i64 112}
!319 = !{!307, !8, i64 72}
!320 = !{!307, !11, i64 32}
!321 = !{!307, !8, i64 96}
!322 = !{!307, !11, i64 104}
!323 = !{!307, !12, i64 80}
!324 = !{!307, !12, i64 88}
!325 = !{!307, !12, i64 84}
!326 = !{!307, !12, i64 176}
!327 = !{!307, !8, i64 168}
!328 = !{!329, !12, i64 36}
!329 = !{!"URLContext", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !330, i64 48, !8, i64 64}
!330 = !{!"AVIOInterruptCB", !11, i64 0, !11, i64 8}
!331 = !{!329, !12, i64 32}
!332 = !{!329, !12, i64 40}
!333 = !{!329, !11, i64 8}
!334 = !{!335, !11, i64 64}
!335 = !{!"URLProtocol", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !12, i64 104, !11, i64 112, !12, i64 120, !11, i64 128}
!336 = !{!307, !11, i64 128}
!337 = !{!335, !11, i64 72}
!338 = !{!307, !11, i64 136}
!339 = !{!307, !11, i64 0}
!340 = !{!341, !12, i64 24}
!341 = !{!"DynBuffer", !12, i64 0, !12, i64 4, !12, i64 8, !11, i64 16, !12, i64 24, !9, i64 28}
!342 = !{!341, !12, i64 0}
!343 = !{!341, !12, i64 4}
!344 = !{!341, !12, i64 8}
!345 = !{!341, !11, i64 16}
!346 = !{!335, !11, i64 0}
!347 = !{!329, !11, i64 16}
!348 = !{!335, !11, i64 112}
!349 = !{!335, !11, i64 56}
!350 = !{!335, !11, i64 40}
!351 = !{!335, !12, i64 120}
!352 = !{!329, !11, i64 0}
!353 = !{!329, !11, i64 24}
!354 = !{!335, !12, i64 104}
!355 = !{i64 0, i64 8, !27, i64 8, i64 8, !27}
!356 = !{!335, !11, i64 16}
!357 = !{!335, !11, i64 8}
!358 = !{!329, !12, i64 44}
!359 = !{!335, !11, i64 48}
!360 = !{!335, !11, i64 24}
!361 = !{!329, !8, i64 64}
!362 = !{!330, !11, i64 0}
!363 = !{!330, !11, i64 8}
!364 = !{!335, !11, i64 32}
!365 = !{!366, !12, i64 12}
!366 = !{!"FileContext", !11, i64 0, !12, i64 8, !12, i64 12}
!367 = !{!366, !12, i64 8}
!368 = !{!369, !12, i64 24}
!369 = !{!"stat", !8, i64 0, !8, i64 8, !8, i64 16, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !8, i64 40, !8, i64 48, !8, i64 56, !8, i64 64, !8, i64 72, !8, i64 80, !8, i64 88, !8, i64 96, !8, i64 104, !8, i64 112, !9, i64 120}
!370 = !{!371, !11, i64 8}
!371 = !{!"AVProbeData", !11, i64 0, !11, i64 8, !12, i64 16}
!372 = !{!373, !11, i64 24}
!373 = !{!"AVFormatContext", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !12, i64 40, !12, i64 44, !11, i64 48, !9, i64 56, !8, i64 1080, !8, i64 1088, !12, i64 1096, !12, i64 1100, !12, i64 1104, !12, i64 1108, !12, i64 1112, !12, i64 1116, !11, i64 1120, !12, i64 1128, !12, i64 1132, !11, i64 1136, !9, i64 1144, !9, i64 1148, !9, i64 1152, !12, i64 1156, !12, i64 1160, !12, i64 1164, !11, i64 1168, !11, i64 1176, !8, i64 1184, !12, i64 1192, !12, i64 1196, !330, i64 1200, !12, i64 1216, !12, i64 1220, !12, i64 1224, !12, i64 1228, !12, i64 1232, !12, i64 1236, !12, i64 1240, !12, i64 1244, !9, i64 1248, !12, i64 1252, !12, i64 1256, !11, i64 1264, !11, i64 1272, !8, i64 1280, !11, i64 1288, !11, i64 1296, !11, i64 1304, !11, i64 1312, !12, i64 1320}
!374 = !{!373, !11, i64 32}
!375 = !{!376, !12, i64 16}
!376 = !{!"GIFDemuxContext", !11, i64 0, !12, i64 8, !12, i64 12, !12, i64 16}
!377 = !{!376, !12, i64 8}
!378 = !{!379, !11, i64 8}
!379 = !{!"AVStream", !12, i64 0, !12, i64 4, !11, i64 8, !38, i64 16, !11, i64 24, !380, i64 32, !38, i64 56, !8, i64 64, !8, i64 72, !8, i64 80, !12, i64 88, !9, i64 92, !38, i64 96, !11, i64 104, !38, i64 112, !7, i64 120, !11, i64 208, !12, i64 216, !8, i64 224, !8, i64 232, !8, i64 240, !8, i64 248, !12, i64 256, !12, i64 260, !12, i64 264, !12, i64 268, !8, i64 272, !8, i64 280, !9, i64 288, !11, i64 296, !11, i64 304, !371, i64 312, !9, i64 336, !11, i64 472, !12, i64 480, !12, i64 484, !12, i64 488, !12, i64 492, !12, i64 496, !12, i64 500, !8, i64 504, !8, i64 512, !12, i64 520}
!380 = !{!"AVFrac", !8, i64 0, !8, i64 8, !8, i64 16}
!381 = !{!376, !12, i64 12}
!382 = !{!383, !11, i64 16}
!383 = !{!"ID3v2EMFunc", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24}
!384 = !{!385, !11, i64 8}
!385 = !{!"AVDictionaryEntry", !11, i64 0, !11, i64 8}
!386 = !{i32 (%struct.AVIOContext.335*)* @avio_rb16, i32 (%struct.AVIOContext.335*)* @avio_rl16}
!387 = !{!388, !11, i64 32}
!388 = !{!"ID3v2ExtraMetaGEOB", !12, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32}
!389 = !{!388, !12, i64 0}
!390 = !{!391, !11, i64 0}
!391 = !{!"ID3v2ExtraMeta", !11, i64 0, !11, i64 8, !11, i64 16}
!392 = !{!391, !11, i64 8}
!393 = !{!391, !11, i64 16}
!394 = !{!388, !11, i64 8}
!395 = !{!388, !11, i64 16}
!396 = !{!388, !11, i64 24}
!397 = !{!398, !9, i64 32}
!398 = !{!"CodecMime", !9, i64 0, !9, i64 32}
!399 = !{!400, !9, i64 32}
!400 = !{!"ID3v2ExtraMetaAPIC", !11, i64 0, !12, i64 8, !11, i64 16, !11, i64 24, !9, i64 32}
!401 = !{!400, !11, i64 16}
!402 = !{!400, !12, i64 8}
!403 = !{!400, !11, i64 0}
!404 = !{!373, !12, i64 1164}
!405 = !{!383, !11, i64 24}
!406 = !{!379, !12, i64 88}
!407 = !{!400, !11, i64 24}
!408 = !{!379, !11, i64 136}
!409 = !{!379, !12, i64 144}
!410 = !{!379, !11, i64 176}
!411 = !{!379, !12, i64 0}
!412 = !{!379, !12, i64 148}
!413 = !{!379, !12, i64 152}
!414 = !{!385, !11, i64 0}
!415 = !{!416, !11, i64 0}
!416 = !{!"AVMetadataConv", !11, i64 0, !11, i64 8}
!417 = !{!416, !11, i64 8}
!418 = !{!373, !11, i64 0}
!419 = !{!373, !11, i64 8}
!420 = !{!373, !11, i64 16}
!421 = !{!422, !11, i64 40}
!422 = !{!"AVInputFormat", !11, i64 0, !11, i64 8, !12, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !12, i64 56, !12, i64 60, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120, !11, i64 128}
!423 = !{!424, !11, i64 56}
!424 = !{!"AVOutputFormat", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !9, i64 32, !9, i64 36, !9, i64 40, !12, i64 44, !11, i64 48, !11, i64 56, !11, i64 64, !12, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!425 = !{!422, !11, i64 48}
!426 = !{!424, !11, i64 64}
!427 = !{!422, !11, i64 0}
!428 = !{!307, !8, i64 152}
!429 = !{i64 0, i64 8, !27, i64 8, i64 8, !27, i64 16, i64 4, !28}
!430 = !{!371, !12, i64 16}
!431 = !{!422, !12, i64 16}
!432 = !{!422, !11, i64 64}
!433 = !{!422, !11, i64 24}
!434 = !{!371, !11, i64 0}
!435 = !{!373, !12, i64 1108}
!436 = !{!373, !12, i64 1112}
!437 = !{!373, !12, i64 1244}
!438 = !{!373, !12, i64 1252}
!439 = !{!373, !8, i64 1080}
!440 = !{!373, !8, i64 1088}
!441 = !{!422, !12, i64 60}
!442 = !{!422, !11, i64 72}
!443 = !{!373, !12, i64 44}
!444 = !{!373, !11, i64 48}
!445 = !{!379, !9, i64 92}
!446 = !{!373, !8, i64 1280}
!447 = !{!373, !12, i64 1320}
!448 = !{!373, !12, i64 1132}
!449 = !{!373, !11, i64 1136}
!450 = !{!373, !11, i64 1168}
!451 = !{!379, !11, i64 296}
!452 = !{!373, !11, i64 1288}
!453 = !{!379, !12, i64 488}
!454 = !{!455, !11, i64 88}
!455 = !{!"AVPacketList", !7, i64 0, !11, i64 88}
!456 = !{!422, !11, i64 80}
!457 = !{!379, !12, i64 260}
!458 = !{!379, !12, i64 520}
!459 = !{!379, !8, i64 512}
!460 = !{!379, !12, i64 216}
!461 = !{!373, !9, i64 1144}
!462 = !{!373, !9, i64 1148}
!463 = !{!373, !9, i64 1152}
!464 = !{!373, !12, i64 1236}
!465 = !{!466, !9, i64 8}
!466 = !{!"", !11, i64 0, !9, i64 8, !9, i64 12}
!467 = !{!466, !9, i64 12}
!468 = !{!379, !12, i64 16}
!469 = !{!379, !12, i64 20}
!470 = !{!379, !12, i64 56}
!471 = !{!379, !12, i64 60}
!472 = !{!153, !12, i64 44}
!473 = !{!37, !12, i64 492}
!474 = !{!373, !11, i64 1264}
!475 = !{!455, !12, i64 28}
!476 = !{!455, !8, i64 8}
!477 = !{!455, !8, i64 0}
!478 = !{!379, !12, i64 496}
!479 = !{!373, !12, i64 1156}
!480 = !{!379, !12, i64 480}
!481 = !{!379, !11, i64 472}
!482 = !{i64 0, i64 8, !26, i64 8, i64 8, !26, i64 16, i64 4, !28, i64 16, i64 4, !28, i64 20, i64 4, !28}
!483 = !{!373, !11, i64 1304}
!484 = !{!379, !9, i64 288}
!485 = !{!373, !12, i64 1216}
!486 = !{!379, !12, i64 492}
!487 = !{!488, !8, i64 8}
!488 = !{!"AVIndexEntry", !8, i64 0, !8, i64 8, !12, i64 16, !12, i64 16, !12, i64 20}
!489 = !{!488, !8, i64 0}
!490 = !{!488, !12, i64 20}
!491 = !{!153, !12, i64 312}
!492 = !{!153, !12, i64 232}
!493 = !{!153, !12, i64 40}
!494 = !{!379, !8, i64 240}
!495 = !{!379, !8, i64 232}
!496 = !{!455, !12, i64 52}
!497 = !{!373, !11, i64 1312}
!498 = !{!153, !12, i64 248}
!499 = !{!153, !12, i64 252}
!500 = !{!379, !8, i64 224}
!501 = !{!153, !12, i64 256}
!502 = !{!379, !8, i64 248}
!503 = !{!379, !12, i64 256}
!504 = !{!379, !11, i64 208}
!505 = !{!379, !12, i64 500}
!506 = !{!35, !12, i64 24}
!507 = !{!153, !8, i64 240}
!508 = !{!379, !8, i64 64}
!509 = !{!373, !12, i64 1256}
!510 = !{!511, !12, i64 24}
!511 = !{!"AVProgram", !12, i64 0, !12, i64 4, !9, i64 8, !11, i64 16, !12, i64 24, !11, i64 32, !12, i64 40, !12, i64 44, !12, i64 48, !8, i64 56, !8, i64 64, !8, i64 72, !12, i64 80}
!512 = !{!511, !11, i64 16}
!513 = !{!511, !8, i64 72}
!514 = !{!511, !12, i64 80}
!515 = distinct !{!515, !32}
!516 = distinct !{!516, !32}
!517 = !{!518, !8, i64 0}
!518 = !{!"", !8, i64 0, !8, i64 8, !12, i64 16, !9, i64 24, !8, i64 23256, !8, i64 23264, !12, i64 23272, !8, i64 23280, !12, i64 23288, !8, i64 23296, !12, i64 23304}
!519 = !{!379, !8, i64 72}
!520 = !{!518, !8, i64 23280}
!521 = !{!518, !8, i64 23296}
!522 = !{!38, !12, i64 0}
!523 = !{!524, !12, i64 0}
!524 = !{!"AVChapter", !12, i64 0, !38, i64 4, !8, i64 16, !8, i64 24, !11, i64 32}
!525 = distinct !{!525, !32}
!526 = !{!524, !8, i64 16}
!527 = !{!524, !8, i64 24}
!528 = !{!529, !11, i64 0}
!529 = !{!"AVBPrint", !11, i64 0, !12, i64 8, !12, i64 12, !12, i64 16, !9, i64 20, !9, i64 21}
!530 = !{!529, !12, i64 8}
!531 = !{!529, !12, i64 12}
!532 = !{!529, !12, i64 16}
!533 = !{!534, !11, i64 0}
!534 = !{!"", !11, i64 0, !12, i64 8, !8, i64 16}
!535 = !{!536, !11, i64 0}
!536 = !{!"channel_name", !11, i64 0, !11, i64 8}
!537 = !{!538, !11, i64 8}
!538 = !{!"AVDictionary", !12, i64 0, !11, i64 8}
!539 = !{!538, !12, i64 0}
!540 = !{!541, !11, i64 0}
!541 = !{!"Parser", !11, i64 0, !12, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !12, i64 80, !11, i64 88, !11, i64 96}
!542 = !{!541, !12, i64 8}
!543 = !{!541, !11, i64 16}
!544 = !{!541, !11, i64 32}
!545 = !{!541, !12, i64 80}
!546 = !{!541, !11, i64 88}
!547 = !{!548, !11, i64 48}
!548 = !{!"AVExpr", !9, i64 0, !549, i64 8, !9, i64 16, !9, i64 24, !11, i64 48}
!549 = !{!"double", !9, i64 0}
!550 = !{!548, !9, i64 0}
!551 = !{!548, !549, i64 8}
!552 = !{!553, !549, i64 8}
!553 = !{!"", !11, i64 0, !549, i64 8}
!554 = !{!541, !11, i64 48}
!555 = !{!541, !11, i64 40}
!556 = !{!541, !11, i64 64}
!557 = !{!541, !11, i64 56}
!558 = !{!541, !11, i64 24}
!559 = !{!549, !549, i64 0}
!560 = !{!541, !11, i64 72}
!561 = !{!541, !11, i64 96}
!562 = !{!563, !11, i64 0}
!563 = !{!"AVFifoBuffer", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !12, i64 32, !12, i64 36}
!564 = !{!563, !11, i64 24}
!565 = !{!563, !11, i64 8}
!566 = !{!563, !11, i64 16}
!567 = !{!563, !12, i64 32}
!568 = !{!563, !12, i64 36}
!569 = !{!271, !9, i64 9}
!570 = !{!271, !9, i64 10}
!571 = !{!572, !11, i64 0}
!572 = !{!"ImgUtils", !11, i64 0, !12, i64 8, !11, i64 16}
!573 = !{!572, !12, i64 8}
!574 = !{!572, !11, i64 16}
!575 = !{!271, !9, i64 8}
!576 = distinct !{!576, !32}
!577 = distinct !{!577, !32}
!578 = distinct !{!578, !32}
!579 = !{!580, !11, i64 0}
!580 = !{!"AVClass", !11, i64 0, !11, i64 8, !11, i64 16, !12, i64 24, !12, i64 28, !12, i64 32, !11, i64 40, !11, i64 48, !9, i64 56, !11, i64 64, !11, i64 72}
!581 = !{!580, !12, i64 32}
!582 = !{!580, !11, i64 8}
!583 = !{!580, !12, i64 24}
!584 = !{!580, !9, i64 56}
!585 = !{!580, !11, i64 64}
!586 = !{!580, !12, i64 28}
!587 = !{i32 0, i32 33}
!588 = !{!589, !9, i64 20}
!589 = !{!"AVOption", !11, i64 0, !11, i64 8, !12, i64 16, !9, i64 20, !9, i64 24, !549, i64 32, !549, i64 40, !12, i64 48, !11, i64 56}
!590 = !{!589, !12, i64 16}
!591 = !{!580, !11, i64 40}
!592 = !{!580, !11, i64 48}
!593 = !{!589, !11, i64 0}
!594 = !{!580, !11, i64 16}
!595 = !{!589, !11, i64 56}
!596 = !{!589, !549, i64 40}
!597 = !{!589, !549, i64 32}
!598 = !{!38, !12, i64 4}
!599 = !{!589, !12, i64 48}
!600 = !{!601, !12, i64 8}
!601 = !{!"", !11, i64 0, !12, i64 8, !12, i64 12}
!602 = !{!601, !12, i64 12}
!603 = !{!271, !11, i64 0}
!604 = !{!605, !9, i64 16}
!605 = !{!"SampleFmtInfo", !9, i64 0, !12, i64 8, !12, i64 12, !9, i64 16}
!606 = !{!605, !12, i64 12}
!607 = !{!605, !12, i64 8}
!608 = distinct !{!608, !32}
!609 = !{!610, !8, i64 0}
!610 = !{!"timeval", !8, i64 0, !8, i64 8}
!611 = !{!610, !8, i64 8}
!612 = !{!613, !8, i64 0}
!613 = !{!"timespec", !8, i64 0, !8, i64 8}
!614 = !{!613, !8, i64 8}
